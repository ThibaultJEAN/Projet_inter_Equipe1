
SW-BMS_Equipe1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003080  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003208  08003208  00013208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003248  08003248  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003248  08003248  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003248  08003248  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003248  08003248  00013248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800324c  0800324c  0001324c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003250  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  2000000c  0800325c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  0800325c  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011136  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000225e  00000000  00000000  00031172  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fd8  00000000  00000000  000333d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ea0  00000000  00000000  000343a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000264cc  00000000  00000000  00035248  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dd44  00000000  00000000  0005b714  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ebdeb  00000000  00000000  00069458  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00155243  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004158  00000000  00000000  001552c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080031f0 	.word	0x080031f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080031f0 	.word	0x080031f0

080001c8 <BMSManagement_Init>:
	return val;
}


void BMSManagement_Init(void)
{
 80001c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80001ca:	b095      	sub	sp, #84	; 0x54
 80001cc:	af12      	add	r7, sp, #72	; 0x48
	HAL_StatusTypeDef ret;
	while (HAL_I2C_IsDeviceReady(&BATTERY1,GAUGE_ADDR,1,100)!=HAL_OK)
 80001ce:	e002      	b.n	80001d6 <BMSManagement_Init+0xe>
	{
	  //strcpy((char*)msg,"I2C Device not ready.\r\n");
	  //HAL_UART_Transmit(&huart2,msg,strlen((char*)msg),HAL_MAX_DELAY); //Attention aux includes de l'UART et strcpy
	  HAL_Delay(5);
 80001d0:	2005      	movs	r0, #5
 80001d2:	f000 fc21 	bl	8000a18 <HAL_Delay>
	while (HAL_I2C_IsDeviceReady(&BATTERY1,GAUGE_ADDR,1,100)!=HAL_OK)
 80001d6:	23c8      	movs	r3, #200	; 0xc8
 80001d8:	b299      	uxth	r1, r3
 80001da:	2364      	movs	r3, #100	; 0x64
 80001dc:	2201      	movs	r2, #1
 80001de:	482a      	ldr	r0, [pc, #168]	; (8000288 <BMSManagement_Init+0xc0>)
 80001e0:	f001 f866 	bl	80012b0 <HAL_I2C_IsDeviceReady>
 80001e4:	4603      	mov	r3, r0
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d1f2      	bne.n	80001d0 <BMSManagement_Init+0x8>
	}
	ret=Write_Register(BATTERY1, CTRL_REG,AUTO_MODE); //I2C Master Transmit
 80001ea:	2301      	movs	r3, #1
 80001ec:	22e8      	movs	r2, #232	; 0xe8
 80001ee:	4e26      	ldr	r6, [pc, #152]	; (8000288 <BMSManagement_Init+0xc0>)
 80001f0:	9210      	str	r2, [sp, #64]	; 0x40
 80001f2:	930f      	str	r3, [sp, #60]	; 0x3c
 80001f4:	466d      	mov	r5, sp
 80001f6:	f106 0410 	add.w	r4, r6, #16
 80001fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80001fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80001fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000200:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000202:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000204:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000206:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800020a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800020e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000212:	f000 f9d1 	bl	80005b8 <Write_Register>
 8000216:	4603      	mov	r3, r0
 8000218:	71fb      	strb	r3, [r7, #7]
	if (ret!=HAL_OK)
 800021a:	79fb      	ldrb	r3, [r7, #7]
 800021c:	2b00      	cmp	r3, #0
 800021e:	d006      	beq.n	800022e <BMSManagement_Init+0x66>
	{
		//strcpy((char*)msg,"Control Register Automatic Mode Error.\r\n");
		//HAL_UART_Transmit(&huart2,msg,strlen((char*)msg),HAL_MAX_DELAY);
		HAL_Delay(5);
 8000220:	2005      	movs	r0, #5
 8000222:	f000 fbf9 	bl	8000a18 <HAL_Delay>
	}


	while (HAL_I2C_IsDeviceReady(&BATTERY2,GAUGE_ADDR,1,100)!=HAL_OK)
 8000226:	e002      	b.n	800022e <BMSManagement_Init+0x66>
		{
		  //strcpy((char*)msg,"I2C Device not ready.\r\n");
		  //HAL_UART_Transmit(&huart2,msg,strlen((char*)msg),HAL_MAX_DELAY); //Attention aux includes de l'UART et strcpy
		  HAL_Delay(5);
 8000228:	2005      	movs	r0, #5
 800022a:	f000 fbf5 	bl	8000a18 <HAL_Delay>
	while (HAL_I2C_IsDeviceReady(&BATTERY2,GAUGE_ADDR,1,100)!=HAL_OK)
 800022e:	23c8      	movs	r3, #200	; 0xc8
 8000230:	b299      	uxth	r1, r3
 8000232:	2364      	movs	r3, #100	; 0x64
 8000234:	2201      	movs	r2, #1
 8000236:	4815      	ldr	r0, [pc, #84]	; (800028c <BMSManagement_Init+0xc4>)
 8000238:	f001 f83a 	bl	80012b0 <HAL_I2C_IsDeviceReady>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d1f2      	bne.n	8000228 <BMSManagement_Init+0x60>
		}
		ret=Write_Register(BATTERY2, CTRL_REG,AUTO_MODE); //I2C Master Transmit
 8000242:	2301      	movs	r3, #1
 8000244:	22e8      	movs	r2, #232	; 0xe8
 8000246:	4e11      	ldr	r6, [pc, #68]	; (800028c <BMSManagement_Init+0xc4>)
 8000248:	9210      	str	r2, [sp, #64]	; 0x40
 800024a:	930f      	str	r3, [sp, #60]	; 0x3c
 800024c:	466d      	mov	r5, sp
 800024e:	f106 0410 	add.w	r4, r6, #16
 8000252:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000254:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000256:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000258:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800025a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800025c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800025e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000262:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000266:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800026a:	f000 f9a5 	bl	80005b8 <Write_Register>
 800026e:	4603      	mov	r3, r0
 8000270:	71fb      	strb	r3, [r7, #7]
		if (ret!=HAL_OK)
 8000272:	79fb      	ldrb	r3, [r7, #7]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d002      	beq.n	800027e <BMSManagement_Init+0xb6>
		{
			//strcpy((char*)msg,"Control Register Automatic Mode Error.\r\n");
			//HAL_UART_Transmit(&huart2,msg,strlen((char*)msg),HAL_MAX_DELAY);
			HAL_Delay(5);
 8000278:	2005      	movs	r0, #5
 800027a:	f000 fbcd 	bl	8000a18 <HAL_Delay>
		}

}
 800027e:	bf00      	nop
 8000280:	370c      	adds	r7, #12
 8000282:	46bd      	mov	sp, r7
 8000284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000286:	bf00      	nop
 8000288:	20000028 	.word	0x20000028
 800028c:	20000074 	.word	0x20000074

08000290 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> USART2_TX
     PA3   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b08a      	sub	sp, #40	; 0x28
 8000294:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000296:	f107 0314 	add.w	r3, r7, #20
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	605a      	str	r2, [r3, #4]
 80002a0:	609a      	str	r2, [r3, #8]
 80002a2:	60da      	str	r2, [r3, #12]
 80002a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002a6:	4b48      	ldr	r3, [pc, #288]	; (80003c8 <MX_GPIO_Init+0x138>)
 80002a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002aa:	4a47      	ldr	r2, [pc, #284]	; (80003c8 <MX_GPIO_Init+0x138>)
 80002ac:	f043 0304 	orr.w	r3, r3, #4
 80002b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002b2:	4b45      	ldr	r3, [pc, #276]	; (80003c8 <MX_GPIO_Init+0x138>)
 80002b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002b6:	f003 0304 	and.w	r3, r3, #4
 80002ba:	613b      	str	r3, [r7, #16]
 80002bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80002be:	4b42      	ldr	r3, [pc, #264]	; (80003c8 <MX_GPIO_Init+0x138>)
 80002c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002c2:	4a41      	ldr	r2, [pc, #260]	; (80003c8 <MX_GPIO_Init+0x138>)
 80002c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002ca:	4b3f      	ldr	r3, [pc, #252]	; (80003c8 <MX_GPIO_Init+0x138>)
 80002cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002d2:	60fb      	str	r3, [r7, #12]
 80002d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d6:	4b3c      	ldr	r3, [pc, #240]	; (80003c8 <MX_GPIO_Init+0x138>)
 80002d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002da:	4a3b      	ldr	r2, [pc, #236]	; (80003c8 <MX_GPIO_Init+0x138>)
 80002dc:	f043 0301 	orr.w	r3, r3, #1
 80002e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002e2:	4b39      	ldr	r3, [pc, #228]	; (80003c8 <MX_GPIO_Init+0x138>)
 80002e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002e6:	f003 0301 	and.w	r3, r3, #1
 80002ea:	60bb      	str	r3, [r7, #8]
 80002ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002ee:	4b36      	ldr	r3, [pc, #216]	; (80003c8 <MX_GPIO_Init+0x138>)
 80002f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002f2:	4a35      	ldr	r2, [pc, #212]	; (80003c8 <MX_GPIO_Init+0x138>)
 80002f4:	f043 0302 	orr.w	r3, r3, #2
 80002f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002fa:	4b33      	ldr	r3, [pc, #204]	; (80003c8 <MX_GPIO_Init+0x138>)
 80002fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002fe:	f003 0302 	and.w	r3, r3, #2
 8000302:	607b      	str	r3, [r7, #4]
 8000304:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8000306:	2200      	movs	r2, #0
 8000308:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 800030c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000310:	f000 fe32 	bl	8000f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000314:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000318:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800031a:	4b2c      	ldr	r3, [pc, #176]	; (80003cc <MX_GPIO_Init+0x13c>)
 800031c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800031e:	2300      	movs	r3, #0
 8000320:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000322:	f107 0314 	add.w	r3, r7, #20
 8000326:	4619      	mov	r1, r3
 8000328:	4829      	ldr	r0, [pc, #164]	; (80003d0 <MX_GPIO_Init+0x140>)
 800032a:	f000 fc7d 	bl	8000c28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800032e:	230c      	movs	r3, #12
 8000330:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000332:	2302      	movs	r3, #2
 8000334:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000336:	2300      	movs	r3, #0
 8000338:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800033a:	2303      	movs	r3, #3
 800033c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800033e:	2307      	movs	r3, #7
 8000340:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000342:	f107 0314 	add.w	r3, r7, #20
 8000346:	4619      	mov	r1, r3
 8000348:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800034c:	f000 fc6c 	bl	8000c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000350:	2320      	movs	r3, #32
 8000352:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000354:	4b1d      	ldr	r3, [pc, #116]	; (80003cc <MX_GPIO_Init+0x13c>)
 8000356:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000358:	2300      	movs	r3, #0
 800035a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800035c:	f107 0314 	add.w	r3, r7, #20
 8000360:	4619      	mov	r1, r3
 8000362:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000366:	f000 fc5f 	bl	8000c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800036a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800036e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000370:	2300      	movs	r3, #0
 8000372:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000374:	2300      	movs	r3, #0
 8000376:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000378:	f107 0314 	add.w	r3, r7, #20
 800037c:	4619      	mov	r1, r3
 800037e:	4814      	ldr	r0, [pc, #80]	; (80003d0 <MX_GPIO_Init+0x140>)
 8000380:	f000 fc52 	bl	8000c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000384:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000388:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800038a:	2300      	movs	r3, #0
 800038c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800038e:	2300      	movs	r3, #0
 8000390:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000392:	f107 0314 	add.w	r3, r7, #20
 8000396:	4619      	mov	r1, r3
 8000398:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800039c:	f000 fc44 	bl	8000c28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80003a0:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80003a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003a6:	2301      	movs	r3, #1
 80003a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003aa:	2300      	movs	r3, #0
 80003ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ae:	2300      	movs	r3, #0
 80003b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003b2:	f107 0314 	add.w	r3, r7, #20
 80003b6:	4619      	mov	r1, r3
 80003b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003bc:	f000 fc34 	bl	8000c28 <HAL_GPIO_Init>

}
 80003c0:	bf00      	nop
 80003c2:	3728      	adds	r7, #40	; 0x28
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	40021000 	.word	0x40021000
 80003cc:	10110000 	.word	0x10110000
 80003d0:	48000800 	.word	0x48000800

080003d4 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80003d8:	4b1b      	ldr	r3, [pc, #108]	; (8000448 <MX_I2C1_Init+0x74>)
 80003da:	4a1c      	ldr	r2, [pc, #112]	; (800044c <MX_I2C1_Init+0x78>)
 80003dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 80003de:	4b1a      	ldr	r3, [pc, #104]	; (8000448 <MX_I2C1_Init+0x74>)
 80003e0:	f640 6214 	movw	r2, #3604	; 0xe14
 80003e4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003e6:	4b18      	ldr	r3, [pc, #96]	; (8000448 <MX_I2C1_Init+0x74>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003ec:	4b16      	ldr	r3, [pc, #88]	; (8000448 <MX_I2C1_Init+0x74>)
 80003ee:	2201      	movs	r2, #1
 80003f0:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003f2:	4b15      	ldr	r3, [pc, #84]	; (8000448 <MX_I2C1_Init+0x74>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003f8:	4b13      	ldr	r3, [pc, #76]	; (8000448 <MX_I2C1_Init+0x74>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003fe:	4b12      	ldr	r3, [pc, #72]	; (8000448 <MX_I2C1_Init+0x74>)
 8000400:	2200      	movs	r2, #0
 8000402:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000404:	4b10      	ldr	r3, [pc, #64]	; (8000448 <MX_I2C1_Init+0x74>)
 8000406:	2200      	movs	r2, #0
 8000408:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800040a:	4b0f      	ldr	r3, [pc, #60]	; (8000448 <MX_I2C1_Init+0x74>)
 800040c:	2200      	movs	r2, #0
 800040e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000410:	480d      	ldr	r0, [pc, #52]	; (8000448 <MX_I2C1_Init+0x74>)
 8000412:	f000 fdc9 	bl	8000fa8 <HAL_I2C_Init>
 8000416:	4603      	mov	r3, r0
 8000418:	2b00      	cmp	r3, #0
 800041a:	d001      	beq.n	8000420 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800041c:	f000 f976 	bl	800070c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000420:	2100      	movs	r1, #0
 8000422:	4809      	ldr	r0, [pc, #36]	; (8000448 <MX_I2C1_Init+0x74>)
 8000424:	f001 f9c0 	bl	80017a8 <HAL_I2CEx_ConfigAnalogFilter>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800042e:	f000 f96d 	bl	800070c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000432:	2100      	movs	r1, #0
 8000434:	4804      	ldr	r0, [pc, #16]	; (8000448 <MX_I2C1_Init+0x74>)
 8000436:	f001 fa02 	bl	800183e <HAL_I2CEx_ConfigDigitalFilter>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d001      	beq.n	8000444 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000440:	f000 f964 	bl	800070c <Error_Handler>
  }

}
 8000444:	bf00      	nop
 8000446:	bd80      	pop	{r7, pc}
 8000448:	20000028 	.word	0x20000028
 800044c:	40005400 	.word	0x40005400

08000450 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8000454:	4b1b      	ldr	r3, [pc, #108]	; (80004c4 <MX_I2C2_Init+0x74>)
 8000456:	4a1c      	ldr	r2, [pc, #112]	; (80004c8 <MX_I2C2_Init+0x78>)
 8000458:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 800045a:	4b1a      	ldr	r3, [pc, #104]	; (80004c4 <MX_I2C2_Init+0x74>)
 800045c:	f640 6214 	movw	r2, #3604	; 0xe14
 8000460:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000462:	4b18      	ldr	r3, [pc, #96]	; (80004c4 <MX_I2C2_Init+0x74>)
 8000464:	2200      	movs	r2, #0
 8000466:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000468:	4b16      	ldr	r3, [pc, #88]	; (80004c4 <MX_I2C2_Init+0x74>)
 800046a:	2201      	movs	r2, #1
 800046c:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800046e:	4b15      	ldr	r3, [pc, #84]	; (80004c4 <MX_I2C2_Init+0x74>)
 8000470:	2200      	movs	r2, #0
 8000472:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000474:	4b13      	ldr	r3, [pc, #76]	; (80004c4 <MX_I2C2_Init+0x74>)
 8000476:	2200      	movs	r2, #0
 8000478:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800047a:	4b12      	ldr	r3, [pc, #72]	; (80004c4 <MX_I2C2_Init+0x74>)
 800047c:	2200      	movs	r2, #0
 800047e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000480:	4b10      	ldr	r3, [pc, #64]	; (80004c4 <MX_I2C2_Init+0x74>)
 8000482:	2200      	movs	r2, #0
 8000484:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000486:	4b0f      	ldr	r3, [pc, #60]	; (80004c4 <MX_I2C2_Init+0x74>)
 8000488:	2200      	movs	r2, #0
 800048a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800048c:	480d      	ldr	r0, [pc, #52]	; (80004c4 <MX_I2C2_Init+0x74>)
 800048e:	f000 fd8b 	bl	8000fa8 <HAL_I2C_Init>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d001      	beq.n	800049c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000498:	f000 f938 	bl	800070c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800049c:	2100      	movs	r1, #0
 800049e:	4809      	ldr	r0, [pc, #36]	; (80004c4 <MX_I2C2_Init+0x74>)
 80004a0:	f001 f982 	bl	80017a8 <HAL_I2CEx_ConfigAnalogFilter>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80004aa:	f000 f92f 	bl	800070c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80004ae:	2100      	movs	r1, #0
 80004b0:	4804      	ldr	r0, [pc, #16]	; (80004c4 <MX_I2C2_Init+0x74>)
 80004b2:	f001 f9c4 	bl	800183e <HAL_I2CEx_ConfigDigitalFilter>
 80004b6:	4603      	mov	r3, r0
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d001      	beq.n	80004c0 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80004bc:	f000 f926 	bl	800070c <Error_Handler>
  }

}
 80004c0:	bf00      	nop
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	20000074 	.word	0x20000074
 80004c8:	40005800 	.word	0x40005800

080004cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08c      	sub	sp, #48	; 0x30
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d4:	f107 031c 	add.w	r3, r7, #28
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	605a      	str	r2, [r3, #4]
 80004de:	609a      	str	r2, [r3, #8]
 80004e0:	60da      	str	r2, [r3, #12]
 80004e2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a2f      	ldr	r2, [pc, #188]	; (80005a8 <HAL_I2C_MspInit+0xdc>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d129      	bne.n	8000542 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ee:	4b2f      	ldr	r3, [pc, #188]	; (80005ac <HAL_I2C_MspInit+0xe0>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f2:	4a2e      	ldr	r2, [pc, #184]	; (80005ac <HAL_I2C_MspInit+0xe0>)
 80004f4:	f043 0302 	orr.w	r3, r3, #2
 80004f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004fa:	4b2c      	ldr	r3, [pc, #176]	; (80005ac <HAL_I2C_MspInit+0xe0>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	f003 0302 	and.w	r3, r3, #2
 8000502:	61bb      	str	r3, [r7, #24]
 8000504:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000506:	f44f 7340 	mov.w	r3, #768	; 0x300
 800050a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800050c:	2312      	movs	r3, #18
 800050e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000510:	2301      	movs	r3, #1
 8000512:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000514:	2303      	movs	r3, #3
 8000516:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000518:	2304      	movs	r3, #4
 800051a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800051c:	f107 031c 	add.w	r3, r7, #28
 8000520:	4619      	mov	r1, r3
 8000522:	4823      	ldr	r0, [pc, #140]	; (80005b0 <HAL_I2C_MspInit+0xe4>)
 8000524:	f000 fb80 	bl	8000c28 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000528:	4b20      	ldr	r3, [pc, #128]	; (80005ac <HAL_I2C_MspInit+0xe0>)
 800052a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800052c:	4a1f      	ldr	r2, [pc, #124]	; (80005ac <HAL_I2C_MspInit+0xe0>)
 800052e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000532:	6593      	str	r3, [r2, #88]	; 0x58
 8000534:	4b1d      	ldr	r3, [pc, #116]	; (80005ac <HAL_I2C_MspInit+0xe0>)
 8000536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000538:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800053c:	617b      	str	r3, [r7, #20]
 800053e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000540:	e02d      	b.n	800059e <HAL_I2C_MspInit+0xd2>
  else if(i2cHandle->Instance==I2C2)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4a1b      	ldr	r2, [pc, #108]	; (80005b4 <HAL_I2C_MspInit+0xe8>)
 8000548:	4293      	cmp	r3, r2
 800054a:	d128      	bne.n	800059e <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800054c:	4b17      	ldr	r3, [pc, #92]	; (80005ac <HAL_I2C_MspInit+0xe0>)
 800054e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000550:	4a16      	ldr	r2, [pc, #88]	; (80005ac <HAL_I2C_MspInit+0xe0>)
 8000552:	f043 0302 	orr.w	r3, r3, #2
 8000556:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000558:	4b14      	ldr	r3, [pc, #80]	; (80005ac <HAL_I2C_MspInit+0xe0>)
 800055a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055c:	f003 0302 	and.w	r3, r3, #2
 8000560:	613b      	str	r3, [r7, #16]
 8000562:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000564:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000568:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800056a:	2312      	movs	r3, #18
 800056c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800056e:	2301      	movs	r3, #1
 8000570:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000572:	2303      	movs	r3, #3
 8000574:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000576:	2304      	movs	r3, #4
 8000578:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800057a:	f107 031c 	add.w	r3, r7, #28
 800057e:	4619      	mov	r1, r3
 8000580:	480b      	ldr	r0, [pc, #44]	; (80005b0 <HAL_I2C_MspInit+0xe4>)
 8000582:	f000 fb51 	bl	8000c28 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000586:	4b09      	ldr	r3, [pc, #36]	; (80005ac <HAL_I2C_MspInit+0xe0>)
 8000588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800058a:	4a08      	ldr	r2, [pc, #32]	; (80005ac <HAL_I2C_MspInit+0xe0>)
 800058c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000590:	6593      	str	r3, [r2, #88]	; 0x58
 8000592:	4b06      	ldr	r3, [pc, #24]	; (80005ac <HAL_I2C_MspInit+0xe0>)
 8000594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	68fb      	ldr	r3, [r7, #12]
}
 800059e:	bf00      	nop
 80005a0:	3730      	adds	r7, #48	; 0x30
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40005400 	.word	0x40005400
 80005ac:	40021000 	.word	0x40021000
 80005b0:	48000400 	.word	0x48000400
 80005b4:	40005800 	.word	0x40005800

080005b8 <Write_Register>:
		retVal=valueMSB+valueLSB; //Check if it is correct.
	}
	return ret;
}

HAL_StatusTypeDef Write_Register(I2C_HandleTypeDef hi2c,uint8_t REG, uint8_t DATA){
 80005b8:	b084      	sub	sp, #16
 80005ba:	b580      	push	{r7, lr}
 80005bc:	b084      	sub	sp, #16
 80005be:	af02      	add	r7, sp, #8
 80005c0:	f107 0c10 	add.w	ip, r7, #16
 80005c4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t data[2];
	data[0]=REG;
 80005c8:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 80005cc:	713b      	strb	r3, [r7, #4]
	data[1]=DATA;
 80005ce:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80005d2:	717b      	strb	r3, [r7, #5]

	return HAL_I2C_Master_Transmit(&hi2c,GAUGE_ADDR,data,2,HAL_MAX_DELAY);
 80005d4:	23c8      	movs	r3, #200	; 0xc8
 80005d6:	b299      	uxth	r1, r3
 80005d8:	1d3a      	adds	r2, r7, #4
 80005da:	f04f 33ff 	mov.w	r3, #4294967295
 80005de:	9300      	str	r3, [sp, #0]
 80005e0:	2302      	movs	r3, #2
 80005e2:	f107 0010 	add.w	r0, r7, #16
 80005e6:	f000 fd6f 	bl	80010c8 <HAL_I2C_Master_Transmit>
 80005ea:	4603      	mov	r3, r0

}
 80005ec:	4618      	mov	r0, r3
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005f6:	b004      	add	sp, #16
 80005f8:	4770      	bx	lr

080005fa <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fa:	b580      	push	{r7, lr}
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fe:	f000 f996 	bl	800092e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000602:	f000 f80b 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000606:	f7ff fe43 	bl	8000290 <MX_GPIO_Init>
  MX_I2C1_Init();
 800060a:	f7ff fee3 	bl	80003d4 <MX_I2C1_Init>
  MX_I2C2_Init();
 800060e:	f7ff ff1f 	bl	8000450 <MX_I2C2_Init>
  MX_TIM6_Init();
 8000612:	f000 f90b 	bl	800082c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  BMSManagement_Init();
 8000616:	f7ff fdd7 	bl	80001c8 <BMSManagement_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800061a:	e7fe      	b.n	800061a <main+0x20>

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b0b8      	sub	sp, #224	; 0xe0
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000626:	2244      	movs	r2, #68	; 0x44
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f002 fdd8 	bl	80031e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000640:	463b      	mov	r3, r7
 8000642:	2288      	movs	r2, #136	; 0x88
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f002 fdca 	bl	80031e0 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800064c:	f001 f944 	bl	80018d8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000650:	4b2d      	ldr	r3, [pc, #180]	; (8000708 <SystemClock_Config+0xec>)
 8000652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000656:	4a2c      	ldr	r2, [pc, #176]	; (8000708 <SystemClock_Config+0xec>)
 8000658:	f023 0318 	bic.w	r3, r3, #24
 800065c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000660:	2314      	movs	r3, #20
 8000662:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000666:	2301      	movs	r3, #1
 8000668:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800066c:	2301      	movs	r3, #1
 800066e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000678:	2360      	movs	r3, #96	; 0x60
 800067a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800067e:	2300      	movs	r3, #0
 8000680:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000684:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000688:	4618      	mov	r0, r3
 800068a:	f001 f999 	bl	80019c0 <HAL_RCC_OscConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000694:	f000 f83a 	bl	800070c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000698:	230f      	movs	r3, #15
 800069a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800069e:	2300      	movs	r3, #0
 80006a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006b6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80006ba:	2100      	movs	r1, #0
 80006bc:	4618      	mov	r0, r3
 80006be:	f001 fd65 	bl	800218c <HAL_RCC_ClockConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80006c8:	f000 f820 	bl	800070c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2;
 80006cc:	23c0      	movs	r3, #192	; 0xc0
 80006ce:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006d8:	463b      	mov	r3, r7
 80006da:	4618      	mov	r0, r3
 80006dc:	f001 ff22 	bl	8002524 <HAL_RCCEx_PeriphCLKConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0xce>
  {
    Error_Handler();
 80006e6:	f000 f811 	bl	800070c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006ea:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006ee:	f001 f911 	bl	8001914 <HAL_PWREx_ControlVoltageScaling>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0xe0>
  {
    Error_Handler();
 80006f8:	f000 f808 	bl	800070c <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006fc:	f002 f9f8 	bl	8002af0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000700:	bf00      	nop
 8000702:	37e0      	adds	r7, #224	; 0xe0
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40021000 	.word	0x40021000

0800070c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000710:	bf00      	nop
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
	...

0800071c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000722:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <HAL_MspInit+0x44>)
 8000724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000726:	4a0e      	ldr	r2, [pc, #56]	; (8000760 <HAL_MspInit+0x44>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6613      	str	r3, [r2, #96]	; 0x60
 800072e:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <HAL_MspInit+0x44>)
 8000730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <HAL_MspInit+0x44>)
 800073c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800073e:	4a08      	ldr	r2, [pc, #32]	; (8000760 <HAL_MspInit+0x44>)
 8000740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000744:	6593      	str	r3, [r2, #88]	; 0x58
 8000746:	4b06      	ldr	r3, [pc, #24]	; (8000760 <HAL_MspInit+0x44>)
 8000748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800074a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074e:	603b      	str	r3, [r7, #0]
 8000750:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000752:	bf00      	nop
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	40021000 	.word	0x40021000

08000764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000768:	bf00      	nop
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr

08000772 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000776:	e7fe      	b.n	8000776 <HardFault_Handler+0x4>

08000778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800077c:	e7fe      	b.n	800077c <MemManage_Handler+0x4>

0800077e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000782:	e7fe      	b.n	8000782 <BusFault_Handler+0x4>

08000784 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000788:	e7fe      	b.n	8000788 <UsageFault_Handler+0x4>

0800078a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr

08000798 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr

080007a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007b8:	f000 f90e 	bl	80009d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}

080007c0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007c4:	4b17      	ldr	r3, [pc, #92]	; (8000824 <SystemInit+0x64>)
 80007c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007ca:	4a16      	ldr	r2, [pc, #88]	; (8000824 <SystemInit+0x64>)
 80007cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80007d4:	4b14      	ldr	r3, [pc, #80]	; (8000828 <SystemInit+0x68>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a13      	ldr	r2, [pc, #76]	; (8000828 <SystemInit+0x68>)
 80007da:	f043 0301 	orr.w	r3, r3, #1
 80007de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <SystemInit+0x68>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80007e6:	4b10      	ldr	r3, [pc, #64]	; (8000828 <SystemInit+0x68>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4a0f      	ldr	r2, [pc, #60]	; (8000828 <SystemInit+0x68>)
 80007ec:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80007f0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80007f4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80007f6:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <SystemInit+0x68>)
 80007f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007fc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007fe:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <SystemInit+0x68>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a09      	ldr	r2, [pc, #36]	; (8000828 <SystemInit+0x68>)
 8000804:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000808:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800080a:	4b07      	ldr	r3, [pc, #28]	; (8000828 <SystemInit+0x68>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000810:	4b04      	ldr	r3, [pc, #16]	; (8000824 <SystemInit+0x64>)
 8000812:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000816:	609a      	str	r2, [r3, #8]
#endif
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	e000ed00 	.word	0xe000ed00
 8000828:	40021000 	.word	0x40021000

0800082c <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 800083c:	4b15      	ldr	r3, [pc, #84]	; (8000894 <MX_TIM6_Init+0x68>)
 800083e:	4a16      	ldr	r2, [pc, #88]	; (8000898 <MX_TIM6_Init+0x6c>)
 8000840:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 3999;
 8000842:	4b14      	ldr	r3, [pc, #80]	; (8000894 <MX_TIM6_Init+0x68>)
 8000844:	f640 729f 	movw	r2, #3999	; 0xf9f
 8000848:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800084a:	4b12      	ldr	r3, [pc, #72]	; (8000894 <MX_TIM6_Init+0x68>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 0xffff;
 8000850:	4b10      	ldr	r3, [pc, #64]	; (8000894 <MX_TIM6_Init+0x68>)
 8000852:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000856:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000858:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <MX_TIM6_Init+0x68>)
 800085a:	2200      	movs	r2, #0
 800085c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800085e:	480d      	ldr	r0, [pc, #52]	; (8000894 <MX_TIM6_Init+0x68>)
 8000860:	f002 fb20 	bl	8002ea4 <HAL_TIM_Base_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800086a:	f7ff ff4f 	bl	800070c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000872:	2300      	movs	r3, #0
 8000874:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	4619      	mov	r1, r3
 800087a:	4806      	ldr	r0, [pc, #24]	; (8000894 <MX_TIM6_Init+0x68>)
 800087c:	f002 fc04 	bl	8003088 <HAL_TIMEx_MasterConfigSynchronization>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000886:	f7ff ff41 	bl	800070c <Error_Handler>
  }

}
 800088a:	bf00      	nop
 800088c:	3710      	adds	r7, #16
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	200000c0 	.word	0x200000c0
 8000898:	40001000 	.word	0x40001000

0800089c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800089c:	b480      	push	{r7}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a0a      	ldr	r2, [pc, #40]	; (80008d4 <HAL_TIM_Base_MspInit+0x38>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d10b      	bne.n	80008c6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80008ae:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <HAL_TIM_Base_MspInit+0x3c>)
 80008b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008b2:	4a09      	ldr	r2, [pc, #36]	; (80008d8 <HAL_TIM_Base_MspInit+0x3c>)
 80008b4:	f043 0310 	orr.w	r3, r3, #16
 80008b8:	6593      	str	r3, [r2, #88]	; 0x58
 80008ba:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <HAL_TIM_Base_MspInit+0x3c>)
 80008bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008be:	f003 0310 	and.w	r3, r3, #16
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80008c6:	bf00      	nop
 80008c8:	3714      	adds	r7, #20
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	40001000 	.word	0x40001000
 80008d8:	40021000 	.word	0x40021000

080008dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80008dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000914 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008e0:	f7ff ff6e 	bl	80007c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80008e4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80008e6:	e003      	b.n	80008f0 <LoopCopyDataInit>

080008e8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80008e8:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80008ea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80008ec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80008ee:	3104      	adds	r1, #4

080008f0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80008f0:	480a      	ldr	r0, [pc, #40]	; (800091c <LoopForever+0xa>)
	ldr	r3, =_edata
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <LoopForever+0xe>)
	adds	r2, r0, r1
 80008f4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80008f6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80008f8:	d3f6      	bcc.n	80008e8 <CopyDataInit>
	ldr	r2, =_sbss
 80008fa:	4a0a      	ldr	r2, [pc, #40]	; (8000924 <LoopForever+0x12>)
	b	LoopFillZerobss
 80008fc:	e002      	b.n	8000904 <LoopFillZerobss>

080008fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80008fe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000900:	f842 3b04 	str.w	r3, [r2], #4

08000904 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000904:	4b08      	ldr	r3, [pc, #32]	; (8000928 <LoopForever+0x16>)
	cmp	r2, r3
 8000906:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000908:	d3f9      	bcc.n	80008fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800090a:	f002 fc45 	bl	8003198 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800090e:	f7ff fe74 	bl	80005fa <main>

08000912 <LoopForever>:

LoopForever:
    b LoopForever
 8000912:	e7fe      	b.n	8000912 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000914:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000918:	08003250 	.word	0x08003250
	ldr	r0, =_sdata
 800091c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000920:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000924:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000928:	20000110 	.word	0x20000110

0800092c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800092c:	e7fe      	b.n	800092c <ADC1_2_IRQHandler>

0800092e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	b082      	sub	sp, #8
 8000932:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000934:	2300      	movs	r3, #0
 8000936:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000938:	2003      	movs	r0, #3
 800093a:	f000 f941 	bl	8000bc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800093e:	2000      	movs	r0, #0
 8000940:	f000 f80e 	bl	8000960 <HAL_InitTick>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d002      	beq.n	8000950 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800094a:	2301      	movs	r3, #1
 800094c:	71fb      	strb	r3, [r7, #7]
 800094e:	e001      	b.n	8000954 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000950:	f7ff fee4 	bl	800071c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000954:	79fb      	ldrb	r3, [r7, #7]
}
 8000956:	4618      	mov	r0, r3
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000968:	2300      	movs	r3, #0
 800096a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800096c:	4b17      	ldr	r3, [pc, #92]	; (80009cc <HAL_InitTick+0x6c>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d023      	beq.n	80009bc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000974:	4b16      	ldr	r3, [pc, #88]	; (80009d0 <HAL_InitTick+0x70>)
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	4b14      	ldr	r3, [pc, #80]	; (80009cc <HAL_InitTick+0x6c>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	4619      	mov	r1, r3
 800097e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000982:	fbb3 f3f1 	udiv	r3, r3, r1
 8000986:	fbb2 f3f3 	udiv	r3, r2, r3
 800098a:	4618      	mov	r0, r3
 800098c:	f000 f93f 	bl	8000c0e <HAL_SYSTICK_Config>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d10f      	bne.n	80009b6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2b0f      	cmp	r3, #15
 800099a:	d809      	bhi.n	80009b0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800099c:	2200      	movs	r2, #0
 800099e:	6879      	ldr	r1, [r7, #4]
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295
 80009a4:	f000 f917 	bl	8000bd6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009a8:	4a0a      	ldr	r2, [pc, #40]	; (80009d4 <HAL_InitTick+0x74>)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6013      	str	r3, [r2, #0]
 80009ae:	e007      	b.n	80009c0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80009b0:	2301      	movs	r3, #1
 80009b2:	73fb      	strb	r3, [r7, #15]
 80009b4:	e004      	b.n	80009c0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009b6:	2301      	movs	r3, #1
 80009b8:	73fb      	strb	r3, [r7, #15]
 80009ba:	e001      	b.n	80009c0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009bc:	2301      	movs	r3, #1
 80009be:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000008 	.word	0x20000008
 80009d0:	20000000 	.word	0x20000000
 80009d4:	20000004 	.word	0x20000004

080009d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <HAL_IncTick+0x20>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	461a      	mov	r2, r3
 80009e2:	4b06      	ldr	r3, [pc, #24]	; (80009fc <HAL_IncTick+0x24>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4413      	add	r3, r2
 80009e8:	4a04      	ldr	r2, [pc, #16]	; (80009fc <HAL_IncTick+0x24>)
 80009ea:	6013      	str	r3, [r2, #0]
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	20000008 	.word	0x20000008
 80009fc:	2000010c 	.word	0x2000010c

08000a00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  return uwTick;
 8000a04:	4b03      	ldr	r3, [pc, #12]	; (8000a14 <HAL_GetTick+0x14>)
 8000a06:	681b      	ldr	r3, [r3, #0]
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	2000010c 	.word	0x2000010c

08000a18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a20:	f7ff ffee 	bl	8000a00 <HAL_GetTick>
 8000a24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a30:	d005      	beq.n	8000a3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000a32:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <HAL_Delay+0x40>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	461a      	mov	r2, r3
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a3e:	bf00      	nop
 8000a40:	f7ff ffde 	bl	8000a00 <HAL_GetTick>
 8000a44:	4602      	mov	r2, r0
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	1ad3      	subs	r3, r2, r3
 8000a4a:	68fa      	ldr	r2, [r7, #12]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	d8f7      	bhi.n	8000a40 <HAL_Delay+0x28>
  {
  }
}
 8000a50:	bf00      	nop
 8000a52:	3710      	adds	r7, #16
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20000008 	.word	0x20000008

08000a5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f003 0307 	and.w	r3, r3, #7
 8000a6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a72:	68ba      	ldr	r2, [r7, #8]
 8000a74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a78:	4013      	ands	r3, r2
 8000a7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a8e:	4a04      	ldr	r2, [pc, #16]	; (8000aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	60d3      	str	r3, [r2, #12]
}
 8000a94:	bf00      	nop
 8000a96:	3714      	adds	r7, #20
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aa8:	4b04      	ldr	r3, [pc, #16]	; (8000abc <__NVIC_GetPriorityGrouping+0x18>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	0a1b      	lsrs	r3, r3, #8
 8000aae:	f003 0307 	and.w	r3, r3, #7
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	6039      	str	r1, [r7, #0]
 8000aca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	db0a      	blt.n	8000aea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	b2da      	uxtb	r2, r3
 8000ad8:	490c      	ldr	r1, [pc, #48]	; (8000b0c <__NVIC_SetPriority+0x4c>)
 8000ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ade:	0112      	lsls	r2, r2, #4
 8000ae0:	b2d2      	uxtb	r2, r2
 8000ae2:	440b      	add	r3, r1
 8000ae4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ae8:	e00a      	b.n	8000b00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	b2da      	uxtb	r2, r3
 8000aee:	4908      	ldr	r1, [pc, #32]	; (8000b10 <__NVIC_SetPriority+0x50>)
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	f003 030f 	and.w	r3, r3, #15
 8000af6:	3b04      	subs	r3, #4
 8000af8:	0112      	lsls	r2, r2, #4
 8000afa:	b2d2      	uxtb	r2, r2
 8000afc:	440b      	add	r3, r1
 8000afe:	761a      	strb	r2, [r3, #24]
}
 8000b00:	bf00      	nop
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	e000e100 	.word	0xe000e100
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b089      	sub	sp, #36	; 0x24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	60f8      	str	r0, [r7, #12]
 8000b1c:	60b9      	str	r1, [r7, #8]
 8000b1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	f003 0307 	and.w	r3, r3, #7
 8000b26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	f1c3 0307 	rsb	r3, r3, #7
 8000b2e:	2b04      	cmp	r3, #4
 8000b30:	bf28      	it	cs
 8000b32:	2304      	movcs	r3, #4
 8000b34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	3304      	adds	r3, #4
 8000b3a:	2b06      	cmp	r3, #6
 8000b3c:	d902      	bls.n	8000b44 <NVIC_EncodePriority+0x30>
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	3b03      	subs	r3, #3
 8000b42:	e000      	b.n	8000b46 <NVIC_EncodePriority+0x32>
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b48:	f04f 32ff 	mov.w	r2, #4294967295
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b52:	43da      	mvns	r2, r3
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	401a      	ands	r2, r3
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	fa01 f303 	lsl.w	r3, r1, r3
 8000b66:	43d9      	mvns	r1, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b6c:	4313      	orrs	r3, r2
         );
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3724      	adds	r7, #36	; 0x24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
	...

08000b7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	3b01      	subs	r3, #1
 8000b88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b8c:	d301      	bcc.n	8000b92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b8e:	2301      	movs	r3, #1
 8000b90:	e00f      	b.n	8000bb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b92:	4a0a      	ldr	r2, [pc, #40]	; (8000bbc <SysTick_Config+0x40>)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	3b01      	subs	r3, #1
 8000b98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b9a:	210f      	movs	r1, #15
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	f7ff ff8e 	bl	8000ac0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ba4:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <SysTick_Config+0x40>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000baa:	4b04      	ldr	r3, [pc, #16]	; (8000bbc <SysTick_Config+0x40>)
 8000bac:	2207      	movs	r2, #7
 8000bae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bb0:	2300      	movs	r3, #0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	e000e010 	.word	0xe000e010

08000bc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bc8:	6878      	ldr	r0, [r7, #4]
 8000bca:	f7ff ff47 	bl	8000a5c <__NVIC_SetPriorityGrouping>
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b086      	sub	sp, #24
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	4603      	mov	r3, r0
 8000bde:	60b9      	str	r1, [r7, #8]
 8000be0:	607a      	str	r2, [r7, #4]
 8000be2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000be8:	f7ff ff5c 	bl	8000aa4 <__NVIC_GetPriorityGrouping>
 8000bec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bee:	687a      	ldr	r2, [r7, #4]
 8000bf0:	68b9      	ldr	r1, [r7, #8]
 8000bf2:	6978      	ldr	r0, [r7, #20]
 8000bf4:	f7ff ff8e 	bl	8000b14 <NVIC_EncodePriority>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bfe:	4611      	mov	r1, r2
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff ff5d 	bl	8000ac0 <__NVIC_SetPriority>
}
 8000c06:	bf00      	nop
 8000c08:	3718      	adds	r7, #24
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b082      	sub	sp, #8
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f7ff ffb0 	bl	8000b7c <SysTick_Config>
 8000c1c:	4603      	mov	r3, r0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
	...

08000c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b087      	sub	sp, #28
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c32:	2300      	movs	r3, #0
 8000c34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c36:	e17f      	b.n	8000f38 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	fa01 f303 	lsl.w	r3, r1, r3
 8000c44:	4013      	ands	r3, r2
 8000c46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	f000 8171 	beq.w	8000f32 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d00b      	beq.n	8000c70 <HAL_GPIO_Init+0x48>
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	d007      	beq.n	8000c70 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c64:	2b11      	cmp	r3, #17
 8000c66:	d003      	beq.n	8000c70 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	2b12      	cmp	r3, #18
 8000c6e:	d130      	bne.n	8000cd2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	2203      	movs	r2, #3
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	43db      	mvns	r3, r3
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	4013      	ands	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	68da      	ldr	r2, [r3, #12]
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	693a      	ldr	r2, [r7, #16]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	693a      	ldr	r2, [r7, #16]
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	091b      	lsrs	r3, r3, #4
 8000cbc:	f003 0201 	and.w	r2, r3, #1
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f003 0303 	and.w	r3, r3, #3
 8000cda:	2b03      	cmp	r3, #3
 8000cdc:	d118      	bne.n	8000d10 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	43db      	mvns	r3, r3
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	08db      	lsrs	r3, r3, #3
 8000cfa:	f003 0201 	and.w	r2, r3, #1
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	2203      	movs	r2, #3
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	43db      	mvns	r3, r3
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	4013      	ands	r3, r2
 8000d26:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	689a      	ldr	r2, [r3, #8]
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	693a      	ldr	r2, [r7, #16]
 8000d3e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	2b02      	cmp	r3, #2
 8000d46:	d003      	beq.n	8000d50 <HAL_GPIO_Init+0x128>
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	2b12      	cmp	r3, #18
 8000d4e:	d123      	bne.n	8000d98 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	08da      	lsrs	r2, r3, #3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3208      	adds	r2, #8
 8000d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	f003 0307 	and.w	r3, r3, #7
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	220f      	movs	r2, #15
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	4013      	ands	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	691a      	ldr	r2, [r3, #16]
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	08da      	lsrs	r2, r3, #3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	3208      	adds	r2, #8
 8000d92:	6939      	ldr	r1, [r7, #16]
 8000d94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	2203      	movs	r2, #3
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	43db      	mvns	r3, r3
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	4013      	ands	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f003 0203 	and.w	r2, r3, #3
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	f000 80ac 	beq.w	8000f32 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dda:	4b5e      	ldr	r3, [pc, #376]	; (8000f54 <HAL_GPIO_Init+0x32c>)
 8000ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dde:	4a5d      	ldr	r2, [pc, #372]	; (8000f54 <HAL_GPIO_Init+0x32c>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	6613      	str	r3, [r2, #96]	; 0x60
 8000de6:	4b5b      	ldr	r3, [pc, #364]	; (8000f54 <HAL_GPIO_Init+0x32c>)
 8000de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	60bb      	str	r3, [r7, #8]
 8000df0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000df2:	4a59      	ldr	r2, [pc, #356]	; (8000f58 <HAL_GPIO_Init+0x330>)
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	089b      	lsrs	r3, r3, #2
 8000df8:	3302      	adds	r3, #2
 8000dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	f003 0303 	and.w	r3, r3, #3
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	220f      	movs	r2, #15
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	4013      	ands	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e1c:	d025      	beq.n	8000e6a <HAL_GPIO_Init+0x242>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a4e      	ldr	r2, [pc, #312]	; (8000f5c <HAL_GPIO_Init+0x334>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d01f      	beq.n	8000e66 <HAL_GPIO_Init+0x23e>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a4d      	ldr	r2, [pc, #308]	; (8000f60 <HAL_GPIO_Init+0x338>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d019      	beq.n	8000e62 <HAL_GPIO_Init+0x23a>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a4c      	ldr	r2, [pc, #304]	; (8000f64 <HAL_GPIO_Init+0x33c>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d013      	beq.n	8000e5e <HAL_GPIO_Init+0x236>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a4b      	ldr	r2, [pc, #300]	; (8000f68 <HAL_GPIO_Init+0x340>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d00d      	beq.n	8000e5a <HAL_GPIO_Init+0x232>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a4a      	ldr	r2, [pc, #296]	; (8000f6c <HAL_GPIO_Init+0x344>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d007      	beq.n	8000e56 <HAL_GPIO_Init+0x22e>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a49      	ldr	r2, [pc, #292]	; (8000f70 <HAL_GPIO_Init+0x348>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d101      	bne.n	8000e52 <HAL_GPIO_Init+0x22a>
 8000e4e:	2306      	movs	r3, #6
 8000e50:	e00c      	b.n	8000e6c <HAL_GPIO_Init+0x244>
 8000e52:	2307      	movs	r3, #7
 8000e54:	e00a      	b.n	8000e6c <HAL_GPIO_Init+0x244>
 8000e56:	2305      	movs	r3, #5
 8000e58:	e008      	b.n	8000e6c <HAL_GPIO_Init+0x244>
 8000e5a:	2304      	movs	r3, #4
 8000e5c:	e006      	b.n	8000e6c <HAL_GPIO_Init+0x244>
 8000e5e:	2303      	movs	r3, #3
 8000e60:	e004      	b.n	8000e6c <HAL_GPIO_Init+0x244>
 8000e62:	2302      	movs	r3, #2
 8000e64:	e002      	b.n	8000e6c <HAL_GPIO_Init+0x244>
 8000e66:	2301      	movs	r3, #1
 8000e68:	e000      	b.n	8000e6c <HAL_GPIO_Init+0x244>
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	697a      	ldr	r2, [r7, #20]
 8000e6e:	f002 0203 	and.w	r2, r2, #3
 8000e72:	0092      	lsls	r2, r2, #2
 8000e74:	4093      	lsls	r3, r2
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e7c:	4936      	ldr	r1, [pc, #216]	; (8000f58 <HAL_GPIO_Init+0x330>)
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	089b      	lsrs	r3, r3, #2
 8000e82:	3302      	adds	r3, #2
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000e8a:	4b3a      	ldr	r3, [pc, #232]	; (8000f74 <HAL_GPIO_Init+0x34c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	43db      	mvns	r3, r3
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	4013      	ands	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d003      	beq.n	8000eae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000eae:	4a31      	ldr	r2, [pc, #196]	; (8000f74 <HAL_GPIO_Init+0x34c>)
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000eb4:	4b2f      	ldr	r3, [pc, #188]	; (8000f74 <HAL_GPIO_Init+0x34c>)
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d003      	beq.n	8000ed8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ed8:	4a26      	ldr	r2, [pc, #152]	; (8000f74 <HAL_GPIO_Init+0x34c>)
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ede:	4b25      	ldr	r3, [pc, #148]	; (8000f74 <HAL_GPIO_Init+0x34c>)
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	4013      	ands	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d003      	beq.n	8000f02 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f02:	4a1c      	ldr	r2, [pc, #112]	; (8000f74 <HAL_GPIO_Init+0x34c>)
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f08:	4b1a      	ldr	r3, [pc, #104]	; (8000f74 <HAL_GPIO_Init+0x34c>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	43db      	mvns	r3, r3
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	4013      	ands	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d003      	beq.n	8000f2c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f2c:	4a11      	ldr	r2, [pc, #68]	; (8000f74 <HAL_GPIO_Init+0x34c>)
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	3301      	adds	r3, #1
 8000f36:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	f47f ae78 	bne.w	8000c38 <HAL_GPIO_Init+0x10>
  }
}
 8000f48:	bf00      	nop
 8000f4a:	371c      	adds	r7, #28
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	40021000 	.word	0x40021000
 8000f58:	40010000 	.word	0x40010000
 8000f5c:	48000400 	.word	0x48000400
 8000f60:	48000800 	.word	0x48000800
 8000f64:	48000c00 	.word	0x48000c00
 8000f68:	48001000 	.word	0x48001000
 8000f6c:	48001400 	.word	0x48001400
 8000f70:	48001800 	.word	0x48001800
 8000f74:	40010400 	.word	0x40010400

08000f78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	460b      	mov	r3, r1
 8000f82:	807b      	strh	r3, [r7, #2]
 8000f84:	4613      	mov	r3, r2
 8000f86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f88:	787b      	ldrb	r3, [r7, #1]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d003      	beq.n	8000f96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f8e:	887a      	ldrh	r2, [r7, #2]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f94:	e002      	b.n	8000f9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f96:	887a      	ldrh	r2, [r7, #2]
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d101      	bne.n	8000fba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e081      	b.n	80010be <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d106      	bne.n	8000fd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff fa7c 	bl	80004cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2224      	movs	r2, #36	; 0x24
 8000fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f022 0201 	bic.w	r2, r2, #1
 8000fea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000ff8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	689a      	ldr	r2, [r3, #8]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001008:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	68db      	ldr	r3, [r3, #12]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d107      	bne.n	8001022 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	689a      	ldr	r2, [r3, #8]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	e006      	b.n	8001030 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	689a      	ldr	r2, [r3, #8]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800102e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	2b02      	cmp	r3, #2
 8001036:	d104      	bne.n	8001042 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001040:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	6812      	ldr	r2, [r2, #0]
 800104c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001050:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001054:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	68da      	ldr	r2, [r3, #12]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001064:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	691a      	ldr	r2, [r3, #16]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	695b      	ldr	r3, [r3, #20]
 800106e:	ea42 0103 	orr.w	r1, r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	699b      	ldr	r3, [r3, #24]
 8001076:	021a      	lsls	r2, r3, #8
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	430a      	orrs	r2, r1
 800107e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	69d9      	ldr	r1, [r3, #28]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6a1a      	ldr	r2, [r3, #32]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	430a      	orrs	r2, r1
 800108e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f042 0201 	orr.w	r2, r2, #1
 800109e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2200      	movs	r2, #0
 80010a4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2220      	movs	r2, #32
 80010aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af02      	add	r7, sp, #8
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	607a      	str	r2, [r7, #4]
 80010d2:	461a      	mov	r2, r3
 80010d4:	460b      	mov	r3, r1
 80010d6:	817b      	strh	r3, [r7, #10]
 80010d8:	4613      	mov	r3, r2
 80010da:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	2b20      	cmp	r3, #32
 80010e6:	f040 80da 	bne.w	800129e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d101      	bne.n	80010f8 <HAL_I2C_Master_Transmit+0x30>
 80010f4:	2302      	movs	r3, #2
 80010f6:	e0d3      	b.n	80012a0 <HAL_I2C_Master_Transmit+0x1d8>
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	2201      	movs	r2, #1
 80010fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001100:	f7ff fc7e 	bl	8000a00 <HAL_GetTick>
 8001104:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	9300      	str	r3, [sp, #0]
 800110a:	2319      	movs	r3, #25
 800110c:	2201      	movs	r2, #1
 800110e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001112:	68f8      	ldr	r0, [r7, #12]
 8001114:	f000 f9f7 	bl	8001506 <I2C_WaitOnFlagUntilTimeout>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e0be      	b.n	80012a0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	2221      	movs	r2, #33	; 0x21
 8001126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2210      	movs	r2, #16
 800112e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2200      	movs	r2, #0
 8001136:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	893a      	ldrh	r2, [r7, #8]
 8001142:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2200      	movs	r2, #0
 8001148:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800114e:	b29b      	uxth	r3, r3
 8001150:	2bff      	cmp	r3, #255	; 0xff
 8001152:	d90e      	bls.n	8001172 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	22ff      	movs	r2, #255	; 0xff
 8001158:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800115e:	b2da      	uxtb	r2, r3
 8001160:	8979      	ldrh	r1, [r7, #10]
 8001162:	4b51      	ldr	r3, [pc, #324]	; (80012a8 <HAL_I2C_Master_Transmit+0x1e0>)
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800116a:	68f8      	ldr	r0, [r7, #12]
 800116c:	f000 faee 	bl	800174c <I2C_TransferConfig>
 8001170:	e06c      	b.n	800124c <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001176:	b29a      	uxth	r2, r3
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001180:	b2da      	uxtb	r2, r3
 8001182:	8979      	ldrh	r1, [r7, #10]
 8001184:	4b48      	ldr	r3, [pc, #288]	; (80012a8 <HAL_I2C_Master_Transmit+0x1e0>)
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800118c:	68f8      	ldr	r0, [r7, #12]
 800118e:	f000 fadd 	bl	800174c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001192:	e05b      	b.n	800124c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001194:	697a      	ldr	r2, [r7, #20]
 8001196:	6a39      	ldr	r1, [r7, #32]
 8001198:	68f8      	ldr	r0, [r7, #12]
 800119a:	f000 f9f4 	bl	8001586 <I2C_WaitOnTXISFlagUntilTimeout>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e07b      	b.n	80012a0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ac:	781a      	ldrb	r2, [r3, #0]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b8:	1c5a      	adds	r2, r3, #1
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	3b01      	subs	r3, #1
 80011c6:	b29a      	uxth	r2, r3
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011d0:	3b01      	subs	r3, #1
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011dc:	b29b      	uxth	r3, r3
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d034      	beq.n	800124c <HAL_I2C_Master_Transmit+0x184>
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d130      	bne.n	800124c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	6a3b      	ldr	r3, [r7, #32]
 80011f0:	2200      	movs	r2, #0
 80011f2:	2180      	movs	r1, #128	; 0x80
 80011f4:	68f8      	ldr	r0, [r7, #12]
 80011f6:	f000 f986 	bl	8001506 <I2C_WaitOnFlagUntilTimeout>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	e04d      	b.n	80012a0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001208:	b29b      	uxth	r3, r3
 800120a:	2bff      	cmp	r3, #255	; 0xff
 800120c:	d90e      	bls.n	800122c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	22ff      	movs	r2, #255	; 0xff
 8001212:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001218:	b2da      	uxtb	r2, r3
 800121a:	8979      	ldrh	r1, [r7, #10]
 800121c:	2300      	movs	r3, #0
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001224:	68f8      	ldr	r0, [r7, #12]
 8001226:	f000 fa91 	bl	800174c <I2C_TransferConfig>
 800122a:	e00f      	b.n	800124c <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001230:	b29a      	uxth	r2, r3
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800123a:	b2da      	uxtb	r2, r3
 800123c:	8979      	ldrh	r1, [r7, #10]
 800123e:	2300      	movs	r3, #0
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001246:	68f8      	ldr	r0, [r7, #12]
 8001248:	f000 fa80 	bl	800174c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001250:	b29b      	uxth	r3, r3
 8001252:	2b00      	cmp	r3, #0
 8001254:	d19e      	bne.n	8001194 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001256:	697a      	ldr	r2, [r7, #20]
 8001258:	6a39      	ldr	r1, [r7, #32]
 800125a:	68f8      	ldr	r0, [r7, #12]
 800125c:	f000 f9d3 	bl	8001606 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e01a      	b.n	80012a0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2220      	movs	r2, #32
 8001270:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	6859      	ldr	r1, [r3, #4]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <HAL_I2C_Master_Transmit+0x1e4>)
 800127e:	400b      	ands	r3, r1
 8001280:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	2220      	movs	r2, #32
 8001286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	2200      	movs	r2, #0
 800128e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2200      	movs	r2, #0
 8001296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800129a:	2300      	movs	r3, #0
 800129c:	e000      	b.n	80012a0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800129e:	2302      	movs	r3, #2
  }
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3718      	adds	r7, #24
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	80002000 	.word	0x80002000
 80012ac:	fe00e800 	.word	0xfe00e800

080012b0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08a      	sub	sp, #40	; 0x28
 80012b4:	af02      	add	r7, sp, #8
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	607a      	str	r2, [r7, #4]
 80012ba:	603b      	str	r3, [r7, #0]
 80012bc:	460b      	mov	r3, r1
 80012be:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	2b20      	cmp	r3, #32
 80012ce:	f040 80f1 	bne.w	80014b4 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80012e0:	d101      	bne.n	80012e6 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80012e2:	2302      	movs	r3, #2
 80012e4:	e0e7      	b.n	80014b6 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d101      	bne.n	80012f4 <HAL_I2C_IsDeviceReady+0x44>
 80012f0:	2302      	movs	r3, #2
 80012f2:	e0e0      	b.n	80014b6 <HAL_I2C_IsDeviceReady+0x206>
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2201      	movs	r2, #1
 80012f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	2224      	movs	r2, #36	; 0x24
 8001300:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	2200      	movs	r2, #0
 8001308:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	68db      	ldr	r3, [r3, #12]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d107      	bne.n	8001322 <HAL_I2C_IsDeviceReady+0x72>
 8001312:	897b      	ldrh	r3, [r7, #10]
 8001314:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001318:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800131c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001320:	e004      	b.n	800132c <HAL_I2C_IsDeviceReady+0x7c>
 8001322:	897b      	ldrh	r3, [r7, #10]
 8001324:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001328:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800132c:	68fa      	ldr	r2, [r7, #12]
 800132e:	6812      	ldr	r2, [r2, #0]
 8001330:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001332:	f7ff fb65 	bl	8000a00 <HAL_GetTick>
 8001336:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	f003 0320 	and.w	r3, r3, #32
 8001342:	2b20      	cmp	r3, #32
 8001344:	bf0c      	ite	eq
 8001346:	2301      	moveq	r3, #1
 8001348:	2300      	movne	r3, #0
 800134a:	b2db      	uxtb	r3, r3
 800134c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	f003 0310 	and.w	r3, r3, #16
 8001358:	2b10      	cmp	r3, #16
 800135a:	bf0c      	ite	eq
 800135c:	2301      	moveq	r3, #1
 800135e:	2300      	movne	r3, #0
 8001360:	b2db      	uxtb	r3, r3
 8001362:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001364:	e034      	b.n	80013d0 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800136c:	d01a      	beq.n	80013a4 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800136e:	f7ff fb47 	bl	8000a00 <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	429a      	cmp	r2, r3
 800137c:	d302      	bcc.n	8001384 <HAL_I2C_IsDeviceReady+0xd4>
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d10f      	bne.n	80013a4 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	2220      	movs	r2, #32
 8001388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001390:	f043 0220 	orr.w	r2, r3, #32
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	2200      	movs	r2, #0
 800139c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e088      	b.n	80014b6 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	699b      	ldr	r3, [r3, #24]
 80013aa:	f003 0320 	and.w	r3, r3, #32
 80013ae:	2b20      	cmp	r3, #32
 80013b0:	bf0c      	ite	eq
 80013b2:	2301      	moveq	r3, #1
 80013b4:	2300      	movne	r3, #0
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	f003 0310 	and.w	r3, r3, #16
 80013c4:	2b10      	cmp	r3, #16
 80013c6:	bf0c      	ite	eq
 80013c8:	2301      	moveq	r3, #1
 80013ca:	2300      	movne	r3, #0
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80013d0:	7ffb      	ldrb	r3, [r7, #31]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d102      	bne.n	80013dc <HAL_I2C_IsDeviceReady+0x12c>
 80013d6:	7fbb      	ldrb	r3, [r7, #30]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d0c4      	beq.n	8001366 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	699b      	ldr	r3, [r3, #24]
 80013e2:	f003 0310 	and.w	r3, r3, #16
 80013e6:	2b10      	cmp	r3, #16
 80013e8:	d01a      	beq.n	8001420 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	2200      	movs	r2, #0
 80013f2:	2120      	movs	r1, #32
 80013f4:	68f8      	ldr	r0, [r7, #12]
 80013f6:	f000 f886 	bl	8001506 <I2C_WaitOnFlagUntilTimeout>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e058      	b.n	80014b6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2220      	movs	r2, #32
 800140a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	2220      	movs	r2, #32
 8001410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2200      	movs	r2, #0
 8001418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800141c:	2300      	movs	r3, #0
 800141e:	e04a      	b.n	80014b6 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	9300      	str	r3, [sp, #0]
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	2200      	movs	r2, #0
 8001428:	2120      	movs	r1, #32
 800142a:	68f8      	ldr	r0, [r7, #12]
 800142c:	f000 f86b 	bl	8001506 <I2C_WaitOnFlagUntilTimeout>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e03d      	b.n	80014b6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2210      	movs	r2, #16
 8001440:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2220      	movs	r2, #32
 8001448:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	429a      	cmp	r2, r3
 8001450:	d118      	bne.n	8001484 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	685a      	ldr	r2, [r3, #4]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001460:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	9300      	str	r3, [sp, #0]
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	2200      	movs	r2, #0
 800146a:	2120      	movs	r1, #32
 800146c:	68f8      	ldr	r0, [r7, #12]
 800146e:	f000 f84a 	bl	8001506 <I2C_WaitOnFlagUntilTimeout>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e01c      	b.n	80014b6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2220      	movs	r2, #32
 8001482:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	3301      	adds	r3, #1
 8001488:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	429a      	cmp	r2, r3
 8001490:	f63f af3b 	bhi.w	800130a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2220      	movs	r2, #32
 8001498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a0:	f043 0220 	orr.w	r2, r3, #32
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	2200      	movs	r2, #0
 80014ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e000      	b.n	80014b6 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 80014b4:	2302      	movs	r3, #2
  }
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3720      	adds	r7, #32
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80014be:	b480      	push	{r7}
 80014c0:	b083      	sub	sp, #12
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	f003 0302 	and.w	r3, r3, #2
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d103      	bne.n	80014dc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2200      	movs	r2, #0
 80014da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d007      	beq.n	80014fa <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	699a      	ldr	r2, [r3, #24]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f042 0201 	orr.w	r2, r2, #1
 80014f8:	619a      	str	r2, [r3, #24]
  }
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b084      	sub	sp, #16
 800150a:	af00      	add	r7, sp, #0
 800150c:	60f8      	str	r0, [r7, #12]
 800150e:	60b9      	str	r1, [r7, #8]
 8001510:	603b      	str	r3, [r7, #0]
 8001512:	4613      	mov	r3, r2
 8001514:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001516:	e022      	b.n	800155e <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800151e:	d01e      	beq.n	800155e <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001520:	f7ff fa6e 	bl	8000a00 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	683a      	ldr	r2, [r7, #0]
 800152c:	429a      	cmp	r2, r3
 800152e:	d302      	bcc.n	8001536 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d113      	bne.n	800155e <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153a:	f043 0220 	orr.w	r2, r3, #32
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	2220      	movs	r2, #32
 8001546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	2200      	movs	r2, #0
 800154e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2200      	movs	r2, #0
 8001556:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e00f      	b.n	800157e <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	699a      	ldr	r2, [r3, #24]
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	4013      	ands	r3, r2
 8001568:	68ba      	ldr	r2, [r7, #8]
 800156a:	429a      	cmp	r2, r3
 800156c:	bf0c      	ite	eq
 800156e:	2301      	moveq	r3, #1
 8001570:	2300      	movne	r3, #0
 8001572:	b2db      	uxtb	r3, r3
 8001574:	461a      	mov	r2, r3
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	429a      	cmp	r2, r3
 800157a:	d0cd      	beq.n	8001518 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b084      	sub	sp, #16
 800158a:	af00      	add	r7, sp, #0
 800158c:	60f8      	str	r0, [r7, #12]
 800158e:	60b9      	str	r1, [r7, #8]
 8001590:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001592:	e02c      	b.n	80015ee <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	68b9      	ldr	r1, [r7, #8]
 8001598:	68f8      	ldr	r0, [r7, #12]
 800159a:	f000 f871 	bl	8001680 <I2C_IsAcknowledgeFailed>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e02a      	b.n	80015fe <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015ae:	d01e      	beq.n	80015ee <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015b0:	f7ff fa26 	bl	8000a00 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	68ba      	ldr	r2, [r7, #8]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d302      	bcc.n	80015c6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d113      	bne.n	80015ee <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ca:	f043 0220 	orr.w	r2, r3, #32
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2220      	movs	r2, #32
 80015d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e007      	b.n	80015fe <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d1cb      	bne.n	8001594 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b084      	sub	sp, #16
 800160a:	af00      	add	r7, sp, #0
 800160c:	60f8      	str	r0, [r7, #12]
 800160e:	60b9      	str	r1, [r7, #8]
 8001610:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001612:	e028      	b.n	8001666 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	68b9      	ldr	r1, [r7, #8]
 8001618:	68f8      	ldr	r0, [r7, #12]
 800161a:	f000 f831 	bl	8001680 <I2C_IsAcknowledgeFailed>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e026      	b.n	8001676 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001628:	f7ff f9ea 	bl	8000a00 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	68ba      	ldr	r2, [r7, #8]
 8001634:	429a      	cmp	r2, r3
 8001636:	d302      	bcc.n	800163e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d113      	bne.n	8001666 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001642:	f043 0220 	orr.w	r2, r3, #32
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2220      	movs	r2, #32
 800164e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2200      	movs	r2, #0
 800165e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e007      	b.n	8001676 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	f003 0320 	and.w	r3, r3, #32
 8001670:	2b20      	cmp	r3, #32
 8001672:	d1cf      	bne.n	8001614 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
	...

08001680 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	f003 0310 	and.w	r3, r3, #16
 8001696:	2b10      	cmp	r3, #16
 8001698:	d151      	bne.n	800173e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800169a:	e022      	b.n	80016e2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016a2:	d01e      	beq.n	80016e2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016a4:	f7ff f9ac 	bl	8000a00 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	68ba      	ldr	r2, [r7, #8]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d302      	bcc.n	80016ba <I2C_IsAcknowledgeFailed+0x3a>
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d113      	bne.n	80016e2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016be:	f043 0220 	orr.w	r2, r3, #32
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2220      	movs	r2, #32
 80016ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e02e      	b.n	8001740 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	f003 0320 	and.w	r3, r3, #32
 80016ec:	2b20      	cmp	r3, #32
 80016ee:	d1d5      	bne.n	800169c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2210      	movs	r2, #16
 80016f6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2220      	movs	r2, #32
 80016fe:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001700:	68f8      	ldr	r0, [r7, #12]
 8001702:	f7ff fedc 	bl	80014be <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	6859      	ldr	r1, [r3, #4]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	4b0d      	ldr	r3, [pc, #52]	; (8001748 <I2C_IsAcknowledgeFailed+0xc8>)
 8001712:	400b      	ands	r3, r1
 8001714:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171a:	f043 0204 	orr.w	r2, r3, #4
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	2220      	movs	r2, #32
 8001726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2200      	movs	r2, #0
 800172e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	2200      	movs	r2, #0
 8001736:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e000      	b.n	8001740 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800173e:	2300      	movs	r3, #0
}
 8001740:	4618      	mov	r0, r3
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	fe00e800 	.word	0xfe00e800

0800174c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	607b      	str	r3, [r7, #4]
 8001756:	460b      	mov	r3, r1
 8001758:	817b      	strh	r3, [r7, #10]
 800175a:	4613      	mov	r3, r2
 800175c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	685a      	ldr	r2, [r3, #4]
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	0d5b      	lsrs	r3, r3, #21
 8001768:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800176c:	4b0d      	ldr	r3, [pc, #52]	; (80017a4 <I2C_TransferConfig+0x58>)
 800176e:	430b      	orrs	r3, r1
 8001770:	43db      	mvns	r3, r3
 8001772:	ea02 0103 	and.w	r1, r2, r3
 8001776:	897b      	ldrh	r3, [r7, #10]
 8001778:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800177c:	7a7b      	ldrb	r3, [r7, #9]
 800177e:	041b      	lsls	r3, r3, #16
 8001780:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001784:	431a      	orrs	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	431a      	orrs	r2, r3
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	431a      	orrs	r2, r3
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	430a      	orrs	r2, r1
 8001794:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001796:	bf00      	nop
 8001798:	3714      	adds	r7, #20
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	03ff63ff 	.word	0x03ff63ff

080017a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	2b20      	cmp	r3, #32
 80017bc:	d138      	bne.n	8001830 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d101      	bne.n	80017cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80017c8:	2302      	movs	r3, #2
 80017ca:	e032      	b.n	8001832 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2201      	movs	r2, #1
 80017d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2224      	movs	r2, #36	; 0x24
 80017d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f022 0201 	bic.w	r2, r2, #1
 80017ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80017fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	6819      	ldr	r1, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	430a      	orrs	r2, r1
 800180a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f042 0201 	orr.w	r2, r2, #1
 800181a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2220      	movs	r2, #32
 8001820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800182c:	2300      	movs	r3, #0
 800182e:	e000      	b.n	8001832 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001830:	2302      	movs	r3, #2
  }
}
 8001832:	4618      	mov	r0, r3
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800183e:	b480      	push	{r7}
 8001840:	b085      	sub	sp, #20
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
 8001846:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800184e:	b2db      	uxtb	r3, r3
 8001850:	2b20      	cmp	r3, #32
 8001852:	d139      	bne.n	80018c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800185a:	2b01      	cmp	r3, #1
 800185c:	d101      	bne.n	8001862 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800185e:	2302      	movs	r3, #2
 8001860:	e033      	b.n	80018ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2201      	movs	r2, #1
 8001866:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2224      	movs	r2, #36	; 0x24
 800186e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f022 0201 	bic.w	r2, r2, #1
 8001880:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001890:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	021b      	lsls	r3, r3, #8
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	4313      	orrs	r3, r2
 800189a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	68fa      	ldr	r2, [r7, #12]
 80018a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f042 0201 	orr.w	r2, r2, #1
 80018b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2220      	movs	r2, #32
 80018b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80018c4:	2300      	movs	r3, #0
 80018c6:	e000      	b.n	80018ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80018c8:	2302      	movs	r3, #2
  }
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3714      	adds	r7, #20
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
	...

080018d8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018dc:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a04      	ldr	r2, [pc, #16]	; (80018f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80018e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018e6:	6013      	str	r3, [r2, #0]
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	40007000 	.word	0x40007000

080018f8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80018fc:	4b04      	ldr	r3, [pc, #16]	; (8001910 <HAL_PWREx_GetVoltageRange+0x18>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001904:	4618      	mov	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	40007000 	.word	0x40007000

08001914 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001922:	d130      	bne.n	8001986 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001924:	4b23      	ldr	r3, [pc, #140]	; (80019b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800192c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001930:	d038      	beq.n	80019a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001932:	4b20      	ldr	r3, [pc, #128]	; (80019b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800193a:	4a1e      	ldr	r2, [pc, #120]	; (80019b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800193c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001940:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001942:	4b1d      	ldr	r3, [pc, #116]	; (80019b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2232      	movs	r2, #50	; 0x32
 8001948:	fb02 f303 	mul.w	r3, r2, r3
 800194c:	4a1b      	ldr	r2, [pc, #108]	; (80019bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800194e:	fba2 2303 	umull	r2, r3, r2, r3
 8001952:	0c9b      	lsrs	r3, r3, #18
 8001954:	3301      	adds	r3, #1
 8001956:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001958:	e002      	b.n	8001960 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	3b01      	subs	r3, #1
 800195e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001960:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800196c:	d102      	bne.n	8001974 <HAL_PWREx_ControlVoltageScaling+0x60>
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1f2      	bne.n	800195a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001974:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001976:	695b      	ldr	r3, [r3, #20]
 8001978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800197c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001980:	d110      	bne.n	80019a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e00f      	b.n	80019a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001986:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800198e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001992:	d007      	beq.n	80019a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001994:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800199c:	4a05      	ldr	r2, [pc, #20]	; (80019b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800199e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3714      	adds	r7, #20
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	40007000 	.word	0x40007000
 80019b8:	20000000 	.word	0x20000000
 80019bc:	431bde83 	.word	0x431bde83

080019c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b088      	sub	sp, #32
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e3d4      	b.n	800217c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019d2:	4ba1      	ldr	r3, [pc, #644]	; (8001c58 <HAL_RCC_OscConfig+0x298>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f003 030c 	and.w	r3, r3, #12
 80019da:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019dc:	4b9e      	ldr	r3, [pc, #632]	; (8001c58 <HAL_RCC_OscConfig+0x298>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	f003 0303 	and.w	r3, r3, #3
 80019e4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0310 	and.w	r3, r3, #16
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f000 80e4 	beq.w	8001bbc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019f4:	69bb      	ldr	r3, [r7, #24]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d007      	beq.n	8001a0a <HAL_RCC_OscConfig+0x4a>
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	2b0c      	cmp	r3, #12
 80019fe:	f040 808b 	bne.w	8001b18 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	f040 8087 	bne.w	8001b18 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a0a:	4b93      	ldr	r3, [pc, #588]	; (8001c58 <HAL_RCC_OscConfig+0x298>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d005      	beq.n	8001a22 <HAL_RCC_OscConfig+0x62>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	699b      	ldr	r3, [r3, #24]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e3ac      	b.n	800217c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a1a      	ldr	r2, [r3, #32]
 8001a26:	4b8c      	ldr	r3, [pc, #560]	; (8001c58 <HAL_RCC_OscConfig+0x298>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0308 	and.w	r3, r3, #8
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d004      	beq.n	8001a3c <HAL_RCC_OscConfig+0x7c>
 8001a32:	4b89      	ldr	r3, [pc, #548]	; (8001c58 <HAL_RCC_OscConfig+0x298>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a3a:	e005      	b.n	8001a48 <HAL_RCC_OscConfig+0x88>
 8001a3c:	4b86      	ldr	r3, [pc, #536]	; (8001c58 <HAL_RCC_OscConfig+0x298>)
 8001a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a42:	091b      	lsrs	r3, r3, #4
 8001a44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d223      	bcs.n	8001a94 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a1b      	ldr	r3, [r3, #32]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f000 fd07 	bl	8002464 <RCC_SetFlashLatencyFromMSIRange>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e38d      	b.n	800217c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a60:	4b7d      	ldr	r3, [pc, #500]	; (8001c58 <HAL_RCC_OscConfig+0x298>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a7c      	ldr	r2, [pc, #496]	; (8001c58 <HAL_RCC_OscConfig+0x298>)
 8001a66:	f043 0308 	orr.w	r3, r3, #8
 8001a6a:	6013      	str	r3, [r2, #0]
 8001a6c:	4b7a      	ldr	r3, [pc, #488]	; (8001c58 <HAL_RCC_OscConfig+0x298>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a1b      	ldr	r3, [r3, #32]
 8001a78:	4977      	ldr	r1, [pc, #476]	; (8001c58 <HAL_RCC_OscConfig+0x298>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a7e:	4b76      	ldr	r3, [pc, #472]	; (8001c58 <HAL_RCC_OscConfig+0x298>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	69db      	ldr	r3, [r3, #28]
 8001a8a:	021b      	lsls	r3, r3, #8
 8001a8c:	4972      	ldr	r1, [pc, #456]	; (8001c58 <HAL_RCC_OscConfig+0x298>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	604b      	str	r3, [r1, #4]
 8001a92:	e025      	b.n	8001ae0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a94:	4b70      	ldr	r3, [pc, #448]	; (8001c58 <HAL_RCC_OscConfig+0x298>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a6f      	ldr	r2, [pc, #444]	; (8001c58 <HAL_RCC_OscConfig+0x298>)
 8001a9a:	f043 0308 	orr.w	r3, r3, #8
 8001a9e:	6013      	str	r3, [r2, #0]
 8001aa0:	4b6d      	ldr	r3, [pc, #436]	; (8001c58 <HAL_RCC_OscConfig+0x298>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a1b      	ldr	r3, [r3, #32]
 8001aac:	496a      	ldr	r1, [pc, #424]	; (8001c58 <HAL_RCC_OscConfig+0x298>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ab2:	4b69      	ldr	r3, [pc, #420]	; (8001c58 <HAL_RCC_OscConfig+0x298>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	021b      	lsls	r3, r3, #8
 8001ac0:	4965      	ldr	r1, [pc, #404]	; (8001c58 <HAL_RCC_OscConfig+0x298>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d109      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a1b      	ldr	r3, [r3, #32]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f000 fcc7 	bl	8002464 <RCC_SetFlashLatencyFromMSIRange>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e34d      	b.n	800217c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ae0:	f000 fc36 	bl	8002350 <HAL_RCC_GetSysClockFreq>
 8001ae4:	4601      	mov	r1, r0
 8001ae6:	4b5c      	ldr	r3, [pc, #368]	; (8001c58 <HAL_RCC_OscConfig+0x298>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	091b      	lsrs	r3, r3, #4
 8001aec:	f003 030f 	and.w	r3, r3, #15
 8001af0:	4a5a      	ldr	r2, [pc, #360]	; (8001c5c <HAL_RCC_OscConfig+0x29c>)
 8001af2:	5cd3      	ldrb	r3, [r2, r3]
 8001af4:	f003 031f 	and.w	r3, r3, #31
 8001af8:	fa21 f303 	lsr.w	r3, r1, r3
 8001afc:	4a58      	ldr	r2, [pc, #352]	; (8001c60 <HAL_RCC_OscConfig+0x2a0>)
 8001afe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b00:	4b58      	ldr	r3, [pc, #352]	; (8001c64 <HAL_RCC_OscConfig+0x2a4>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7fe ff2b 	bl	8000960 <HAL_InitTick>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b0e:	7bfb      	ldrb	r3, [r7, #15]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d052      	beq.n	8001bba <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
 8001b16:	e331      	b.n	800217c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d032      	beq.n	8001b86 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b20:	4b4d      	ldr	r3, [pc, #308]	; (8001c58 <HAL_RCC_OscConfig+0x298>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a4c      	ldr	r2, [pc, #304]	; (8001c58 <HAL_RCC_OscConfig+0x298>)
 8001b26:	f043 0301 	orr.w	r3, r3, #1
 8001b2a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b2c:	f7fe ff68 	bl	8000a00 <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b34:	f7fe ff64 	bl	8000a00 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e31a      	b.n	800217c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b46:	4b44      	ldr	r3, [pc, #272]	; (8001c58 <HAL_RCC_OscConfig+0x298>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d0f0      	beq.n	8001b34 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b52:	4b41      	ldr	r3, [pc, #260]	; (8001c58 <HAL_RCC_OscConfig+0x298>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a40      	ldr	r2, [pc, #256]	; (8001c58 <HAL_RCC_OscConfig+0x298>)
 8001b58:	f043 0308 	orr.w	r3, r3, #8
 8001b5c:	6013      	str	r3, [r2, #0]
 8001b5e:	4b3e      	ldr	r3, [pc, #248]	; (8001c58 <HAL_RCC_OscConfig+0x298>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a1b      	ldr	r3, [r3, #32]
 8001b6a:	493b      	ldr	r1, [pc, #236]	; (8001c58 <HAL_RCC_OscConfig+0x298>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b70:	4b39      	ldr	r3, [pc, #228]	; (8001c58 <HAL_RCC_OscConfig+0x298>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	69db      	ldr	r3, [r3, #28]
 8001b7c:	021b      	lsls	r3, r3, #8
 8001b7e:	4936      	ldr	r1, [pc, #216]	; (8001c58 <HAL_RCC_OscConfig+0x298>)
 8001b80:	4313      	orrs	r3, r2
 8001b82:	604b      	str	r3, [r1, #4]
 8001b84:	e01a      	b.n	8001bbc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b86:	4b34      	ldr	r3, [pc, #208]	; (8001c58 <HAL_RCC_OscConfig+0x298>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a33      	ldr	r2, [pc, #204]	; (8001c58 <HAL_RCC_OscConfig+0x298>)
 8001b8c:	f023 0301 	bic.w	r3, r3, #1
 8001b90:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b92:	f7fe ff35 	bl	8000a00 <HAL_GetTick>
 8001b96:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b98:	e008      	b.n	8001bac <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b9a:	f7fe ff31 	bl	8000a00 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e2e7      	b.n	800217c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bac:	4b2a      	ldr	r3, [pc, #168]	; (8001c58 <HAL_RCC_OscConfig+0x298>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1f0      	bne.n	8001b9a <HAL_RCC_OscConfig+0x1da>
 8001bb8:	e000      	b.n	8001bbc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d074      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	2b08      	cmp	r3, #8
 8001bcc:	d005      	beq.n	8001bda <HAL_RCC_OscConfig+0x21a>
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	2b0c      	cmp	r3, #12
 8001bd2:	d10e      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	2b03      	cmp	r3, #3
 8001bd8:	d10b      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bda:	4b1f      	ldr	r3, [pc, #124]	; (8001c58 <HAL_RCC_OscConfig+0x298>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d064      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x2f0>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d160      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e2c4      	b.n	800217c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bfa:	d106      	bne.n	8001c0a <HAL_RCC_OscConfig+0x24a>
 8001bfc:	4b16      	ldr	r3, [pc, #88]	; (8001c58 <HAL_RCC_OscConfig+0x298>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a15      	ldr	r2, [pc, #84]	; (8001c58 <HAL_RCC_OscConfig+0x298>)
 8001c02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c06:	6013      	str	r3, [r2, #0]
 8001c08:	e01d      	b.n	8001c46 <HAL_RCC_OscConfig+0x286>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c12:	d10c      	bne.n	8001c2e <HAL_RCC_OscConfig+0x26e>
 8001c14:	4b10      	ldr	r3, [pc, #64]	; (8001c58 <HAL_RCC_OscConfig+0x298>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a0f      	ldr	r2, [pc, #60]	; (8001c58 <HAL_RCC_OscConfig+0x298>)
 8001c1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c1e:	6013      	str	r3, [r2, #0]
 8001c20:	4b0d      	ldr	r3, [pc, #52]	; (8001c58 <HAL_RCC_OscConfig+0x298>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a0c      	ldr	r2, [pc, #48]	; (8001c58 <HAL_RCC_OscConfig+0x298>)
 8001c26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c2a:	6013      	str	r3, [r2, #0]
 8001c2c:	e00b      	b.n	8001c46 <HAL_RCC_OscConfig+0x286>
 8001c2e:	4b0a      	ldr	r3, [pc, #40]	; (8001c58 <HAL_RCC_OscConfig+0x298>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a09      	ldr	r2, [pc, #36]	; (8001c58 <HAL_RCC_OscConfig+0x298>)
 8001c34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c38:	6013      	str	r3, [r2, #0]
 8001c3a:	4b07      	ldr	r3, [pc, #28]	; (8001c58 <HAL_RCC_OscConfig+0x298>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a06      	ldr	r2, [pc, #24]	; (8001c58 <HAL_RCC_OscConfig+0x298>)
 8001c40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c44:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d01c      	beq.n	8001c88 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4e:	f7fe fed7 	bl	8000a00 <HAL_GetTick>
 8001c52:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c54:	e011      	b.n	8001c7a <HAL_RCC_OscConfig+0x2ba>
 8001c56:	bf00      	nop
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	08003208 	.word	0x08003208
 8001c60:	20000000 	.word	0x20000000
 8001c64:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c68:	f7fe feca 	bl	8000a00 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b64      	cmp	r3, #100	; 0x64
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e280      	b.n	800217c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c7a:	4baf      	ldr	r3, [pc, #700]	; (8001f38 <HAL_RCC_OscConfig+0x578>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d0f0      	beq.n	8001c68 <HAL_RCC_OscConfig+0x2a8>
 8001c86:	e014      	b.n	8001cb2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c88:	f7fe feba 	bl	8000a00 <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c90:	f7fe feb6 	bl	8000a00 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b64      	cmp	r3, #100	; 0x64
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e26c      	b.n	800217c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ca2:	4ba5      	ldr	r3, [pc, #660]	; (8001f38 <HAL_RCC_OscConfig+0x578>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1f0      	bne.n	8001c90 <HAL_RCC_OscConfig+0x2d0>
 8001cae:	e000      	b.n	8001cb2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d060      	beq.n	8001d80 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	2b04      	cmp	r3, #4
 8001cc2:	d005      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x310>
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	2b0c      	cmp	r3, #12
 8001cc8:	d119      	bne.n	8001cfe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d116      	bne.n	8001cfe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cd0:	4b99      	ldr	r3, [pc, #612]	; (8001f38 <HAL_RCC_OscConfig+0x578>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d005      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x328>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d101      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e249      	b.n	800217c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce8:	4b93      	ldr	r3, [pc, #588]	; (8001f38 <HAL_RCC_OscConfig+0x578>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	061b      	lsls	r3, r3, #24
 8001cf6:	4990      	ldr	r1, [pc, #576]	; (8001f38 <HAL_RCC_OscConfig+0x578>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cfc:	e040      	b.n	8001d80 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d023      	beq.n	8001d4e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d06:	4b8c      	ldr	r3, [pc, #560]	; (8001f38 <HAL_RCC_OscConfig+0x578>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a8b      	ldr	r2, [pc, #556]	; (8001f38 <HAL_RCC_OscConfig+0x578>)
 8001d0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d12:	f7fe fe75 	bl	8000a00 <HAL_GetTick>
 8001d16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d18:	e008      	b.n	8001d2c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d1a:	f7fe fe71 	bl	8000a00 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e227      	b.n	800217c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d2c:	4b82      	ldr	r3, [pc, #520]	; (8001f38 <HAL_RCC_OscConfig+0x578>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d0f0      	beq.n	8001d1a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d38:	4b7f      	ldr	r3, [pc, #508]	; (8001f38 <HAL_RCC_OscConfig+0x578>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	061b      	lsls	r3, r3, #24
 8001d46:	497c      	ldr	r1, [pc, #496]	; (8001f38 <HAL_RCC_OscConfig+0x578>)
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	604b      	str	r3, [r1, #4]
 8001d4c:	e018      	b.n	8001d80 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d4e:	4b7a      	ldr	r3, [pc, #488]	; (8001f38 <HAL_RCC_OscConfig+0x578>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a79      	ldr	r2, [pc, #484]	; (8001f38 <HAL_RCC_OscConfig+0x578>)
 8001d54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d5a:	f7fe fe51 	bl	8000a00 <HAL_GetTick>
 8001d5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d60:	e008      	b.n	8001d74 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d62:	f7fe fe4d 	bl	8000a00 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e203      	b.n	800217c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d74:	4b70      	ldr	r3, [pc, #448]	; (8001f38 <HAL_RCC_OscConfig+0x578>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d1f0      	bne.n	8001d62 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0308 	and.w	r3, r3, #8
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d03c      	beq.n	8001e06 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	695b      	ldr	r3, [r3, #20]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d01c      	beq.n	8001dce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d94:	4b68      	ldr	r3, [pc, #416]	; (8001f38 <HAL_RCC_OscConfig+0x578>)
 8001d96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d9a:	4a67      	ldr	r2, [pc, #412]	; (8001f38 <HAL_RCC_OscConfig+0x578>)
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da4:	f7fe fe2c 	bl	8000a00 <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dac:	f7fe fe28 	bl	8000a00 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e1de      	b.n	800217c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dbe:	4b5e      	ldr	r3, [pc, #376]	; (8001f38 <HAL_RCC_OscConfig+0x578>)
 8001dc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d0ef      	beq.n	8001dac <HAL_RCC_OscConfig+0x3ec>
 8001dcc:	e01b      	b.n	8001e06 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dce:	4b5a      	ldr	r3, [pc, #360]	; (8001f38 <HAL_RCC_OscConfig+0x578>)
 8001dd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dd4:	4a58      	ldr	r2, [pc, #352]	; (8001f38 <HAL_RCC_OscConfig+0x578>)
 8001dd6:	f023 0301 	bic.w	r3, r3, #1
 8001dda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dde:	f7fe fe0f 	bl	8000a00 <HAL_GetTick>
 8001de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001de4:	e008      	b.n	8001df8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001de6:	f7fe fe0b 	bl	8000a00 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e1c1      	b.n	800217c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001df8:	4b4f      	ldr	r3, [pc, #316]	; (8001f38 <HAL_RCC_OscConfig+0x578>)
 8001dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1ef      	bne.n	8001de6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0304 	and.w	r3, r3, #4
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f000 80a6 	beq.w	8001f60 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e14:	2300      	movs	r3, #0
 8001e16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e18:	4b47      	ldr	r3, [pc, #284]	; (8001f38 <HAL_RCC_OscConfig+0x578>)
 8001e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d10d      	bne.n	8001e40 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e24:	4b44      	ldr	r3, [pc, #272]	; (8001f38 <HAL_RCC_OscConfig+0x578>)
 8001e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e28:	4a43      	ldr	r2, [pc, #268]	; (8001f38 <HAL_RCC_OscConfig+0x578>)
 8001e2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e2e:	6593      	str	r3, [r2, #88]	; 0x58
 8001e30:	4b41      	ldr	r3, [pc, #260]	; (8001f38 <HAL_RCC_OscConfig+0x578>)
 8001e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e38:	60bb      	str	r3, [r7, #8]
 8001e3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e40:	4b3e      	ldr	r3, [pc, #248]	; (8001f3c <HAL_RCC_OscConfig+0x57c>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d118      	bne.n	8001e7e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e4c:	4b3b      	ldr	r3, [pc, #236]	; (8001f3c <HAL_RCC_OscConfig+0x57c>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a3a      	ldr	r2, [pc, #232]	; (8001f3c <HAL_RCC_OscConfig+0x57c>)
 8001e52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e56:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e58:	f7fe fdd2 	bl	8000a00 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e60:	f7fe fdce 	bl	8000a00 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e184      	b.n	800217c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e72:	4b32      	ldr	r3, [pc, #200]	; (8001f3c <HAL_RCC_OscConfig+0x57c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d0f0      	beq.n	8001e60 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d108      	bne.n	8001e98 <HAL_RCC_OscConfig+0x4d8>
 8001e86:	4b2c      	ldr	r3, [pc, #176]	; (8001f38 <HAL_RCC_OscConfig+0x578>)
 8001e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e8c:	4a2a      	ldr	r2, [pc, #168]	; (8001f38 <HAL_RCC_OscConfig+0x578>)
 8001e8e:	f043 0301 	orr.w	r3, r3, #1
 8001e92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e96:	e024      	b.n	8001ee2 <HAL_RCC_OscConfig+0x522>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	2b05      	cmp	r3, #5
 8001e9e:	d110      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x502>
 8001ea0:	4b25      	ldr	r3, [pc, #148]	; (8001f38 <HAL_RCC_OscConfig+0x578>)
 8001ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea6:	4a24      	ldr	r2, [pc, #144]	; (8001f38 <HAL_RCC_OscConfig+0x578>)
 8001ea8:	f043 0304 	orr.w	r3, r3, #4
 8001eac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001eb0:	4b21      	ldr	r3, [pc, #132]	; (8001f38 <HAL_RCC_OscConfig+0x578>)
 8001eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eb6:	4a20      	ldr	r2, [pc, #128]	; (8001f38 <HAL_RCC_OscConfig+0x578>)
 8001eb8:	f043 0301 	orr.w	r3, r3, #1
 8001ebc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ec0:	e00f      	b.n	8001ee2 <HAL_RCC_OscConfig+0x522>
 8001ec2:	4b1d      	ldr	r3, [pc, #116]	; (8001f38 <HAL_RCC_OscConfig+0x578>)
 8001ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec8:	4a1b      	ldr	r2, [pc, #108]	; (8001f38 <HAL_RCC_OscConfig+0x578>)
 8001eca:	f023 0301 	bic.w	r3, r3, #1
 8001ece:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ed2:	4b19      	ldr	r3, [pc, #100]	; (8001f38 <HAL_RCC_OscConfig+0x578>)
 8001ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ed8:	4a17      	ldr	r2, [pc, #92]	; (8001f38 <HAL_RCC_OscConfig+0x578>)
 8001eda:	f023 0304 	bic.w	r3, r3, #4
 8001ede:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d016      	beq.n	8001f18 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eea:	f7fe fd89 	bl	8000a00 <HAL_GetTick>
 8001eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ef0:	e00a      	b.n	8001f08 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ef2:	f7fe fd85 	bl	8000a00 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e139      	b.n	800217c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f08:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <HAL_RCC_OscConfig+0x578>)
 8001f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d0ed      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x532>
 8001f16:	e01a      	b.n	8001f4e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f18:	f7fe fd72 	bl	8000a00 <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f1e:	e00f      	b.n	8001f40 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f20:	f7fe fd6e 	bl	8000a00 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d906      	bls.n	8001f40 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e122      	b.n	800217c <HAL_RCC_OscConfig+0x7bc>
 8001f36:	bf00      	nop
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f40:	4b90      	ldr	r3, [pc, #576]	; (8002184 <HAL_RCC_OscConfig+0x7c4>)
 8001f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1e8      	bne.n	8001f20 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f4e:	7ffb      	ldrb	r3, [r7, #31]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d105      	bne.n	8001f60 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f54:	4b8b      	ldr	r3, [pc, #556]	; (8002184 <HAL_RCC_OscConfig+0x7c4>)
 8001f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f58:	4a8a      	ldr	r2, [pc, #552]	; (8002184 <HAL_RCC_OscConfig+0x7c4>)
 8001f5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f5e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f000 8108 	beq.w	800217a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	f040 80d0 	bne.w	8002114 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f74:	4b83      	ldr	r3, [pc, #524]	; (8002184 <HAL_RCC_OscConfig+0x7c4>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	f003 0203 	and.w	r2, r3, #3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d130      	bne.n	8001fea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	3b01      	subs	r3, #1
 8001f94:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d127      	bne.n	8001fea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fa4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d11f      	bne.n	8001fea <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001fb4:	2a07      	cmp	r2, #7
 8001fb6:	bf14      	ite	ne
 8001fb8:	2201      	movne	r2, #1
 8001fba:	2200      	moveq	r2, #0
 8001fbc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d113      	bne.n	8001fea <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fcc:	085b      	lsrs	r3, r3, #1
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d109      	bne.n	8001fea <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe0:	085b      	lsrs	r3, r3, #1
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d06e      	beq.n	80020c8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	2b0c      	cmp	r3, #12
 8001fee:	d069      	beq.n	80020c4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ff0:	4b64      	ldr	r3, [pc, #400]	; (8002184 <HAL_RCC_OscConfig+0x7c4>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d105      	bne.n	8002008 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001ffc:	4b61      	ldr	r3, [pc, #388]	; (8002184 <HAL_RCC_OscConfig+0x7c4>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e0b7      	b.n	800217c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800200c:	4b5d      	ldr	r3, [pc, #372]	; (8002184 <HAL_RCC_OscConfig+0x7c4>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a5c      	ldr	r2, [pc, #368]	; (8002184 <HAL_RCC_OscConfig+0x7c4>)
 8002012:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002016:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002018:	f7fe fcf2 	bl	8000a00 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002020:	f7fe fcee 	bl	8000a00 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e0a4      	b.n	800217c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002032:	4b54      	ldr	r3, [pc, #336]	; (8002184 <HAL_RCC_OscConfig+0x7c4>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1f0      	bne.n	8002020 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800203e:	4b51      	ldr	r3, [pc, #324]	; (8002184 <HAL_RCC_OscConfig+0x7c4>)
 8002040:	68da      	ldr	r2, [r3, #12]
 8002042:	4b51      	ldr	r3, [pc, #324]	; (8002188 <HAL_RCC_OscConfig+0x7c8>)
 8002044:	4013      	ands	r3, r2
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800204e:	3a01      	subs	r2, #1
 8002050:	0112      	lsls	r2, r2, #4
 8002052:	4311      	orrs	r1, r2
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002058:	0212      	lsls	r2, r2, #8
 800205a:	4311      	orrs	r1, r2
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002060:	0852      	lsrs	r2, r2, #1
 8002062:	3a01      	subs	r2, #1
 8002064:	0552      	lsls	r2, r2, #21
 8002066:	4311      	orrs	r1, r2
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800206c:	0852      	lsrs	r2, r2, #1
 800206e:	3a01      	subs	r2, #1
 8002070:	0652      	lsls	r2, r2, #25
 8002072:	4311      	orrs	r1, r2
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002078:	0912      	lsrs	r2, r2, #4
 800207a:	0452      	lsls	r2, r2, #17
 800207c:	430a      	orrs	r2, r1
 800207e:	4941      	ldr	r1, [pc, #260]	; (8002184 <HAL_RCC_OscConfig+0x7c4>)
 8002080:	4313      	orrs	r3, r2
 8002082:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002084:	4b3f      	ldr	r3, [pc, #252]	; (8002184 <HAL_RCC_OscConfig+0x7c4>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a3e      	ldr	r2, [pc, #248]	; (8002184 <HAL_RCC_OscConfig+0x7c4>)
 800208a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800208e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002090:	4b3c      	ldr	r3, [pc, #240]	; (8002184 <HAL_RCC_OscConfig+0x7c4>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	4a3b      	ldr	r2, [pc, #236]	; (8002184 <HAL_RCC_OscConfig+0x7c4>)
 8002096:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800209a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800209c:	f7fe fcb0 	bl	8000a00 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a4:	f7fe fcac 	bl	8000a00 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e062      	b.n	800217c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020b6:	4b33      	ldr	r3, [pc, #204]	; (8002184 <HAL_RCC_OscConfig+0x7c4>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d0f0      	beq.n	80020a4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020c2:	e05a      	b.n	800217a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e059      	b.n	800217c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020c8:	4b2e      	ldr	r3, [pc, #184]	; (8002184 <HAL_RCC_OscConfig+0x7c4>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d152      	bne.n	800217a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80020d4:	4b2b      	ldr	r3, [pc, #172]	; (8002184 <HAL_RCC_OscConfig+0x7c4>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a2a      	ldr	r2, [pc, #168]	; (8002184 <HAL_RCC_OscConfig+0x7c4>)
 80020da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020de:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020e0:	4b28      	ldr	r3, [pc, #160]	; (8002184 <HAL_RCC_OscConfig+0x7c4>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	4a27      	ldr	r2, [pc, #156]	; (8002184 <HAL_RCC_OscConfig+0x7c4>)
 80020e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020ea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020ec:	f7fe fc88 	bl	8000a00 <HAL_GetTick>
 80020f0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f4:	f7fe fc84 	bl	8000a00 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e03a      	b.n	800217c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002106:	4b1f      	ldr	r3, [pc, #124]	; (8002184 <HAL_RCC_OscConfig+0x7c4>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d0f0      	beq.n	80020f4 <HAL_RCC_OscConfig+0x734>
 8002112:	e032      	b.n	800217a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	2b0c      	cmp	r3, #12
 8002118:	d02d      	beq.n	8002176 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800211a:	4b1a      	ldr	r3, [pc, #104]	; (8002184 <HAL_RCC_OscConfig+0x7c4>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a19      	ldr	r2, [pc, #100]	; (8002184 <HAL_RCC_OscConfig+0x7c4>)
 8002120:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002124:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002126:	4b17      	ldr	r3, [pc, #92]	; (8002184 <HAL_RCC_OscConfig+0x7c4>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d105      	bne.n	800213e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002132:	4b14      	ldr	r3, [pc, #80]	; (8002184 <HAL_RCC_OscConfig+0x7c4>)
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	4a13      	ldr	r2, [pc, #76]	; (8002184 <HAL_RCC_OscConfig+0x7c4>)
 8002138:	f023 0303 	bic.w	r3, r3, #3
 800213c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800213e:	4b11      	ldr	r3, [pc, #68]	; (8002184 <HAL_RCC_OscConfig+0x7c4>)
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	4a10      	ldr	r2, [pc, #64]	; (8002184 <HAL_RCC_OscConfig+0x7c4>)
 8002144:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002148:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800214c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214e:	f7fe fc57 	bl	8000a00 <HAL_GetTick>
 8002152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002154:	e008      	b.n	8002168 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002156:	f7fe fc53 	bl	8000a00 <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e009      	b.n	800217c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002168:	4b06      	ldr	r3, [pc, #24]	; (8002184 <HAL_RCC_OscConfig+0x7c4>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1f0      	bne.n	8002156 <HAL_RCC_OscConfig+0x796>
 8002174:	e001      	b.n	800217a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e000      	b.n	800217c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3720      	adds	r7, #32
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40021000 	.word	0x40021000
 8002188:	f99d808c 	.word	0xf99d808c

0800218c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d101      	bne.n	80021a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e0c8      	b.n	8002332 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021a0:	4b66      	ldr	r3, [pc, #408]	; (800233c <HAL_RCC_ClockConfig+0x1b0>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0307 	and.w	r3, r3, #7
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d910      	bls.n	80021d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ae:	4b63      	ldr	r3, [pc, #396]	; (800233c <HAL_RCC_ClockConfig+0x1b0>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f023 0207 	bic.w	r2, r3, #7
 80021b6:	4961      	ldr	r1, [pc, #388]	; (800233c <HAL_RCC_ClockConfig+0x1b0>)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021be:	4b5f      	ldr	r3, [pc, #380]	; (800233c <HAL_RCC_ClockConfig+0x1b0>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d001      	beq.n	80021d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e0b0      	b.n	8002332 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d04c      	beq.n	8002276 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	2b03      	cmp	r3, #3
 80021e2:	d107      	bne.n	80021f4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021e4:	4b56      	ldr	r3, [pc, #344]	; (8002340 <HAL_RCC_ClockConfig+0x1b4>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d121      	bne.n	8002234 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e09e      	b.n	8002332 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d107      	bne.n	800220c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021fc:	4b50      	ldr	r3, [pc, #320]	; (8002340 <HAL_RCC_ClockConfig+0x1b4>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d115      	bne.n	8002234 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e092      	b.n	8002332 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d107      	bne.n	8002224 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002214:	4b4a      	ldr	r3, [pc, #296]	; (8002340 <HAL_RCC_ClockConfig+0x1b4>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0302 	and.w	r3, r3, #2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d109      	bne.n	8002234 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e086      	b.n	8002332 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002224:	4b46      	ldr	r3, [pc, #280]	; (8002340 <HAL_RCC_ClockConfig+0x1b4>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800222c:	2b00      	cmp	r3, #0
 800222e:	d101      	bne.n	8002234 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e07e      	b.n	8002332 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002234:	4b42      	ldr	r3, [pc, #264]	; (8002340 <HAL_RCC_ClockConfig+0x1b4>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f023 0203 	bic.w	r2, r3, #3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	493f      	ldr	r1, [pc, #252]	; (8002340 <HAL_RCC_ClockConfig+0x1b4>)
 8002242:	4313      	orrs	r3, r2
 8002244:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002246:	f7fe fbdb 	bl	8000a00 <HAL_GetTick>
 800224a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800224c:	e00a      	b.n	8002264 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800224e:	f7fe fbd7 	bl	8000a00 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	f241 3288 	movw	r2, #5000	; 0x1388
 800225c:	4293      	cmp	r3, r2
 800225e:	d901      	bls.n	8002264 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e066      	b.n	8002332 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002264:	4b36      	ldr	r3, [pc, #216]	; (8002340 <HAL_RCC_ClockConfig+0x1b4>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f003 020c 	and.w	r2, r3, #12
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	429a      	cmp	r2, r3
 8002274:	d1eb      	bne.n	800224e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d008      	beq.n	8002294 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002282:	4b2f      	ldr	r3, [pc, #188]	; (8002340 <HAL_RCC_ClockConfig+0x1b4>)
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	492c      	ldr	r1, [pc, #176]	; (8002340 <HAL_RCC_ClockConfig+0x1b4>)
 8002290:	4313      	orrs	r3, r2
 8002292:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002294:	4b29      	ldr	r3, [pc, #164]	; (800233c <HAL_RCC_ClockConfig+0x1b0>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d210      	bcs.n	80022c4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a2:	4b26      	ldr	r3, [pc, #152]	; (800233c <HAL_RCC_ClockConfig+0x1b0>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f023 0207 	bic.w	r2, r3, #7
 80022aa:	4924      	ldr	r1, [pc, #144]	; (800233c <HAL_RCC_ClockConfig+0x1b0>)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022b2:	4b22      	ldr	r3, [pc, #136]	; (800233c <HAL_RCC_ClockConfig+0x1b0>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d001      	beq.n	80022c4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e036      	b.n	8002332 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0304 	and.w	r3, r3, #4
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d008      	beq.n	80022e2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022d0:	4b1b      	ldr	r3, [pc, #108]	; (8002340 <HAL_RCC_ClockConfig+0x1b4>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	4918      	ldr	r1, [pc, #96]	; (8002340 <HAL_RCC_ClockConfig+0x1b4>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0308 	and.w	r3, r3, #8
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d009      	beq.n	8002302 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022ee:	4b14      	ldr	r3, [pc, #80]	; (8002340 <HAL_RCC_ClockConfig+0x1b4>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	00db      	lsls	r3, r3, #3
 80022fc:	4910      	ldr	r1, [pc, #64]	; (8002340 <HAL_RCC_ClockConfig+0x1b4>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002302:	f000 f825 	bl	8002350 <HAL_RCC_GetSysClockFreq>
 8002306:	4601      	mov	r1, r0
 8002308:	4b0d      	ldr	r3, [pc, #52]	; (8002340 <HAL_RCC_ClockConfig+0x1b4>)
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	091b      	lsrs	r3, r3, #4
 800230e:	f003 030f 	and.w	r3, r3, #15
 8002312:	4a0c      	ldr	r2, [pc, #48]	; (8002344 <HAL_RCC_ClockConfig+0x1b8>)
 8002314:	5cd3      	ldrb	r3, [r2, r3]
 8002316:	f003 031f 	and.w	r3, r3, #31
 800231a:	fa21 f303 	lsr.w	r3, r1, r3
 800231e:	4a0a      	ldr	r2, [pc, #40]	; (8002348 <HAL_RCC_ClockConfig+0x1bc>)
 8002320:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002322:	4b0a      	ldr	r3, [pc, #40]	; (800234c <HAL_RCC_ClockConfig+0x1c0>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4618      	mov	r0, r3
 8002328:	f7fe fb1a 	bl	8000960 <HAL_InitTick>
 800232c:	4603      	mov	r3, r0
 800232e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002330:	7afb      	ldrb	r3, [r7, #11]
}
 8002332:	4618      	mov	r0, r3
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40022000 	.word	0x40022000
 8002340:	40021000 	.word	0x40021000
 8002344:	08003208 	.word	0x08003208
 8002348:	20000000 	.word	0x20000000
 800234c:	20000004 	.word	0x20000004

08002350 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002350:	b480      	push	{r7}
 8002352:	b089      	sub	sp, #36	; 0x24
 8002354:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002356:	2300      	movs	r3, #0
 8002358:	61fb      	str	r3, [r7, #28]
 800235a:	2300      	movs	r3, #0
 800235c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800235e:	4b3d      	ldr	r3, [pc, #244]	; (8002454 <HAL_RCC_GetSysClockFreq+0x104>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 030c 	and.w	r3, r3, #12
 8002366:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002368:	4b3a      	ldr	r3, [pc, #232]	; (8002454 <HAL_RCC_GetSysClockFreq+0x104>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	f003 0303 	and.w	r3, r3, #3
 8002370:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d005      	beq.n	8002384 <HAL_RCC_GetSysClockFreq+0x34>
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	2b0c      	cmp	r3, #12
 800237c:	d121      	bne.n	80023c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d11e      	bne.n	80023c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002384:	4b33      	ldr	r3, [pc, #204]	; (8002454 <HAL_RCC_GetSysClockFreq+0x104>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0308 	and.w	r3, r3, #8
 800238c:	2b00      	cmp	r3, #0
 800238e:	d107      	bne.n	80023a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002390:	4b30      	ldr	r3, [pc, #192]	; (8002454 <HAL_RCC_GetSysClockFreq+0x104>)
 8002392:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002396:	0a1b      	lsrs	r3, r3, #8
 8002398:	f003 030f 	and.w	r3, r3, #15
 800239c:	61fb      	str	r3, [r7, #28]
 800239e:	e005      	b.n	80023ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80023a0:	4b2c      	ldr	r3, [pc, #176]	; (8002454 <HAL_RCC_GetSysClockFreq+0x104>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	091b      	lsrs	r3, r3, #4
 80023a6:	f003 030f 	and.w	r3, r3, #15
 80023aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80023ac:	4a2a      	ldr	r2, [pc, #168]	; (8002458 <HAL_RCC_GetSysClockFreq+0x108>)
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10d      	bne.n	80023d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023c0:	e00a      	b.n	80023d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	2b04      	cmp	r3, #4
 80023c6:	d102      	bne.n	80023ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023c8:	4b24      	ldr	r3, [pc, #144]	; (800245c <HAL_RCC_GetSysClockFreq+0x10c>)
 80023ca:	61bb      	str	r3, [r7, #24]
 80023cc:	e004      	b.n	80023d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	2b08      	cmp	r3, #8
 80023d2:	d101      	bne.n	80023d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023d4:	4b22      	ldr	r3, [pc, #136]	; (8002460 <HAL_RCC_GetSysClockFreq+0x110>)
 80023d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	2b0c      	cmp	r3, #12
 80023dc:	d133      	bne.n	8002446 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023de:	4b1d      	ldr	r3, [pc, #116]	; (8002454 <HAL_RCC_GetSysClockFreq+0x104>)
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	f003 0303 	and.w	r3, r3, #3
 80023e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d002      	beq.n	80023f4 <HAL_RCC_GetSysClockFreq+0xa4>
 80023ee:	2b03      	cmp	r3, #3
 80023f0:	d003      	beq.n	80023fa <HAL_RCC_GetSysClockFreq+0xaa>
 80023f2:	e005      	b.n	8002400 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80023f4:	4b19      	ldr	r3, [pc, #100]	; (800245c <HAL_RCC_GetSysClockFreq+0x10c>)
 80023f6:	617b      	str	r3, [r7, #20]
      break;
 80023f8:	e005      	b.n	8002406 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80023fa:	4b19      	ldr	r3, [pc, #100]	; (8002460 <HAL_RCC_GetSysClockFreq+0x110>)
 80023fc:	617b      	str	r3, [r7, #20]
      break;
 80023fe:	e002      	b.n	8002406 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	617b      	str	r3, [r7, #20]
      break;
 8002404:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002406:	4b13      	ldr	r3, [pc, #76]	; (8002454 <HAL_RCC_GetSysClockFreq+0x104>)
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	091b      	lsrs	r3, r3, #4
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	3301      	adds	r3, #1
 8002412:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002414:	4b0f      	ldr	r3, [pc, #60]	; (8002454 <HAL_RCC_GetSysClockFreq+0x104>)
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	0a1b      	lsrs	r3, r3, #8
 800241a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	fb02 f203 	mul.w	r2, r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	fbb2 f3f3 	udiv	r3, r2, r3
 800242a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800242c:	4b09      	ldr	r3, [pc, #36]	; (8002454 <HAL_RCC_GetSysClockFreq+0x104>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	0e5b      	lsrs	r3, r3, #25
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	3301      	adds	r3, #1
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800243c:	697a      	ldr	r2, [r7, #20]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	fbb2 f3f3 	udiv	r3, r2, r3
 8002444:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002446:	69bb      	ldr	r3, [r7, #24]
}
 8002448:	4618      	mov	r0, r3
 800244a:	3724      	adds	r7, #36	; 0x24
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	40021000 	.word	0x40021000
 8002458:	08003218 	.word	0x08003218
 800245c:	00f42400 	.word	0x00f42400
 8002460:	007a1200 	.word	0x007a1200

08002464 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800246c:	2300      	movs	r3, #0
 800246e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002470:	4b2a      	ldr	r3, [pc, #168]	; (800251c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d003      	beq.n	8002484 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800247c:	f7ff fa3c 	bl	80018f8 <HAL_PWREx_GetVoltageRange>
 8002480:	6178      	str	r0, [r7, #20]
 8002482:	e014      	b.n	80024ae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002484:	4b25      	ldr	r3, [pc, #148]	; (800251c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002488:	4a24      	ldr	r2, [pc, #144]	; (800251c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800248a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800248e:	6593      	str	r3, [r2, #88]	; 0x58
 8002490:	4b22      	ldr	r3, [pc, #136]	; (800251c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800249c:	f7ff fa2c 	bl	80018f8 <HAL_PWREx_GetVoltageRange>
 80024a0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80024a2:	4b1e      	ldr	r3, [pc, #120]	; (800251c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a6:	4a1d      	ldr	r2, [pc, #116]	; (800251c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024ac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024b4:	d10b      	bne.n	80024ce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b80      	cmp	r3, #128	; 0x80
 80024ba:	d919      	bls.n	80024f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2ba0      	cmp	r3, #160	; 0xa0
 80024c0:	d902      	bls.n	80024c8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80024c2:	2302      	movs	r3, #2
 80024c4:	613b      	str	r3, [r7, #16]
 80024c6:	e013      	b.n	80024f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024c8:	2301      	movs	r3, #1
 80024ca:	613b      	str	r3, [r7, #16]
 80024cc:	e010      	b.n	80024f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2b80      	cmp	r3, #128	; 0x80
 80024d2:	d902      	bls.n	80024da <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80024d4:	2303      	movs	r3, #3
 80024d6:	613b      	str	r3, [r7, #16]
 80024d8:	e00a      	b.n	80024f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2b80      	cmp	r3, #128	; 0x80
 80024de:	d102      	bne.n	80024e6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80024e0:	2302      	movs	r3, #2
 80024e2:	613b      	str	r3, [r7, #16]
 80024e4:	e004      	b.n	80024f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2b70      	cmp	r3, #112	; 0x70
 80024ea:	d101      	bne.n	80024f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024ec:	2301      	movs	r3, #1
 80024ee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80024f0:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f023 0207 	bic.w	r2, r3, #7
 80024f8:	4909      	ldr	r1, [pc, #36]	; (8002520 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002500:	4b07      	ldr	r3, [pc, #28]	; (8002520 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0307 	and.w	r3, r3, #7
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	429a      	cmp	r2, r3
 800250c:	d001      	beq.n	8002512 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e000      	b.n	8002514 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	3718      	adds	r7, #24
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40021000 	.word	0x40021000
 8002520:	40022000 	.word	0x40022000

08002524 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800252c:	2300      	movs	r3, #0
 800252e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002530:	2300      	movs	r3, #0
 8002532:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800253c:	2b00      	cmp	r3, #0
 800253e:	d03f      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002544:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002548:	d01c      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800254a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800254e:	d802      	bhi.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00e      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002554:	e01f      	b.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8002556:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800255a:	d003      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800255c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002560:	d01c      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002562:	e018      	b.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002564:	4b85      	ldr	r3, [pc, #532]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	4a84      	ldr	r2, [pc, #528]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800256a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800256e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002570:	e015      	b.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	3304      	adds	r3, #4
 8002576:	2100      	movs	r1, #0
 8002578:	4618      	mov	r0, r3
 800257a:	f000 fac9 	bl	8002b10 <RCCEx_PLLSAI1_Config>
 800257e:	4603      	mov	r3, r0
 8002580:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002582:	e00c      	b.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3320      	adds	r3, #32
 8002588:	2100      	movs	r1, #0
 800258a:	4618      	mov	r0, r3
 800258c:	f000 fbb0 	bl	8002cf0 <RCCEx_PLLSAI2_Config>
 8002590:	4603      	mov	r3, r0
 8002592:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002594:	e003      	b.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	74fb      	strb	r3, [r7, #19]
      break;
 800259a:	e000      	b.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800259c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800259e:	7cfb      	ldrb	r3, [r7, #19]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d10b      	bne.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025a4:	4b75      	ldr	r3, [pc, #468]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025b2:	4972      	ldr	r1, [pc, #456]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80025ba:	e001      	b.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025bc:	7cfb      	ldrb	r3, [r7, #19]
 80025be:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d03f      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025d4:	d01c      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80025d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025da:	d802      	bhi.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00e      	beq.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0xda>
 80025e0:	e01f      	b.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80025e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025e6:	d003      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80025e8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80025ec:	d01c      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80025ee:	e018      	b.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025f0:	4b62      	ldr	r3, [pc, #392]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	4a61      	ldr	r2, [pc, #388]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80025f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025fa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025fc:	e015      	b.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	3304      	adds	r3, #4
 8002602:	2100      	movs	r1, #0
 8002604:	4618      	mov	r0, r3
 8002606:	f000 fa83 	bl	8002b10 <RCCEx_PLLSAI1_Config>
 800260a:	4603      	mov	r3, r0
 800260c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800260e:	e00c      	b.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3320      	adds	r3, #32
 8002614:	2100      	movs	r1, #0
 8002616:	4618      	mov	r0, r3
 8002618:	f000 fb6a 	bl	8002cf0 <RCCEx_PLLSAI2_Config>
 800261c:	4603      	mov	r3, r0
 800261e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002620:	e003      	b.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	74fb      	strb	r3, [r7, #19]
      break;
 8002626:	e000      	b.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002628:	bf00      	nop
    }

    if(ret == HAL_OK)
 800262a:	7cfb      	ldrb	r3, [r7, #19]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d10b      	bne.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002630:	4b52      	ldr	r3, [pc, #328]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002636:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800263e:	494f      	ldr	r1, [pc, #316]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002640:	4313      	orrs	r3, r2
 8002642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002646:	e001      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002648:	7cfb      	ldrb	r3, [r7, #19]
 800264a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002654:	2b00      	cmp	r3, #0
 8002656:	f000 80a0 	beq.w	800279a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800265a:	2300      	movs	r3, #0
 800265c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800265e:	4b47      	ldr	r3, [pc, #284]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800266a:	2301      	movs	r3, #1
 800266c:	e000      	b.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800266e:	2300      	movs	r3, #0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00d      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002674:	4b41      	ldr	r3, [pc, #260]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002678:	4a40      	ldr	r2, [pc, #256]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800267a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800267e:	6593      	str	r3, [r2, #88]	; 0x58
 8002680:	4b3e      	ldr	r3, [pc, #248]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002688:	60bb      	str	r3, [r7, #8]
 800268a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800268c:	2301      	movs	r3, #1
 800268e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002690:	4b3b      	ldr	r3, [pc, #236]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a3a      	ldr	r2, [pc, #232]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800269a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800269c:	f7fe f9b0 	bl	8000a00 <HAL_GetTick>
 80026a0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026a2:	e009      	b.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026a4:	f7fe f9ac 	bl	8000a00 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d902      	bls.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	74fb      	strb	r3, [r7, #19]
        break;
 80026b6:	e005      	b.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026b8:	4b31      	ldr	r3, [pc, #196]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d0ef      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80026c4:	7cfb      	ldrb	r3, [r7, #19]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d15c      	bne.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026ca:	4b2c      	ldr	r3, [pc, #176]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026d4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d01f      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d019      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026e8:	4b24      	ldr	r3, [pc, #144]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026f4:	4b21      	ldr	r3, [pc, #132]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026fa:	4a20      	ldr	r2, [pc, #128]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80026fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002700:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002704:	4b1d      	ldr	r3, [pc, #116]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800270a:	4a1c      	ldr	r2, [pc, #112]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800270c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002710:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002714:	4a19      	ldr	r2, [pc, #100]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	d016      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002726:	f7fe f96b 	bl	8000a00 <HAL_GetTick>
 800272a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800272c:	e00b      	b.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800272e:	f7fe f967 	bl	8000a00 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	f241 3288 	movw	r2, #5000	; 0x1388
 800273c:	4293      	cmp	r3, r2
 800273e:	d902      	bls.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	74fb      	strb	r3, [r7, #19]
            break;
 8002744:	e006      	b.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002746:	4b0d      	ldr	r3, [pc, #52]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d0ec      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002754:	7cfb      	ldrb	r3, [r7, #19]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10c      	bne.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800275a:	4b08      	ldr	r3, [pc, #32]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800275c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002760:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800276a:	4904      	ldr	r1, [pc, #16]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800276c:	4313      	orrs	r3, r2
 800276e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002772:	e009      	b.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002774:	7cfb      	ldrb	r3, [r7, #19]
 8002776:	74bb      	strb	r3, [r7, #18]
 8002778:	e006      	b.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800277a:	bf00      	nop
 800277c:	40021000 	.word	0x40021000
 8002780:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002784:	7cfb      	ldrb	r3, [r7, #19]
 8002786:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002788:	7c7b      	ldrb	r3, [r7, #17]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d105      	bne.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800278e:	4b9e      	ldr	r3, [pc, #632]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002792:	4a9d      	ldr	r2, [pc, #628]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002794:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002798:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00a      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027a6:	4b98      	ldr	r3, [pc, #608]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ac:	f023 0203 	bic.w	r2, r3, #3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b4:	4994      	ldr	r1, [pc, #592]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00a      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027c8:	4b8f      	ldr	r3, [pc, #572]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ce:	f023 020c 	bic.w	r2, r3, #12
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d6:	498c      	ldr	r1, [pc, #560]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0304 	and.w	r3, r3, #4
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00a      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027ea:	4b87      	ldr	r3, [pc, #540]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f8:	4983      	ldr	r1, [pc, #524]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0308 	and.w	r3, r3, #8
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00a      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800280c:	4b7e      	ldr	r3, [pc, #504]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800280e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002812:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281a:	497b      	ldr	r1, [pc, #492]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800281c:	4313      	orrs	r3, r2
 800281e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0310 	and.w	r3, r3, #16
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00a      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800282e:	4b76      	ldr	r3, [pc, #472]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002834:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800283c:	4972      	ldr	r1, [pc, #456]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800283e:	4313      	orrs	r3, r2
 8002840:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0320 	and.w	r3, r3, #32
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00a      	beq.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002850:	4b6d      	ldr	r3, [pc, #436]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002856:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285e:	496a      	ldr	r1, [pc, #424]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002860:	4313      	orrs	r3, r2
 8002862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00a      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002872:	4b65      	ldr	r3, [pc, #404]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002878:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002880:	4961      	ldr	r1, [pc, #388]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002882:	4313      	orrs	r3, r2
 8002884:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00a      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002894:	4b5c      	ldr	r3, [pc, #368]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800289a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028a2:	4959      	ldr	r1, [pc, #356]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00a      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028b6:	4b54      	ldr	r3, [pc, #336]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028bc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028c4:	4950      	ldr	r1, [pc, #320]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00a      	beq.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028d8:	4b4b      	ldr	r3, [pc, #300]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028de:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e6:	4948      	ldr	r1, [pc, #288]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00a      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028fa:	4b43      	ldr	r3, [pc, #268]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80028fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002900:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002908:	493f      	ldr	r1, [pc, #252]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800290a:	4313      	orrs	r3, r2
 800290c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d028      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800291c:	4b3a      	ldr	r3, [pc, #232]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800291e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002922:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800292a:	4937      	ldr	r1, [pc, #220]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800292c:	4313      	orrs	r3, r2
 800292e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002936:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800293a:	d106      	bne.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800293c:	4b32      	ldr	r3, [pc, #200]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	4a31      	ldr	r2, [pc, #196]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002942:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002946:	60d3      	str	r3, [r2, #12]
 8002948:	e011      	b.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800294e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002952:	d10c      	bne.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	3304      	adds	r3, #4
 8002958:	2101      	movs	r1, #1
 800295a:	4618      	mov	r0, r3
 800295c:	f000 f8d8 	bl	8002b10 <RCCEx_PLLSAI1_Config>
 8002960:	4603      	mov	r3, r0
 8002962:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002964:	7cfb      	ldrb	r3, [r7, #19]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800296a:	7cfb      	ldrb	r3, [r7, #19]
 800296c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d028      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800297a:	4b23      	ldr	r3, [pc, #140]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800297c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002980:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002988:	491f      	ldr	r1, [pc, #124]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800298a:	4313      	orrs	r3, r2
 800298c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002994:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002998:	d106      	bne.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800299a:	4b1b      	ldr	r3, [pc, #108]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	4a1a      	ldr	r2, [pc, #104]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029a4:	60d3      	str	r3, [r2, #12]
 80029a6:	e011      	b.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029b0:	d10c      	bne.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	3304      	adds	r3, #4
 80029b6:	2101      	movs	r1, #1
 80029b8:	4618      	mov	r0, r3
 80029ba:	f000 f8a9 	bl	8002b10 <RCCEx_PLLSAI1_Config>
 80029be:	4603      	mov	r3, r0
 80029c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029c2:	7cfb      	ldrb	r3, [r7, #19]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80029c8:	7cfb      	ldrb	r3, [r7, #19]
 80029ca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d02b      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029d8:	4b0b      	ldr	r3, [pc, #44]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029e6:	4908      	ldr	r1, [pc, #32]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029f6:	d109      	bne.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029f8:	4b03      	ldr	r3, [pc, #12]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	4a02      	ldr	r2, [pc, #8]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80029fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a02:	60d3      	str	r3, [r2, #12]
 8002a04:	e014      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002a06:	bf00      	nop
 8002a08:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a14:	d10c      	bne.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	3304      	adds	r3, #4
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f000 f877 	bl	8002b10 <RCCEx_PLLSAI1_Config>
 8002a22:	4603      	mov	r3, r0
 8002a24:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a26:	7cfb      	ldrb	r3, [r7, #19]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002a2c:	7cfb      	ldrb	r3, [r7, #19]
 8002a2e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d02f      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a3c:	4b2b      	ldr	r3, [pc, #172]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a42:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a4a:	4928      	ldr	r1, [pc, #160]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a5a:	d10d      	bne.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	3304      	adds	r3, #4
 8002a60:	2102      	movs	r1, #2
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 f854 	bl	8002b10 <RCCEx_PLLSAI1_Config>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a6c:	7cfb      	ldrb	r3, [r7, #19]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d014      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002a72:	7cfb      	ldrb	r3, [r7, #19]
 8002a74:	74bb      	strb	r3, [r7, #18]
 8002a76:	e011      	b.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a80:	d10c      	bne.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	3320      	adds	r3, #32
 8002a86:	2102      	movs	r1, #2
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f000 f931 	bl	8002cf0 <RCCEx_PLLSAI2_Config>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a92:	7cfb      	ldrb	r3, [r7, #19]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002a98:	7cfb      	ldrb	r3, [r7, #19]
 8002a9a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d00a      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002aa8:	4b10      	ldr	r3, [pc, #64]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aae:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ab6:	490d      	ldr	r1, [pc, #52]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00b      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002aca:	4b08      	ldr	r3, [pc, #32]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ada:	4904      	ldr	r1, [pc, #16]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002ae2:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3718      	adds	r7, #24
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40021000 	.word	0x40021000

08002af0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002af4:	4b05      	ldr	r3, [pc, #20]	; (8002b0c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a04      	ldr	r2, [pc, #16]	; (8002b0c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002afa:	f043 0304 	orr.w	r3, r3, #4
 8002afe:	6013      	str	r3, [r2, #0]
}
 8002b00:	bf00      	nop
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	40021000 	.word	0x40021000

08002b10 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b1e:	4b73      	ldr	r3, [pc, #460]	; (8002cec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	f003 0303 	and.w	r3, r3, #3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d018      	beq.n	8002b5c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b2a:	4b70      	ldr	r3, [pc, #448]	; (8002cec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	f003 0203 	and.w	r2, r3, #3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d10d      	bne.n	8002b56 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
       ||
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d009      	beq.n	8002b56 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002b42:	4b6a      	ldr	r3, [pc, #424]	; (8002cec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	091b      	lsrs	r3, r3, #4
 8002b48:	f003 0307 	and.w	r3, r3, #7
 8002b4c:	1c5a      	adds	r2, r3, #1
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
       ||
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d044      	beq.n	8002be0 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	73fb      	strb	r3, [r7, #15]
 8002b5a:	e041      	b.n	8002be0 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	d00c      	beq.n	8002b7e <RCCEx_PLLSAI1_Config+0x6e>
 8002b64:	2b03      	cmp	r3, #3
 8002b66:	d013      	beq.n	8002b90 <RCCEx_PLLSAI1_Config+0x80>
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d120      	bne.n	8002bae <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b6c:	4b5f      	ldr	r3, [pc, #380]	; (8002cec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d11d      	bne.n	8002bb4 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b7c:	e01a      	b.n	8002bb4 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b7e:	4b5b      	ldr	r3, [pc, #364]	; (8002cec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d116      	bne.n	8002bb8 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b8e:	e013      	b.n	8002bb8 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b90:	4b56      	ldr	r3, [pc, #344]	; (8002cec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d10f      	bne.n	8002bbc <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b9c:	4b53      	ldr	r3, [pc, #332]	; (8002cec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d109      	bne.n	8002bbc <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002bac:	e006      	b.n	8002bbc <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	73fb      	strb	r3, [r7, #15]
      break;
 8002bb2:	e004      	b.n	8002bbe <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002bb4:	bf00      	nop
 8002bb6:	e002      	b.n	8002bbe <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002bb8:	bf00      	nop
 8002bba:	e000      	b.n	8002bbe <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002bbc:	bf00      	nop
    }

    if(status == HAL_OK)
 8002bbe:	7bfb      	ldrb	r3, [r7, #15]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d10d      	bne.n	8002be0 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002bc4:	4b49      	ldr	r3, [pc, #292]	; (8002cec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6819      	ldr	r1, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	011b      	lsls	r3, r3, #4
 8002bd8:	430b      	orrs	r3, r1
 8002bda:	4944      	ldr	r1, [pc, #272]	; (8002cec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002be0:	7bfb      	ldrb	r3, [r7, #15]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d17d      	bne.n	8002ce2 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002be6:	4b41      	ldr	r3, [pc, #260]	; (8002cec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a40      	ldr	r2, [pc, #256]	; (8002cec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002bec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002bf0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bf2:	f7fd ff05 	bl	8000a00 <HAL_GetTick>
 8002bf6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002bf8:	e009      	b.n	8002c0e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002bfa:	f7fd ff01 	bl	8000a00 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d902      	bls.n	8002c0e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	73fb      	strb	r3, [r7, #15]
        break;
 8002c0c:	e005      	b.n	8002c1a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c0e:	4b37      	ldr	r3, [pc, #220]	; (8002cec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1ef      	bne.n	8002bfa <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002c1a:	7bfb      	ldrb	r3, [r7, #15]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d160      	bne.n	8002ce2 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d111      	bne.n	8002c4a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c26:	4b31      	ldr	r3, [pc, #196]	; (8002cec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002c2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c32:	687a      	ldr	r2, [r7, #4]
 8002c34:	6892      	ldr	r2, [r2, #8]
 8002c36:	0211      	lsls	r1, r2, #8
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	68d2      	ldr	r2, [r2, #12]
 8002c3c:	0912      	lsrs	r2, r2, #4
 8002c3e:	0452      	lsls	r2, r2, #17
 8002c40:	430a      	orrs	r2, r1
 8002c42:	492a      	ldr	r1, [pc, #168]	; (8002cec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	610b      	str	r3, [r1, #16]
 8002c48:	e027      	b.n	8002c9a <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d112      	bne.n	8002c76 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c50:	4b26      	ldr	r3, [pc, #152]	; (8002cec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002c58:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	6892      	ldr	r2, [r2, #8]
 8002c60:	0211      	lsls	r1, r2, #8
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	6912      	ldr	r2, [r2, #16]
 8002c66:	0852      	lsrs	r2, r2, #1
 8002c68:	3a01      	subs	r2, #1
 8002c6a:	0552      	lsls	r2, r2, #21
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	491f      	ldr	r1, [pc, #124]	; (8002cec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	610b      	str	r3, [r1, #16]
 8002c74:	e011      	b.n	8002c9a <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c76:	4b1d      	ldr	r3, [pc, #116]	; (8002cec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c7e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	6892      	ldr	r2, [r2, #8]
 8002c86:	0211      	lsls	r1, r2, #8
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	6952      	ldr	r2, [r2, #20]
 8002c8c:	0852      	lsrs	r2, r2, #1
 8002c8e:	3a01      	subs	r2, #1
 8002c90:	0652      	lsls	r2, r2, #25
 8002c92:	430a      	orrs	r2, r1
 8002c94:	4915      	ldr	r1, [pc, #84]	; (8002cec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c9a:	4b14      	ldr	r3, [pc, #80]	; (8002cec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a13      	ldr	r2, [pc, #76]	; (8002cec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ca0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ca4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca6:	f7fd feab 	bl	8000a00 <HAL_GetTick>
 8002caa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cac:	e009      	b.n	8002cc2 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cae:	f7fd fea7 	bl	8000a00 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d902      	bls.n	8002cc2 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	73fb      	strb	r3, [r7, #15]
          break;
 8002cc0:	e005      	b.n	8002cce <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cc2:	4b0a      	ldr	r3, [pc, #40]	; (8002cec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d0ef      	beq.n	8002cae <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002cce:	7bfb      	ldrb	r3, [r7, #15]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d106      	bne.n	8002ce2 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002cd4:	4b05      	ldr	r3, [pc, #20]	; (8002cec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cd6:	691a      	ldr	r2, [r3, #16]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	4903      	ldr	r1, [pc, #12]	; (8002cec <RCCEx_PLLSAI1_Config+0x1dc>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40021000 	.word	0x40021000

08002cf0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002cfe:	4b68      	ldr	r3, [pc, #416]	; (8002ea0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	f003 0303 	and.w	r3, r3, #3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d018      	beq.n	8002d3c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002d0a:	4b65      	ldr	r3, [pc, #404]	; (8002ea0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	f003 0203 	and.w	r2, r3, #3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d10d      	bne.n	8002d36 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
       ||
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d009      	beq.n	8002d36 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002d22:	4b5f      	ldr	r3, [pc, #380]	; (8002ea0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	091b      	lsrs	r3, r3, #4
 8002d28:	f003 0307 	and.w	r3, r3, #7
 8002d2c:	1c5a      	adds	r2, r3, #1
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
       ||
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d044      	beq.n	8002dc0 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	73fb      	strb	r3, [r7, #15]
 8002d3a:	e041      	b.n	8002dc0 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d00c      	beq.n	8002d5e <RCCEx_PLLSAI2_Config+0x6e>
 8002d44:	2b03      	cmp	r3, #3
 8002d46:	d013      	beq.n	8002d70 <RCCEx_PLLSAI2_Config+0x80>
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d120      	bne.n	8002d8e <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d4c:	4b54      	ldr	r3, [pc, #336]	; (8002ea0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d11d      	bne.n	8002d94 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d5c:	e01a      	b.n	8002d94 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d5e:	4b50      	ldr	r3, [pc, #320]	; (8002ea0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d116      	bne.n	8002d98 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d6e:	e013      	b.n	8002d98 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d70:	4b4b      	ldr	r3, [pc, #300]	; (8002ea0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d10f      	bne.n	8002d9c <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d7c:	4b48      	ldr	r3, [pc, #288]	; (8002ea0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d109      	bne.n	8002d9c <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d8c:	e006      	b.n	8002d9c <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	73fb      	strb	r3, [r7, #15]
      break;
 8002d92:	e004      	b.n	8002d9e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002d94:	bf00      	nop
 8002d96:	e002      	b.n	8002d9e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002d98:	bf00      	nop
 8002d9a:	e000      	b.n	8002d9e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002d9c:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d9e:	7bfb      	ldrb	r3, [r7, #15]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10d      	bne.n	8002dc0 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002da4:	4b3e      	ldr	r3, [pc, #248]	; (8002ea0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6819      	ldr	r1, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	3b01      	subs	r3, #1
 8002db6:	011b      	lsls	r3, r3, #4
 8002db8:	430b      	orrs	r3, r1
 8002dba:	4939      	ldr	r1, [pc, #228]	; (8002ea0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002dc0:	7bfb      	ldrb	r3, [r7, #15]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d167      	bne.n	8002e96 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002dc6:	4b36      	ldr	r3, [pc, #216]	; (8002ea0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a35      	ldr	r2, [pc, #212]	; (8002ea0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002dcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dd2:	f7fd fe15 	bl	8000a00 <HAL_GetTick>
 8002dd6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002dd8:	e009      	b.n	8002dee <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002dda:	f7fd fe11 	bl	8000a00 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d902      	bls.n	8002dee <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	73fb      	strb	r3, [r7, #15]
        break;
 8002dec:	e005      	b.n	8002dfa <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002dee:	4b2c      	ldr	r3, [pc, #176]	; (8002ea0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1ef      	bne.n	8002dda <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002dfa:	7bfb      	ldrb	r3, [r7, #15]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d14a      	bne.n	8002e96 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d111      	bne.n	8002e2a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e06:	4b26      	ldr	r3, [pc, #152]	; (8002ea0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002e0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	6892      	ldr	r2, [r2, #8]
 8002e16:	0211      	lsls	r1, r2, #8
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	68d2      	ldr	r2, [r2, #12]
 8002e1c:	0912      	lsrs	r2, r2, #4
 8002e1e:	0452      	lsls	r2, r2, #17
 8002e20:	430a      	orrs	r2, r1
 8002e22:	491f      	ldr	r1, [pc, #124]	; (8002ea0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e24:	4313      	orrs	r3, r2
 8002e26:	614b      	str	r3, [r1, #20]
 8002e28:	e011      	b.n	8002e4e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e2a:	4b1d      	ldr	r3, [pc, #116]	; (8002ea0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e32:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	6892      	ldr	r2, [r2, #8]
 8002e3a:	0211      	lsls	r1, r2, #8
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	6912      	ldr	r2, [r2, #16]
 8002e40:	0852      	lsrs	r2, r2, #1
 8002e42:	3a01      	subs	r2, #1
 8002e44:	0652      	lsls	r2, r2, #25
 8002e46:	430a      	orrs	r2, r1
 8002e48:	4915      	ldr	r1, [pc, #84]	; (8002ea0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002e4e:	4b14      	ldr	r3, [pc, #80]	; (8002ea0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a13      	ldr	r2, [pc, #76]	; (8002ea0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e58:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e5a:	f7fd fdd1 	bl	8000a00 <HAL_GetTick>
 8002e5e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e60:	e009      	b.n	8002e76 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e62:	f7fd fdcd 	bl	8000a00 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d902      	bls.n	8002e76 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	73fb      	strb	r3, [r7, #15]
          break;
 8002e74:	e005      	b.n	8002e82 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e76:	4b0a      	ldr	r3, [pc, #40]	; (8002ea0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d0ef      	beq.n	8002e62 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002e82:	7bfb      	ldrb	r3, [r7, #15]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d106      	bne.n	8002e96 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002e88:	4b05      	ldr	r3, [pc, #20]	; (8002ea0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e8a:	695a      	ldr	r2, [r3, #20]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	695b      	ldr	r3, [r3, #20]
 8002e90:	4903      	ldr	r1, [pc, #12]	; (8002ea0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40021000 	.word	0x40021000

08002ea4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e049      	b.n	8002f4a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d106      	bne.n	8002ed0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f7fd fce6 	bl	800089c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2202      	movs	r2, #2
 8002ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	3304      	adds	r3, #4
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	4610      	mov	r0, r2
 8002ee4:	f000 f836 	bl	8002f54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3708      	adds	r7, #8
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
	...

08002f54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a40      	ldr	r2, [pc, #256]	; (8003068 <TIM_Base_SetConfig+0x114>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d013      	beq.n	8002f94 <TIM_Base_SetConfig+0x40>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f72:	d00f      	beq.n	8002f94 <TIM_Base_SetConfig+0x40>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a3d      	ldr	r2, [pc, #244]	; (800306c <TIM_Base_SetConfig+0x118>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d00b      	beq.n	8002f94 <TIM_Base_SetConfig+0x40>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a3c      	ldr	r2, [pc, #240]	; (8003070 <TIM_Base_SetConfig+0x11c>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d007      	beq.n	8002f94 <TIM_Base_SetConfig+0x40>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a3b      	ldr	r2, [pc, #236]	; (8003074 <TIM_Base_SetConfig+0x120>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d003      	beq.n	8002f94 <TIM_Base_SetConfig+0x40>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a3a      	ldr	r2, [pc, #232]	; (8003078 <TIM_Base_SetConfig+0x124>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d108      	bne.n	8002fa6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a2f      	ldr	r2, [pc, #188]	; (8003068 <TIM_Base_SetConfig+0x114>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d01f      	beq.n	8002fee <TIM_Base_SetConfig+0x9a>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb4:	d01b      	beq.n	8002fee <TIM_Base_SetConfig+0x9a>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a2c      	ldr	r2, [pc, #176]	; (800306c <TIM_Base_SetConfig+0x118>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d017      	beq.n	8002fee <TIM_Base_SetConfig+0x9a>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a2b      	ldr	r2, [pc, #172]	; (8003070 <TIM_Base_SetConfig+0x11c>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d013      	beq.n	8002fee <TIM_Base_SetConfig+0x9a>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a2a      	ldr	r2, [pc, #168]	; (8003074 <TIM_Base_SetConfig+0x120>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d00f      	beq.n	8002fee <TIM_Base_SetConfig+0x9a>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a29      	ldr	r2, [pc, #164]	; (8003078 <TIM_Base_SetConfig+0x124>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d00b      	beq.n	8002fee <TIM_Base_SetConfig+0x9a>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a28      	ldr	r2, [pc, #160]	; (800307c <TIM_Base_SetConfig+0x128>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d007      	beq.n	8002fee <TIM_Base_SetConfig+0x9a>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a27      	ldr	r2, [pc, #156]	; (8003080 <TIM_Base_SetConfig+0x12c>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d003      	beq.n	8002fee <TIM_Base_SetConfig+0x9a>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a26      	ldr	r2, [pc, #152]	; (8003084 <TIM_Base_SetConfig+0x130>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d108      	bne.n	8003000 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ff4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	4313      	orrs	r3, r2
 800300c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	689a      	ldr	r2, [r3, #8]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a10      	ldr	r2, [pc, #64]	; (8003068 <TIM_Base_SetConfig+0x114>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d00f      	beq.n	800304c <TIM_Base_SetConfig+0xf8>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a12      	ldr	r2, [pc, #72]	; (8003078 <TIM_Base_SetConfig+0x124>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d00b      	beq.n	800304c <TIM_Base_SetConfig+0xf8>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a11      	ldr	r2, [pc, #68]	; (800307c <TIM_Base_SetConfig+0x128>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d007      	beq.n	800304c <TIM_Base_SetConfig+0xf8>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a10      	ldr	r2, [pc, #64]	; (8003080 <TIM_Base_SetConfig+0x12c>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d003      	beq.n	800304c <TIM_Base_SetConfig+0xf8>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a0f      	ldr	r2, [pc, #60]	; (8003084 <TIM_Base_SetConfig+0x130>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d103      	bne.n	8003054 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	691a      	ldr	r2, [r3, #16]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	615a      	str	r2, [r3, #20]
}
 800305a:	bf00      	nop
 800305c:	3714      	adds	r7, #20
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	40012c00 	.word	0x40012c00
 800306c:	40000400 	.word	0x40000400
 8003070:	40000800 	.word	0x40000800
 8003074:	40000c00 	.word	0x40000c00
 8003078:	40013400 	.word	0x40013400
 800307c:	40014000 	.word	0x40014000
 8003080:	40014400 	.word	0x40014400
 8003084:	40014800 	.word	0x40014800

08003088 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003098:	2b01      	cmp	r3, #1
 800309a:	d101      	bne.n	80030a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800309c:	2302      	movs	r3, #2
 800309e:	e068      	b.n	8003172 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2202      	movs	r2, #2
 80030ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a2e      	ldr	r2, [pc, #184]	; (8003180 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d004      	beq.n	80030d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a2d      	ldr	r2, [pc, #180]	; (8003184 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d108      	bne.n	80030e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80030da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a1e      	ldr	r2, [pc, #120]	; (8003180 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d01d      	beq.n	8003146 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003112:	d018      	beq.n	8003146 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a1b      	ldr	r2, [pc, #108]	; (8003188 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d013      	beq.n	8003146 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a1a      	ldr	r2, [pc, #104]	; (800318c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d00e      	beq.n	8003146 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a18      	ldr	r2, [pc, #96]	; (8003190 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d009      	beq.n	8003146 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a13      	ldr	r2, [pc, #76]	; (8003184 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d004      	beq.n	8003146 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a14      	ldr	r2, [pc, #80]	; (8003194 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d10c      	bne.n	8003160 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800314c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	68ba      	ldr	r2, [r7, #8]
 8003154:	4313      	orrs	r3, r2
 8003156:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68ba      	ldr	r2, [r7, #8]
 800315e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3714      	adds	r7, #20
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	40012c00 	.word	0x40012c00
 8003184:	40013400 	.word	0x40013400
 8003188:	40000400 	.word	0x40000400
 800318c:	40000800 	.word	0x40000800
 8003190:	40000c00 	.word	0x40000c00
 8003194:	40014000 	.word	0x40014000

08003198 <__libc_init_array>:
 8003198:	b570      	push	{r4, r5, r6, lr}
 800319a:	4e0d      	ldr	r6, [pc, #52]	; (80031d0 <__libc_init_array+0x38>)
 800319c:	4c0d      	ldr	r4, [pc, #52]	; (80031d4 <__libc_init_array+0x3c>)
 800319e:	1ba4      	subs	r4, r4, r6
 80031a0:	10a4      	asrs	r4, r4, #2
 80031a2:	2500      	movs	r5, #0
 80031a4:	42a5      	cmp	r5, r4
 80031a6:	d109      	bne.n	80031bc <__libc_init_array+0x24>
 80031a8:	4e0b      	ldr	r6, [pc, #44]	; (80031d8 <__libc_init_array+0x40>)
 80031aa:	4c0c      	ldr	r4, [pc, #48]	; (80031dc <__libc_init_array+0x44>)
 80031ac:	f000 f820 	bl	80031f0 <_init>
 80031b0:	1ba4      	subs	r4, r4, r6
 80031b2:	10a4      	asrs	r4, r4, #2
 80031b4:	2500      	movs	r5, #0
 80031b6:	42a5      	cmp	r5, r4
 80031b8:	d105      	bne.n	80031c6 <__libc_init_array+0x2e>
 80031ba:	bd70      	pop	{r4, r5, r6, pc}
 80031bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031c0:	4798      	blx	r3
 80031c2:	3501      	adds	r5, #1
 80031c4:	e7ee      	b.n	80031a4 <__libc_init_array+0xc>
 80031c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031ca:	4798      	blx	r3
 80031cc:	3501      	adds	r5, #1
 80031ce:	e7f2      	b.n	80031b6 <__libc_init_array+0x1e>
 80031d0:	08003248 	.word	0x08003248
 80031d4:	08003248 	.word	0x08003248
 80031d8:	08003248 	.word	0x08003248
 80031dc:	0800324c 	.word	0x0800324c

080031e0 <memset>:
 80031e0:	4402      	add	r2, r0
 80031e2:	4603      	mov	r3, r0
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d100      	bne.n	80031ea <memset+0xa>
 80031e8:	4770      	bx	lr
 80031ea:	f803 1b01 	strb.w	r1, [r3], #1
 80031ee:	e7f9      	b.n	80031e4 <memset+0x4>

080031f0 <_init>:
 80031f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031f2:	bf00      	nop
 80031f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031f6:	bc08      	pop	{r3}
 80031f8:	469e      	mov	lr, r3
 80031fa:	4770      	bx	lr

080031fc <_fini>:
 80031fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031fe:	bf00      	nop
 8003200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003202:	bc08      	pop	{r3}
 8003204:	469e      	mov	lr, r3
 8003206:	4770      	bx	lr
