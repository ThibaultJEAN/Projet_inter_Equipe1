
Projet_inter_Buck_Equipe1_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b48  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08006cd0  08006cd0  00016cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d18  08006d18  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006d18  08006d18  00016d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d20  08006d20  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d20  08006d20  00016d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d24  08006d24  00016d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006d28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000214  2000000c  08006d34  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08006d34  00020220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012fc3  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000214e  00000000  00000000  00032fff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012a8  00000000  00000000  00035150  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011a0  00000000  00000000  000363f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002808b  00000000  00000000  00037598  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e18d  00000000  00000000  0005f623  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001030e8  00000000  00000000  0006d7b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00170898  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005198  00000000  00000000  00170914  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006cb8 	.word	0x08006cb8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08006cb8 	.word	0x08006cb8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2iz>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d215      	bcs.n	800099a <__aeabi_d2iz+0x36>
 800096e:	d511      	bpl.n	8000994 <__aeabi_d2iz+0x30>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d912      	bls.n	80009a0 <__aeabi_d2iz+0x3c>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800098a:	fa23 f002 	lsr.w	r0, r3, r2
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d105      	bne.n	80009ac <__aeabi_d2iz+0x48>
 80009a0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	bf08      	it	eq
 80009a6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <__aeabi_uldivmod>:
 80009b4:	b953      	cbnz	r3, 80009cc <__aeabi_uldivmod+0x18>
 80009b6:	b94a      	cbnz	r2, 80009cc <__aeabi_uldivmod+0x18>
 80009b8:	2900      	cmp	r1, #0
 80009ba:	bf08      	it	eq
 80009bc:	2800      	cmpeq	r0, #0
 80009be:	bf1c      	itt	ne
 80009c0:	f04f 31ff 	movne.w	r1, #4294967295
 80009c4:	f04f 30ff 	movne.w	r0, #4294967295
 80009c8:	f000 b972 	b.w	8000cb0 <__aeabi_idiv0>
 80009cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009d4:	f000 f806 	bl	80009e4 <__udivmoddi4>
 80009d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e0:	b004      	add	sp, #16
 80009e2:	4770      	bx	lr

080009e4 <__udivmoddi4>:
 80009e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e8:	9e08      	ldr	r6, [sp, #32]
 80009ea:	4604      	mov	r4, r0
 80009ec:	4688      	mov	r8, r1
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d14b      	bne.n	8000a8a <__udivmoddi4+0xa6>
 80009f2:	428a      	cmp	r2, r1
 80009f4:	4615      	mov	r5, r2
 80009f6:	d967      	bls.n	8000ac8 <__udivmoddi4+0xe4>
 80009f8:	fab2 f282 	clz	r2, r2
 80009fc:	b14a      	cbz	r2, 8000a12 <__udivmoddi4+0x2e>
 80009fe:	f1c2 0720 	rsb	r7, r2, #32
 8000a02:	fa01 f302 	lsl.w	r3, r1, r2
 8000a06:	fa20 f707 	lsr.w	r7, r0, r7
 8000a0a:	4095      	lsls	r5, r2
 8000a0c:	ea47 0803 	orr.w	r8, r7, r3
 8000a10:	4094      	lsls	r4, r2
 8000a12:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a16:	0c23      	lsrs	r3, r4, #16
 8000a18:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a1c:	fa1f fc85 	uxth.w	ip, r5
 8000a20:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a24:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a28:	fb07 f10c 	mul.w	r1, r7, ip
 8000a2c:	4299      	cmp	r1, r3
 8000a2e:	d909      	bls.n	8000a44 <__udivmoddi4+0x60>
 8000a30:	18eb      	adds	r3, r5, r3
 8000a32:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a36:	f080 811b 	bcs.w	8000c70 <__udivmoddi4+0x28c>
 8000a3a:	4299      	cmp	r1, r3
 8000a3c:	f240 8118 	bls.w	8000c70 <__udivmoddi4+0x28c>
 8000a40:	3f02      	subs	r7, #2
 8000a42:	442b      	add	r3, r5
 8000a44:	1a5b      	subs	r3, r3, r1
 8000a46:	b2a4      	uxth	r4, r4
 8000a48:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a4c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a54:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a58:	45a4      	cmp	ip, r4
 8000a5a:	d909      	bls.n	8000a70 <__udivmoddi4+0x8c>
 8000a5c:	192c      	adds	r4, r5, r4
 8000a5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a62:	f080 8107 	bcs.w	8000c74 <__udivmoddi4+0x290>
 8000a66:	45a4      	cmp	ip, r4
 8000a68:	f240 8104 	bls.w	8000c74 <__udivmoddi4+0x290>
 8000a6c:	3802      	subs	r0, #2
 8000a6e:	442c      	add	r4, r5
 8000a70:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000a74:	eba4 040c 	sub.w	r4, r4, ip
 8000a78:	2700      	movs	r7, #0
 8000a7a:	b11e      	cbz	r6, 8000a84 <__udivmoddi4+0xa0>
 8000a7c:	40d4      	lsrs	r4, r2
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e9c6 4300 	strd	r4, r3, [r6]
 8000a84:	4639      	mov	r1, r7
 8000a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8a:	428b      	cmp	r3, r1
 8000a8c:	d909      	bls.n	8000aa2 <__udivmoddi4+0xbe>
 8000a8e:	2e00      	cmp	r6, #0
 8000a90:	f000 80eb 	beq.w	8000c6a <__udivmoddi4+0x286>
 8000a94:	2700      	movs	r7, #0
 8000a96:	e9c6 0100 	strd	r0, r1, [r6]
 8000a9a:	4638      	mov	r0, r7
 8000a9c:	4639      	mov	r1, r7
 8000a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa2:	fab3 f783 	clz	r7, r3
 8000aa6:	2f00      	cmp	r7, #0
 8000aa8:	d147      	bne.n	8000b3a <__udivmoddi4+0x156>
 8000aaa:	428b      	cmp	r3, r1
 8000aac:	d302      	bcc.n	8000ab4 <__udivmoddi4+0xd0>
 8000aae:	4282      	cmp	r2, r0
 8000ab0:	f200 80fa 	bhi.w	8000ca8 <__udivmoddi4+0x2c4>
 8000ab4:	1a84      	subs	r4, r0, r2
 8000ab6:	eb61 0303 	sbc.w	r3, r1, r3
 8000aba:	2001      	movs	r0, #1
 8000abc:	4698      	mov	r8, r3
 8000abe:	2e00      	cmp	r6, #0
 8000ac0:	d0e0      	beq.n	8000a84 <__udivmoddi4+0xa0>
 8000ac2:	e9c6 4800 	strd	r4, r8, [r6]
 8000ac6:	e7dd      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000ac8:	b902      	cbnz	r2, 8000acc <__udivmoddi4+0xe8>
 8000aca:	deff      	udf	#255	; 0xff
 8000acc:	fab2 f282 	clz	r2, r2
 8000ad0:	2a00      	cmp	r2, #0
 8000ad2:	f040 808f 	bne.w	8000bf4 <__udivmoddi4+0x210>
 8000ad6:	1b49      	subs	r1, r1, r5
 8000ad8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000adc:	fa1f f885 	uxth.w	r8, r5
 8000ae0:	2701      	movs	r7, #1
 8000ae2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000ae6:	0c23      	lsrs	r3, r4, #16
 8000ae8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000aec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000af0:	fb08 f10c 	mul.w	r1, r8, ip
 8000af4:	4299      	cmp	r1, r3
 8000af6:	d907      	bls.n	8000b08 <__udivmoddi4+0x124>
 8000af8:	18eb      	adds	r3, r5, r3
 8000afa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000afe:	d202      	bcs.n	8000b06 <__udivmoddi4+0x122>
 8000b00:	4299      	cmp	r1, r3
 8000b02:	f200 80cd 	bhi.w	8000ca0 <__udivmoddi4+0x2bc>
 8000b06:	4684      	mov	ip, r0
 8000b08:	1a59      	subs	r1, r3, r1
 8000b0a:	b2a3      	uxth	r3, r4
 8000b0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b10:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b14:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b18:	fb08 f800 	mul.w	r8, r8, r0
 8000b1c:	45a0      	cmp	r8, r4
 8000b1e:	d907      	bls.n	8000b30 <__udivmoddi4+0x14c>
 8000b20:	192c      	adds	r4, r5, r4
 8000b22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b26:	d202      	bcs.n	8000b2e <__udivmoddi4+0x14a>
 8000b28:	45a0      	cmp	r8, r4
 8000b2a:	f200 80b6 	bhi.w	8000c9a <__udivmoddi4+0x2b6>
 8000b2e:	4618      	mov	r0, r3
 8000b30:	eba4 0408 	sub.w	r4, r4, r8
 8000b34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b38:	e79f      	b.n	8000a7a <__udivmoddi4+0x96>
 8000b3a:	f1c7 0c20 	rsb	ip, r7, #32
 8000b3e:	40bb      	lsls	r3, r7
 8000b40:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b44:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b48:	fa01 f407 	lsl.w	r4, r1, r7
 8000b4c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000b50:	fa21 f30c 	lsr.w	r3, r1, ip
 8000b54:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000b58:	4325      	orrs	r5, r4
 8000b5a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000b5e:	0c2c      	lsrs	r4, r5, #16
 8000b60:	fb08 3319 	mls	r3, r8, r9, r3
 8000b64:	fa1f fa8e 	uxth.w	sl, lr
 8000b68:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000b6c:	fb09 f40a 	mul.w	r4, r9, sl
 8000b70:	429c      	cmp	r4, r3
 8000b72:	fa02 f207 	lsl.w	r2, r2, r7
 8000b76:	fa00 f107 	lsl.w	r1, r0, r7
 8000b7a:	d90b      	bls.n	8000b94 <__udivmoddi4+0x1b0>
 8000b7c:	eb1e 0303 	adds.w	r3, lr, r3
 8000b80:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b84:	f080 8087 	bcs.w	8000c96 <__udivmoddi4+0x2b2>
 8000b88:	429c      	cmp	r4, r3
 8000b8a:	f240 8084 	bls.w	8000c96 <__udivmoddi4+0x2b2>
 8000b8e:	f1a9 0902 	sub.w	r9, r9, #2
 8000b92:	4473      	add	r3, lr
 8000b94:	1b1b      	subs	r3, r3, r4
 8000b96:	b2ad      	uxth	r5, r5
 8000b98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000ba0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ba4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ba8:	45a2      	cmp	sl, r4
 8000baa:	d908      	bls.n	8000bbe <__udivmoddi4+0x1da>
 8000bac:	eb1e 0404 	adds.w	r4, lr, r4
 8000bb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bb4:	d26b      	bcs.n	8000c8e <__udivmoddi4+0x2aa>
 8000bb6:	45a2      	cmp	sl, r4
 8000bb8:	d969      	bls.n	8000c8e <__udivmoddi4+0x2aa>
 8000bba:	3802      	subs	r0, #2
 8000bbc:	4474      	add	r4, lr
 8000bbe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000bc2:	fba0 8902 	umull	r8, r9, r0, r2
 8000bc6:	eba4 040a 	sub.w	r4, r4, sl
 8000bca:	454c      	cmp	r4, r9
 8000bcc:	46c2      	mov	sl, r8
 8000bce:	464b      	mov	r3, r9
 8000bd0:	d354      	bcc.n	8000c7c <__udivmoddi4+0x298>
 8000bd2:	d051      	beq.n	8000c78 <__udivmoddi4+0x294>
 8000bd4:	2e00      	cmp	r6, #0
 8000bd6:	d069      	beq.n	8000cac <__udivmoddi4+0x2c8>
 8000bd8:	ebb1 050a 	subs.w	r5, r1, sl
 8000bdc:	eb64 0403 	sbc.w	r4, r4, r3
 8000be0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000be4:	40fd      	lsrs	r5, r7
 8000be6:	40fc      	lsrs	r4, r7
 8000be8:	ea4c 0505 	orr.w	r5, ip, r5
 8000bec:	e9c6 5400 	strd	r5, r4, [r6]
 8000bf0:	2700      	movs	r7, #0
 8000bf2:	e747      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000bf4:	f1c2 0320 	rsb	r3, r2, #32
 8000bf8:	fa20 f703 	lsr.w	r7, r0, r3
 8000bfc:	4095      	lsls	r5, r2
 8000bfe:	fa01 f002 	lsl.w	r0, r1, r2
 8000c02:	fa21 f303 	lsr.w	r3, r1, r3
 8000c06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0a:	4338      	orrs	r0, r7
 8000c0c:	0c01      	lsrs	r1, r0, #16
 8000c0e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c12:	fa1f f885 	uxth.w	r8, r5
 8000c16:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c1e:	fb07 f308 	mul.w	r3, r7, r8
 8000c22:	428b      	cmp	r3, r1
 8000c24:	fa04 f402 	lsl.w	r4, r4, r2
 8000c28:	d907      	bls.n	8000c3a <__udivmoddi4+0x256>
 8000c2a:	1869      	adds	r1, r5, r1
 8000c2c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c30:	d22f      	bcs.n	8000c92 <__udivmoddi4+0x2ae>
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d92d      	bls.n	8000c92 <__udivmoddi4+0x2ae>
 8000c36:	3f02      	subs	r7, #2
 8000c38:	4429      	add	r1, r5
 8000c3a:	1acb      	subs	r3, r1, r3
 8000c3c:	b281      	uxth	r1, r0
 8000c3e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c42:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c46:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c4a:	fb00 f308 	mul.w	r3, r0, r8
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d907      	bls.n	8000c62 <__udivmoddi4+0x27e>
 8000c52:	1869      	adds	r1, r5, r1
 8000c54:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c58:	d217      	bcs.n	8000c8a <__udivmoddi4+0x2a6>
 8000c5a:	428b      	cmp	r3, r1
 8000c5c:	d915      	bls.n	8000c8a <__udivmoddi4+0x2a6>
 8000c5e:	3802      	subs	r0, #2
 8000c60:	4429      	add	r1, r5
 8000c62:	1ac9      	subs	r1, r1, r3
 8000c64:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000c68:	e73b      	b.n	8000ae2 <__udivmoddi4+0xfe>
 8000c6a:	4637      	mov	r7, r6
 8000c6c:	4630      	mov	r0, r6
 8000c6e:	e709      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000c70:	4607      	mov	r7, r0
 8000c72:	e6e7      	b.n	8000a44 <__udivmoddi4+0x60>
 8000c74:	4618      	mov	r0, r3
 8000c76:	e6fb      	b.n	8000a70 <__udivmoddi4+0x8c>
 8000c78:	4541      	cmp	r1, r8
 8000c7a:	d2ab      	bcs.n	8000bd4 <__udivmoddi4+0x1f0>
 8000c7c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000c80:	eb69 020e 	sbc.w	r2, r9, lr
 8000c84:	3801      	subs	r0, #1
 8000c86:	4613      	mov	r3, r2
 8000c88:	e7a4      	b.n	8000bd4 <__udivmoddi4+0x1f0>
 8000c8a:	4660      	mov	r0, ip
 8000c8c:	e7e9      	b.n	8000c62 <__udivmoddi4+0x27e>
 8000c8e:	4618      	mov	r0, r3
 8000c90:	e795      	b.n	8000bbe <__udivmoddi4+0x1da>
 8000c92:	4667      	mov	r7, ip
 8000c94:	e7d1      	b.n	8000c3a <__udivmoddi4+0x256>
 8000c96:	4681      	mov	r9, r0
 8000c98:	e77c      	b.n	8000b94 <__udivmoddi4+0x1b0>
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	442c      	add	r4, r5
 8000c9e:	e747      	b.n	8000b30 <__udivmoddi4+0x14c>
 8000ca0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ca4:	442b      	add	r3, r5
 8000ca6:	e72f      	b.n	8000b08 <__udivmoddi4+0x124>
 8000ca8:	4638      	mov	r0, r7
 8000caa:	e708      	b.n	8000abe <__udivmoddi4+0xda>
 8000cac:	4637      	mov	r7, r6
 8000cae:	e6e9      	b.n	8000a84 <__udivmoddi4+0xa0>

08000cb0 <__aeabi_idiv0>:
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop

08000cb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cb8:	f000 fdd2 	bl	8001860 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cbc:	f000 f82e 	bl	8000d1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cc0:	f000 fa96 	bl	80011f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cc4:	f000 fa76 	bl	80011b4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000cc8:	f000 fa44 	bl	8001154 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000ccc:	f000 f8ae 	bl	8000e2c <MX_ADC1_Init>
  MX_TIM1_Init();
 8000cd0:	f000 f946 	bl	8000f60 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000cd4:	f000 f9f0 	bl	80010b8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* Bloc Initialisation ADC */
  HAL_ADC_Start_DMA(&hadc1,(uint32_t *)&ADC_buffer, 3);
 8000cd8:	2203      	movs	r2, #3
 8000cda:	490b      	ldr	r1, [pc, #44]	; (8000d08 <main+0x54>)
 8000cdc:	480b      	ldr	r0, [pc, #44]	; (8000d0c <main+0x58>)
 8000cde:	f001 fa97 	bl	8002210 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim2);
 8000ce2:	480b      	ldr	r0, [pc, #44]	; (8000d10 <main+0x5c>)
 8000ce4:	f004 f944 	bl	8004f70 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_IT(&hadc1);
 8000ce8:	4808      	ldr	r0, [pc, #32]	; (8000d0c <main+0x58>)
 8000cea:	f001 f95f 	bl	8001fac <HAL_ADC_Start_IT>

  /* Bloc Initialisation PWM */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4808      	ldr	r0, [pc, #32]	; (8000d14 <main+0x60>)
 8000cf2:	f004 fa0f 	bl	8005114 <HAL_TIM_PWM_Start>
  Reg_Mode = REG_MODE_CV;
 8000cf6:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <main+0x64>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]

  /* Initialiser une valeur */
  SetVout(24.0);
 8000cfc:	eeb3 0a08 	vmov.f32	s0, #56	; 0x41c00000  24.0
 8000d00:	f000 fb3a 	bl	8001378 <SetVout>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <main+0x50>
 8000d06:	bf00      	nop
 8000d08:	20000040 	.word	0x20000040
 8000d0c:	20000058 	.word	0x20000058
 8000d10:	20000150 	.word	0x20000150
 8000d14:	20000104 	.word	0x20000104
 8000d18:	20000038 	.word	0x20000038

08000d1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b0b8      	sub	sp, #224	; 0xe0
 8000d20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d22:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d26:	2244      	movs	r2, #68	; 0x44
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f005 ffbc 	bl	8006ca8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d30:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d40:	463b      	mov	r3, r7
 8000d42:	2288      	movs	r2, #136	; 0x88
 8000d44:	2100      	movs	r1, #0
 8000d46:	4618      	mov	r0, r3
 8000d48:	f005 ffae 	bl	8006ca8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d5a:	2310      	movs	r3, #16
 8000d5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d60:	2302      	movs	r3, #2
 8000d62:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d66:	2302      	movs	r3, #2
 8000d68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000d72:	230a      	movs	r3, #10
 8000d74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000d78:	2307      	movs	r3, #7
 8000d7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d84:	2302      	movs	r3, #2
 8000d86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d8a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f002 fdfc 	bl	800398c <HAL_RCC_OscConfig>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000d9a:	f000 fb73 	bl	8001484 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d9e:	230f      	movs	r3, #15
 8000da0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000da4:	2303      	movs	r3, #3
 8000da6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000daa:	2300      	movs	r3, #0
 8000dac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000db0:	2300      	movs	r3, #0
 8000db2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000db6:	2300      	movs	r3, #0
 8000db8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000dbc:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000dc0:	2104      	movs	r1, #4
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f003 f9c8 	bl	8004158 <HAL_RCC_ClockConfig>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000dce:	f000 fb59 	bl	8001484 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 8000dd2:	f244 0302 	movw	r3, #16386	; 0x4002
 8000dd6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000ddc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000de0:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000de2:	2302      	movs	r3, #2
 8000de4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000de6:	2301      	movs	r3, #1
 8000de8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000dea:	2308      	movs	r3, #8
 8000dec:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000dee:	2307      	movs	r3, #7
 8000df0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000df2:	2302      	movs	r3, #2
 8000df4:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000df6:	2302      	movs	r3, #2
 8000df8:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000dfa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000dfe:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e00:	463b      	mov	r3, r7
 8000e02:	4618      	mov	r0, r3
 8000e04:	f003 fbac 	bl	8004560 <HAL_RCCEx_PeriphCLKConfig>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000e0e:	f000 fb39 	bl	8001484 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e12:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e16:	f002 fd63 	bl	80038e0 <HAL_PWREx_ControlVoltageScaling>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <SystemClock_Config+0x108>
  {
    Error_Handler();
 8000e20:	f000 fb30 	bl	8001484 <Error_Handler>
  }
}
 8000e24:	bf00      	nop
 8000e26:	37e0      	adds	r7, #224	; 0xe0
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08a      	sub	sp, #40	; 0x28
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e32:	f107 031c 	add.w	r3, r7, #28
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	605a      	str	r2, [r3, #4]
 8000e3c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e3e:	1d3b      	adds	r3, r7, #4
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]
 8000e4c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e4e:	4b3f      	ldr	r3, [pc, #252]	; (8000f4c <MX_ADC1_Init+0x120>)
 8000e50:	4a3f      	ldr	r2, [pc, #252]	; (8000f50 <MX_ADC1_Init+0x124>)
 8000e52:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 8000e54:	4b3d      	ldr	r3, [pc, #244]	; (8000f4c <MX_ADC1_Init+0x120>)
 8000e56:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000e5a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e5c:	4b3b      	ldr	r3, [pc, #236]	; (8000f4c <MX_ADC1_Init+0x120>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e62:	4b3a      	ldr	r3, [pc, #232]	; (8000f4c <MX_ADC1_Init+0x120>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e68:	4b38      	ldr	r3, [pc, #224]	; (8000f4c <MX_ADC1_Init+0x120>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000e6e:	4b37      	ldr	r3, [pc, #220]	; (8000f4c <MX_ADC1_Init+0x120>)
 8000e70:	2208      	movs	r2, #8
 8000e72:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e74:	4b35      	ldr	r3, [pc, #212]	; (8000f4c <MX_ADC1_Init+0x120>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e7a:	4b34      	ldr	r3, [pc, #208]	; (8000f4c <MX_ADC1_Init+0x120>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8000e80:	4b32      	ldr	r3, [pc, #200]	; (8000f4c <MX_ADC1_Init+0x120>)
 8000e82:	2203      	movs	r2, #3
 8000e84:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e86:	4b31      	ldr	r3, [pc, #196]	; (8000f4c <MX_ADC1_Init+0x120>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8000e8e:	4b2f      	ldr	r3, [pc, #188]	; (8000f4c <MX_ADC1_Init+0x120>)
 8000e90:	f44f 62d8 	mov.w	r2, #1728	; 0x6c0
 8000e94:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000e96:	4b2d      	ldr	r3, [pc, #180]	; (8000f4c <MX_ADC1_Init+0x120>)
 8000e98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e9e:	4b2b      	ldr	r3, [pc, #172]	; (8000f4c <MX_ADC1_Init+0x120>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000ea6:	4b29      	ldr	r3, [pc, #164]	; (8000f4c <MX_ADC1_Init+0x120>)
 8000ea8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000eac:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000eae:	4b27      	ldr	r3, [pc, #156]	; (8000f4c <MX_ADC1_Init+0x120>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000eb6:	4825      	ldr	r0, [pc, #148]	; (8000f4c <MX_ADC1_Init+0x120>)
 8000eb8:	f000 ff24 	bl	8001d04 <HAL_ADC_Init>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8000ec2:	f000 fadf 	bl	8001484 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000eca:	f107 031c 	add.w	r3, r7, #28
 8000ece:	4619      	mov	r1, r3
 8000ed0:	481e      	ldr	r0, [pc, #120]	; (8000f4c <MX_ADC1_Init+0x120>)
 8000ed2:	f001 ff67 	bl	8002da4 <HAL_ADCEx_MultiModeConfigChannel>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000edc:	f000 fad2 	bl	8001484 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ee0:	4b1c      	ldr	r3, [pc, #112]	; (8000f54 <MX_ADC1_Init+0x128>)
 8000ee2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ee4:	2306      	movs	r3, #6
 8000ee6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 8000ee8:	2305      	movs	r3, #5
 8000eea:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000eec:	237f      	movs	r3, #127	; 0x7f
 8000eee:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ef0:	2304      	movs	r3, #4
 8000ef2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ef8:	1d3b      	adds	r3, r7, #4
 8000efa:	4619      	mov	r1, r3
 8000efc:	4813      	ldr	r0, [pc, #76]	; (8000f4c <MX_ADC1_Init+0x120>)
 8000efe:	f001 fa4f 	bl	80023a0 <HAL_ADC_ConfigChannel>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000f08:	f000 fabc 	bl	8001484 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <MX_ADC1_Init+0x12c>)
 8000f0e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000f10:	230c      	movs	r3, #12
 8000f12:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f14:	1d3b      	adds	r3, r7, #4
 8000f16:	4619      	mov	r1, r3
 8000f18:	480c      	ldr	r0, [pc, #48]	; (8000f4c <MX_ADC1_Init+0x120>)
 8000f1a:	f001 fa41 	bl	80023a0 <HAL_ADC_ConfigChannel>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8000f24:	f000 faae 	bl	8001484 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000f28:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <MX_ADC1_Init+0x130>)
 8000f2a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000f2c:	2312      	movs	r3, #18
 8000f2e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f30:	1d3b      	adds	r3, r7, #4
 8000f32:	4619      	mov	r1, r3
 8000f34:	4805      	ldr	r0, [pc, #20]	; (8000f4c <MX_ADC1_Init+0x120>)
 8000f36:	f001 fa33 	bl	80023a0 <HAL_ADC_ConfigChannel>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8000f40:	f000 faa0 	bl	8001484 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f44:	bf00      	nop
 8000f46:	3728      	adds	r7, #40	; 0x28
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20000058 	.word	0x20000058
 8000f50:	50040000 	.word	0x50040000
 8000f54:	04300002 	.word	0x04300002
 8000f58:	08600004 	.word	0x08600004
 8000f5c:	0c900008 	.word	0x0c900008

08000f60 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b09a      	sub	sp, #104	; 0x68
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f66:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	609a      	str	r2, [r3, #8]
 8000f72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f74:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f80:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
 8000f90:	615a      	str	r2, [r3, #20]
 8000f92:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f94:	1d3b      	adds	r3, r7, #4
 8000f96:	222c      	movs	r2, #44	; 0x2c
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f005 fe84 	bl	8006ca8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */
  htim1.Init.Period = 80000000UL/F_PWM;
 8000fa0:	4b43      	ldr	r3, [pc, #268]	; (80010b0 <MX_TIM1_Init+0x150>)
 8000fa2:	f240 422a 	movw	r2, #1066	; 0x42a
 8000fa6:	60da      	str	r2, [r3, #12]

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fa8:	4b41      	ldr	r3, [pc, #260]	; (80010b0 <MX_TIM1_Init+0x150>)
 8000faa:	4a42      	ldr	r2, [pc, #264]	; (80010b4 <MX_TIM1_Init+0x154>)
 8000fac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000fae:	4b40      	ldr	r3, [pc, #256]	; (80010b0 <MX_TIM1_Init+0x150>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb4:	4b3e      	ldr	r3, [pc, #248]	; (80010b0 <MX_TIM1_Init+0x150>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]
  //htim1.Init.Period = 65535;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fba:	4b3d      	ldr	r3, [pc, #244]	; (80010b0 <MX_TIM1_Init+0x150>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fc0:	4b3b      	ldr	r3, [pc, #236]	; (80010b0 <MX_TIM1_Init+0x150>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fc6:	4b3a      	ldr	r3, [pc, #232]	; (80010b0 <MX_TIM1_Init+0x150>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fcc:	4838      	ldr	r0, [pc, #224]	; (80010b0 <MX_TIM1_Init+0x150>)
 8000fce:	f003 ff77 	bl	8004ec0 <HAL_TIM_Base_Init>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000fd8:	f000 fa54 	bl	8001484 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000fe2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4831      	ldr	r0, [pc, #196]	; (80010b0 <MX_TIM1_Init+0x150>)
 8000fea:	f004 fbc9 	bl	8005780 <HAL_TIM_ConfigClockSource>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000ff4:	f000 fa46 	bl	8001484 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ff8:	482d      	ldr	r0, [pc, #180]	; (80010b0 <MX_TIM1_Init+0x150>)
 8000ffa:	f004 f829 	bl	8005050 <HAL_TIM_PWM_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001004:	f000 fa3e 	bl	8001484 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001008:	2300      	movs	r3, #0
 800100a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800100c:	2300      	movs	r3, #0
 800100e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001010:	2300      	movs	r3, #0
 8001012:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001014:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001018:	4619      	mov	r1, r3
 800101a:	4825      	ldr	r0, [pc, #148]	; (80010b0 <MX_TIM1_Init+0x150>)
 800101c:	f005 f8c2 	bl	80061a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001026:	f000 fa2d 	bl	8001484 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800102a:	2360      	movs	r3, #96	; 0x60
 800102c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001032:	2300      	movs	r3, #0
 8001034:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001036:	2300      	movs	r3, #0
 8001038:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800103a:	2300      	movs	r3, #0
 800103c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800103e:	2300      	movs	r3, #0
 8001040:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001042:	2300      	movs	r3, #0
 8001044:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001046:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800104a:	2200      	movs	r2, #0
 800104c:	4619      	mov	r1, r3
 800104e:	4818      	ldr	r0, [pc, #96]	; (80010b0 <MX_TIM1_Init+0x150>)
 8001050:	f004 fa86 	bl	8005560 <HAL_TIM_PWM_ConfigChannel>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800105a:	f000 fa13 	bl	8001484 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800105e:	2300      	movs	r3, #0
 8001060:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001062:	2300      	movs	r3, #0
 8001064:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001072:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001076:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800107c:	2300      	movs	r3, #0
 800107e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001080:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800108a:	2300      	movs	r3, #0
 800108c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	4619      	mov	r1, r3
 8001092:	4807      	ldr	r0, [pc, #28]	; (80010b0 <MX_TIM1_Init+0x150>)
 8001094:	f005 f90e 	bl	80062b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800109e:	f000 f9f1 	bl	8001484 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010a2:	4803      	ldr	r0, [pc, #12]	; (80010b0 <MX_TIM1_Init+0x150>)
 80010a4:	f000 fac0 	bl	8001628 <HAL_TIM_MspPostInit>

}
 80010a8:	bf00      	nop
 80010aa:	3768      	adds	r7, #104	; 0x68
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000104 	.word	0x20000104
 80010b4:	40012c00 	.word	0x40012c00

080010b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b088      	sub	sp, #32
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010be:	f107 0310 	add.w	r3, r7, #16
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]
 80010ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */
  htim2.Init.Period = 80000000UL/(F_ACQ);
 80010d6:	4b1e      	ldr	r3, [pc, #120]	; (8001150 <MX_TIM2_Init+0x98>)
 80010d8:	f642 12aa 	movw	r2, #10666	; 0x29aa
 80010dc:	60da      	str	r2, [r3, #12]
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010de:	4b1c      	ldr	r3, [pc, #112]	; (8001150 <MX_TIM2_Init+0x98>)
 80010e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80010e6:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <MX_TIM2_Init+0x98>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ec:	4b18      	ldr	r3, [pc, #96]	; (8001150 <MX_TIM2_Init+0x98>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  //htim2.Init.Period = 999;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f2:	4b17      	ldr	r3, [pc, #92]	; (8001150 <MX_TIM2_Init+0x98>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f8:	4b15      	ldr	r3, [pc, #84]	; (8001150 <MX_TIM2_Init+0x98>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010fe:	4814      	ldr	r0, [pc, #80]	; (8001150 <MX_TIM2_Init+0x98>)
 8001100:	f003 fede 	bl	8004ec0 <HAL_TIM_Base_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800110a:	f000 f9bb 	bl	8001484 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800110e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001112:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001114:	f107 0310 	add.w	r3, r7, #16
 8001118:	4619      	mov	r1, r3
 800111a:	480d      	ldr	r0, [pc, #52]	; (8001150 <MX_TIM2_Init+0x98>)
 800111c:	f004 fb30 	bl	8005780 <HAL_TIM_ConfigClockSource>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001126:	f000 f9ad 	bl	8001484 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800112a:	2320      	movs	r3, #32
 800112c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800112e:	2380      	movs	r3, #128	; 0x80
 8001130:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	4619      	mov	r1, r3
 8001136:	4806      	ldr	r0, [pc, #24]	; (8001150 <MX_TIM2_Init+0x98>)
 8001138:	f005 f834 	bl	80061a4 <HAL_TIMEx_MasterConfigSynchronization>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001142:	f000 f99f 	bl	8001484 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001146:	bf00      	nop
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000150 	.word	0x20000150

08001154 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001158:	4b14      	ldr	r3, [pc, #80]	; (80011ac <MX_USART2_UART_Init+0x58>)
 800115a:	4a15      	ldr	r2, [pc, #84]	; (80011b0 <MX_USART2_UART_Init+0x5c>)
 800115c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800115e:	4b13      	ldr	r3, [pc, #76]	; (80011ac <MX_USART2_UART_Init+0x58>)
 8001160:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001164:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001166:	4b11      	ldr	r3, [pc, #68]	; (80011ac <MX_USART2_UART_Init+0x58>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800116c:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <MX_USART2_UART_Init+0x58>)
 800116e:	2200      	movs	r2, #0
 8001170:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001172:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <MX_USART2_UART_Init+0x58>)
 8001174:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001178:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800117a:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <MX_USART2_UART_Init+0x58>)
 800117c:	220c      	movs	r2, #12
 800117e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001180:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <MX_USART2_UART_Init+0x58>)
 8001182:	2200      	movs	r2, #0
 8001184:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001186:	4b09      	ldr	r3, [pc, #36]	; (80011ac <MX_USART2_UART_Init+0x58>)
 8001188:	2200      	movs	r2, #0
 800118a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800118c:	4b07      	ldr	r3, [pc, #28]	; (80011ac <MX_USART2_UART_Init+0x58>)
 800118e:	2200      	movs	r2, #0
 8001190:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001192:	4b06      	ldr	r3, [pc, #24]	; (80011ac <MX_USART2_UART_Init+0x58>)
 8001194:	2200      	movs	r2, #0
 8001196:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001198:	4804      	ldr	r0, [pc, #16]	; (80011ac <MX_USART2_UART_Init+0x58>)
 800119a:	f005 f927 	bl	80063ec <HAL_UART_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
 80011a4:	f000 f96e 	bl	8001484 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	2000019c 	.word	0x2000019c
 80011b0:	40004400 	.word	0x40004400

080011b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011ba:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <MX_DMA_Init+0x38>)
 80011bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011be:	4a0b      	ldr	r2, [pc, #44]	; (80011ec <MX_DMA_Init+0x38>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	6493      	str	r3, [r2, #72]	; 0x48
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <MX_DMA_Init+0x38>)
 80011c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2100      	movs	r1, #0
 80011d6:	200b      	movs	r0, #11
 80011d8:	f001 ff6b 	bl	80030b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80011dc:	200b      	movs	r0, #11
 80011de:	f001 ff84 	bl	80030ea <HAL_NVIC_EnableIRQ>

}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40021000 	.word	0x40021000

080011f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08a      	sub	sp, #40	; 0x28
 80011f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
 8001204:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001206:	4b2b      	ldr	r3, [pc, #172]	; (80012b4 <MX_GPIO_Init+0xc4>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120a:	4a2a      	ldr	r2, [pc, #168]	; (80012b4 <MX_GPIO_Init+0xc4>)
 800120c:	f043 0304 	orr.w	r3, r3, #4
 8001210:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001212:	4b28      	ldr	r3, [pc, #160]	; (80012b4 <MX_GPIO_Init+0xc4>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001216:	f003 0304 	and.w	r3, r3, #4
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800121e:	4b25      	ldr	r3, [pc, #148]	; (80012b4 <MX_GPIO_Init+0xc4>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001222:	4a24      	ldr	r2, [pc, #144]	; (80012b4 <MX_GPIO_Init+0xc4>)
 8001224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001228:	64d3      	str	r3, [r2, #76]	; 0x4c
 800122a:	4b22      	ldr	r3, [pc, #136]	; (80012b4 <MX_GPIO_Init+0xc4>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001236:	4b1f      	ldr	r3, [pc, #124]	; (80012b4 <MX_GPIO_Init+0xc4>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123a:	4a1e      	ldr	r2, [pc, #120]	; (80012b4 <MX_GPIO_Init+0xc4>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001242:	4b1c      	ldr	r3, [pc, #112]	; (80012b4 <MX_GPIO_Init+0xc4>)
 8001244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800124e:	4b19      	ldr	r3, [pc, #100]	; (80012b4 <MX_GPIO_Init+0xc4>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001252:	4a18      	ldr	r2, [pc, #96]	; (80012b4 <MX_GPIO_Init+0xc4>)
 8001254:	f043 0302 	orr.w	r3, r3, #2
 8001258:	64d3      	str	r3, [r2, #76]	; 0x4c
 800125a:	4b16      	ldr	r3, [pc, #88]	; (80012b4 <MX_GPIO_Init+0xc4>)
 800125c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	607b      	str	r3, [r7, #4]
 8001264:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001266:	2200      	movs	r2, #0
 8001268:	2120      	movs	r1, #32
 800126a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800126e:	f002 faf7 	bl	8003860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001272:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001276:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001278:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <MX_GPIO_Init+0xc8>)
 800127a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	4619      	mov	r1, r3
 8001286:	480d      	ldr	r0, [pc, #52]	; (80012bc <MX_GPIO_Init+0xcc>)
 8001288:	f002 f942 	bl	8003510 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800128c:	2320      	movs	r3, #32
 800128e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001290:	2301      	movs	r3, #1
 8001292:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001298:	2300      	movs	r3, #0
 800129a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	4619      	mov	r1, r3
 80012a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a6:	f002 f933 	bl	8003510 <HAL_GPIO_Init>

}
 80012aa:	bf00      	nop
 80012ac:	3728      	adds	r7, #40	; 0x28
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40021000 	.word	0x40021000
 80012b8:	10210000 	.word	0x10210000
 80012bc:	48000800 	.word	0x48000800

080012c0 <Set_Duty_Cycle>:

/* USER CODE BEGIN 4 */

void Set_Duty_Cycle()
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0

	if (Duty_Cycle>F_TIM1-1)
 80012c4:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <Set_Duty_Cycle+0x40>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	461a      	mov	r2, r3
 80012ca:	f240 4329 	movw	r3, #1065	; 0x429
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d904      	bls.n	80012dc <Set_Duty_Cycle+0x1c>
	{
		Duty_Cycle= F_TIM1 -1;
 80012d2:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <Set_Duty_Cycle+0x40>)
 80012d4:	f240 4229 	movw	r2, #1065	; 0x429
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	e006      	b.n	80012ea <Set_Duty_Cycle+0x2a>
	} else if (Duty_Cycle<1)
 80012dc:	4b08      	ldr	r3, [pc, #32]	; (8001300 <Set_Duty_Cycle+0x40>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	dc02      	bgt.n	80012ea <Set_Duty_Cycle+0x2a>
	{
		Duty_Cycle=1;
 80012e4:	4b06      	ldr	r3, [pc, #24]	; (8001300 <Set_Duty_Cycle+0x40>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	601a      	str	r2, [r3, #0]
	}
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,Duty_Cycle);
 80012ea:	4b05      	ldr	r3, [pc, #20]	; (8001300 <Set_Duty_Cycle+0x40>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	4b05      	ldr	r3, [pc, #20]	; (8001304 <Set_Duty_Cycle+0x44>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	20000028 	.word	0x20000028
 8001304:	20000104 	.word	0x20000104

08001308 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
	//Vout_mon = ADC_buffer[0];
	//Vin_mon = ADC_buffer[1];
	//I_mon = ADC_buffer[2];
	}*/

}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001324:	2120      	movs	r1, #32
 8001326:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800132a:	f002 fab1 	bl	8003890 <HAL_GPIO_TogglePin>
	Vout_mon = ADC_buffer[0];
 800132e:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <HAL_ADC_ConvCpltCallback+0x44>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	461a      	mov	r2, r3
 8001334:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <HAL_ADC_ConvCpltCallback+0x48>)
 8001336:	601a      	str	r2, [r3, #0]
	Vin_mon = ADC_buffer[1];
 8001338:	4b09      	ldr	r3, [pc, #36]	; (8001360 <HAL_ADC_ConvCpltCallback+0x44>)
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	461a      	mov	r2, r3
 800133e:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <HAL_ADC_ConvCpltCallback+0x4c>)
 8001340:	601a      	str	r2, [r3, #0]
	I_mon = ADC_buffer[2];
 8001342:	4b07      	ldr	r3, [pc, #28]	; (8001360 <HAL_ADC_ConvCpltCallback+0x44>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	461a      	mov	r2, r3
 8001348:	4b08      	ldr	r3, [pc, #32]	; (800136c <HAL_ADC_ConvCpltCallback+0x50>)
 800134a:	601a      	str	r2, [r3, #0]
	if(Reg_Mode == REG_MODE_CV)
 800134c:	4b08      	ldr	r3, [pc, #32]	; (8001370 <HAL_ADC_ConvCpltCallback+0x54>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d101      	bne.n	8001358 <HAL_ADC_ConvCpltCallback+0x3c>
	{
		RegulateCV();
 8001354:	f000 f83e 	bl	80013d4 <RegulateCV>
	if(Reg_Mode == REG_MODE_MPPT)
	{
		RegulateMPPT();
	}*/

}
 8001358:	bf00      	nop
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20000040 	.word	0x20000040
 8001364:	2000002c 	.word	0x2000002c
 8001368:	20000030 	.word	0x20000030
 800136c:	20000034 	.word	0x20000034
 8001370:	20000038 	.word	0x20000038
 8001374:	00000000 	.word	0x00000000

08001378 <SetVout>:

void SetVout(float target)
{
 8001378:	b590      	push	{r4, r7, lr}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	ed87 0a01 	vstr	s0, [r7, #4]
	Vout_Ordered = (target)*(KVOUTMON*4096.0)/VCC;
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff f884 	bl	8000490 <__aeabi_f2d>
 8001388:	a30e      	add	r3, pc, #56	; (adr r3, 80013c4 <SetVout+0x4c>)
 800138a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138e:	f7ff f8d7 	bl	8000540 <__aeabi_dmul>
 8001392:	4603      	mov	r3, r0
 8001394:	460c      	mov	r4, r1
 8001396:	4618      	mov	r0, r3
 8001398:	4621      	mov	r1, r4
 800139a:	a30c      	add	r3, pc, #48	; (adr r3, 80013cc <SetVout+0x54>)
 800139c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a0:	f7ff f9f8 	bl	8000794 <__aeabi_ddiv>
 80013a4:	4603      	mov	r3, r0
 80013a6:	460c      	mov	r4, r1
 80013a8:	4618      	mov	r0, r3
 80013aa:	4621      	mov	r1, r4
 80013ac:	f7ff fada 	bl	8000964 <__aeabi_d2iz>
 80013b0:	4602      	mov	r2, r0
 80013b2:	4b03      	ldr	r3, [pc, #12]	; (80013c0 <SetVout+0x48>)
 80013b4:	601a      	str	r2, [r3, #0]
}
 80013b6:	bf00      	nop
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd90      	pop	{r4, r7, pc}
 80013be:	bf00      	nop
 80013c0:	2000003c 	.word	0x2000003c
 80013c4:	bec9cdc5 	.word	0xbec9cdc5
 80013c8:	406b5183 	.word	0x406b5183
 80013cc:	66666666 	.word	0x66666666
 80013d0:	400a6666 	.word	0x400a6666

080013d4 <RegulateCV>:
{
	Duty_Cycle=(target)*F_TIM1;
}

void RegulateCV(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
	Delta_Err = Vout_Ordered - Vout_mon;
 80013d8:	4b21      	ldr	r3, [pc, #132]	; (8001460 <RegulateCV+0x8c>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	4b21      	ldr	r3, [pc, #132]	; (8001464 <RegulateCV+0x90>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	4a21      	ldr	r2, [pc, #132]	; (8001468 <RegulateCV+0x94>)
 80013e4:	6013      	str	r3, [r2, #0]
	Err_Tot += Delta_Err;
 80013e6:	4b21      	ldr	r3, [pc, #132]	; (800146c <RegulateCV+0x98>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	4b1f      	ldr	r3, [pc, #124]	; (8001468 <RegulateCV+0x94>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4413      	add	r3, r2
 80013f0:	4a1e      	ldr	r2, [pc, #120]	; (800146c <RegulateCV+0x98>)
 80013f2:	6013      	str	r3, [r2, #0]

	if (Err_Tot > SAT_ERR_TOT)
 80013f4:	4b1d      	ldr	r3, [pc, #116]	; (800146c <RegulateCV+0x98>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80013fc:	dd03      	ble.n	8001406 <RegulateCV+0x32>
	{
		Err_Tot = SAT_ERR_TOT;
 80013fe:	4b1b      	ldr	r3, [pc, #108]	; (800146c <RegulateCV+0x98>)
 8001400:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001404:	601a      	str	r2, [r3, #0]
	}
	if (Err_Tot < -(SAT_ERR_TOT))
 8001406:	4b19      	ldr	r3, [pc, #100]	; (800146c <RegulateCV+0x98>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f513 7fc8 	cmn.w	r3, #400	; 0x190
 800140e:	da02      	bge.n	8001416 <RegulateCV+0x42>
	{
		Err_Tot = -SAT_ERR_TOT;
 8001410:	4b16      	ldr	r3, [pc, #88]	; (800146c <RegulateCV+0x98>)
 8001412:	4a17      	ldr	r2, [pc, #92]	; (8001470 <RegulateCV+0x9c>)
 8001414:	601a      	str	r2, [r3, #0]
	}

	Delta_Duty = (Delta_Err *KP_CV) + (Err_Tot *KP_CV/10 );
 8001416:	4b14      	ldr	r3, [pc, #80]	; (8001468 <RegulateCV+0x94>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	22fa      	movs	r2, #250	; 0xfa
 800141c:	fb02 f303 	mul.w	r3, r2, r3
 8001420:	4a14      	ldr	r2, [pc, #80]	; (8001474 <RegulateCV+0xa0>)
 8001422:	fb82 1203 	smull	r1, r2, r2, r3
 8001426:	1212      	asrs	r2, r2, #8
 8001428:	17db      	asrs	r3, r3, #31
 800142a:	1ad2      	subs	r2, r2, r3
 800142c:	4b0f      	ldr	r3, [pc, #60]	; (800146c <RegulateCV+0x98>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	21fa      	movs	r1, #250	; 0xfa
 8001432:	fb01 f303 	mul.w	r3, r1, r3
 8001436:	4910      	ldr	r1, [pc, #64]	; (8001478 <RegulateCV+0xa4>)
 8001438:	fb81 0103 	smull	r0, r1, r1, r3
 800143c:	1309      	asrs	r1, r1, #12
 800143e:	17db      	asrs	r3, r3, #31
 8001440:	1acb      	subs	r3, r1, r3
 8001442:	4413      	add	r3, r2
 8001444:	4a0d      	ldr	r2, [pc, #52]	; (800147c <RegulateCV+0xa8>)
 8001446:	6013      	str	r3, [r2, #0]
	Duty_Cycle += Delta_Duty;
 8001448:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <RegulateCV+0xac>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4b0b      	ldr	r3, [pc, #44]	; (800147c <RegulateCV+0xa8>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4413      	add	r3, r2
 8001452:	4a0b      	ldr	r2, [pc, #44]	; (8001480 <RegulateCV+0xac>)
 8001454:	6013      	str	r3, [r2, #0]

	Set_Duty_Cycle();
 8001456:	f7ff ff33 	bl	80012c0 <Set_Duty_Cycle>
	} else if(Vout_mon>Vout_Ordered)
	{
		Duty_Cycle--;
	}
	Set_Duty_Cycle();*/
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	2000003c 	.word	0x2000003c
 8001464:	2000002c 	.word	0x2000002c
 8001468:	2000004c 	.word	0x2000004c
 800146c:	20000050 	.word	0x20000050
 8001470:	fffffe70 	.word	0xfffffe70
 8001474:	1ba6fe7d 	.word	0x1ba6fe7d
 8001478:	2c3e63fb 	.word	0x2c3e63fb
 800147c:	20000054 	.word	0x20000054
 8001480:	20000028 	.word	0x20000028

08001484 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
	...

08001494 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800149a:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <HAL_MspInit+0x44>)
 800149c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800149e:	4a0e      	ldr	r2, [pc, #56]	; (80014d8 <HAL_MspInit+0x44>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	6613      	str	r3, [r2, #96]	; 0x60
 80014a6:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <HAL_MspInit+0x44>)
 80014a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014b2:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <HAL_MspInit+0x44>)
 80014b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b6:	4a08      	ldr	r2, [pc, #32]	; (80014d8 <HAL_MspInit+0x44>)
 80014b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014bc:	6593      	str	r3, [r2, #88]	; 0x58
 80014be:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <HAL_MspInit+0x44>)
 80014c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c6:	603b      	str	r3, [r7, #0]
 80014c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	40021000 	.word	0x40021000

080014dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08a      	sub	sp, #40	; 0x28
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e4:	f107 0314 	add.w	r3, r7, #20
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a2a      	ldr	r2, [pc, #168]	; (80015a4 <HAL_ADC_MspInit+0xc8>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d14e      	bne.n	800159c <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80014fe:	4b2a      	ldr	r3, [pc, #168]	; (80015a8 <HAL_ADC_MspInit+0xcc>)
 8001500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001502:	4a29      	ldr	r2, [pc, #164]	; (80015a8 <HAL_ADC_MspInit+0xcc>)
 8001504:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001508:	64d3      	str	r3, [r2, #76]	; 0x4c
 800150a:	4b27      	ldr	r3, [pc, #156]	; (80015a8 <HAL_ADC_MspInit+0xcc>)
 800150c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001512:	613b      	str	r3, [r7, #16]
 8001514:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001516:	4b24      	ldr	r3, [pc, #144]	; (80015a8 <HAL_ADC_MspInit+0xcc>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151a:	4a23      	ldr	r2, [pc, #140]	; (80015a8 <HAL_ADC_MspInit+0xcc>)
 800151c:	f043 0304 	orr.w	r3, r3, #4
 8001520:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001522:	4b21      	ldr	r3, [pc, #132]	; (80015a8 <HAL_ADC_MspInit+0xcc>)
 8001524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001526:	f003 0304 	and.w	r3, r3, #4
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800152e:	2307      	movs	r3, #7
 8001530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001532:	230b      	movs	r3, #11
 8001534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800153a:	f107 0314 	add.w	r3, r7, #20
 800153e:	4619      	mov	r1, r3
 8001540:	481a      	ldr	r0, [pc, #104]	; (80015ac <HAL_ADC_MspInit+0xd0>)
 8001542:	f001 ffe5 	bl	8003510 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001546:	4b1a      	ldr	r3, [pc, #104]	; (80015b0 <HAL_ADC_MspInit+0xd4>)
 8001548:	4a1a      	ldr	r2, [pc, #104]	; (80015b4 <HAL_ADC_MspInit+0xd8>)
 800154a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800154c:	4b18      	ldr	r3, [pc, #96]	; (80015b0 <HAL_ADC_MspInit+0xd4>)
 800154e:	2200      	movs	r2, #0
 8001550:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001552:	4b17      	ldr	r3, [pc, #92]	; (80015b0 <HAL_ADC_MspInit+0xd4>)
 8001554:	2200      	movs	r2, #0
 8001556:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001558:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <HAL_ADC_MspInit+0xd4>)
 800155a:	2200      	movs	r2, #0
 800155c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800155e:	4b14      	ldr	r3, [pc, #80]	; (80015b0 <HAL_ADC_MspInit+0xd4>)
 8001560:	2280      	movs	r2, #128	; 0x80
 8001562:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001564:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <HAL_ADC_MspInit+0xd4>)
 8001566:	f44f 7200 	mov.w	r2, #512	; 0x200
 800156a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800156c:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <HAL_ADC_MspInit+0xd4>)
 800156e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001572:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001574:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <HAL_ADC_MspInit+0xd4>)
 8001576:	2220      	movs	r2, #32
 8001578:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800157a:	4b0d      	ldr	r3, [pc, #52]	; (80015b0 <HAL_ADC_MspInit+0xd4>)
 800157c:	2200      	movs	r2, #0
 800157e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001580:	480b      	ldr	r0, [pc, #44]	; (80015b0 <HAL_ADC_MspInit+0xd4>)
 8001582:	f001 fdcd 	bl	8003120 <HAL_DMA_Init>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <HAL_ADC_MspInit+0xb4>
    {
      Error_Handler();
 800158c:	f7ff ff7a 	bl	8001484 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4a07      	ldr	r2, [pc, #28]	; (80015b0 <HAL_ADC_MspInit+0xd4>)
 8001594:	64da      	str	r2, [r3, #76]	; 0x4c
 8001596:	4a06      	ldr	r2, [pc, #24]	; (80015b0 <HAL_ADC_MspInit+0xd4>)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800159c:	bf00      	nop
 800159e:	3728      	adds	r7, #40	; 0x28
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	50040000 	.word	0x50040000
 80015a8:	40021000 	.word	0x40021000
 80015ac:	48000800 	.word	0x48000800
 80015b0:	200000bc 	.word	0x200000bc
 80015b4:	40020008 	.word	0x40020008

080015b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a16      	ldr	r2, [pc, #88]	; (8001620 <HAL_TIM_Base_MspInit+0x68>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d10c      	bne.n	80015e4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015ca:	4b16      	ldr	r3, [pc, #88]	; (8001624 <HAL_TIM_Base_MspInit+0x6c>)
 80015cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ce:	4a15      	ldr	r2, [pc, #84]	; (8001624 <HAL_TIM_Base_MspInit+0x6c>)
 80015d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015d4:	6613      	str	r3, [r2, #96]	; 0x60
 80015d6:	4b13      	ldr	r3, [pc, #76]	; (8001624 <HAL_TIM_Base_MspInit+0x6c>)
 80015d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80015e2:	e018      	b.n	8001616 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015ec:	d113      	bne.n	8001616 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015ee:	4b0d      	ldr	r3, [pc, #52]	; (8001624 <HAL_TIM_Base_MspInit+0x6c>)
 80015f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f2:	4a0c      	ldr	r2, [pc, #48]	; (8001624 <HAL_TIM_Base_MspInit+0x6c>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	6593      	str	r3, [r2, #88]	; 0x58
 80015fa:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <HAL_TIM_Base_MspInit+0x6c>)
 80015fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2102      	movs	r1, #2
 800160a:	201c      	movs	r0, #28
 800160c:	f001 fd51 	bl	80030b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001610:	201c      	movs	r0, #28
 8001612:	f001 fd6a 	bl	80030ea <HAL_NVIC_EnableIRQ>
}
 8001616:	bf00      	nop
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40012c00 	.word	0x40012c00
 8001624:	40021000 	.word	0x40021000

08001628 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b088      	sub	sp, #32
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001630:	f107 030c 	add.w	r3, r7, #12
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a12      	ldr	r2, [pc, #72]	; (8001690 <HAL_TIM_MspPostInit+0x68>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d11d      	bne.n	8001686 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800164a:	4b12      	ldr	r3, [pc, #72]	; (8001694 <HAL_TIM_MspPostInit+0x6c>)
 800164c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164e:	4a11      	ldr	r2, [pc, #68]	; (8001694 <HAL_TIM_MspPostInit+0x6c>)
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001656:	4b0f      	ldr	r3, [pc, #60]	; (8001694 <HAL_TIM_MspPostInit+0x6c>)
 8001658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	60bb      	str	r3, [r7, #8]
 8001660:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001662:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001666:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001668:	2302      	movs	r3, #2
 800166a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001670:	2300      	movs	r3, #0
 8001672:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001674:	2301      	movs	r3, #1
 8001676:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001678:	f107 030c 	add.w	r3, r7, #12
 800167c:	4619      	mov	r1, r3
 800167e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001682:	f001 ff45 	bl	8003510 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001686:	bf00      	nop
 8001688:	3720      	adds	r7, #32
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40012c00 	.word	0x40012c00
 8001694:	40021000 	.word	0x40021000

08001698 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	; 0x28
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a17      	ldr	r2, [pc, #92]	; (8001714 <HAL_UART_MspInit+0x7c>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d128      	bne.n	800170c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016ba:	4b17      	ldr	r3, [pc, #92]	; (8001718 <HAL_UART_MspInit+0x80>)
 80016bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016be:	4a16      	ldr	r2, [pc, #88]	; (8001718 <HAL_UART_MspInit+0x80>)
 80016c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016c4:	6593      	str	r3, [r2, #88]	; 0x58
 80016c6:	4b14      	ldr	r3, [pc, #80]	; (8001718 <HAL_UART_MspInit+0x80>)
 80016c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ce:	613b      	str	r3, [r7, #16]
 80016d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d2:	4b11      	ldr	r3, [pc, #68]	; (8001718 <HAL_UART_MspInit+0x80>)
 80016d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d6:	4a10      	ldr	r2, [pc, #64]	; (8001718 <HAL_UART_MspInit+0x80>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016de:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <HAL_UART_MspInit+0x80>)
 80016e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016ea:	230c      	movs	r3, #12
 80016ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ee:	2302      	movs	r3, #2
 80016f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f6:	2303      	movs	r3, #3
 80016f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016fa:	2307      	movs	r3, #7
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fe:	f107 0314 	add.w	r3, r7, #20
 8001702:	4619      	mov	r1, r3
 8001704:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001708:	f001 ff02 	bl	8003510 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800170c:	bf00      	nop
 800170e:	3728      	adds	r7, #40	; 0x28
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40004400 	.word	0x40004400
 8001718:	40021000 	.word	0x40021000

0800171c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800172e:	e7fe      	b.n	800172e <HardFault_Handler+0x4>

08001730 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001734:	e7fe      	b.n	8001734 <MemManage_Handler+0x4>

08001736 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800173a:	e7fe      	b.n	800173a <BusFault_Handler+0x4>

0800173c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001740:	e7fe      	b.n	8001740 <UsageFault_Handler+0x4>

08001742 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001770:	f000 f8d2 	bl	8001918 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001774:	bf00      	nop
 8001776:	bd80      	pop	{r7, pc}

08001778 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800177c:	4802      	ldr	r0, [pc, #8]	; (8001788 <DMA1_Channel1_IRQHandler+0x10>)
 800177e:	f001 fde7 	bl	8003350 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	200000bc 	.word	0x200000bc

0800178c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001790:	4802      	ldr	r0, [pc, #8]	; (800179c <TIM2_IRQHandler+0x10>)
 8001792:	f003 fdc5 	bl	8005320 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000150 	.word	0x20000150

080017a0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017a4:	4b17      	ldr	r3, [pc, #92]	; (8001804 <SystemInit+0x64>)
 80017a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017aa:	4a16      	ldr	r2, [pc, #88]	; (8001804 <SystemInit+0x64>)
 80017ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80017b4:	4b14      	ldr	r3, [pc, #80]	; (8001808 <SystemInit+0x68>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a13      	ldr	r2, [pc, #76]	; (8001808 <SystemInit+0x68>)
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80017c0:	4b11      	ldr	r3, [pc, #68]	; (8001808 <SystemInit+0x68>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80017c6:	4b10      	ldr	r3, [pc, #64]	; (8001808 <SystemInit+0x68>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a0f      	ldr	r2, [pc, #60]	; (8001808 <SystemInit+0x68>)
 80017cc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80017d0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80017d4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80017d6:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <SystemInit+0x68>)
 80017d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017dc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80017de:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <SystemInit+0x68>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a09      	ldr	r2, [pc, #36]	; (8001808 <SystemInit+0x68>)
 80017e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017e8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80017ea:	4b07      	ldr	r3, [pc, #28]	; (8001808 <SystemInit+0x68>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017f0:	4b04      	ldr	r3, [pc, #16]	; (8001804 <SystemInit+0x64>)
 80017f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017f6:	609a      	str	r2, [r3, #8]
#endif
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	e000ed00 	.word	0xe000ed00
 8001808:	40021000 	.word	0x40021000

0800180c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800180c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001844 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001810:	f7ff ffc6 	bl	80017a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001814:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001816:	e003      	b.n	8001820 <LoopCopyDataInit>

08001818 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001818:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800181a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800181c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800181e:	3104      	adds	r1, #4

08001820 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001820:	480a      	ldr	r0, [pc, #40]	; (800184c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001822:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001824:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001826:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001828:	d3f6      	bcc.n	8001818 <CopyDataInit>
	ldr	r2, =_sbss
 800182a:	4a0a      	ldr	r2, [pc, #40]	; (8001854 <LoopForever+0x12>)
	b	LoopFillZerobss
 800182c:	e002      	b.n	8001834 <LoopFillZerobss>

0800182e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800182e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001830:	f842 3b04 	str.w	r3, [r2], #4

08001834 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001834:	4b08      	ldr	r3, [pc, #32]	; (8001858 <LoopForever+0x16>)
	cmp	r2, r3
 8001836:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001838:	d3f9      	bcc.n	800182e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800183a:	f005 fa11 	bl	8006c60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800183e:	f7ff fa39 	bl	8000cb4 <main>

08001842 <LoopForever>:

LoopForever:
    b LoopForever
 8001842:	e7fe      	b.n	8001842 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001844:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001848:	08006d28 	.word	0x08006d28
	ldr	r0, =_sdata
 800184c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001850:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001854:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001858:	20000220 	.word	0x20000220

0800185c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800185c:	e7fe      	b.n	800185c <ADC1_2_IRQHandler>
	...

08001860 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001866:	2300      	movs	r3, #0
 8001868:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800186a:	4b0c      	ldr	r3, [pc, #48]	; (800189c <HAL_Init+0x3c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a0b      	ldr	r2, [pc, #44]	; (800189c <HAL_Init+0x3c>)
 8001870:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001874:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001876:	2003      	movs	r0, #3
 8001878:	f001 fc10 	bl	800309c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800187c:	2000      	movs	r0, #0
 800187e:	f000 f80f 	bl	80018a0 <HAL_InitTick>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d002      	beq.n	800188e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	71fb      	strb	r3, [r7, #7]
 800188c:	e001      	b.n	8001892 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800188e:	f7ff fe01 	bl	8001494 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001892:	79fb      	ldrb	r3, [r7, #7]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40022000 	.word	0x40022000

080018a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018a8:	2300      	movs	r3, #0
 80018aa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80018ac:	4b17      	ldr	r3, [pc, #92]	; (800190c <HAL_InitTick+0x6c>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d023      	beq.n	80018fc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80018b4:	4b16      	ldr	r3, [pc, #88]	; (8001910 <HAL_InitTick+0x70>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	4b14      	ldr	r3, [pc, #80]	; (800190c <HAL_InitTick+0x6c>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	4619      	mov	r1, r3
 80018be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ca:	4618      	mov	r0, r3
 80018cc:	f001 fc1b 	bl	8003106 <HAL_SYSTICK_Config>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d10f      	bne.n	80018f6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b0f      	cmp	r3, #15
 80018da:	d809      	bhi.n	80018f0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018dc:	2200      	movs	r2, #0
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	f04f 30ff 	mov.w	r0, #4294967295
 80018e4:	f001 fbe5 	bl	80030b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018e8:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <HAL_InitTick+0x74>)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	e007      	b.n	8001900 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	73fb      	strb	r3, [r7, #15]
 80018f4:	e004      	b.n	8001900 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	73fb      	strb	r3, [r7, #15]
 80018fa:	e001      	b.n	8001900 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001900:	7bfb      	ldrb	r3, [r7, #15]
}
 8001902:	4618      	mov	r0, r3
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20000008 	.word	0x20000008
 8001910:	20000000 	.word	0x20000000
 8001914:	20000004 	.word	0x20000004

08001918 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800191c:	4b06      	ldr	r3, [pc, #24]	; (8001938 <HAL_IncTick+0x20>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	461a      	mov	r2, r3
 8001922:	4b06      	ldr	r3, [pc, #24]	; (800193c <HAL_IncTick+0x24>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4413      	add	r3, r2
 8001928:	4a04      	ldr	r2, [pc, #16]	; (800193c <HAL_IncTick+0x24>)
 800192a:	6013      	str	r3, [r2, #0]
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	20000008 	.word	0x20000008
 800193c:	2000021c 	.word	0x2000021c

08001940 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  return uwTick;
 8001944:	4b03      	ldr	r3, [pc, #12]	; (8001954 <HAL_GetTick+0x14>)
 8001946:	681b      	ldr	r3, [r3, #0]
}
 8001948:	4618      	mov	r0, r3
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	2000021c 	.word	0x2000021c

08001958 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	431a      	orrs	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	609a      	str	r2, [r3, #8]
}
 8001972:	bf00      	nop
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
 8001986:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	431a      	orrs	r2, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	609a      	str	r2, [r3, #8]
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b087      	sub	sp, #28
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
 80019cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	3360      	adds	r3, #96	; 0x60
 80019d2:	461a      	mov	r2, r3
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <LL_ADC_SetOffset+0x44>)
 80019e2:	4013      	ands	r3, r2
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	430a      	orrs	r2, r1
 80019ee:	4313      	orrs	r3, r2
 80019f0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80019f8:	bf00      	nop
 80019fa:	371c      	adds	r7, #28
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	03fff000 	.word	0x03fff000

08001a08 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	3360      	adds	r3, #96	; 0x60
 8001a16:	461a      	mov	r2, r3
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4413      	add	r3, r2
 8001a1e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b087      	sub	sp, #28
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	3360      	adds	r3, #96	; 0x60
 8001a44:	461a      	mov	r2, r3
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4413      	add	r3, r2
 8001a4c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	431a      	orrs	r2, r3
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a5e:	bf00      	nop
 8001a60:	371c      	adds	r7, #28
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e000      	b.n	8001a84 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b087      	sub	sp, #28
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	3330      	adds	r3, #48	; 0x30
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	0a1b      	lsrs	r3, r3, #8
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	f003 030c 	and.w	r3, r3, #12
 8001aac:	4413      	add	r3, r2
 8001aae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	f003 031f 	and.w	r3, r3, #31
 8001aba:	211f      	movs	r1, #31
 8001abc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	401a      	ands	r2, r3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	0e9b      	lsrs	r3, r3, #26
 8001ac8:	f003 011f 	and.w	r1, r3, #31
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	f003 031f 	and.w	r3, r3, #31
 8001ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad6:	431a      	orrs	r2, r3
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001adc:	bf00      	nop
 8001ade:	371c      	adds	r7, #28
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b087      	sub	sp, #28
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	3314      	adds	r3, #20
 8001af8:	461a      	mov	r2, r3
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	0e5b      	lsrs	r3, r3, #25
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	f003 0304 	and.w	r3, r3, #4
 8001b04:	4413      	add	r3, r2
 8001b06:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	0d1b      	lsrs	r3, r3, #20
 8001b10:	f003 031f 	and.w	r3, r3, #31
 8001b14:	2107      	movs	r1, #7
 8001b16:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	401a      	ands	r2, r3
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	0d1b      	lsrs	r3, r3, #20
 8001b22:	f003 031f 	and.w	r3, r3, #31
 8001b26:	6879      	ldr	r1, [r7, #4]
 8001b28:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b32:	bf00      	nop
 8001b34:	371c      	adds	r7, #28
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
	...

08001b40 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	401a      	ands	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f003 0318 	and.w	r3, r3, #24
 8001b62:	4908      	ldr	r1, [pc, #32]	; (8001b84 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b64:	40d9      	lsrs	r1, r3
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	400b      	ands	r3, r1
 8001b6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b6e:	431a      	orrs	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001b76:	bf00      	nop
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	0007ffff 	.word	0x0007ffff

08001b88 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f003 031f 	and.w	r3, r3, #31
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001bb4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	6093      	str	r3, [r2, #8]
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001bd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bdc:	d101      	bne.n	8001be2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001bde:	2301      	movs	r3, #1
 8001be0:	e000      	b.n	8001be4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001c00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c04:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c2c:	d101      	bne.n	8001c32 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e000      	b.n	8001c34 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c54:	f043 0201 	orr.w	r2, r3, #1
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f003 0301 	and.w	r3, r3, #1
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d101      	bne.n	8001c80 <LL_ADC_IsEnabled+0x18>
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e000      	b.n	8001c82 <LL_ADC_IsEnabled+0x1a>
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c9e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ca2:	f043 0204 	orr.w	r2, r3, #4
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 0304 	and.w	r3, r3, #4
 8001cc6:	2b04      	cmp	r3, #4
 8001cc8:	d101      	bne.n	8001cce <LL_ADC_REG_IsConversionOngoing+0x18>
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e000      	b.n	8001cd0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 0308 	and.w	r3, r3, #8
 8001cec:	2b08      	cmp	r3, #8
 8001cee:	d101      	bne.n	8001cf4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e000      	b.n	8001cf6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
	...

08001d04 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d04:	b590      	push	{r4, r7, lr}
 8001d06:	b089      	sub	sp, #36	; 0x24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e134      	b.n	8001f88 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d109      	bne.n	8001d40 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f7ff fbd5 	bl	80014dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff ff3f 	bl	8001bc8 <LL_ADC_IsDeepPowerDownEnabled>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d004      	beq.n	8001d5a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff ff25 	bl	8001ba4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff ff5a 	bl	8001c18 <LL_ADC_IsInternalRegulatorEnabled>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d113      	bne.n	8001d92 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff ff3e 	bl	8001bf0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001d74:	4b86      	ldr	r3, [pc, #536]	; (8001f90 <HAL_ADC_Init+0x28c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	099b      	lsrs	r3, r3, #6
 8001d7a:	4a86      	ldr	r2, [pc, #536]	; (8001f94 <HAL_ADC_Init+0x290>)
 8001d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d80:	099b      	lsrs	r3, r3, #6
 8001d82:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d84:	e002      	b.n	8001d8c <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1f9      	bne.n	8001d86 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff ff3e 	bl	8001c18 <LL_ADC_IsInternalRegulatorEnabled>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d10d      	bne.n	8001dbe <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da6:	f043 0210 	orr.w	r2, r3, #16
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db2:	f043 0201 	orr.w	r2, r3, #1
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff ff77 	bl	8001cb6 <LL_ADC_REG_IsConversionOngoing>
 8001dc8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dce:	f003 0310 	and.w	r3, r3, #16
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f040 80cf 	bne.w	8001f76 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f040 80cb 	bne.w	8001f76 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001de8:	f043 0202 	orr.w	r2, r3, #2
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff ff37 	bl	8001c68 <LL_ADC_IsEnabled>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d115      	bne.n	8001e2c <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e00:	4865      	ldr	r0, [pc, #404]	; (8001f98 <HAL_ADC_Init+0x294>)
 8001e02:	f7ff ff31 	bl	8001c68 <LL_ADC_IsEnabled>
 8001e06:	4604      	mov	r4, r0
 8001e08:	4864      	ldr	r0, [pc, #400]	; (8001f9c <HAL_ADC_Init+0x298>)
 8001e0a:	f7ff ff2d 	bl	8001c68 <LL_ADC_IsEnabled>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	431c      	orrs	r4, r3
 8001e12:	4863      	ldr	r0, [pc, #396]	; (8001fa0 <HAL_ADC_Init+0x29c>)
 8001e14:	f7ff ff28 	bl	8001c68 <LL_ADC_IsEnabled>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	4323      	orrs	r3, r4
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d105      	bne.n	8001e2c <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	4619      	mov	r1, r3
 8001e26:	485f      	ldr	r0, [pc, #380]	; (8001fa4 <HAL_ADC_Init+0x2a0>)
 8001e28:	f7ff fd96 	bl	8001958 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	7e5b      	ldrb	r3, [r3, #25]
 8001e30:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e36:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001e3c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001e42:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e4a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d106      	bne.n	8001e68 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	045b      	lsls	r3, r3, #17
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d009      	beq.n	8001e84 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e74:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68da      	ldr	r2, [r3, #12]
 8001e8a:	4b47      	ldr	r3, [pc, #284]	; (8001fa8 <HAL_ADC_Init+0x2a4>)
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	6812      	ldr	r2, [r2, #0]
 8001e92:	69b9      	ldr	r1, [r7, #24]
 8001e94:	430b      	orrs	r3, r1
 8001e96:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff ff0a 	bl	8001cb6 <LL_ADC_REG_IsConversionOngoing>
 8001ea2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff ff17 	bl	8001cdc <LL_ADC_INJ_IsConversionOngoing>
 8001eae:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d13d      	bne.n	8001f32 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d13a      	bne.n	8001f32 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ec0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ec8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ed8:	f023 0302 	bic.w	r3, r3, #2
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	6812      	ldr	r2, [r2, #0]
 8001ee0:	69b9      	ldr	r1, [r7, #24]
 8001ee2:	430b      	orrs	r3, r1
 8001ee4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d118      	bne.n	8001f22 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001efa:	f023 0304 	bic.w	r3, r3, #4
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f06:	4311      	orrs	r1, r2
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001f0c:	4311      	orrs	r1, r2
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001f12:	430a      	orrs	r2, r1
 8001f14:	431a      	orrs	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f042 0201 	orr.w	r2, r2, #1
 8001f1e:	611a      	str	r2, [r3, #16]
 8001f20:	e007      	b.n	8001f32 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	691a      	ldr	r2, [r3, #16]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f022 0201 	bic.w	r2, r2, #1
 8001f30:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d10c      	bne.n	8001f54 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f40:	f023 010f 	bic.w	r1, r3, #15
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	69db      	ldr	r3, [r3, #28]
 8001f48:	1e5a      	subs	r2, r3, #1
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	631a      	str	r2, [r3, #48]	; 0x30
 8001f52:	e007      	b.n	8001f64 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f022 020f 	bic.w	r2, r2, #15
 8001f62:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f68:	f023 0303 	bic.w	r3, r3, #3
 8001f6c:	f043 0201 	orr.w	r2, r3, #1
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	655a      	str	r2, [r3, #84]	; 0x54
 8001f74:	e007      	b.n	8001f86 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f7a:	f043 0210 	orr.w	r2, r3, #16
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f86:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3724      	adds	r7, #36	; 0x24
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd90      	pop	{r4, r7, pc}
 8001f90:	20000000 	.word	0x20000000
 8001f94:	053e2d63 	.word	0x053e2d63
 8001f98:	50040000 	.word	0x50040000
 8001f9c:	50040100 	.word	0x50040100
 8001fa0:	50040200 	.word	0x50040200
 8001fa4:	50040300 	.word	0x50040300
 8001fa8:	fff0c007 	.word	0xfff0c007

08001fac <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001fb4:	4893      	ldr	r0, [pc, #588]	; (8002204 <HAL_ADC_Start_IT+0x258>)
 8001fb6:	f7ff fde7 	bl	8001b88 <LL_ADC_GetMultimode>
 8001fba:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff fe78 	bl	8001cb6 <LL_ADC_REG_IsConversionOngoing>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	f040 8112 	bne.w	80021f2 <HAL_ADC_Start_IT+0x246>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d101      	bne.n	8001fdc <HAL_ADC_Start_IT+0x30>
 8001fd8:	2302      	movs	r3, #2
 8001fda:	e10f      	b.n	80021fc <HAL_ADC_Start_IT+0x250>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 fdc9 	bl	8002b7c <ADC_Enable>
 8001fea:	4603      	mov	r3, r0
 8001fec:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001fee:	7dfb      	ldrb	r3, [r7, #23]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f040 80f9 	bne.w	80021e8 <HAL_ADC_Start_IT+0x23c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ffe:	f023 0301 	bic.w	r3, r3, #1
 8002002:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a7e      	ldr	r2, [pc, #504]	; (8002208 <HAL_ADC_Start_IT+0x25c>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d002      	beq.n	800201a <HAL_ADC_Start_IT+0x6e>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	e000      	b.n	800201c <HAL_ADC_Start_IT+0x70>
 800201a:	4b7c      	ldr	r3, [pc, #496]	; (800220c <HAL_ADC_Start_IT+0x260>)
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	6812      	ldr	r2, [r2, #0]
 8002020:	4293      	cmp	r3, r2
 8002022:	d002      	beq.n	800202a <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d105      	bne.n	8002036 <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800202e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800203a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d006      	beq.n	8002050 <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002046:	f023 0206 	bic.w	r2, r3, #6
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	659a      	str	r2, [r3, #88]	; 0x58
 800204e:	e002      	b.n	8002056 <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	221c      	movs	r2, #28
 800205c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	685a      	ldr	r2, [r3, #4]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 021c 	bic.w	r2, r2, #28
 8002074:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	2b08      	cmp	r3, #8
 800207c:	d108      	bne.n	8002090 <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f042 0208 	orr.w	r2, r2, #8
 800208c:	605a      	str	r2, [r3, #4]
          break;
 800208e:	e008      	b.n	80020a2 <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	685a      	ldr	r2, [r3, #4]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f042 0204 	orr.w	r2, r2, #4
 800209e:	605a      	str	r2, [r3, #4]
          break;
 80020a0:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d107      	bne.n	80020ba <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f042 0210 	orr.w	r2, r2, #16
 80020b8:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a52      	ldr	r2, [pc, #328]	; (8002208 <HAL_ADC_Start_IT+0x25c>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d002      	beq.n	80020ca <HAL_ADC_Start_IT+0x11e>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	e000      	b.n	80020cc <HAL_ADC_Start_IT+0x120>
 80020ca:	4b50      	ldr	r3, [pc, #320]	; (800220c <HAL_ADC_Start_IT+0x260>)
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	6812      	ldr	r2, [r2, #0]
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d008      	beq.n	80020e6 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d005      	beq.n	80020e6 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	2b05      	cmp	r3, #5
 80020de:	d002      	beq.n	80020e6 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	2b09      	cmp	r3, #9
 80020e4:	d13b      	bne.n	800215e <HAL_ADC_Start_IT+0x1b2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d02d      	beq.n	8002150 <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020fc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	2b08      	cmp	r3, #8
 800210a:	d110      	bne.n	800212e <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f022 0220 	bic.w	r2, r2, #32
 800211a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800212a:	605a      	str	r2, [r3, #4]
              break;
 800212c:	e011      	b.n	8002152 <HAL_ADC_Start_IT+0x1a6>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	685a      	ldr	r2, [r3, #4]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800213c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	685a      	ldr	r2, [r3, #4]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f042 0220 	orr.w	r2, r2, #32
 800214c:	605a      	str	r2, [r3, #4]
              break;
 800214e:	e000      	b.n	8002152 <HAL_ADC_Start_IT+0x1a6>
          }
        }
 8002150:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff fd99 	bl	8001c8e <LL_ADC_REG_StartConversion>
 800215c:	e04d      	b.n	80021fa <HAL_ADC_Start_IT+0x24e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002162:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a26      	ldr	r2, [pc, #152]	; (8002208 <HAL_ADC_Start_IT+0x25c>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d002      	beq.n	800217a <HAL_ADC_Start_IT+0x1ce>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	e000      	b.n	800217c <HAL_ADC_Start_IT+0x1d0>
 800217a:	4b24      	ldr	r3, [pc, #144]	; (800220c <HAL_ADC_Start_IT+0x260>)
 800217c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d036      	beq.n	80021f8 <HAL_ADC_Start_IT+0x24c>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800218e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002192:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	2b08      	cmp	r3, #8
 80021a0:	d110      	bne.n	80021c4 <HAL_ADC_Start_IT+0x218>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 0220 	bic.w	r2, r2, #32
 80021b0:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021c0:	605a      	str	r2, [r3, #4]
              break;
 80021c2:	e01a      	b.n	80021fa <HAL_ADC_Start_IT+0x24e>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	685a      	ldr	r2, [r3, #4]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021d2:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	685a      	ldr	r2, [r3, #4]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f042 0220 	orr.w	r2, r2, #32
 80021e2:	605a      	str	r2, [r3, #4]
              break;
 80021e4:	bf00      	nop
 80021e6:	e008      	b.n	80021fa <HAL_ADC_Start_IT+0x24e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80021f0:	e003      	b.n	80021fa <HAL_ADC_Start_IT+0x24e>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80021f2:	2302      	movs	r3, #2
 80021f4:	75fb      	strb	r3, [r7, #23]
 80021f6:	e000      	b.n	80021fa <HAL_ADC_Start_IT+0x24e>
        }
 80021f8:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 80021fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3718      	adds	r7, #24
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	50040300 	.word	0x50040300
 8002208:	50040100 	.word	0x50040100
 800220c:	50040000 	.word	0x50040000

08002210 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800221c:	4850      	ldr	r0, [pc, #320]	; (8002360 <HAL_ADC_Start_DMA+0x150>)
 800221e:	f7ff fcb3 	bl	8001b88 <LL_ADC_GetMultimode>
 8002222:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff fd44 	bl	8001cb6 <LL_ADC_REG_IsConversionOngoing>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	f040 808e 	bne.w	8002352 <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800223c:	2b01      	cmp	r3, #1
 800223e:	d101      	bne.n	8002244 <HAL_ADC_Start_DMA+0x34>
 8002240:	2302      	movs	r3, #2
 8002242:	e089      	b.n	8002358 <HAL_ADC_Start_DMA+0x148>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d005      	beq.n	800225e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	2b05      	cmp	r3, #5
 8002256:	d002      	beq.n	800225e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	2b09      	cmp	r3, #9
 800225c:	d172      	bne.n	8002344 <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f000 fc8c 	bl	8002b7c <ADC_Enable>
 8002264:	4603      	mov	r3, r0
 8002266:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002268:	7dfb      	ldrb	r3, [r7, #23]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d165      	bne.n	800233a <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002272:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002276:	f023 0301 	bic.w	r3, r3, #1
 800227a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a37      	ldr	r2, [pc, #220]	; (8002364 <HAL_ADC_Start_DMA+0x154>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d002      	beq.n	8002292 <HAL_ADC_Start_DMA+0x82>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	e000      	b.n	8002294 <HAL_ADC_Start_DMA+0x84>
 8002292:	4b35      	ldr	r3, [pc, #212]	; (8002368 <HAL_ADC_Start_DMA+0x158>)
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	6812      	ldr	r2, [r2, #0]
 8002298:	4293      	cmp	r3, r2
 800229a:	d002      	beq.n	80022a2 <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d105      	bne.n	80022ae <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d006      	beq.n	80022c8 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022be:	f023 0206 	bic.w	r2, r3, #6
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	659a      	str	r2, [r3, #88]	; 0x58
 80022c6:	e002      	b.n	80022ce <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2200      	movs	r2, #0
 80022cc:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d2:	4a26      	ldr	r2, [pc, #152]	; (800236c <HAL_ADC_Start_DMA+0x15c>)
 80022d4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022da:	4a25      	ldr	r2, [pc, #148]	; (8002370 <HAL_ADC_Start_DMA+0x160>)
 80022dc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e2:	4a24      	ldr	r2, [pc, #144]	; (8002374 <HAL_ADC_Start_DMA+0x164>)
 80022e4:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	221c      	movs	r2, #28
 80022ec:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f042 0210 	orr.w	r2, r2, #16
 8002304:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68da      	ldr	r2, [r3, #12]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f042 0201 	orr.w	r2, r2, #1
 8002314:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	3340      	adds	r3, #64	; 0x40
 8002320:	4619      	mov	r1, r3
 8002322:	68ba      	ldr	r2, [r7, #8]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f000 ffb3 	bl	8003290 <HAL_DMA_Start_IT>
 800232a:	4603      	mov	r3, r0
 800232c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff fcab 	bl	8001c8e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002338:	e00d      	b.n	8002356 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8002342:	e008      	b.n	8002356 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002350:	e001      	b.n	8002356 <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002352:	2302      	movs	r3, #2
 8002354:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002356:	7dfb      	ldrb	r3, [r7, #23]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3718      	adds	r7, #24
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	50040300 	.word	0x50040300
 8002364:	50040100 	.word	0x50040100
 8002368:	50040000 	.word	0x50040000
 800236c:	08002c31 	.word	0x08002c31
 8002370:	08002d09 	.word	0x08002d09
 8002374:	08002d25 	.word	0x08002d25

08002378 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b0b6      	sub	sp, #216	; 0xd8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023aa:	2300      	movs	r3, #0
 80023ac:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80023b0:	2300      	movs	r3, #0
 80023b2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d101      	bne.n	80023c2 <HAL_ADC_ConfigChannel+0x22>
 80023be:	2302      	movs	r3, #2
 80023c0:	e3c6      	b.n	8002b50 <HAL_ADC_ConfigChannel+0x7b0>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2201      	movs	r2, #1
 80023c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff fc71 	bl	8001cb6 <LL_ADC_REG_IsConversionOngoing>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f040 83a7 	bne.w	8002b2a <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b05      	cmp	r3, #5
 80023e2:	d824      	bhi.n	800242e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	3b02      	subs	r3, #2
 80023ea:	2b03      	cmp	r3, #3
 80023ec:	d81b      	bhi.n	8002426 <HAL_ADC_ConfigChannel+0x86>
 80023ee:	a201      	add	r2, pc, #4	; (adr r2, 80023f4 <HAL_ADC_ConfigChannel+0x54>)
 80023f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f4:	08002405 	.word	0x08002405
 80023f8:	0800240d 	.word	0x0800240d
 80023fc:	08002415 	.word	0x08002415
 8002400:	0800241d 	.word	0x0800241d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	220c      	movs	r2, #12
 8002408:	605a      	str	r2, [r3, #4]
          break;
 800240a:	e011      	b.n	8002430 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	2212      	movs	r2, #18
 8002410:	605a      	str	r2, [r3, #4]
          break;
 8002412:	e00d      	b.n	8002430 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	2218      	movs	r2, #24
 8002418:	605a      	str	r2, [r3, #4]
          break;
 800241a:	e009      	b.n	8002430 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002422:	605a      	str	r2, [r3, #4]
          break;
 8002424:	e004      	b.n	8002430 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	2206      	movs	r2, #6
 800242a:	605a      	str	r2, [r3, #4]
          break;
 800242c:	e000      	b.n	8002430 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800242e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6818      	ldr	r0, [r3, #0]
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	6859      	ldr	r1, [r3, #4]
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	461a      	mov	r2, r3
 800243e:	f7ff fb27 	bl	8001a90 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff fc35 	bl	8001cb6 <LL_ADC_REG_IsConversionOngoing>
 800244c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff fc41 	bl	8001cdc <LL_ADC_INJ_IsConversionOngoing>
 800245a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800245e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002462:	2b00      	cmp	r3, #0
 8002464:	f040 81a6 	bne.w	80027b4 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002468:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800246c:	2b00      	cmp	r3, #0
 800246e:	f040 81a1 	bne.w	80027b4 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6818      	ldr	r0, [r3, #0]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	6819      	ldr	r1, [r3, #0]
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	461a      	mov	r2, r3
 8002480:	f7ff fb32 	bl	8001ae8 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	695a      	ldr	r2, [r3, #20]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	08db      	lsrs	r3, r3, #3
 8002490:	f003 0303 	and.w	r3, r3, #3
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	2b04      	cmp	r3, #4
 80024a4:	d00a      	beq.n	80024bc <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6818      	ldr	r0, [r3, #0]
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	6919      	ldr	r1, [r3, #16]
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80024b6:	f7ff fa83 	bl	80019c0 <LL_ADC_SetOffset>
 80024ba:	e17b      	b.n	80027b4 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2100      	movs	r1, #0
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff faa0 	bl	8001a08 <LL_ADC_GetOffsetChannel>
 80024c8:	4603      	mov	r3, r0
 80024ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10a      	bne.n	80024e8 <HAL_ADC_ConfigChannel+0x148>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2100      	movs	r1, #0
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff fa95 	bl	8001a08 <LL_ADC_GetOffsetChannel>
 80024de:	4603      	mov	r3, r0
 80024e0:	0e9b      	lsrs	r3, r3, #26
 80024e2:	f003 021f 	and.w	r2, r3, #31
 80024e6:	e01e      	b.n	8002526 <HAL_ADC_ConfigChannel+0x186>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2100      	movs	r1, #0
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff fa8a 	bl	8001a08 <LL_ADC_GetOffsetChannel>
 80024f4:	4603      	mov	r3, r0
 80024f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80024fe:	fa93 f3a3 	rbit	r3, r3
 8002502:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002506:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800250a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800250e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002516:	2320      	movs	r3, #32
 8002518:	e004      	b.n	8002524 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800251a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800251e:	fab3 f383 	clz	r3, r3
 8002522:	b2db      	uxtb	r3, r3
 8002524:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800252e:	2b00      	cmp	r3, #0
 8002530:	d105      	bne.n	800253e <HAL_ADC_ConfigChannel+0x19e>
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	0e9b      	lsrs	r3, r3, #26
 8002538:	f003 031f 	and.w	r3, r3, #31
 800253c:	e018      	b.n	8002570 <HAL_ADC_ConfigChannel+0x1d0>
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002546:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800254a:	fa93 f3a3 	rbit	r3, r3
 800254e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002552:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002556:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800255a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002562:	2320      	movs	r3, #32
 8002564:	e004      	b.n	8002570 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002566:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800256a:	fab3 f383 	clz	r3, r3
 800256e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002570:	429a      	cmp	r2, r3
 8002572:	d106      	bne.n	8002582 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2200      	movs	r2, #0
 800257a:	2100      	movs	r1, #0
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff fa59 	bl	8001a34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2101      	movs	r1, #1
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff fa3d 	bl	8001a08 <LL_ADC_GetOffsetChannel>
 800258e:	4603      	mov	r3, r0
 8002590:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002594:	2b00      	cmp	r3, #0
 8002596:	d10a      	bne.n	80025ae <HAL_ADC_ConfigChannel+0x20e>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2101      	movs	r1, #1
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff fa32 	bl	8001a08 <LL_ADC_GetOffsetChannel>
 80025a4:	4603      	mov	r3, r0
 80025a6:	0e9b      	lsrs	r3, r3, #26
 80025a8:	f003 021f 	and.w	r2, r3, #31
 80025ac:	e01e      	b.n	80025ec <HAL_ADC_ConfigChannel+0x24c>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2101      	movs	r1, #1
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff fa27 	bl	8001a08 <LL_ADC_GetOffsetChannel>
 80025ba:	4603      	mov	r3, r0
 80025bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80025c4:	fa93 f3a3 	rbit	r3, r3
 80025c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80025cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80025d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80025d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d101      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 80025dc:	2320      	movs	r3, #32
 80025de:	e004      	b.n	80025ea <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80025e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80025e4:	fab3 f383 	clz	r3, r3
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d105      	bne.n	8002604 <HAL_ADC_ConfigChannel+0x264>
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	0e9b      	lsrs	r3, r3, #26
 80025fe:	f003 031f 	and.w	r3, r3, #31
 8002602:	e018      	b.n	8002636 <HAL_ADC_ConfigChannel+0x296>
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002610:	fa93 f3a3 	rbit	r3, r3
 8002614:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002618:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800261c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002620:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002624:	2b00      	cmp	r3, #0
 8002626:	d101      	bne.n	800262c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002628:	2320      	movs	r3, #32
 800262a:	e004      	b.n	8002636 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 800262c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002630:	fab3 f383 	clz	r3, r3
 8002634:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002636:	429a      	cmp	r2, r3
 8002638:	d106      	bne.n	8002648 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2200      	movs	r2, #0
 8002640:	2101      	movs	r1, #1
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff f9f6 	bl	8001a34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2102      	movs	r1, #2
 800264e:	4618      	mov	r0, r3
 8002650:	f7ff f9da 	bl	8001a08 <LL_ADC_GetOffsetChannel>
 8002654:	4603      	mov	r3, r0
 8002656:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10a      	bne.n	8002674 <HAL_ADC_ConfigChannel+0x2d4>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2102      	movs	r1, #2
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff f9cf 	bl	8001a08 <LL_ADC_GetOffsetChannel>
 800266a:	4603      	mov	r3, r0
 800266c:	0e9b      	lsrs	r3, r3, #26
 800266e:	f003 021f 	and.w	r2, r3, #31
 8002672:	e01e      	b.n	80026b2 <HAL_ADC_ConfigChannel+0x312>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2102      	movs	r1, #2
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff f9c4 	bl	8001a08 <LL_ADC_GetOffsetChannel>
 8002680:	4603      	mov	r3, r0
 8002682:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002686:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800268a:	fa93 f3a3 	rbit	r3, r3
 800268e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002692:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002696:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800269a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 80026a2:	2320      	movs	r3, #32
 80026a4:	e004      	b.n	80026b0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80026a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80026aa:	fab3 f383 	clz	r3, r3
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d105      	bne.n	80026ca <HAL_ADC_ConfigChannel+0x32a>
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	0e9b      	lsrs	r3, r3, #26
 80026c4:	f003 031f 	and.w	r3, r3, #31
 80026c8:	e016      	b.n	80026f8 <HAL_ADC_ConfigChannel+0x358>
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026d6:	fa93 f3a3 	rbit	r3, r3
 80026da:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80026dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80026de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80026e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80026ea:	2320      	movs	r3, #32
 80026ec:	e004      	b.n	80026f8 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80026ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026f2:	fab3 f383 	clz	r3, r3
 80026f6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d106      	bne.n	800270a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2200      	movs	r2, #0
 8002702:	2102      	movs	r1, #2
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff f995 	bl	8001a34 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2103      	movs	r1, #3
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff f979 	bl	8001a08 <LL_ADC_GetOffsetChannel>
 8002716:	4603      	mov	r3, r0
 8002718:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800271c:	2b00      	cmp	r3, #0
 800271e:	d10a      	bne.n	8002736 <HAL_ADC_ConfigChannel+0x396>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2103      	movs	r1, #3
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff f96e 	bl	8001a08 <LL_ADC_GetOffsetChannel>
 800272c:	4603      	mov	r3, r0
 800272e:	0e9b      	lsrs	r3, r3, #26
 8002730:	f003 021f 	and.w	r2, r3, #31
 8002734:	e017      	b.n	8002766 <HAL_ADC_ConfigChannel+0x3c6>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2103      	movs	r1, #3
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff f963 	bl	8001a08 <LL_ADC_GetOffsetChannel>
 8002742:	4603      	mov	r3, r0
 8002744:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002746:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002748:	fa93 f3a3 	rbit	r3, r3
 800274c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800274e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002750:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002752:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002754:	2b00      	cmp	r3, #0
 8002756:	d101      	bne.n	800275c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002758:	2320      	movs	r3, #32
 800275a:	e003      	b.n	8002764 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 800275c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800275e:	fab3 f383 	clz	r3, r3
 8002762:	b2db      	uxtb	r3, r3
 8002764:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800276e:	2b00      	cmp	r3, #0
 8002770:	d105      	bne.n	800277e <HAL_ADC_ConfigChannel+0x3de>
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	0e9b      	lsrs	r3, r3, #26
 8002778:	f003 031f 	and.w	r3, r3, #31
 800277c:	e011      	b.n	80027a2 <HAL_ADC_ConfigChannel+0x402>
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002784:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002786:	fa93 f3a3 	rbit	r3, r3
 800278a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800278c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800278e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002796:	2320      	movs	r3, #32
 8002798:	e003      	b.n	80027a2 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800279a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800279c:	fab3 f383 	clz	r3, r3
 80027a0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d106      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2200      	movs	r2, #0
 80027ac:	2103      	movs	r1, #3
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff f940 	bl	8001a34 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff fa55 	bl	8001c68 <LL_ADC_IsEnabled>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f040 813f 	bne.w	8002a44 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6818      	ldr	r0, [r3, #0]
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	6819      	ldr	r1, [r3, #0]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	461a      	mov	r2, r3
 80027d4:	f7ff f9b4 	bl	8001b40 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	4a8e      	ldr	r2, [pc, #568]	; (8002a18 <HAL_ADC_ConfigChannel+0x678>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	f040 8130 	bne.w	8002a44 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10b      	bne.n	800280c <HAL_ADC_ConfigChannel+0x46c>
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	0e9b      	lsrs	r3, r3, #26
 80027fa:	3301      	adds	r3, #1
 80027fc:	f003 031f 	and.w	r3, r3, #31
 8002800:	2b09      	cmp	r3, #9
 8002802:	bf94      	ite	ls
 8002804:	2301      	movls	r3, #1
 8002806:	2300      	movhi	r3, #0
 8002808:	b2db      	uxtb	r3, r3
 800280a:	e019      	b.n	8002840 <HAL_ADC_ConfigChannel+0x4a0>
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002812:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002814:	fa93 f3a3 	rbit	r3, r3
 8002818:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800281a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800281c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800281e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002820:	2b00      	cmp	r3, #0
 8002822:	d101      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002824:	2320      	movs	r3, #32
 8002826:	e003      	b.n	8002830 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002828:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800282a:	fab3 f383 	clz	r3, r3
 800282e:	b2db      	uxtb	r3, r3
 8002830:	3301      	adds	r3, #1
 8002832:	f003 031f 	and.w	r3, r3, #31
 8002836:	2b09      	cmp	r3, #9
 8002838:	bf94      	ite	ls
 800283a:	2301      	movls	r3, #1
 800283c:	2300      	movhi	r3, #0
 800283e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002840:	2b00      	cmp	r3, #0
 8002842:	d079      	beq.n	8002938 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800284c:	2b00      	cmp	r3, #0
 800284e:	d107      	bne.n	8002860 <HAL_ADC_ConfigChannel+0x4c0>
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	0e9b      	lsrs	r3, r3, #26
 8002856:	3301      	adds	r3, #1
 8002858:	069b      	lsls	r3, r3, #26
 800285a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800285e:	e015      	b.n	800288c <HAL_ADC_ConfigChannel+0x4ec>
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002866:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002868:	fa93 f3a3 	rbit	r3, r3
 800286c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800286e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002870:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002872:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002878:	2320      	movs	r3, #32
 800287a:	e003      	b.n	8002884 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 800287c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800287e:	fab3 f383 	clz	r3, r3
 8002882:	b2db      	uxtb	r3, r3
 8002884:	3301      	adds	r3, #1
 8002886:	069b      	lsls	r3, r3, #26
 8002888:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002894:	2b00      	cmp	r3, #0
 8002896:	d109      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x50c>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	0e9b      	lsrs	r3, r3, #26
 800289e:	3301      	adds	r3, #1
 80028a0:	f003 031f 	and.w	r3, r3, #31
 80028a4:	2101      	movs	r1, #1
 80028a6:	fa01 f303 	lsl.w	r3, r1, r3
 80028aa:	e017      	b.n	80028dc <HAL_ADC_ConfigChannel+0x53c>
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028b4:	fa93 f3a3 	rbit	r3, r3
 80028b8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80028ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028bc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80028be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d101      	bne.n	80028c8 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80028c4:	2320      	movs	r3, #32
 80028c6:	e003      	b.n	80028d0 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80028c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028ca:	fab3 f383 	clz	r3, r3
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	3301      	adds	r3, #1
 80028d2:	f003 031f 	and.w	r3, r3, #31
 80028d6:	2101      	movs	r1, #1
 80028d8:	fa01 f303 	lsl.w	r3, r1, r3
 80028dc:	ea42 0103 	orr.w	r1, r2, r3
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d10a      	bne.n	8002902 <HAL_ADC_ConfigChannel+0x562>
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	0e9b      	lsrs	r3, r3, #26
 80028f2:	3301      	adds	r3, #1
 80028f4:	f003 021f 	and.w	r2, r3, #31
 80028f8:	4613      	mov	r3, r2
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	4413      	add	r3, r2
 80028fe:	051b      	lsls	r3, r3, #20
 8002900:	e018      	b.n	8002934 <HAL_ADC_ConfigChannel+0x594>
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800290a:	fa93 f3a3 	rbit	r3, r3
 800290e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002912:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800291a:	2320      	movs	r3, #32
 800291c:	e003      	b.n	8002926 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800291e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002920:	fab3 f383 	clz	r3, r3
 8002924:	b2db      	uxtb	r3, r3
 8002926:	3301      	adds	r3, #1
 8002928:	f003 021f 	and.w	r2, r3, #31
 800292c:	4613      	mov	r3, r2
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	4413      	add	r3, r2
 8002932:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002934:	430b      	orrs	r3, r1
 8002936:	e080      	b.n	8002a3a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002940:	2b00      	cmp	r3, #0
 8002942:	d107      	bne.n	8002954 <HAL_ADC_ConfigChannel+0x5b4>
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	0e9b      	lsrs	r3, r3, #26
 800294a:	3301      	adds	r3, #1
 800294c:	069b      	lsls	r3, r3, #26
 800294e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002952:	e015      	b.n	8002980 <HAL_ADC_ConfigChannel+0x5e0>
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295c:	fa93 f3a3 	rbit	r3, r3
 8002960:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002964:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 800296c:	2320      	movs	r3, #32
 800296e:	e003      	b.n	8002978 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002972:	fab3 f383 	clz	r3, r3
 8002976:	b2db      	uxtb	r3, r3
 8002978:	3301      	adds	r3, #1
 800297a:	069b      	lsls	r3, r3, #26
 800297c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002988:	2b00      	cmp	r3, #0
 800298a:	d109      	bne.n	80029a0 <HAL_ADC_ConfigChannel+0x600>
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	0e9b      	lsrs	r3, r3, #26
 8002992:	3301      	adds	r3, #1
 8002994:	f003 031f 	and.w	r3, r3, #31
 8002998:	2101      	movs	r1, #1
 800299a:	fa01 f303 	lsl.w	r3, r1, r3
 800299e:	e017      	b.n	80029d0 <HAL_ADC_ConfigChannel+0x630>
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029a6:	6a3b      	ldr	r3, [r7, #32]
 80029a8:	fa93 f3a3 	rbit	r3, r3
 80029ac:	61fb      	str	r3, [r7, #28]
  return result;
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80029b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d101      	bne.n	80029bc <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80029b8:	2320      	movs	r3, #32
 80029ba:	e003      	b.n	80029c4 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80029bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029be:	fab3 f383 	clz	r3, r3
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	3301      	adds	r3, #1
 80029c6:	f003 031f 	and.w	r3, r3, #31
 80029ca:	2101      	movs	r1, #1
 80029cc:	fa01 f303 	lsl.w	r3, r1, r3
 80029d0:	ea42 0103 	orr.w	r1, r2, r3
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10d      	bne.n	80029fc <HAL_ADC_ConfigChannel+0x65c>
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	0e9b      	lsrs	r3, r3, #26
 80029e6:	3301      	adds	r3, #1
 80029e8:	f003 021f 	and.w	r2, r3, #31
 80029ec:	4613      	mov	r3, r2
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	4413      	add	r3, r2
 80029f2:	3b1e      	subs	r3, #30
 80029f4:	051b      	lsls	r3, r3, #20
 80029f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029fa:	e01d      	b.n	8002a38 <HAL_ADC_ConfigChannel+0x698>
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	fa93 f3a3 	rbit	r3, r3
 8002a08:	613b      	str	r3, [r7, #16]
  return result;
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002a0e:	69bb      	ldr	r3, [r7, #24]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d103      	bne.n	8002a1c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002a14:	2320      	movs	r3, #32
 8002a16:	e005      	b.n	8002a24 <HAL_ADC_ConfigChannel+0x684>
 8002a18:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	fab3 f383 	clz	r3, r3
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	3301      	adds	r3, #1
 8002a26:	f003 021f 	and.w	r2, r3, #31
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	4413      	add	r3, r2
 8002a30:	3b1e      	subs	r3, #30
 8002a32:	051b      	lsls	r3, r3, #20
 8002a34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a38:	430b      	orrs	r3, r1
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	6892      	ldr	r2, [r2, #8]
 8002a3e:	4619      	mov	r1, r3
 8002a40:	f7ff f852 	bl	8001ae8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	4b43      	ldr	r3, [pc, #268]	; (8002b58 <HAL_ADC_ConfigChannel+0x7b8>)
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d079      	beq.n	8002b44 <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a50:	4842      	ldr	r0, [pc, #264]	; (8002b5c <HAL_ADC_ConfigChannel+0x7bc>)
 8002a52:	f7fe ffa7 	bl	80019a4 <LL_ADC_GetCommonPathInternalCh>
 8002a56:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a40      	ldr	r2, [pc, #256]	; (8002b60 <HAL_ADC_ConfigChannel+0x7c0>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d12b      	bne.n	8002abc <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002a64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d125      	bne.n	8002abc <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a3b      	ldr	r2, [pc, #236]	; (8002b64 <HAL_ADC_ConfigChannel+0x7c4>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d004      	beq.n	8002a84 <HAL_ADC_ConfigChannel+0x6e4>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a3a      	ldr	r2, [pc, #232]	; (8002b68 <HAL_ADC_ConfigChannel+0x7c8>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d15c      	bne.n	8002b3e <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a88:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4833      	ldr	r0, [pc, #204]	; (8002b5c <HAL_ADC_ConfigChannel+0x7bc>)
 8002a90:	f7fe ff75 	bl	800197e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002a94:	4b35      	ldr	r3, [pc, #212]	; (8002b6c <HAL_ADC_ConfigChannel+0x7cc>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	099b      	lsrs	r3, r3, #6
 8002a9a:	4a35      	ldr	r2, [pc, #212]	; (8002b70 <HAL_ADC_ConfigChannel+0x7d0>)
 8002a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa0:	099a      	lsrs	r2, r3, #6
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	4413      	add	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002aac:	e002      	b.n	8002ab4 <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1f9      	bne.n	8002aae <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002aba:	e040      	b.n	8002b3e <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a2c      	ldr	r2, [pc, #176]	; (8002b74 <HAL_ADC_ConfigChannel+0x7d4>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d118      	bne.n	8002af8 <HAL_ADC_ConfigChannel+0x758>
 8002ac6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002aca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d112      	bne.n	8002af8 <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a23      	ldr	r2, [pc, #140]	; (8002b64 <HAL_ADC_ConfigChannel+0x7c4>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d004      	beq.n	8002ae6 <HAL_ADC_ConfigChannel+0x746>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a21      	ldr	r2, [pc, #132]	; (8002b68 <HAL_ADC_ConfigChannel+0x7c8>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d12d      	bne.n	8002b42 <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ae6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002aea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aee:	4619      	mov	r1, r3
 8002af0:	481a      	ldr	r0, [pc, #104]	; (8002b5c <HAL_ADC_ConfigChannel+0x7bc>)
 8002af2:	f7fe ff44 	bl	800197e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002af6:	e024      	b.n	8002b42 <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a1e      	ldr	r2, [pc, #120]	; (8002b78 <HAL_ADC_ConfigChannel+0x7d8>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d120      	bne.n	8002b44 <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b02:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d11a      	bne.n	8002b44 <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a14      	ldr	r2, [pc, #80]	; (8002b64 <HAL_ADC_ConfigChannel+0x7c4>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d115      	bne.n	8002b44 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b1c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b20:	4619      	mov	r1, r3
 8002b22:	480e      	ldr	r0, [pc, #56]	; (8002b5c <HAL_ADC_ConfigChannel+0x7bc>)
 8002b24:	f7fe ff2b 	bl	800197e <LL_ADC_SetCommonPathInternalCh>
 8002b28:	e00c      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2e:	f043 0220 	orr.w	r2, r3, #32
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002b3c:	e002      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b3e:	bf00      	nop
 8002b40:	e000      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b42:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002b4c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	37d8      	adds	r7, #216	; 0xd8
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	80080000 	.word	0x80080000
 8002b5c:	50040300 	.word	0x50040300
 8002b60:	c7520000 	.word	0xc7520000
 8002b64:	50040000 	.word	0x50040000
 8002b68:	50040200 	.word	0x50040200
 8002b6c:	20000000 	.word	0x20000000
 8002b70:	053e2d63 	.word	0x053e2d63
 8002b74:	cb840000 	.word	0xcb840000
 8002b78:	80000001 	.word	0x80000001

08002b7c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7ff f86d 	bl	8001c68 <LL_ADC_IsEnabled>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d146      	bne.n	8002c22 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689a      	ldr	r2, [r3, #8]
 8002b9a:	4b24      	ldr	r3, [pc, #144]	; (8002c2c <ADC_Enable+0xb0>)
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00d      	beq.n	8002bbe <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba6:	f043 0210 	orr.w	r2, r3, #16
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb2:	f043 0201 	orr.w	r2, r3, #1
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e032      	b.n	8002c24 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff f83c 	bl	8001c40 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002bc8:	f7fe feba 	bl	8001940 <HAL_GetTick>
 8002bcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bce:	e021      	b.n	8002c14 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff f847 	bl	8001c68 <LL_ADC_IsEnabled>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d104      	bne.n	8002bea <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff f82b 	bl	8001c40 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002bea:	f7fe fea9 	bl	8001940 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d90d      	bls.n	8002c14 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bfc:	f043 0210 	orr.w	r2, r3, #16
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c08:	f043 0201 	orr.w	r2, r3, #1
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e007      	b.n	8002c24 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d1d6      	bne.n	8002bd0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3710      	adds	r7, #16
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	8000003f 	.word	0x8000003f

08002c30 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c42:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d14b      	bne.n	8002ce2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c4e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0308 	and.w	r3, r3, #8
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d021      	beq.n	8002ca8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7fe fefe 	bl	8001a6a <LL_ADC_REG_IsTriggerSourceSWStart>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d032      	beq.n	8002cda <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d12b      	bne.n	8002cda <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d11f      	bne.n	8002cda <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c9e:	f043 0201 	orr.w	r2, r3, #1
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	655a      	str	r2, [r3, #84]	; 0x54
 8002ca6:	e018      	b.n	8002cda <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d111      	bne.n	8002cda <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d105      	bne.n	8002cda <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd2:	f043 0201 	orr.w	r2, r3, #1
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f7fe fb1e 	bl	800131c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002ce0:	e00e      	b.n	8002d00 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce6:	f003 0310 	and.w	r3, r3, #16
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d003      	beq.n	8002cf6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	f7ff fb4c 	bl	800238c <HAL_ADC_ErrorCallback>
}
 8002cf4:	e004      	b.n	8002d00 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	4798      	blx	r3
}
 8002d00:	bf00      	nop
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d14:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002d16:	68f8      	ldr	r0, [r7, #12]
 8002d18:	f7ff fb2e 	bl	8002378 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d1c:	bf00      	nop
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d30:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d36:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d42:	f043 0204 	orr.w	r2, r3, #4
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	f7ff fb1e 	bl	800238c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d50:	bf00      	nop
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <LL_ADC_IsEnabled>:
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d101      	bne.n	8002d70 <LL_ADC_IsEnabled+0x18>
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e000      	b.n	8002d72 <LL_ADC_IsEnabled+0x1a>
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <LL_ADC_REG_IsConversionOngoing>:
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f003 0304 	and.w	r3, r3, #4
 8002d8e:	2b04      	cmp	r3, #4
 8002d90:	d101      	bne.n	8002d96 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d92:	2301      	movs	r3, #1
 8002d94:	e000      	b.n	8002d98 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002da4:	b590      	push	{r4, r7, lr}
 8002da6:	b09f      	sub	sp, #124	; 0x7c
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dae:	2300      	movs	r3, #0
 8002db0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d101      	bne.n	8002dc2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	e08f      	b.n	8002ee2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a47      	ldr	r2, [pc, #284]	; (8002eec <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d102      	bne.n	8002dda <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002dd4:	4b46      	ldr	r3, [pc, #280]	; (8002ef0 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002dd6:	60bb      	str	r3, [r7, #8]
 8002dd8:	e001      	b.n	8002dde <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8002dda:	2300      	movs	r3, #0
 8002ddc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10b      	bne.n	8002dfc <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002de8:	f043 0220 	orr.w	r2, r3, #32
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e072      	b.n	8002ee2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff ffbd 	bl	8002d7e <LL_ADC_REG_IsConversionOngoing>
 8002e04:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff ffb7 	bl	8002d7e <LL_ADC_REG_IsConversionOngoing>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d154      	bne.n	8002ec0 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002e16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d151      	bne.n	8002ec0 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002e1c:	4b35      	ldr	r3, [pc, #212]	; (8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002e1e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d02c      	beq.n	8002e82 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	6859      	ldr	r1, [r3, #4]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e3a:	035b      	lsls	r3, r3, #13
 8002e3c:	430b      	orrs	r3, r1
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e42:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e44:	4829      	ldr	r0, [pc, #164]	; (8002eec <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002e46:	f7ff ff87 	bl	8002d58 <LL_ADC_IsEnabled>
 8002e4a:	4604      	mov	r4, r0
 8002e4c:	4828      	ldr	r0, [pc, #160]	; (8002ef0 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002e4e:	f7ff ff83 	bl	8002d58 <LL_ADC_IsEnabled>
 8002e52:	4603      	mov	r3, r0
 8002e54:	431c      	orrs	r4, r3
 8002e56:	4828      	ldr	r0, [pc, #160]	; (8002ef8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002e58:	f7ff ff7e 	bl	8002d58 <LL_ADC_IsEnabled>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	4323      	orrs	r3, r4
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d137      	bne.n	8002ed4 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002e64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002e6c:	f023 030f 	bic.w	r3, r3, #15
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	6811      	ldr	r1, [r2, #0]
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	6892      	ldr	r2, [r2, #8]
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e7e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e80:	e028      	b.n	8002ed4 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002e82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e8c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e8e:	4817      	ldr	r0, [pc, #92]	; (8002eec <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002e90:	f7ff ff62 	bl	8002d58 <LL_ADC_IsEnabled>
 8002e94:	4604      	mov	r4, r0
 8002e96:	4816      	ldr	r0, [pc, #88]	; (8002ef0 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002e98:	f7ff ff5e 	bl	8002d58 <LL_ADC_IsEnabled>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	431c      	orrs	r4, r3
 8002ea0:	4815      	ldr	r0, [pc, #84]	; (8002ef8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002ea2:	f7ff ff59 	bl	8002d58 <LL_ADC_IsEnabled>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	4323      	orrs	r3, r4
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d112      	bne.n	8002ed4 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002eae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002eb6:	f023 030f 	bic.w	r3, r3, #15
 8002eba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002ebc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ebe:	e009      	b.n	8002ed4 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec4:	f043 0220 	orr.w	r2, r3, #32
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002ed2:	e000      	b.n	8002ed6 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ed4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ede:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	377c      	adds	r7, #124	; 0x7c
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd90      	pop	{r4, r7, pc}
 8002eea:	bf00      	nop
 8002eec:	50040000 	.word	0x50040000
 8002ef0:	50040100 	.word	0x50040100
 8002ef4:	50040300 	.word	0x50040300
 8002ef8:	50040200 	.word	0x50040200

08002efc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f003 0307 	and.w	r3, r3, #7
 8002f0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f0c:	4b0c      	ldr	r3, [pc, #48]	; (8002f40 <__NVIC_SetPriorityGrouping+0x44>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f12:	68ba      	ldr	r2, [r7, #8]
 8002f14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f18:	4013      	ands	r3, r2
 8002f1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f2e:	4a04      	ldr	r2, [pc, #16]	; (8002f40 <__NVIC_SetPriorityGrouping+0x44>)
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	60d3      	str	r3, [r2, #12]
}
 8002f34:	bf00      	nop
 8002f36:	3714      	adds	r7, #20
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	e000ed00 	.word	0xe000ed00

08002f44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f48:	4b04      	ldr	r3, [pc, #16]	; (8002f5c <__NVIC_GetPriorityGrouping+0x18>)
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	0a1b      	lsrs	r3, r3, #8
 8002f4e:	f003 0307 	and.w	r3, r3, #7
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr
 8002f5c:	e000ed00 	.word	0xe000ed00

08002f60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	4603      	mov	r3, r0
 8002f68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	db0b      	blt.n	8002f8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f72:	79fb      	ldrb	r3, [r7, #7]
 8002f74:	f003 021f 	and.w	r2, r3, #31
 8002f78:	4907      	ldr	r1, [pc, #28]	; (8002f98 <__NVIC_EnableIRQ+0x38>)
 8002f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f7e:	095b      	lsrs	r3, r3, #5
 8002f80:	2001      	movs	r0, #1
 8002f82:	fa00 f202 	lsl.w	r2, r0, r2
 8002f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f8a:	bf00      	nop
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	e000e100 	.word	0xe000e100

08002f9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	6039      	str	r1, [r7, #0]
 8002fa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	db0a      	blt.n	8002fc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	b2da      	uxtb	r2, r3
 8002fb4:	490c      	ldr	r1, [pc, #48]	; (8002fe8 <__NVIC_SetPriority+0x4c>)
 8002fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fba:	0112      	lsls	r2, r2, #4
 8002fbc:	b2d2      	uxtb	r2, r2
 8002fbe:	440b      	add	r3, r1
 8002fc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fc4:	e00a      	b.n	8002fdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	b2da      	uxtb	r2, r3
 8002fca:	4908      	ldr	r1, [pc, #32]	; (8002fec <__NVIC_SetPriority+0x50>)
 8002fcc:	79fb      	ldrb	r3, [r7, #7]
 8002fce:	f003 030f 	and.w	r3, r3, #15
 8002fd2:	3b04      	subs	r3, #4
 8002fd4:	0112      	lsls	r2, r2, #4
 8002fd6:	b2d2      	uxtb	r2, r2
 8002fd8:	440b      	add	r3, r1
 8002fda:	761a      	strb	r2, [r3, #24]
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr
 8002fe8:	e000e100 	.word	0xe000e100
 8002fec:	e000ed00 	.word	0xe000ed00

08002ff0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b089      	sub	sp, #36	; 0x24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f003 0307 	and.w	r3, r3, #7
 8003002:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	f1c3 0307 	rsb	r3, r3, #7
 800300a:	2b04      	cmp	r3, #4
 800300c:	bf28      	it	cs
 800300e:	2304      	movcs	r3, #4
 8003010:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	3304      	adds	r3, #4
 8003016:	2b06      	cmp	r3, #6
 8003018:	d902      	bls.n	8003020 <NVIC_EncodePriority+0x30>
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	3b03      	subs	r3, #3
 800301e:	e000      	b.n	8003022 <NVIC_EncodePriority+0x32>
 8003020:	2300      	movs	r3, #0
 8003022:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003024:	f04f 32ff 	mov.w	r2, #4294967295
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	fa02 f303 	lsl.w	r3, r2, r3
 800302e:	43da      	mvns	r2, r3
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	401a      	ands	r2, r3
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003038:	f04f 31ff 	mov.w	r1, #4294967295
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	fa01 f303 	lsl.w	r3, r1, r3
 8003042:	43d9      	mvns	r1, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003048:	4313      	orrs	r3, r2
         );
}
 800304a:	4618      	mov	r0, r3
 800304c:	3724      	adds	r7, #36	; 0x24
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
	...

08003058 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	3b01      	subs	r3, #1
 8003064:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003068:	d301      	bcc.n	800306e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800306a:	2301      	movs	r3, #1
 800306c:	e00f      	b.n	800308e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800306e:	4a0a      	ldr	r2, [pc, #40]	; (8003098 <SysTick_Config+0x40>)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	3b01      	subs	r3, #1
 8003074:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003076:	210f      	movs	r1, #15
 8003078:	f04f 30ff 	mov.w	r0, #4294967295
 800307c:	f7ff ff8e 	bl	8002f9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003080:	4b05      	ldr	r3, [pc, #20]	; (8003098 <SysTick_Config+0x40>)
 8003082:	2200      	movs	r2, #0
 8003084:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003086:	4b04      	ldr	r3, [pc, #16]	; (8003098 <SysTick_Config+0x40>)
 8003088:	2207      	movs	r2, #7
 800308a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	e000e010 	.word	0xe000e010

0800309c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f7ff ff29 	bl	8002efc <__NVIC_SetPriorityGrouping>
}
 80030aa:	bf00      	nop
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b086      	sub	sp, #24
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	4603      	mov	r3, r0
 80030ba:	60b9      	str	r1, [r7, #8]
 80030bc:	607a      	str	r2, [r7, #4]
 80030be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80030c0:	2300      	movs	r3, #0
 80030c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030c4:	f7ff ff3e 	bl	8002f44 <__NVIC_GetPriorityGrouping>
 80030c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	68b9      	ldr	r1, [r7, #8]
 80030ce:	6978      	ldr	r0, [r7, #20]
 80030d0:	f7ff ff8e 	bl	8002ff0 <NVIC_EncodePriority>
 80030d4:	4602      	mov	r2, r0
 80030d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030da:	4611      	mov	r1, r2
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff ff5d 	bl	8002f9c <__NVIC_SetPriority>
}
 80030e2:	bf00      	nop
 80030e4:	3718      	adds	r7, #24
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b082      	sub	sp, #8
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	4603      	mov	r3, r0
 80030f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7ff ff31 	bl	8002f60 <__NVIC_EnableIRQ>
}
 80030fe:	bf00      	nop
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b082      	sub	sp, #8
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7ff ffa2 	bl	8003058 <SysTick_Config>
 8003114:	4603      	mov	r3, r0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
	...

08003120 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e098      	b.n	8003264 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	461a      	mov	r2, r3
 8003138:	4b4d      	ldr	r3, [pc, #308]	; (8003270 <HAL_DMA_Init+0x150>)
 800313a:	429a      	cmp	r2, r3
 800313c:	d80f      	bhi.n	800315e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	461a      	mov	r2, r3
 8003144:	4b4b      	ldr	r3, [pc, #300]	; (8003274 <HAL_DMA_Init+0x154>)
 8003146:	4413      	add	r3, r2
 8003148:	4a4b      	ldr	r2, [pc, #300]	; (8003278 <HAL_DMA_Init+0x158>)
 800314a:	fba2 2303 	umull	r2, r3, r2, r3
 800314e:	091b      	lsrs	r3, r3, #4
 8003150:	009a      	lsls	r2, r3, #2
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a48      	ldr	r2, [pc, #288]	; (800327c <HAL_DMA_Init+0x15c>)
 800315a:	641a      	str	r2, [r3, #64]	; 0x40
 800315c:	e00e      	b.n	800317c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	461a      	mov	r2, r3
 8003164:	4b46      	ldr	r3, [pc, #280]	; (8003280 <HAL_DMA_Init+0x160>)
 8003166:	4413      	add	r3, r2
 8003168:	4a43      	ldr	r2, [pc, #268]	; (8003278 <HAL_DMA_Init+0x158>)
 800316a:	fba2 2303 	umull	r2, r3, r2, r3
 800316e:	091b      	lsrs	r3, r3, #4
 8003170:	009a      	lsls	r2, r3, #2
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a42      	ldr	r2, [pc, #264]	; (8003284 <HAL_DMA_Init+0x164>)
 800317a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2202      	movs	r2, #2
 8003180:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003196:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80031a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031d6:	d039      	beq.n	800324c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031dc:	4a27      	ldr	r2, [pc, #156]	; (800327c <HAL_DMA_Init+0x15c>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d11a      	bne.n	8003218 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80031e2:	4b29      	ldr	r3, [pc, #164]	; (8003288 <HAL_DMA_Init+0x168>)
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ea:	f003 031c 	and.w	r3, r3, #28
 80031ee:	210f      	movs	r1, #15
 80031f0:	fa01 f303 	lsl.w	r3, r1, r3
 80031f4:	43db      	mvns	r3, r3
 80031f6:	4924      	ldr	r1, [pc, #144]	; (8003288 <HAL_DMA_Init+0x168>)
 80031f8:	4013      	ands	r3, r2
 80031fa:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80031fc:	4b22      	ldr	r3, [pc, #136]	; (8003288 <HAL_DMA_Init+0x168>)
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6859      	ldr	r1, [r3, #4]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003208:	f003 031c 	and.w	r3, r3, #28
 800320c:	fa01 f303 	lsl.w	r3, r1, r3
 8003210:	491d      	ldr	r1, [pc, #116]	; (8003288 <HAL_DMA_Init+0x168>)
 8003212:	4313      	orrs	r3, r2
 8003214:	600b      	str	r3, [r1, #0]
 8003216:	e019      	b.n	800324c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003218:	4b1c      	ldr	r3, [pc, #112]	; (800328c <HAL_DMA_Init+0x16c>)
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003220:	f003 031c 	and.w	r3, r3, #28
 8003224:	210f      	movs	r1, #15
 8003226:	fa01 f303 	lsl.w	r3, r1, r3
 800322a:	43db      	mvns	r3, r3
 800322c:	4917      	ldr	r1, [pc, #92]	; (800328c <HAL_DMA_Init+0x16c>)
 800322e:	4013      	ands	r3, r2
 8003230:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003232:	4b16      	ldr	r3, [pc, #88]	; (800328c <HAL_DMA_Init+0x16c>)
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6859      	ldr	r1, [r3, #4]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323e:	f003 031c 	and.w	r3, r3, #28
 8003242:	fa01 f303 	lsl.w	r3, r1, r3
 8003246:	4911      	ldr	r1, [pc, #68]	; (800328c <HAL_DMA_Init+0x16c>)
 8003248:	4313      	orrs	r3, r2
 800324a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2201      	movs	r2, #1
 8003256:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003262:	2300      	movs	r3, #0
}
 8003264:	4618      	mov	r0, r3
 8003266:	3714      	adds	r7, #20
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	40020407 	.word	0x40020407
 8003274:	bffdfff8 	.word	0xbffdfff8
 8003278:	cccccccd 	.word	0xcccccccd
 800327c:	40020000 	.word	0x40020000
 8003280:	bffdfbf8 	.word	0xbffdfbf8
 8003284:	40020400 	.word	0x40020400
 8003288:	400200a8 	.word	0x400200a8
 800328c:	400204a8 	.word	0x400204a8

08003290 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	607a      	str	r2, [r7, #4]
 800329c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800329e:	2300      	movs	r3, #0
 80032a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d101      	bne.n	80032b0 <HAL_DMA_Start_IT+0x20>
 80032ac:	2302      	movs	r3, #2
 80032ae:	e04b      	b.n	8003348 <HAL_DMA_Start_IT+0xb8>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d13a      	bne.n	800333a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2202      	movs	r2, #2
 80032c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 0201 	bic.w	r2, r2, #1
 80032e0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	68b9      	ldr	r1, [r7, #8]
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	f000 f8e0 	bl	80034ae <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d008      	beq.n	8003308 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f042 020e 	orr.w	r2, r2, #14
 8003304:	601a      	str	r2, [r3, #0]
 8003306:	e00f      	b.n	8003328 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f022 0204 	bic.w	r2, r2, #4
 8003316:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 020a 	orr.w	r2, r2, #10
 8003326:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0201 	orr.w	r2, r2, #1
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	e005      	b.n	8003346 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003342:	2302      	movs	r3, #2
 8003344:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003346:	7dfb      	ldrb	r3, [r7, #23]
}
 8003348:	4618      	mov	r0, r3
 800334a:	3718      	adds	r7, #24
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336c:	f003 031c 	and.w	r3, r3, #28
 8003370:	2204      	movs	r2, #4
 8003372:	409a      	lsls	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4013      	ands	r3, r2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d026      	beq.n	80033ca <HAL_DMA_IRQHandler+0x7a>
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	f003 0304 	and.w	r3, r3, #4
 8003382:	2b00      	cmp	r3, #0
 8003384:	d021      	beq.n	80033ca <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0320 	and.w	r3, r3, #32
 8003390:	2b00      	cmp	r3, #0
 8003392:	d107      	bne.n	80033a4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f022 0204 	bic.w	r2, r2, #4
 80033a2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a8:	f003 021c 	and.w	r2, r3, #28
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b0:	2104      	movs	r1, #4
 80033b2:	fa01 f202 	lsl.w	r2, r1, r2
 80033b6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d071      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80033c8:	e06c      	b.n	80034a4 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ce:	f003 031c 	and.w	r3, r3, #28
 80033d2:	2202      	movs	r2, #2
 80033d4:	409a      	lsls	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	4013      	ands	r3, r2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d02e      	beq.n	800343c <HAL_DMA_IRQHandler+0xec>
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	f003 0302 	and.w	r3, r3, #2
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d029      	beq.n	800343c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0320 	and.w	r3, r3, #32
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10b      	bne.n	800340e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f022 020a 	bic.w	r2, r2, #10
 8003404:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2201      	movs	r2, #1
 800340a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003412:	f003 021c 	and.w	r2, r3, #28
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	2102      	movs	r1, #2
 800341c:	fa01 f202 	lsl.w	r2, r1, r2
 8003420:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800342e:	2b00      	cmp	r3, #0
 8003430:	d038      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800343a:	e033      	b.n	80034a4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003440:	f003 031c 	and.w	r3, r3, #28
 8003444:	2208      	movs	r2, #8
 8003446:	409a      	lsls	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	4013      	ands	r3, r2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d02a      	beq.n	80034a6 <HAL_DMA_IRQHandler+0x156>
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	f003 0308 	and.w	r3, r3, #8
 8003456:	2b00      	cmp	r3, #0
 8003458:	d025      	beq.n	80034a6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 020e 	bic.w	r2, r2, #14
 8003468:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346e:	f003 021c 	and.w	r2, r3, #28
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	2101      	movs	r1, #1
 8003478:	fa01 f202 	lsl.w	r2, r1, r2
 800347c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003498:	2b00      	cmp	r3, #0
 800349a:	d004      	beq.n	80034a6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80034a4:	bf00      	nop
 80034a6:	bf00      	nop
}
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034ae:	b480      	push	{r7}
 80034b0:	b085      	sub	sp, #20
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	60f8      	str	r0, [r7, #12]
 80034b6:	60b9      	str	r1, [r7, #8]
 80034b8:	607a      	str	r2, [r7, #4]
 80034ba:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c0:	f003 021c 	and.w	r2, r3, #28
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c8:	2101      	movs	r1, #1
 80034ca:	fa01 f202 	lsl.w	r2, r1, r2
 80034ce:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	683a      	ldr	r2, [r7, #0]
 80034d6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	2b10      	cmp	r3, #16
 80034de:	d108      	bne.n	80034f2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68ba      	ldr	r2, [r7, #8]
 80034ee:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80034f0:	e007      	b.n	8003502 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68ba      	ldr	r2, [r7, #8]
 80034f8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	60da      	str	r2, [r3, #12]
}
 8003502:	bf00      	nop
 8003504:	3714      	adds	r7, #20
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
	...

08003510 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003510:	b480      	push	{r7}
 8003512:	b087      	sub	sp, #28
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800351a:	2300      	movs	r3, #0
 800351c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800351e:	e17f      	b.n	8003820 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	2101      	movs	r1, #1
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	fa01 f303 	lsl.w	r3, r1, r3
 800352c:	4013      	ands	r3, r2
 800352e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2b00      	cmp	r3, #0
 8003534:	f000 8171 	beq.w	800381a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d00b      	beq.n	8003558 <HAL_GPIO_Init+0x48>
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	2b02      	cmp	r3, #2
 8003546:	d007      	beq.n	8003558 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800354c:	2b11      	cmp	r3, #17
 800354e:	d003      	beq.n	8003558 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	2b12      	cmp	r3, #18
 8003556:	d130      	bne.n	80035ba <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	2203      	movs	r2, #3
 8003564:	fa02 f303 	lsl.w	r3, r2, r3
 8003568:	43db      	mvns	r3, r3
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	4013      	ands	r3, r2
 800356e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	68da      	ldr	r2, [r3, #12]
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	fa02 f303 	lsl.w	r3, r2, r3
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	4313      	orrs	r3, r2
 8003580:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800358e:	2201      	movs	r2, #1
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	fa02 f303 	lsl.w	r3, r2, r3
 8003596:	43db      	mvns	r3, r3
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	4013      	ands	r3, r2
 800359c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	091b      	lsrs	r3, r3, #4
 80035a4:	f003 0201 	and.w	r2, r3, #1
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	fa02 f303 	lsl.w	r3, r2, r3
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f003 0303 	and.w	r3, r3, #3
 80035c2:	2b03      	cmp	r3, #3
 80035c4:	d118      	bne.n	80035f8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80035cc:	2201      	movs	r2, #1
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	43db      	mvns	r3, r3
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	4013      	ands	r3, r2
 80035da:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	08db      	lsrs	r3, r3, #3
 80035e2:	f003 0201 	and.w	r2, r3, #1
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ec:	693a      	ldr	r2, [r7, #16]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	2203      	movs	r2, #3
 8003604:	fa02 f303 	lsl.w	r3, r2, r3
 8003608:	43db      	mvns	r3, r3
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	4013      	ands	r3, r2
 800360e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	689a      	ldr	r2, [r3, #8]
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	005b      	lsls	r3, r3, #1
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	4313      	orrs	r3, r2
 8003620:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	2b02      	cmp	r3, #2
 800362e:	d003      	beq.n	8003638 <HAL_GPIO_Init+0x128>
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	2b12      	cmp	r3, #18
 8003636:	d123      	bne.n	8003680 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	08da      	lsrs	r2, r3, #3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	3208      	adds	r2, #8
 8003640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003644:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	f003 0307 	and.w	r3, r3, #7
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	220f      	movs	r2, #15
 8003650:	fa02 f303 	lsl.w	r3, r2, r3
 8003654:	43db      	mvns	r3, r3
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	4013      	ands	r3, r2
 800365a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	691a      	ldr	r2, [r3, #16]
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	f003 0307 	and.w	r3, r3, #7
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	fa02 f303 	lsl.w	r3, r2, r3
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	4313      	orrs	r3, r2
 8003670:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	08da      	lsrs	r2, r3, #3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	3208      	adds	r2, #8
 800367a:	6939      	ldr	r1, [r7, #16]
 800367c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	2203      	movs	r2, #3
 800368c:	fa02 f303 	lsl.w	r3, r2, r3
 8003690:	43db      	mvns	r3, r3
 8003692:	693a      	ldr	r2, [r7, #16]
 8003694:	4013      	ands	r3, r2
 8003696:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f003 0203 	and.w	r2, r3, #3
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	005b      	lsls	r3, r3, #1
 80036a4:	fa02 f303 	lsl.w	r3, r2, r3
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f000 80ac 	beq.w	800381a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036c2:	4b5e      	ldr	r3, [pc, #376]	; (800383c <HAL_GPIO_Init+0x32c>)
 80036c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036c6:	4a5d      	ldr	r2, [pc, #372]	; (800383c <HAL_GPIO_Init+0x32c>)
 80036c8:	f043 0301 	orr.w	r3, r3, #1
 80036cc:	6613      	str	r3, [r2, #96]	; 0x60
 80036ce:	4b5b      	ldr	r3, [pc, #364]	; (800383c <HAL_GPIO_Init+0x32c>)
 80036d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	60bb      	str	r3, [r7, #8]
 80036d8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80036da:	4a59      	ldr	r2, [pc, #356]	; (8003840 <HAL_GPIO_Init+0x330>)
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	089b      	lsrs	r3, r3, #2
 80036e0:	3302      	adds	r3, #2
 80036e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	f003 0303 	and.w	r3, r3, #3
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	220f      	movs	r2, #15
 80036f2:	fa02 f303 	lsl.w	r3, r2, r3
 80036f6:	43db      	mvns	r3, r3
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	4013      	ands	r3, r2
 80036fc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003704:	d025      	beq.n	8003752 <HAL_GPIO_Init+0x242>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a4e      	ldr	r2, [pc, #312]	; (8003844 <HAL_GPIO_Init+0x334>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d01f      	beq.n	800374e <HAL_GPIO_Init+0x23e>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a4d      	ldr	r2, [pc, #308]	; (8003848 <HAL_GPIO_Init+0x338>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d019      	beq.n	800374a <HAL_GPIO_Init+0x23a>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a4c      	ldr	r2, [pc, #304]	; (800384c <HAL_GPIO_Init+0x33c>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d013      	beq.n	8003746 <HAL_GPIO_Init+0x236>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a4b      	ldr	r2, [pc, #300]	; (8003850 <HAL_GPIO_Init+0x340>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d00d      	beq.n	8003742 <HAL_GPIO_Init+0x232>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a4a      	ldr	r2, [pc, #296]	; (8003854 <HAL_GPIO_Init+0x344>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d007      	beq.n	800373e <HAL_GPIO_Init+0x22e>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a49      	ldr	r2, [pc, #292]	; (8003858 <HAL_GPIO_Init+0x348>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d101      	bne.n	800373a <HAL_GPIO_Init+0x22a>
 8003736:	2306      	movs	r3, #6
 8003738:	e00c      	b.n	8003754 <HAL_GPIO_Init+0x244>
 800373a:	2307      	movs	r3, #7
 800373c:	e00a      	b.n	8003754 <HAL_GPIO_Init+0x244>
 800373e:	2305      	movs	r3, #5
 8003740:	e008      	b.n	8003754 <HAL_GPIO_Init+0x244>
 8003742:	2304      	movs	r3, #4
 8003744:	e006      	b.n	8003754 <HAL_GPIO_Init+0x244>
 8003746:	2303      	movs	r3, #3
 8003748:	e004      	b.n	8003754 <HAL_GPIO_Init+0x244>
 800374a:	2302      	movs	r3, #2
 800374c:	e002      	b.n	8003754 <HAL_GPIO_Init+0x244>
 800374e:	2301      	movs	r3, #1
 8003750:	e000      	b.n	8003754 <HAL_GPIO_Init+0x244>
 8003752:	2300      	movs	r3, #0
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	f002 0203 	and.w	r2, r2, #3
 800375a:	0092      	lsls	r2, r2, #2
 800375c:	4093      	lsls	r3, r2
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	4313      	orrs	r3, r2
 8003762:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003764:	4936      	ldr	r1, [pc, #216]	; (8003840 <HAL_GPIO_Init+0x330>)
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	089b      	lsrs	r3, r3, #2
 800376a:	3302      	adds	r3, #2
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003772:	4b3a      	ldr	r3, [pc, #232]	; (800385c <HAL_GPIO_Init+0x34c>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	43db      	mvns	r3, r3
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	4013      	ands	r3, r2
 8003780:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d003      	beq.n	8003796 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	4313      	orrs	r3, r2
 8003794:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003796:	4a31      	ldr	r2, [pc, #196]	; (800385c <HAL_GPIO_Init+0x34c>)
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800379c:	4b2f      	ldr	r3, [pc, #188]	; (800385c <HAL_GPIO_Init+0x34c>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	43db      	mvns	r3, r3
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	4013      	ands	r3, r2
 80037aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d003      	beq.n	80037c0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	4313      	orrs	r3, r2
 80037be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80037c0:	4a26      	ldr	r2, [pc, #152]	; (800385c <HAL_GPIO_Init+0x34c>)
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037c6:	4b25      	ldr	r3, [pc, #148]	; (800385c <HAL_GPIO_Init+0x34c>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	43db      	mvns	r3, r3
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	4013      	ands	r3, r2
 80037d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d003      	beq.n	80037ea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80037ea:	4a1c      	ldr	r2, [pc, #112]	; (800385c <HAL_GPIO_Init+0x34c>)
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80037f0:	4b1a      	ldr	r3, [pc, #104]	; (800385c <HAL_GPIO_Init+0x34c>)
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	43db      	mvns	r3, r3
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	4013      	ands	r3, r2
 80037fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d003      	beq.n	8003814 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	4313      	orrs	r3, r2
 8003812:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003814:	4a11      	ldr	r2, [pc, #68]	; (800385c <HAL_GPIO_Init+0x34c>)
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	3301      	adds	r3, #1
 800381e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	fa22 f303 	lsr.w	r3, r2, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	f47f ae78 	bne.w	8003520 <HAL_GPIO_Init+0x10>
  }
}
 8003830:	bf00      	nop
 8003832:	371c      	adds	r7, #28
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr
 800383c:	40021000 	.word	0x40021000
 8003840:	40010000 	.word	0x40010000
 8003844:	48000400 	.word	0x48000400
 8003848:	48000800 	.word	0x48000800
 800384c:	48000c00 	.word	0x48000c00
 8003850:	48001000 	.word	0x48001000
 8003854:	48001400 	.word	0x48001400
 8003858:	48001800 	.word	0x48001800
 800385c:	40010400 	.word	0x40010400

08003860 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	460b      	mov	r3, r1
 800386a:	807b      	strh	r3, [r7, #2]
 800386c:	4613      	mov	r3, r2
 800386e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003870:	787b      	ldrb	r3, [r7, #1]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d003      	beq.n	800387e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003876:	887a      	ldrh	r2, [r7, #2]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800387c:	e002      	b.n	8003884 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800387e:	887a      	ldrh	r2, [r7, #2]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	460b      	mov	r3, r1
 800389a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80038a2:	887a      	ldrh	r2, [r7, #2]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	4013      	ands	r3, r2
 80038a8:	041a      	lsls	r2, r3, #16
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	43d9      	mvns	r1, r3
 80038ae:	887b      	ldrh	r3, [r7, #2]
 80038b0:	400b      	ands	r3, r1
 80038b2:	431a      	orrs	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	619a      	str	r2, [r3, #24]
}
 80038b8:	bf00      	nop
 80038ba:	3714      	adds	r7, #20
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80038c8:	4b04      	ldr	r3, [pc, #16]	; (80038dc <HAL_PWREx_GetVoltageRange+0x18>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	40007000 	.word	0x40007000

080038e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038ee:	d130      	bne.n	8003952 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80038f0:	4b23      	ldr	r3, [pc, #140]	; (8003980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038fc:	d038      	beq.n	8003970 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80038fe:	4b20      	ldr	r3, [pc, #128]	; (8003980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003906:	4a1e      	ldr	r2, [pc, #120]	; (8003980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003908:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800390c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800390e:	4b1d      	ldr	r3, [pc, #116]	; (8003984 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2232      	movs	r2, #50	; 0x32
 8003914:	fb02 f303 	mul.w	r3, r2, r3
 8003918:	4a1b      	ldr	r2, [pc, #108]	; (8003988 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800391a:	fba2 2303 	umull	r2, r3, r2, r3
 800391e:	0c9b      	lsrs	r3, r3, #18
 8003920:	3301      	adds	r3, #1
 8003922:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003924:	e002      	b.n	800392c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	3b01      	subs	r3, #1
 800392a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800392c:	4b14      	ldr	r3, [pc, #80]	; (8003980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800392e:	695b      	ldr	r3, [r3, #20]
 8003930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003934:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003938:	d102      	bne.n	8003940 <HAL_PWREx_ControlVoltageScaling+0x60>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1f2      	bne.n	8003926 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003940:	4b0f      	ldr	r3, [pc, #60]	; (8003980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003942:	695b      	ldr	r3, [r3, #20]
 8003944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003948:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800394c:	d110      	bne.n	8003970 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e00f      	b.n	8003972 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003952:	4b0b      	ldr	r3, [pc, #44]	; (8003980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800395a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800395e:	d007      	beq.n	8003970 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003960:	4b07      	ldr	r3, [pc, #28]	; (8003980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003968:	4a05      	ldr	r2, [pc, #20]	; (8003980 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800396a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800396e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	3714      	adds	r7, #20
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	40007000 	.word	0x40007000
 8003984:	20000000 	.word	0x20000000
 8003988:	431bde83 	.word	0x431bde83

0800398c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b088      	sub	sp, #32
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e3d4      	b.n	8004148 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800399e:	4ba1      	ldr	r3, [pc, #644]	; (8003c24 <HAL_RCC_OscConfig+0x298>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f003 030c 	and.w	r3, r3, #12
 80039a6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039a8:	4b9e      	ldr	r3, [pc, #632]	; (8003c24 <HAL_RCC_OscConfig+0x298>)
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	f003 0303 	and.w	r3, r3, #3
 80039b0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0310 	and.w	r3, r3, #16
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f000 80e4 	beq.w	8003b88 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d007      	beq.n	80039d6 <HAL_RCC_OscConfig+0x4a>
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	2b0c      	cmp	r3, #12
 80039ca:	f040 808b 	bne.w	8003ae4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	f040 8087 	bne.w	8003ae4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039d6:	4b93      	ldr	r3, [pc, #588]	; (8003c24 <HAL_RCC_OscConfig+0x298>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d005      	beq.n	80039ee <HAL_RCC_OscConfig+0x62>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e3ac      	b.n	8004148 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a1a      	ldr	r2, [r3, #32]
 80039f2:	4b8c      	ldr	r3, [pc, #560]	; (8003c24 <HAL_RCC_OscConfig+0x298>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0308 	and.w	r3, r3, #8
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d004      	beq.n	8003a08 <HAL_RCC_OscConfig+0x7c>
 80039fe:	4b89      	ldr	r3, [pc, #548]	; (8003c24 <HAL_RCC_OscConfig+0x298>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a06:	e005      	b.n	8003a14 <HAL_RCC_OscConfig+0x88>
 8003a08:	4b86      	ldr	r3, [pc, #536]	; (8003c24 <HAL_RCC_OscConfig+0x298>)
 8003a0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a0e:	091b      	lsrs	r3, r3, #4
 8003a10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d223      	bcs.n	8003a60 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a1b      	ldr	r3, [r3, #32]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f000 fd3f 	bl	80044a0 <RCC_SetFlashLatencyFromMSIRange>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e38d      	b.n	8004148 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a2c:	4b7d      	ldr	r3, [pc, #500]	; (8003c24 <HAL_RCC_OscConfig+0x298>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a7c      	ldr	r2, [pc, #496]	; (8003c24 <HAL_RCC_OscConfig+0x298>)
 8003a32:	f043 0308 	orr.w	r3, r3, #8
 8003a36:	6013      	str	r3, [r2, #0]
 8003a38:	4b7a      	ldr	r3, [pc, #488]	; (8003c24 <HAL_RCC_OscConfig+0x298>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	4977      	ldr	r1, [pc, #476]	; (8003c24 <HAL_RCC_OscConfig+0x298>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a4a:	4b76      	ldr	r3, [pc, #472]	; (8003c24 <HAL_RCC_OscConfig+0x298>)
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	69db      	ldr	r3, [r3, #28]
 8003a56:	021b      	lsls	r3, r3, #8
 8003a58:	4972      	ldr	r1, [pc, #456]	; (8003c24 <HAL_RCC_OscConfig+0x298>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	604b      	str	r3, [r1, #4]
 8003a5e:	e025      	b.n	8003aac <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a60:	4b70      	ldr	r3, [pc, #448]	; (8003c24 <HAL_RCC_OscConfig+0x298>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a6f      	ldr	r2, [pc, #444]	; (8003c24 <HAL_RCC_OscConfig+0x298>)
 8003a66:	f043 0308 	orr.w	r3, r3, #8
 8003a6a:	6013      	str	r3, [r2, #0]
 8003a6c:	4b6d      	ldr	r3, [pc, #436]	; (8003c24 <HAL_RCC_OscConfig+0x298>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	496a      	ldr	r1, [pc, #424]	; (8003c24 <HAL_RCC_OscConfig+0x298>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a7e:	4b69      	ldr	r3, [pc, #420]	; (8003c24 <HAL_RCC_OscConfig+0x298>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	021b      	lsls	r3, r3, #8
 8003a8c:	4965      	ldr	r1, [pc, #404]	; (8003c24 <HAL_RCC_OscConfig+0x298>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d109      	bne.n	8003aac <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a1b      	ldr	r3, [r3, #32]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 fcff 	bl	80044a0 <RCC_SetFlashLatencyFromMSIRange>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d001      	beq.n	8003aac <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e34d      	b.n	8004148 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003aac:	f000 fc36 	bl	800431c <HAL_RCC_GetSysClockFreq>
 8003ab0:	4601      	mov	r1, r0
 8003ab2:	4b5c      	ldr	r3, [pc, #368]	; (8003c24 <HAL_RCC_OscConfig+0x298>)
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	091b      	lsrs	r3, r3, #4
 8003ab8:	f003 030f 	and.w	r3, r3, #15
 8003abc:	4a5a      	ldr	r2, [pc, #360]	; (8003c28 <HAL_RCC_OscConfig+0x29c>)
 8003abe:	5cd3      	ldrb	r3, [r2, r3]
 8003ac0:	f003 031f 	and.w	r3, r3, #31
 8003ac4:	fa21 f303 	lsr.w	r3, r1, r3
 8003ac8:	4a58      	ldr	r2, [pc, #352]	; (8003c2c <HAL_RCC_OscConfig+0x2a0>)
 8003aca:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003acc:	4b58      	ldr	r3, [pc, #352]	; (8003c30 <HAL_RCC_OscConfig+0x2a4>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7fd fee5 	bl	80018a0 <HAL_InitTick>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003ada:	7bfb      	ldrb	r3, [r7, #15]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d052      	beq.n	8003b86 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003ae0:	7bfb      	ldrb	r3, [r7, #15]
 8003ae2:	e331      	b.n	8004148 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	699b      	ldr	r3, [r3, #24]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d032      	beq.n	8003b52 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003aec:	4b4d      	ldr	r3, [pc, #308]	; (8003c24 <HAL_RCC_OscConfig+0x298>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a4c      	ldr	r2, [pc, #304]	; (8003c24 <HAL_RCC_OscConfig+0x298>)
 8003af2:	f043 0301 	orr.w	r3, r3, #1
 8003af6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003af8:	f7fd ff22 	bl	8001940 <HAL_GetTick>
 8003afc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003afe:	e008      	b.n	8003b12 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b00:	f7fd ff1e 	bl	8001940 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e31a      	b.n	8004148 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b12:	4b44      	ldr	r3, [pc, #272]	; (8003c24 <HAL_RCC_OscConfig+0x298>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d0f0      	beq.n	8003b00 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b1e:	4b41      	ldr	r3, [pc, #260]	; (8003c24 <HAL_RCC_OscConfig+0x298>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a40      	ldr	r2, [pc, #256]	; (8003c24 <HAL_RCC_OscConfig+0x298>)
 8003b24:	f043 0308 	orr.w	r3, r3, #8
 8003b28:	6013      	str	r3, [r2, #0]
 8003b2a:	4b3e      	ldr	r3, [pc, #248]	; (8003c24 <HAL_RCC_OscConfig+0x298>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	493b      	ldr	r1, [pc, #236]	; (8003c24 <HAL_RCC_OscConfig+0x298>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b3c:	4b39      	ldr	r3, [pc, #228]	; (8003c24 <HAL_RCC_OscConfig+0x298>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	69db      	ldr	r3, [r3, #28]
 8003b48:	021b      	lsls	r3, r3, #8
 8003b4a:	4936      	ldr	r1, [pc, #216]	; (8003c24 <HAL_RCC_OscConfig+0x298>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	604b      	str	r3, [r1, #4]
 8003b50:	e01a      	b.n	8003b88 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003b52:	4b34      	ldr	r3, [pc, #208]	; (8003c24 <HAL_RCC_OscConfig+0x298>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a33      	ldr	r2, [pc, #204]	; (8003c24 <HAL_RCC_OscConfig+0x298>)
 8003b58:	f023 0301 	bic.w	r3, r3, #1
 8003b5c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b5e:	f7fd feef 	bl	8001940 <HAL_GetTick>
 8003b62:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b64:	e008      	b.n	8003b78 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b66:	f7fd feeb 	bl	8001940 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d901      	bls.n	8003b78 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e2e7      	b.n	8004148 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b78:	4b2a      	ldr	r3, [pc, #168]	; (8003c24 <HAL_RCC_OscConfig+0x298>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d1f0      	bne.n	8003b66 <HAL_RCC_OscConfig+0x1da>
 8003b84:	e000      	b.n	8003b88 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b86:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0301 	and.w	r3, r3, #1
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d074      	beq.n	8003c7e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	2b08      	cmp	r3, #8
 8003b98:	d005      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x21a>
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	2b0c      	cmp	r3, #12
 8003b9e:	d10e      	bne.n	8003bbe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	2b03      	cmp	r3, #3
 8003ba4:	d10b      	bne.n	8003bbe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ba6:	4b1f      	ldr	r3, [pc, #124]	; (8003c24 <HAL_RCC_OscConfig+0x298>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d064      	beq.n	8003c7c <HAL_RCC_OscConfig+0x2f0>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d160      	bne.n	8003c7c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e2c4      	b.n	8004148 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bc6:	d106      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x24a>
 8003bc8:	4b16      	ldr	r3, [pc, #88]	; (8003c24 <HAL_RCC_OscConfig+0x298>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a15      	ldr	r2, [pc, #84]	; (8003c24 <HAL_RCC_OscConfig+0x298>)
 8003bce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bd2:	6013      	str	r3, [r2, #0]
 8003bd4:	e01d      	b.n	8003c12 <HAL_RCC_OscConfig+0x286>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bde:	d10c      	bne.n	8003bfa <HAL_RCC_OscConfig+0x26e>
 8003be0:	4b10      	ldr	r3, [pc, #64]	; (8003c24 <HAL_RCC_OscConfig+0x298>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a0f      	ldr	r2, [pc, #60]	; (8003c24 <HAL_RCC_OscConfig+0x298>)
 8003be6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bea:	6013      	str	r3, [r2, #0]
 8003bec:	4b0d      	ldr	r3, [pc, #52]	; (8003c24 <HAL_RCC_OscConfig+0x298>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a0c      	ldr	r2, [pc, #48]	; (8003c24 <HAL_RCC_OscConfig+0x298>)
 8003bf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bf6:	6013      	str	r3, [r2, #0]
 8003bf8:	e00b      	b.n	8003c12 <HAL_RCC_OscConfig+0x286>
 8003bfa:	4b0a      	ldr	r3, [pc, #40]	; (8003c24 <HAL_RCC_OscConfig+0x298>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a09      	ldr	r2, [pc, #36]	; (8003c24 <HAL_RCC_OscConfig+0x298>)
 8003c00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c04:	6013      	str	r3, [r2, #0]
 8003c06:	4b07      	ldr	r3, [pc, #28]	; (8003c24 <HAL_RCC_OscConfig+0x298>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a06      	ldr	r2, [pc, #24]	; (8003c24 <HAL_RCC_OscConfig+0x298>)
 8003c0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c10:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d01c      	beq.n	8003c54 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c1a:	f7fd fe91 	bl	8001940 <HAL_GetTick>
 8003c1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c20:	e011      	b.n	8003c46 <HAL_RCC_OscConfig+0x2ba>
 8003c22:	bf00      	nop
 8003c24:	40021000 	.word	0x40021000
 8003c28:	08006cd0 	.word	0x08006cd0
 8003c2c:	20000000 	.word	0x20000000
 8003c30:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c34:	f7fd fe84 	bl	8001940 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	2b64      	cmp	r3, #100	; 0x64
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e280      	b.n	8004148 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c46:	4baf      	ldr	r3, [pc, #700]	; (8003f04 <HAL_RCC_OscConfig+0x578>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d0f0      	beq.n	8003c34 <HAL_RCC_OscConfig+0x2a8>
 8003c52:	e014      	b.n	8003c7e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c54:	f7fd fe74 	bl	8001940 <HAL_GetTick>
 8003c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c5a:	e008      	b.n	8003c6e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c5c:	f7fd fe70 	bl	8001940 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b64      	cmp	r3, #100	; 0x64
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e26c      	b.n	8004148 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c6e:	4ba5      	ldr	r3, [pc, #660]	; (8003f04 <HAL_RCC_OscConfig+0x578>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1f0      	bne.n	8003c5c <HAL_RCC_OscConfig+0x2d0>
 8003c7a:	e000      	b.n	8003c7e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d060      	beq.n	8003d4c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	2b04      	cmp	r3, #4
 8003c8e:	d005      	beq.n	8003c9c <HAL_RCC_OscConfig+0x310>
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	2b0c      	cmp	r3, #12
 8003c94:	d119      	bne.n	8003cca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d116      	bne.n	8003cca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c9c:	4b99      	ldr	r3, [pc, #612]	; (8003f04 <HAL_RCC_OscConfig+0x578>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d005      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x328>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d101      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e249      	b.n	8004148 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cb4:	4b93      	ldr	r3, [pc, #588]	; (8003f04 <HAL_RCC_OscConfig+0x578>)
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	061b      	lsls	r3, r3, #24
 8003cc2:	4990      	ldr	r1, [pc, #576]	; (8003f04 <HAL_RCC_OscConfig+0x578>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cc8:	e040      	b.n	8003d4c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d023      	beq.n	8003d1a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cd2:	4b8c      	ldr	r3, [pc, #560]	; (8003f04 <HAL_RCC_OscConfig+0x578>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a8b      	ldr	r2, [pc, #556]	; (8003f04 <HAL_RCC_OscConfig+0x578>)
 8003cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cde:	f7fd fe2f 	bl	8001940 <HAL_GetTick>
 8003ce2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ce4:	e008      	b.n	8003cf8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ce6:	f7fd fe2b 	bl	8001940 <HAL_GetTick>
 8003cea:	4602      	mov	r2, r0
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	1ad3      	subs	r3, r2, r3
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d901      	bls.n	8003cf8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e227      	b.n	8004148 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cf8:	4b82      	ldr	r3, [pc, #520]	; (8003f04 <HAL_RCC_OscConfig+0x578>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d0f0      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d04:	4b7f      	ldr	r3, [pc, #508]	; (8003f04 <HAL_RCC_OscConfig+0x578>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	061b      	lsls	r3, r3, #24
 8003d12:	497c      	ldr	r1, [pc, #496]	; (8003f04 <HAL_RCC_OscConfig+0x578>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	604b      	str	r3, [r1, #4]
 8003d18:	e018      	b.n	8003d4c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d1a:	4b7a      	ldr	r3, [pc, #488]	; (8003f04 <HAL_RCC_OscConfig+0x578>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a79      	ldr	r2, [pc, #484]	; (8003f04 <HAL_RCC_OscConfig+0x578>)
 8003d20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d26:	f7fd fe0b 	bl	8001940 <HAL_GetTick>
 8003d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d2c:	e008      	b.n	8003d40 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d2e:	f7fd fe07 	bl	8001940 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d901      	bls.n	8003d40 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e203      	b.n	8004148 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d40:	4b70      	ldr	r3, [pc, #448]	; (8003f04 <HAL_RCC_OscConfig+0x578>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1f0      	bne.n	8003d2e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0308 	and.w	r3, r3, #8
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d03c      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d01c      	beq.n	8003d9a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d60:	4b68      	ldr	r3, [pc, #416]	; (8003f04 <HAL_RCC_OscConfig+0x578>)
 8003d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d66:	4a67      	ldr	r2, [pc, #412]	; (8003f04 <HAL_RCC_OscConfig+0x578>)
 8003d68:	f043 0301 	orr.w	r3, r3, #1
 8003d6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d70:	f7fd fde6 	bl	8001940 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d78:	f7fd fde2 	bl	8001940 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e1de      	b.n	8004148 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d8a:	4b5e      	ldr	r3, [pc, #376]	; (8003f04 <HAL_RCC_OscConfig+0x578>)
 8003d8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d90:	f003 0302 	and.w	r3, r3, #2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d0ef      	beq.n	8003d78 <HAL_RCC_OscConfig+0x3ec>
 8003d98:	e01b      	b.n	8003dd2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d9a:	4b5a      	ldr	r3, [pc, #360]	; (8003f04 <HAL_RCC_OscConfig+0x578>)
 8003d9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003da0:	4a58      	ldr	r2, [pc, #352]	; (8003f04 <HAL_RCC_OscConfig+0x578>)
 8003da2:	f023 0301 	bic.w	r3, r3, #1
 8003da6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003daa:	f7fd fdc9 	bl	8001940 <HAL_GetTick>
 8003dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003db0:	e008      	b.n	8003dc4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003db2:	f7fd fdc5 	bl	8001940 <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d901      	bls.n	8003dc4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e1c1      	b.n	8004148 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003dc4:	4b4f      	ldr	r3, [pc, #316]	; (8003f04 <HAL_RCC_OscConfig+0x578>)
 8003dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d1ef      	bne.n	8003db2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0304 	and.w	r3, r3, #4
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f000 80a6 	beq.w	8003f2c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003de0:	2300      	movs	r3, #0
 8003de2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003de4:	4b47      	ldr	r3, [pc, #284]	; (8003f04 <HAL_RCC_OscConfig+0x578>)
 8003de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d10d      	bne.n	8003e0c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003df0:	4b44      	ldr	r3, [pc, #272]	; (8003f04 <HAL_RCC_OscConfig+0x578>)
 8003df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df4:	4a43      	ldr	r2, [pc, #268]	; (8003f04 <HAL_RCC_OscConfig+0x578>)
 8003df6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dfa:	6593      	str	r3, [r2, #88]	; 0x58
 8003dfc:	4b41      	ldr	r3, [pc, #260]	; (8003f04 <HAL_RCC_OscConfig+0x578>)
 8003dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e04:	60bb      	str	r3, [r7, #8]
 8003e06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e0c:	4b3e      	ldr	r3, [pc, #248]	; (8003f08 <HAL_RCC_OscConfig+0x57c>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d118      	bne.n	8003e4a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e18:	4b3b      	ldr	r3, [pc, #236]	; (8003f08 <HAL_RCC_OscConfig+0x57c>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a3a      	ldr	r2, [pc, #232]	; (8003f08 <HAL_RCC_OscConfig+0x57c>)
 8003e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e24:	f7fd fd8c 	bl	8001940 <HAL_GetTick>
 8003e28:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e2a:	e008      	b.n	8003e3e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e2c:	f7fd fd88 	bl	8001940 <HAL_GetTick>
 8003e30:	4602      	mov	r2, r0
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	1ad3      	subs	r3, r2, r3
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d901      	bls.n	8003e3e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003e3a:	2303      	movs	r3, #3
 8003e3c:	e184      	b.n	8004148 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e3e:	4b32      	ldr	r3, [pc, #200]	; (8003f08 <HAL_RCC_OscConfig+0x57c>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d0f0      	beq.n	8003e2c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d108      	bne.n	8003e64 <HAL_RCC_OscConfig+0x4d8>
 8003e52:	4b2c      	ldr	r3, [pc, #176]	; (8003f04 <HAL_RCC_OscConfig+0x578>)
 8003e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e58:	4a2a      	ldr	r2, [pc, #168]	; (8003f04 <HAL_RCC_OscConfig+0x578>)
 8003e5a:	f043 0301 	orr.w	r3, r3, #1
 8003e5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e62:	e024      	b.n	8003eae <HAL_RCC_OscConfig+0x522>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	2b05      	cmp	r3, #5
 8003e6a:	d110      	bne.n	8003e8e <HAL_RCC_OscConfig+0x502>
 8003e6c:	4b25      	ldr	r3, [pc, #148]	; (8003f04 <HAL_RCC_OscConfig+0x578>)
 8003e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e72:	4a24      	ldr	r2, [pc, #144]	; (8003f04 <HAL_RCC_OscConfig+0x578>)
 8003e74:	f043 0304 	orr.w	r3, r3, #4
 8003e78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e7c:	4b21      	ldr	r3, [pc, #132]	; (8003f04 <HAL_RCC_OscConfig+0x578>)
 8003e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e82:	4a20      	ldr	r2, [pc, #128]	; (8003f04 <HAL_RCC_OscConfig+0x578>)
 8003e84:	f043 0301 	orr.w	r3, r3, #1
 8003e88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e8c:	e00f      	b.n	8003eae <HAL_RCC_OscConfig+0x522>
 8003e8e:	4b1d      	ldr	r3, [pc, #116]	; (8003f04 <HAL_RCC_OscConfig+0x578>)
 8003e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e94:	4a1b      	ldr	r2, [pc, #108]	; (8003f04 <HAL_RCC_OscConfig+0x578>)
 8003e96:	f023 0301 	bic.w	r3, r3, #1
 8003e9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e9e:	4b19      	ldr	r3, [pc, #100]	; (8003f04 <HAL_RCC_OscConfig+0x578>)
 8003ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea4:	4a17      	ldr	r2, [pc, #92]	; (8003f04 <HAL_RCC_OscConfig+0x578>)
 8003ea6:	f023 0304 	bic.w	r3, r3, #4
 8003eaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d016      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb6:	f7fd fd43 	bl	8001940 <HAL_GetTick>
 8003eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ebc:	e00a      	b.n	8003ed4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ebe:	f7fd fd3f 	bl	8001940 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d901      	bls.n	8003ed4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003ed0:	2303      	movs	r3, #3
 8003ed2:	e139      	b.n	8004148 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ed4:	4b0b      	ldr	r3, [pc, #44]	; (8003f04 <HAL_RCC_OscConfig+0x578>)
 8003ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d0ed      	beq.n	8003ebe <HAL_RCC_OscConfig+0x532>
 8003ee2:	e01a      	b.n	8003f1a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee4:	f7fd fd2c 	bl	8001940 <HAL_GetTick>
 8003ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003eea:	e00f      	b.n	8003f0c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eec:	f7fd fd28 	bl	8001940 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d906      	bls.n	8003f0c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e122      	b.n	8004148 <HAL_RCC_OscConfig+0x7bc>
 8003f02:	bf00      	nop
 8003f04:	40021000 	.word	0x40021000
 8003f08:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f0c:	4b90      	ldr	r3, [pc, #576]	; (8004150 <HAL_RCC_OscConfig+0x7c4>)
 8003f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1e8      	bne.n	8003eec <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f1a:	7ffb      	ldrb	r3, [r7, #31]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d105      	bne.n	8003f2c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f20:	4b8b      	ldr	r3, [pc, #556]	; (8004150 <HAL_RCC_OscConfig+0x7c4>)
 8003f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f24:	4a8a      	ldr	r2, [pc, #552]	; (8004150 <HAL_RCC_OscConfig+0x7c4>)
 8003f26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f2a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 8108 	beq.w	8004146 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	f040 80d0 	bne.w	80040e0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003f40:	4b83      	ldr	r3, [pc, #524]	; (8004150 <HAL_RCC_OscConfig+0x7c4>)
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f003 0203 	and.w	r2, r3, #3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d130      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d127      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f70:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d11f      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f80:	2a07      	cmp	r2, #7
 8003f82:	bf14      	ite	ne
 8003f84:	2201      	movne	r2, #1
 8003f86:	2200      	moveq	r2, #0
 8003f88:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d113      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f98:	085b      	lsrs	r3, r3, #1
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d109      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fac:	085b      	lsrs	r3, r3, #1
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d06e      	beq.n	8004094 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	2b0c      	cmp	r3, #12
 8003fba:	d069      	beq.n	8004090 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003fbc:	4b64      	ldr	r3, [pc, #400]	; (8004150 <HAL_RCC_OscConfig+0x7c4>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d105      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003fc8:	4b61      	ldr	r3, [pc, #388]	; (8004150 <HAL_RCC_OscConfig+0x7c4>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d001      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e0b7      	b.n	8004148 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003fd8:	4b5d      	ldr	r3, [pc, #372]	; (8004150 <HAL_RCC_OscConfig+0x7c4>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a5c      	ldr	r2, [pc, #368]	; (8004150 <HAL_RCC_OscConfig+0x7c4>)
 8003fde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fe2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003fe4:	f7fd fcac 	bl	8001940 <HAL_GetTick>
 8003fe8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fea:	e008      	b.n	8003ffe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fec:	f7fd fca8 	bl	8001940 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e0a4      	b.n	8004148 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ffe:	4b54      	ldr	r3, [pc, #336]	; (8004150 <HAL_RCC_OscConfig+0x7c4>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1f0      	bne.n	8003fec <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800400a:	4b51      	ldr	r3, [pc, #324]	; (8004150 <HAL_RCC_OscConfig+0x7c4>)
 800400c:	68da      	ldr	r2, [r3, #12]
 800400e:	4b51      	ldr	r3, [pc, #324]	; (8004154 <HAL_RCC_OscConfig+0x7c8>)
 8004010:	4013      	ands	r3, r2
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800401a:	3a01      	subs	r2, #1
 800401c:	0112      	lsls	r2, r2, #4
 800401e:	4311      	orrs	r1, r2
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004024:	0212      	lsls	r2, r2, #8
 8004026:	4311      	orrs	r1, r2
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800402c:	0852      	lsrs	r2, r2, #1
 800402e:	3a01      	subs	r2, #1
 8004030:	0552      	lsls	r2, r2, #21
 8004032:	4311      	orrs	r1, r2
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004038:	0852      	lsrs	r2, r2, #1
 800403a:	3a01      	subs	r2, #1
 800403c:	0652      	lsls	r2, r2, #25
 800403e:	4311      	orrs	r1, r2
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004044:	0912      	lsrs	r2, r2, #4
 8004046:	0452      	lsls	r2, r2, #17
 8004048:	430a      	orrs	r2, r1
 800404a:	4941      	ldr	r1, [pc, #260]	; (8004150 <HAL_RCC_OscConfig+0x7c4>)
 800404c:	4313      	orrs	r3, r2
 800404e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004050:	4b3f      	ldr	r3, [pc, #252]	; (8004150 <HAL_RCC_OscConfig+0x7c4>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a3e      	ldr	r2, [pc, #248]	; (8004150 <HAL_RCC_OscConfig+0x7c4>)
 8004056:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800405a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800405c:	4b3c      	ldr	r3, [pc, #240]	; (8004150 <HAL_RCC_OscConfig+0x7c4>)
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	4a3b      	ldr	r2, [pc, #236]	; (8004150 <HAL_RCC_OscConfig+0x7c4>)
 8004062:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004066:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004068:	f7fd fc6a 	bl	8001940 <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800406e:	e008      	b.n	8004082 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004070:	f7fd fc66 	bl	8001940 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b02      	cmp	r3, #2
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e062      	b.n	8004148 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004082:	4b33      	ldr	r3, [pc, #204]	; (8004150 <HAL_RCC_OscConfig+0x7c4>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d0f0      	beq.n	8004070 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800408e:	e05a      	b.n	8004146 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e059      	b.n	8004148 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004094:	4b2e      	ldr	r3, [pc, #184]	; (8004150 <HAL_RCC_OscConfig+0x7c4>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d152      	bne.n	8004146 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80040a0:	4b2b      	ldr	r3, [pc, #172]	; (8004150 <HAL_RCC_OscConfig+0x7c4>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a2a      	ldr	r2, [pc, #168]	; (8004150 <HAL_RCC_OscConfig+0x7c4>)
 80040a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040ac:	4b28      	ldr	r3, [pc, #160]	; (8004150 <HAL_RCC_OscConfig+0x7c4>)
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	4a27      	ldr	r2, [pc, #156]	; (8004150 <HAL_RCC_OscConfig+0x7c4>)
 80040b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80040b8:	f7fd fc42 	bl	8001940 <HAL_GetTick>
 80040bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040be:	e008      	b.n	80040d2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040c0:	f7fd fc3e 	bl	8001940 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e03a      	b.n	8004148 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040d2:	4b1f      	ldr	r3, [pc, #124]	; (8004150 <HAL_RCC_OscConfig+0x7c4>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d0f0      	beq.n	80040c0 <HAL_RCC_OscConfig+0x734>
 80040de:	e032      	b.n	8004146 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	2b0c      	cmp	r3, #12
 80040e4:	d02d      	beq.n	8004142 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040e6:	4b1a      	ldr	r3, [pc, #104]	; (8004150 <HAL_RCC_OscConfig+0x7c4>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a19      	ldr	r2, [pc, #100]	; (8004150 <HAL_RCC_OscConfig+0x7c4>)
 80040ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040f0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80040f2:	4b17      	ldr	r3, [pc, #92]	; (8004150 <HAL_RCC_OscConfig+0x7c4>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d105      	bne.n	800410a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80040fe:	4b14      	ldr	r3, [pc, #80]	; (8004150 <HAL_RCC_OscConfig+0x7c4>)
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	4a13      	ldr	r2, [pc, #76]	; (8004150 <HAL_RCC_OscConfig+0x7c4>)
 8004104:	f023 0303 	bic.w	r3, r3, #3
 8004108:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800410a:	4b11      	ldr	r3, [pc, #68]	; (8004150 <HAL_RCC_OscConfig+0x7c4>)
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	4a10      	ldr	r2, [pc, #64]	; (8004150 <HAL_RCC_OscConfig+0x7c4>)
 8004110:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004114:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004118:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800411a:	f7fd fc11 	bl	8001940 <HAL_GetTick>
 800411e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004120:	e008      	b.n	8004134 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004122:	f7fd fc0d 	bl	8001940 <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	2b02      	cmp	r3, #2
 800412e:	d901      	bls.n	8004134 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e009      	b.n	8004148 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004134:	4b06      	ldr	r3, [pc, #24]	; (8004150 <HAL_RCC_OscConfig+0x7c4>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1f0      	bne.n	8004122 <HAL_RCC_OscConfig+0x796>
 8004140:	e001      	b.n	8004146 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e000      	b.n	8004148 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	3720      	adds	r7, #32
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	40021000 	.word	0x40021000
 8004154:	f99d808c 	.word	0xf99d808c

08004158 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d101      	bne.n	800416c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e0c8      	b.n	80042fe <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800416c:	4b66      	ldr	r3, [pc, #408]	; (8004308 <HAL_RCC_ClockConfig+0x1b0>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0307 	and.w	r3, r3, #7
 8004174:	683a      	ldr	r2, [r7, #0]
 8004176:	429a      	cmp	r2, r3
 8004178:	d910      	bls.n	800419c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800417a:	4b63      	ldr	r3, [pc, #396]	; (8004308 <HAL_RCC_ClockConfig+0x1b0>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f023 0207 	bic.w	r2, r3, #7
 8004182:	4961      	ldr	r1, [pc, #388]	; (8004308 <HAL_RCC_ClockConfig+0x1b0>)
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	4313      	orrs	r3, r2
 8004188:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800418a:	4b5f      	ldr	r3, [pc, #380]	; (8004308 <HAL_RCC_ClockConfig+0x1b0>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0307 	and.w	r3, r3, #7
 8004192:	683a      	ldr	r2, [r7, #0]
 8004194:	429a      	cmp	r2, r3
 8004196:	d001      	beq.n	800419c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e0b0      	b.n	80042fe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0301 	and.w	r3, r3, #1
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d04c      	beq.n	8004242 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	2b03      	cmp	r3, #3
 80041ae:	d107      	bne.n	80041c0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041b0:	4b56      	ldr	r3, [pc, #344]	; (800430c <HAL_RCC_ClockConfig+0x1b4>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d121      	bne.n	8004200 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e09e      	b.n	80042fe <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d107      	bne.n	80041d8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041c8:	4b50      	ldr	r3, [pc, #320]	; (800430c <HAL_RCC_ClockConfig+0x1b4>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d115      	bne.n	8004200 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e092      	b.n	80042fe <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d107      	bne.n	80041f0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041e0:	4b4a      	ldr	r3, [pc, #296]	; (800430c <HAL_RCC_ClockConfig+0x1b4>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d109      	bne.n	8004200 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e086      	b.n	80042fe <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041f0:	4b46      	ldr	r3, [pc, #280]	; (800430c <HAL_RCC_ClockConfig+0x1b4>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d101      	bne.n	8004200 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e07e      	b.n	80042fe <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004200:	4b42      	ldr	r3, [pc, #264]	; (800430c <HAL_RCC_ClockConfig+0x1b4>)
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f023 0203 	bic.w	r2, r3, #3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	493f      	ldr	r1, [pc, #252]	; (800430c <HAL_RCC_ClockConfig+0x1b4>)
 800420e:	4313      	orrs	r3, r2
 8004210:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004212:	f7fd fb95 	bl	8001940 <HAL_GetTick>
 8004216:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004218:	e00a      	b.n	8004230 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800421a:	f7fd fb91 	bl	8001940 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	f241 3288 	movw	r2, #5000	; 0x1388
 8004228:	4293      	cmp	r3, r2
 800422a:	d901      	bls.n	8004230 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e066      	b.n	80042fe <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004230:	4b36      	ldr	r3, [pc, #216]	; (800430c <HAL_RCC_ClockConfig+0x1b4>)
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f003 020c 	and.w	r2, r3, #12
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	429a      	cmp	r2, r3
 8004240:	d1eb      	bne.n	800421a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d008      	beq.n	8004260 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800424e:	4b2f      	ldr	r3, [pc, #188]	; (800430c <HAL_RCC_ClockConfig+0x1b4>)
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	492c      	ldr	r1, [pc, #176]	; (800430c <HAL_RCC_ClockConfig+0x1b4>)
 800425c:	4313      	orrs	r3, r2
 800425e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004260:	4b29      	ldr	r3, [pc, #164]	; (8004308 <HAL_RCC_ClockConfig+0x1b0>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0307 	and.w	r3, r3, #7
 8004268:	683a      	ldr	r2, [r7, #0]
 800426a:	429a      	cmp	r2, r3
 800426c:	d210      	bcs.n	8004290 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800426e:	4b26      	ldr	r3, [pc, #152]	; (8004308 <HAL_RCC_ClockConfig+0x1b0>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f023 0207 	bic.w	r2, r3, #7
 8004276:	4924      	ldr	r1, [pc, #144]	; (8004308 <HAL_RCC_ClockConfig+0x1b0>)
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	4313      	orrs	r3, r2
 800427c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800427e:	4b22      	ldr	r3, [pc, #136]	; (8004308 <HAL_RCC_ClockConfig+0x1b0>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0307 	and.w	r3, r3, #7
 8004286:	683a      	ldr	r2, [r7, #0]
 8004288:	429a      	cmp	r2, r3
 800428a:	d001      	beq.n	8004290 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e036      	b.n	80042fe <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0304 	and.w	r3, r3, #4
 8004298:	2b00      	cmp	r3, #0
 800429a:	d008      	beq.n	80042ae <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800429c:	4b1b      	ldr	r3, [pc, #108]	; (800430c <HAL_RCC_ClockConfig+0x1b4>)
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	4918      	ldr	r1, [pc, #96]	; (800430c <HAL_RCC_ClockConfig+0x1b4>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0308 	and.w	r3, r3, #8
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d009      	beq.n	80042ce <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042ba:	4b14      	ldr	r3, [pc, #80]	; (800430c <HAL_RCC_ClockConfig+0x1b4>)
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	00db      	lsls	r3, r3, #3
 80042c8:	4910      	ldr	r1, [pc, #64]	; (800430c <HAL_RCC_ClockConfig+0x1b4>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042ce:	f000 f825 	bl	800431c <HAL_RCC_GetSysClockFreq>
 80042d2:	4601      	mov	r1, r0
 80042d4:	4b0d      	ldr	r3, [pc, #52]	; (800430c <HAL_RCC_ClockConfig+0x1b4>)
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	091b      	lsrs	r3, r3, #4
 80042da:	f003 030f 	and.w	r3, r3, #15
 80042de:	4a0c      	ldr	r2, [pc, #48]	; (8004310 <HAL_RCC_ClockConfig+0x1b8>)
 80042e0:	5cd3      	ldrb	r3, [r2, r3]
 80042e2:	f003 031f 	and.w	r3, r3, #31
 80042e6:	fa21 f303 	lsr.w	r3, r1, r3
 80042ea:	4a0a      	ldr	r2, [pc, #40]	; (8004314 <HAL_RCC_ClockConfig+0x1bc>)
 80042ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80042ee:	4b0a      	ldr	r3, [pc, #40]	; (8004318 <HAL_RCC_ClockConfig+0x1c0>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f7fd fad4 	bl	80018a0 <HAL_InitTick>
 80042f8:	4603      	mov	r3, r0
 80042fa:	72fb      	strb	r3, [r7, #11]

  return status;
 80042fc:	7afb      	ldrb	r3, [r7, #11]
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	40022000 	.word	0x40022000
 800430c:	40021000 	.word	0x40021000
 8004310:	08006cd0 	.word	0x08006cd0
 8004314:	20000000 	.word	0x20000000
 8004318:	20000004 	.word	0x20000004

0800431c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800431c:	b480      	push	{r7}
 800431e:	b089      	sub	sp, #36	; 0x24
 8004320:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004322:	2300      	movs	r3, #0
 8004324:	61fb      	str	r3, [r7, #28]
 8004326:	2300      	movs	r3, #0
 8004328:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800432a:	4b3d      	ldr	r3, [pc, #244]	; (8004420 <HAL_RCC_GetSysClockFreq+0x104>)
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f003 030c 	and.w	r3, r3, #12
 8004332:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004334:	4b3a      	ldr	r3, [pc, #232]	; (8004420 <HAL_RCC_GetSysClockFreq+0x104>)
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	f003 0303 	and.w	r3, r3, #3
 800433c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d005      	beq.n	8004350 <HAL_RCC_GetSysClockFreq+0x34>
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	2b0c      	cmp	r3, #12
 8004348:	d121      	bne.n	800438e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d11e      	bne.n	800438e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004350:	4b33      	ldr	r3, [pc, #204]	; (8004420 <HAL_RCC_GetSysClockFreq+0x104>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0308 	and.w	r3, r3, #8
 8004358:	2b00      	cmp	r3, #0
 800435a:	d107      	bne.n	800436c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800435c:	4b30      	ldr	r3, [pc, #192]	; (8004420 <HAL_RCC_GetSysClockFreq+0x104>)
 800435e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004362:	0a1b      	lsrs	r3, r3, #8
 8004364:	f003 030f 	and.w	r3, r3, #15
 8004368:	61fb      	str	r3, [r7, #28]
 800436a:	e005      	b.n	8004378 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800436c:	4b2c      	ldr	r3, [pc, #176]	; (8004420 <HAL_RCC_GetSysClockFreq+0x104>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	091b      	lsrs	r3, r3, #4
 8004372:	f003 030f 	and.w	r3, r3, #15
 8004376:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004378:	4a2a      	ldr	r2, [pc, #168]	; (8004424 <HAL_RCC_GetSysClockFreq+0x108>)
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004380:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d10d      	bne.n	80043a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800438c:	e00a      	b.n	80043a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	2b04      	cmp	r3, #4
 8004392:	d102      	bne.n	800439a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004394:	4b24      	ldr	r3, [pc, #144]	; (8004428 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004396:	61bb      	str	r3, [r7, #24]
 8004398:	e004      	b.n	80043a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	2b08      	cmp	r3, #8
 800439e:	d101      	bne.n	80043a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80043a0:	4b22      	ldr	r3, [pc, #136]	; (800442c <HAL_RCC_GetSysClockFreq+0x110>)
 80043a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	2b0c      	cmp	r3, #12
 80043a8:	d133      	bne.n	8004412 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043aa:	4b1d      	ldr	r3, [pc, #116]	; (8004420 <HAL_RCC_GetSysClockFreq+0x104>)
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	f003 0303 	and.w	r3, r3, #3
 80043b2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d002      	beq.n	80043c0 <HAL_RCC_GetSysClockFreq+0xa4>
 80043ba:	2b03      	cmp	r3, #3
 80043bc:	d003      	beq.n	80043c6 <HAL_RCC_GetSysClockFreq+0xaa>
 80043be:	e005      	b.n	80043cc <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80043c0:	4b19      	ldr	r3, [pc, #100]	; (8004428 <HAL_RCC_GetSysClockFreq+0x10c>)
 80043c2:	617b      	str	r3, [r7, #20]
      break;
 80043c4:	e005      	b.n	80043d2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80043c6:	4b19      	ldr	r3, [pc, #100]	; (800442c <HAL_RCC_GetSysClockFreq+0x110>)
 80043c8:	617b      	str	r3, [r7, #20]
      break;
 80043ca:	e002      	b.n	80043d2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	617b      	str	r3, [r7, #20]
      break;
 80043d0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043d2:	4b13      	ldr	r3, [pc, #76]	; (8004420 <HAL_RCC_GetSysClockFreq+0x104>)
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	091b      	lsrs	r3, r3, #4
 80043d8:	f003 0307 	and.w	r3, r3, #7
 80043dc:	3301      	adds	r3, #1
 80043de:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80043e0:	4b0f      	ldr	r3, [pc, #60]	; (8004420 <HAL_RCC_GetSysClockFreq+0x104>)
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	0a1b      	lsrs	r3, r3, #8
 80043e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043ea:	697a      	ldr	r2, [r7, #20]
 80043ec:	fb02 f203 	mul.w	r2, r2, r3
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043f8:	4b09      	ldr	r3, [pc, #36]	; (8004420 <HAL_RCC_GetSysClockFreq+0x104>)
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	0e5b      	lsrs	r3, r3, #25
 80043fe:	f003 0303 	and.w	r3, r3, #3
 8004402:	3301      	adds	r3, #1
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004408:	697a      	ldr	r2, [r7, #20]
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004410:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004412:	69bb      	ldr	r3, [r7, #24]
}
 8004414:	4618      	mov	r0, r3
 8004416:	3724      	adds	r7, #36	; 0x24
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	40021000 	.word	0x40021000
 8004424:	08006ce8 	.word	0x08006ce8
 8004428:	00f42400 	.word	0x00f42400
 800442c:	007a1200 	.word	0x007a1200

08004430 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004430:	b480      	push	{r7}
 8004432:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004434:	4b03      	ldr	r3, [pc, #12]	; (8004444 <HAL_RCC_GetHCLKFreq+0x14>)
 8004436:	681b      	ldr	r3, [r3, #0]
}
 8004438:	4618      	mov	r0, r3
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	20000000 	.word	0x20000000

08004448 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800444c:	f7ff fff0 	bl	8004430 <HAL_RCC_GetHCLKFreq>
 8004450:	4601      	mov	r1, r0
 8004452:	4b06      	ldr	r3, [pc, #24]	; (800446c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	0a1b      	lsrs	r3, r3, #8
 8004458:	f003 0307 	and.w	r3, r3, #7
 800445c:	4a04      	ldr	r2, [pc, #16]	; (8004470 <HAL_RCC_GetPCLK1Freq+0x28>)
 800445e:	5cd3      	ldrb	r3, [r2, r3]
 8004460:	f003 031f 	and.w	r3, r3, #31
 8004464:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004468:	4618      	mov	r0, r3
 800446a:	bd80      	pop	{r7, pc}
 800446c:	40021000 	.word	0x40021000
 8004470:	08006ce0 	.word	0x08006ce0

08004474 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004478:	f7ff ffda 	bl	8004430 <HAL_RCC_GetHCLKFreq>
 800447c:	4601      	mov	r1, r0
 800447e:	4b06      	ldr	r3, [pc, #24]	; (8004498 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	0adb      	lsrs	r3, r3, #11
 8004484:	f003 0307 	and.w	r3, r3, #7
 8004488:	4a04      	ldr	r2, [pc, #16]	; (800449c <HAL_RCC_GetPCLK2Freq+0x28>)
 800448a:	5cd3      	ldrb	r3, [r2, r3]
 800448c:	f003 031f 	and.w	r3, r3, #31
 8004490:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004494:	4618      	mov	r0, r3
 8004496:	bd80      	pop	{r7, pc}
 8004498:	40021000 	.word	0x40021000
 800449c:	08006ce0 	.word	0x08006ce0

080044a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80044a8:	2300      	movs	r3, #0
 80044aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80044ac:	4b2a      	ldr	r3, [pc, #168]	; (8004558 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d003      	beq.n	80044c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80044b8:	f7ff fa04 	bl	80038c4 <HAL_PWREx_GetVoltageRange>
 80044bc:	6178      	str	r0, [r7, #20]
 80044be:	e014      	b.n	80044ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80044c0:	4b25      	ldr	r3, [pc, #148]	; (8004558 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c4:	4a24      	ldr	r2, [pc, #144]	; (8004558 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ca:	6593      	str	r3, [r2, #88]	; 0x58
 80044cc:	4b22      	ldr	r3, [pc, #136]	; (8004558 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044d4:	60fb      	str	r3, [r7, #12]
 80044d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80044d8:	f7ff f9f4 	bl	80038c4 <HAL_PWREx_GetVoltageRange>
 80044dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80044de:	4b1e      	ldr	r3, [pc, #120]	; (8004558 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e2:	4a1d      	ldr	r2, [pc, #116]	; (8004558 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044e8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044f0:	d10b      	bne.n	800450a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2b80      	cmp	r3, #128	; 0x80
 80044f6:	d919      	bls.n	800452c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2ba0      	cmp	r3, #160	; 0xa0
 80044fc:	d902      	bls.n	8004504 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80044fe:	2302      	movs	r3, #2
 8004500:	613b      	str	r3, [r7, #16]
 8004502:	e013      	b.n	800452c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004504:	2301      	movs	r3, #1
 8004506:	613b      	str	r3, [r7, #16]
 8004508:	e010      	b.n	800452c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2b80      	cmp	r3, #128	; 0x80
 800450e:	d902      	bls.n	8004516 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004510:	2303      	movs	r3, #3
 8004512:	613b      	str	r3, [r7, #16]
 8004514:	e00a      	b.n	800452c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2b80      	cmp	r3, #128	; 0x80
 800451a:	d102      	bne.n	8004522 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800451c:	2302      	movs	r3, #2
 800451e:	613b      	str	r3, [r7, #16]
 8004520:	e004      	b.n	800452c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2b70      	cmp	r3, #112	; 0x70
 8004526:	d101      	bne.n	800452c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004528:	2301      	movs	r3, #1
 800452a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800452c:	4b0b      	ldr	r3, [pc, #44]	; (800455c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f023 0207 	bic.w	r2, r3, #7
 8004534:	4909      	ldr	r1, [pc, #36]	; (800455c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	4313      	orrs	r3, r2
 800453a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800453c:	4b07      	ldr	r3, [pc, #28]	; (800455c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0307 	and.w	r3, r3, #7
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	429a      	cmp	r2, r3
 8004548:	d001      	beq.n	800454e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e000      	b.n	8004550 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3718      	adds	r7, #24
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	40021000 	.word	0x40021000
 800455c:	40022000 	.word	0x40022000

08004560 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b086      	sub	sp, #24
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004568:	2300      	movs	r3, #0
 800456a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800456c:	2300      	movs	r3, #0
 800456e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004578:	2b00      	cmp	r3, #0
 800457a:	d03f      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004580:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004584:	d01c      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004586:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800458a:	d802      	bhi.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00e      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004590:	e01f      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004592:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004596:	d003      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004598:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800459c:	d01c      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800459e:	e018      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80045a0:	4b85      	ldr	r3, [pc, #532]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	4a84      	ldr	r2, [pc, #528]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80045a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045aa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045ac:	e015      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	3304      	adds	r3, #4
 80045b2:	2100      	movs	r1, #0
 80045b4:	4618      	mov	r0, r3
 80045b6:	f000 fab9 	bl	8004b2c <RCCEx_PLLSAI1_Config>
 80045ba:	4603      	mov	r3, r0
 80045bc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045be:	e00c      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	3320      	adds	r3, #32
 80045c4:	2100      	movs	r1, #0
 80045c6:	4618      	mov	r0, r3
 80045c8:	f000 fba0 	bl	8004d0c <RCCEx_PLLSAI2_Config>
 80045cc:	4603      	mov	r3, r0
 80045ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045d0:	e003      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	74fb      	strb	r3, [r7, #19]
      break;
 80045d6:	e000      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80045d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045da:	7cfb      	ldrb	r3, [r7, #19]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d10b      	bne.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045e0:	4b75      	ldr	r3, [pc, #468]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80045e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045ee:	4972      	ldr	r1, [pc, #456]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80045f6:	e001      	b.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045f8:	7cfb      	ldrb	r3, [r7, #19]
 80045fa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d03f      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800460c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004610:	d01c      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004612:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004616:	d802      	bhi.n	800461e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00e      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0xda>
 800461c:	e01f      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800461e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004622:	d003      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8004624:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004628:	d01c      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800462a:	e018      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800462c:	4b62      	ldr	r3, [pc, #392]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	4a61      	ldr	r2, [pc, #388]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004632:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004636:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004638:	e015      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	3304      	adds	r3, #4
 800463e:	2100      	movs	r1, #0
 8004640:	4618      	mov	r0, r3
 8004642:	f000 fa73 	bl	8004b2c <RCCEx_PLLSAI1_Config>
 8004646:	4603      	mov	r3, r0
 8004648:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800464a:	e00c      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	3320      	adds	r3, #32
 8004650:	2100      	movs	r1, #0
 8004652:	4618      	mov	r0, r3
 8004654:	f000 fb5a 	bl	8004d0c <RCCEx_PLLSAI2_Config>
 8004658:	4603      	mov	r3, r0
 800465a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800465c:	e003      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	74fb      	strb	r3, [r7, #19]
      break;
 8004662:	e000      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004664:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004666:	7cfb      	ldrb	r3, [r7, #19]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10b      	bne.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800466c:	4b52      	ldr	r3, [pc, #328]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800466e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004672:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800467a:	494f      	ldr	r1, [pc, #316]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800467c:	4313      	orrs	r3, r2
 800467e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004682:	e001      	b.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004684:	7cfb      	ldrb	r3, [r7, #19]
 8004686:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004690:	2b00      	cmp	r3, #0
 8004692:	f000 80a0 	beq.w	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004696:	2300      	movs	r3, #0
 8004698:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800469a:	4b47      	ldr	r3, [pc, #284]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800469c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800469e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d101      	bne.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80046a6:	2301      	movs	r3, #1
 80046a8:	e000      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80046aa:	2300      	movs	r3, #0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00d      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046b0:	4b41      	ldr	r3, [pc, #260]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80046b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b4:	4a40      	ldr	r2, [pc, #256]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80046b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ba:	6593      	str	r3, [r2, #88]	; 0x58
 80046bc:	4b3e      	ldr	r3, [pc, #248]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80046be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046c4:	60bb      	str	r3, [r7, #8]
 80046c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046c8:	2301      	movs	r3, #1
 80046ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046cc:	4b3b      	ldr	r3, [pc, #236]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a3a      	ldr	r2, [pc, #232]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80046d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046d8:	f7fd f932 	bl	8001940 <HAL_GetTick>
 80046dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046de:	e009      	b.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046e0:	f7fd f92e 	bl	8001940 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d902      	bls.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	74fb      	strb	r3, [r7, #19]
        break;
 80046f2:	e005      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046f4:	4b31      	ldr	r3, [pc, #196]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d0ef      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8004700:	7cfb      	ldrb	r3, [r7, #19]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d15c      	bne.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004706:	4b2c      	ldr	r3, [pc, #176]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004710:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d01f      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	429a      	cmp	r2, r3
 8004722:	d019      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004724:	4b24      	ldr	r3, [pc, #144]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800472a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800472e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004730:	4b21      	ldr	r3, [pc, #132]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004736:	4a20      	ldr	r2, [pc, #128]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800473c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004740:	4b1d      	ldr	r3, [pc, #116]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004746:	4a1c      	ldr	r2, [pc, #112]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004748:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800474c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004750:	4a19      	ldr	r2, [pc, #100]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b00      	cmp	r3, #0
 8004760:	d016      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004762:	f7fd f8ed 	bl	8001940 <HAL_GetTick>
 8004766:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004768:	e00b      	b.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800476a:	f7fd f8e9 	bl	8001940 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	f241 3288 	movw	r2, #5000	; 0x1388
 8004778:	4293      	cmp	r3, r2
 800477a:	d902      	bls.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	74fb      	strb	r3, [r7, #19]
            break;
 8004780:	e006      	b.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004782:	4b0d      	ldr	r3, [pc, #52]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004788:	f003 0302 	and.w	r3, r3, #2
 800478c:	2b00      	cmp	r3, #0
 800478e:	d0ec      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8004790:	7cfb      	ldrb	r3, [r7, #19]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10c      	bne.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004796:	4b08      	ldr	r3, [pc, #32]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800479c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047a6:	4904      	ldr	r1, [pc, #16]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80047ae:	e009      	b.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047b0:	7cfb      	ldrb	r3, [r7, #19]
 80047b2:	74bb      	strb	r3, [r7, #18]
 80047b4:	e006      	b.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80047b6:	bf00      	nop
 80047b8:	40021000 	.word	0x40021000
 80047bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047c0:	7cfb      	ldrb	r3, [r7, #19]
 80047c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047c4:	7c7b      	ldrb	r3, [r7, #17]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d105      	bne.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047ca:	4b9e      	ldr	r3, [pc, #632]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ce:	4a9d      	ldr	r2, [pc, #628]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047d4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00a      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047e2:	4b98      	ldr	r3, [pc, #608]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e8:	f023 0203 	bic.w	r2, r3, #3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f0:	4994      	ldr	r1, [pc, #592]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80047f2:	4313      	orrs	r3, r2
 80047f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00a      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004804:	4b8f      	ldr	r3, [pc, #572]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800480a:	f023 020c 	bic.w	r2, r3, #12
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004812:	498c      	ldr	r1, [pc, #560]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004814:	4313      	orrs	r3, r2
 8004816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0304 	and.w	r3, r3, #4
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00a      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004826:	4b87      	ldr	r3, [pc, #540]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800482c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004834:	4983      	ldr	r1, [pc, #524]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004836:	4313      	orrs	r3, r2
 8004838:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0308 	and.w	r3, r3, #8
 8004844:	2b00      	cmp	r3, #0
 8004846:	d00a      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004848:	4b7e      	ldr	r3, [pc, #504]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800484a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800484e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004856:	497b      	ldr	r1, [pc, #492]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004858:	4313      	orrs	r3, r2
 800485a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0310 	and.w	r3, r3, #16
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00a      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800486a:	4b76      	ldr	r3, [pc, #472]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800486c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004870:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004878:	4972      	ldr	r1, [pc, #456]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800487a:	4313      	orrs	r3, r2
 800487c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0320 	and.w	r3, r3, #32
 8004888:	2b00      	cmp	r3, #0
 800488a:	d00a      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800488c:	4b6d      	ldr	r3, [pc, #436]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800488e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004892:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800489a:	496a      	ldr	r1, [pc, #424]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800489c:	4313      	orrs	r3, r2
 800489e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00a      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048ae:	4b65      	ldr	r3, [pc, #404]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048bc:	4961      	ldr	r1, [pc, #388]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00a      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80048d0:	4b5c      	ldr	r3, [pc, #368]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048de:	4959      	ldr	r1, [pc, #356]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048e0:	4313      	orrs	r3, r2
 80048e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d00a      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048f2:	4b54      	ldr	r3, [pc, #336]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80048f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004900:	4950      	ldr	r1, [pc, #320]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004902:	4313      	orrs	r3, r2
 8004904:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00a      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004914:	4b4b      	ldr	r3, [pc, #300]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800491a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004922:	4948      	ldr	r1, [pc, #288]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004924:	4313      	orrs	r3, r2
 8004926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00a      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004936:	4b43      	ldr	r3, [pc, #268]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800493c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004944:	493f      	ldr	r1, [pc, #252]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004946:	4313      	orrs	r3, r2
 8004948:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d028      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004958:	4b3a      	ldr	r3, [pc, #232]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800495a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800495e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004966:	4937      	ldr	r1, [pc, #220]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004968:	4313      	orrs	r3, r2
 800496a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004972:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004976:	d106      	bne.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004978:	4b32      	ldr	r3, [pc, #200]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	4a31      	ldr	r2, [pc, #196]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800497e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004982:	60d3      	str	r3, [r2, #12]
 8004984:	e011      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800498a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800498e:	d10c      	bne.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	3304      	adds	r3, #4
 8004994:	2101      	movs	r1, #1
 8004996:	4618      	mov	r0, r3
 8004998:	f000 f8c8 	bl	8004b2c <RCCEx_PLLSAI1_Config>
 800499c:	4603      	mov	r3, r0
 800499e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80049a0:	7cfb      	ldrb	r3, [r7, #19]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d001      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80049a6:	7cfb      	ldrb	r3, [r7, #19]
 80049a8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d028      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80049b6:	4b23      	ldr	r3, [pc, #140]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049bc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c4:	491f      	ldr	r1, [pc, #124]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049d4:	d106      	bne.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049d6:	4b1b      	ldr	r3, [pc, #108]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	4a1a      	ldr	r2, [pc, #104]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80049dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049e0:	60d3      	str	r3, [r2, #12]
 80049e2:	e011      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049ec:	d10c      	bne.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	3304      	adds	r3, #4
 80049f2:	2101      	movs	r1, #1
 80049f4:	4618      	mov	r0, r3
 80049f6:	f000 f899 	bl	8004b2c <RCCEx_PLLSAI1_Config>
 80049fa:	4603      	mov	r3, r0
 80049fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049fe:	7cfb      	ldrb	r3, [r7, #19]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d001      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8004a04:	7cfb      	ldrb	r3, [r7, #19]
 8004a06:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d02b      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a14:	4b0b      	ldr	r3, [pc, #44]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a22:	4908      	ldr	r1, [pc, #32]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a32:	d109      	bne.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a34:	4b03      	ldr	r3, [pc, #12]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	4a02      	ldr	r2, [pc, #8]	; (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004a3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a3e:	60d3      	str	r3, [r2, #12]
 8004a40:	e014      	b.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8004a42:	bf00      	nop
 8004a44:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a50:	d10c      	bne.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	3304      	adds	r3, #4
 8004a56:	2101      	movs	r1, #1
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f000 f867 	bl	8004b2c <RCCEx_PLLSAI1_Config>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a62:	7cfb      	ldrb	r3, [r7, #19]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d001      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8004a68:	7cfb      	ldrb	r3, [r7, #19]
 8004a6a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d02f      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a78:	4b2b      	ldr	r3, [pc, #172]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a7e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a86:	4928      	ldr	r1, [pc, #160]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a96:	d10d      	bne.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	3304      	adds	r3, #4
 8004a9c:	2102      	movs	r1, #2
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f000 f844 	bl	8004b2c <RCCEx_PLLSAI1_Config>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004aa8:	7cfb      	ldrb	r3, [r7, #19]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d014      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004aae:	7cfb      	ldrb	r3, [r7, #19]
 8004ab0:	74bb      	strb	r3, [r7, #18]
 8004ab2:	e011      	b.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ab8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004abc:	d10c      	bne.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	3320      	adds	r3, #32
 8004ac2:	2102      	movs	r1, #2
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f000 f921 	bl	8004d0c <RCCEx_PLLSAI2_Config>
 8004aca:	4603      	mov	r3, r0
 8004acc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ace:	7cfb      	ldrb	r3, [r7, #19]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d001      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004ad4:	7cfb      	ldrb	r3, [r7, #19]
 8004ad6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d00a      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ae4:	4b10      	ldr	r3, [pc, #64]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004af2:	490d      	ldr	r1, [pc, #52]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00b      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b06:	4b08      	ldr	r3, [pc, #32]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b0c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b16:	4904      	ldr	r1, [pc, #16]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004b1e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3718      	adds	r7, #24
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	40021000 	.word	0x40021000

08004b2c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b36:	2300      	movs	r3, #0
 8004b38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b3a:	4b73      	ldr	r3, [pc, #460]	; (8004d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	f003 0303 	and.w	r3, r3, #3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d018      	beq.n	8004b78 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004b46:	4b70      	ldr	r3, [pc, #448]	; (8004d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	f003 0203 	and.w	r2, r3, #3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d10d      	bne.n	8004b72 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
       ||
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d009      	beq.n	8004b72 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004b5e:	4b6a      	ldr	r3, [pc, #424]	; (8004d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	091b      	lsrs	r3, r3, #4
 8004b64:	f003 0307 	and.w	r3, r3, #7
 8004b68:	1c5a      	adds	r2, r3, #1
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
       ||
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d044      	beq.n	8004bfc <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	73fb      	strb	r3, [r7, #15]
 8004b76:	e041      	b.n	8004bfc <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d00c      	beq.n	8004b9a <RCCEx_PLLSAI1_Config+0x6e>
 8004b80:	2b03      	cmp	r3, #3
 8004b82:	d013      	beq.n	8004bac <RCCEx_PLLSAI1_Config+0x80>
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d120      	bne.n	8004bca <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b88:	4b5f      	ldr	r3, [pc, #380]	; (8004d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0302 	and.w	r3, r3, #2
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d11d      	bne.n	8004bd0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b98:	e01a      	b.n	8004bd0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b9a:	4b5b      	ldr	r3, [pc, #364]	; (8004d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d116      	bne.n	8004bd4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004baa:	e013      	b.n	8004bd4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004bac:	4b56      	ldr	r3, [pc, #344]	; (8004d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d10f      	bne.n	8004bd8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004bb8:	4b53      	ldr	r3, [pc, #332]	; (8004d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d109      	bne.n	8004bd8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004bc8:	e006      	b.n	8004bd8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	73fb      	strb	r3, [r7, #15]
      break;
 8004bce:	e004      	b.n	8004bda <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004bd0:	bf00      	nop
 8004bd2:	e002      	b.n	8004bda <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004bd4:	bf00      	nop
 8004bd6:	e000      	b.n	8004bda <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004bd8:	bf00      	nop
    }

    if(status == HAL_OK)
 8004bda:	7bfb      	ldrb	r3, [r7, #15]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d10d      	bne.n	8004bfc <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004be0:	4b49      	ldr	r3, [pc, #292]	; (8004d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6819      	ldr	r1, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	011b      	lsls	r3, r3, #4
 8004bf4:	430b      	orrs	r3, r1
 8004bf6:	4944      	ldr	r1, [pc, #272]	; (8004d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004bfc:	7bfb      	ldrb	r3, [r7, #15]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d17d      	bne.n	8004cfe <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004c02:	4b41      	ldr	r3, [pc, #260]	; (8004d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a40      	ldr	r2, [pc, #256]	; (8004d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c08:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c0e:	f7fc fe97 	bl	8001940 <HAL_GetTick>
 8004c12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c14:	e009      	b.n	8004c2a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c16:	f7fc fe93 	bl	8001940 <HAL_GetTick>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	1ad3      	subs	r3, r2, r3
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d902      	bls.n	8004c2a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	73fb      	strb	r3, [r7, #15]
        break;
 8004c28:	e005      	b.n	8004c36 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c2a:	4b37      	ldr	r3, [pc, #220]	; (8004d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1ef      	bne.n	8004c16 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004c36:	7bfb      	ldrb	r3, [r7, #15]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d160      	bne.n	8004cfe <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d111      	bne.n	8004c66 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c42:	4b31      	ldr	r3, [pc, #196]	; (8004d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004c4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	6892      	ldr	r2, [r2, #8]
 8004c52:	0211      	lsls	r1, r2, #8
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	68d2      	ldr	r2, [r2, #12]
 8004c58:	0912      	lsrs	r2, r2, #4
 8004c5a:	0452      	lsls	r2, r2, #17
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	492a      	ldr	r1, [pc, #168]	; (8004d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	610b      	str	r3, [r1, #16]
 8004c64:	e027      	b.n	8004cb6 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d112      	bne.n	8004c92 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c6c:	4b26      	ldr	r3, [pc, #152]	; (8004d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c6e:	691b      	ldr	r3, [r3, #16]
 8004c70:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004c74:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	6892      	ldr	r2, [r2, #8]
 8004c7c:	0211      	lsls	r1, r2, #8
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	6912      	ldr	r2, [r2, #16]
 8004c82:	0852      	lsrs	r2, r2, #1
 8004c84:	3a01      	subs	r2, #1
 8004c86:	0552      	lsls	r2, r2, #21
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	491f      	ldr	r1, [pc, #124]	; (8004d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	610b      	str	r3, [r1, #16]
 8004c90:	e011      	b.n	8004cb6 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c92:	4b1d      	ldr	r3, [pc, #116]	; (8004d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004c9a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	6892      	ldr	r2, [r2, #8]
 8004ca2:	0211      	lsls	r1, r2, #8
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	6952      	ldr	r2, [r2, #20]
 8004ca8:	0852      	lsrs	r2, r2, #1
 8004caa:	3a01      	subs	r2, #1
 8004cac:	0652      	lsls	r2, r2, #25
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	4915      	ldr	r1, [pc, #84]	; (8004d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004cb6:	4b14      	ldr	r3, [pc, #80]	; (8004d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a13      	ldr	r2, [pc, #76]	; (8004d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004cbc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004cc0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cc2:	f7fc fe3d 	bl	8001940 <HAL_GetTick>
 8004cc6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004cc8:	e009      	b.n	8004cde <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004cca:	f7fc fe39 	bl	8001940 <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d902      	bls.n	8004cde <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	73fb      	strb	r3, [r7, #15]
          break;
 8004cdc:	e005      	b.n	8004cea <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004cde:	4b0a      	ldr	r3, [pc, #40]	; (8004d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d0ef      	beq.n	8004cca <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8004cea:	7bfb      	ldrb	r3, [r7, #15]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d106      	bne.n	8004cfe <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004cf0:	4b05      	ldr	r3, [pc, #20]	; (8004d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004cf2:	691a      	ldr	r2, [r3, #16]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	699b      	ldr	r3, [r3, #24]
 8004cf8:	4903      	ldr	r1, [pc, #12]	; (8004d08 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3710      	adds	r7, #16
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	40021000 	.word	0x40021000

08004d0c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d16:	2300      	movs	r3, #0
 8004d18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d1a:	4b68      	ldr	r3, [pc, #416]	; (8004ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	f003 0303 	and.w	r3, r3, #3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d018      	beq.n	8004d58 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004d26:	4b65      	ldr	r3, [pc, #404]	; (8004ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d28:	68db      	ldr	r3, [r3, #12]
 8004d2a:	f003 0203 	and.w	r2, r3, #3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d10d      	bne.n	8004d52 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
       ||
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d009      	beq.n	8004d52 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004d3e:	4b5f      	ldr	r3, [pc, #380]	; (8004ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	091b      	lsrs	r3, r3, #4
 8004d44:	f003 0307 	and.w	r3, r3, #7
 8004d48:	1c5a      	adds	r2, r3, #1
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
       ||
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d044      	beq.n	8004ddc <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	73fb      	strb	r3, [r7, #15]
 8004d56:	e041      	b.n	8004ddc <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d00c      	beq.n	8004d7a <RCCEx_PLLSAI2_Config+0x6e>
 8004d60:	2b03      	cmp	r3, #3
 8004d62:	d013      	beq.n	8004d8c <RCCEx_PLLSAI2_Config+0x80>
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d120      	bne.n	8004daa <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d68:	4b54      	ldr	r3, [pc, #336]	; (8004ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0302 	and.w	r3, r3, #2
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d11d      	bne.n	8004db0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d78:	e01a      	b.n	8004db0 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d7a:	4b50      	ldr	r3, [pc, #320]	; (8004ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d116      	bne.n	8004db4 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d8a:	e013      	b.n	8004db4 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d8c:	4b4b      	ldr	r3, [pc, #300]	; (8004ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d10f      	bne.n	8004db8 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d98:	4b48      	ldr	r3, [pc, #288]	; (8004ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d109      	bne.n	8004db8 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004da8:	e006      	b.n	8004db8 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	73fb      	strb	r3, [r7, #15]
      break;
 8004dae:	e004      	b.n	8004dba <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004db0:	bf00      	nop
 8004db2:	e002      	b.n	8004dba <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004db4:	bf00      	nop
 8004db6:	e000      	b.n	8004dba <RCCEx_PLLSAI2_Config+0xae>
      break;
 8004db8:	bf00      	nop
    }

    if(status == HAL_OK)
 8004dba:	7bfb      	ldrb	r3, [r7, #15]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d10d      	bne.n	8004ddc <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004dc0:	4b3e      	ldr	r3, [pc, #248]	; (8004ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6819      	ldr	r1, [r3, #0]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	3b01      	subs	r3, #1
 8004dd2:	011b      	lsls	r3, r3, #4
 8004dd4:	430b      	orrs	r3, r1
 8004dd6:	4939      	ldr	r1, [pc, #228]	; (8004ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004ddc:	7bfb      	ldrb	r3, [r7, #15]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d167      	bne.n	8004eb2 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004de2:	4b36      	ldr	r3, [pc, #216]	; (8004ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a35      	ldr	r2, [pc, #212]	; (8004ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004de8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dee:	f7fc fda7 	bl	8001940 <HAL_GetTick>
 8004df2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004df4:	e009      	b.n	8004e0a <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004df6:	f7fc fda3 	bl	8001940 <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d902      	bls.n	8004e0a <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	73fb      	strb	r3, [r7, #15]
        break;
 8004e08:	e005      	b.n	8004e16 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e0a:	4b2c      	ldr	r3, [pc, #176]	; (8004ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1ef      	bne.n	8004df6 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004e16:	7bfb      	ldrb	r3, [r7, #15]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d14a      	bne.n	8004eb2 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d111      	bne.n	8004e46 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e22:	4b26      	ldr	r3, [pc, #152]	; (8004ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004e2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	6892      	ldr	r2, [r2, #8]
 8004e32:	0211      	lsls	r1, r2, #8
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	68d2      	ldr	r2, [r2, #12]
 8004e38:	0912      	lsrs	r2, r2, #4
 8004e3a:	0452      	lsls	r2, r2, #17
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	491f      	ldr	r1, [pc, #124]	; (8004ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	614b      	str	r3, [r1, #20]
 8004e44:	e011      	b.n	8004e6a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e46:	4b1d      	ldr	r3, [pc, #116]	; (8004ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004e4e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	6892      	ldr	r2, [r2, #8]
 8004e56:	0211      	lsls	r1, r2, #8
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	6912      	ldr	r2, [r2, #16]
 8004e5c:	0852      	lsrs	r2, r2, #1
 8004e5e:	3a01      	subs	r2, #1
 8004e60:	0652      	lsls	r2, r2, #25
 8004e62:	430a      	orrs	r2, r1
 8004e64:	4915      	ldr	r1, [pc, #84]	; (8004ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004e6a:	4b14      	ldr	r3, [pc, #80]	; (8004ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a13      	ldr	r2, [pc, #76]	; (8004ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e74:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e76:	f7fc fd63 	bl	8001940 <HAL_GetTick>
 8004e7a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e7c:	e009      	b.n	8004e92 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e7e:	f7fc fd5f 	bl	8001940 <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d902      	bls.n	8004e92 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	73fb      	strb	r3, [r7, #15]
          break;
 8004e90:	e005      	b.n	8004e9e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e92:	4b0a      	ldr	r3, [pc, #40]	; (8004ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d0ef      	beq.n	8004e7e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8004e9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d106      	bne.n	8004eb2 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004ea4:	4b05      	ldr	r3, [pc, #20]	; (8004ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004ea6:	695a      	ldr	r2, [r3, #20]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	695b      	ldr	r3, [r3, #20]
 8004eac:	4903      	ldr	r1, [pc, #12]	; (8004ebc <RCCEx_PLLSAI2_Config+0x1b0>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	40021000 	.word	0x40021000

08004ec0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d101      	bne.n	8004ed2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e049      	b.n	8004f66 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d106      	bne.n	8004eec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f7fc fb66 	bl	80015b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2202      	movs	r2, #2
 8004ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	3304      	adds	r3, #4
 8004efc:	4619      	mov	r1, r3
 8004efe:	4610      	mov	r0, r2
 8004f00:	f000 fd20 	bl	8005944 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3708      	adds	r7, #8
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
	...

08004f70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d001      	beq.n	8004f88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e04f      	b.n	8005028 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68da      	ldr	r2, [r3, #12]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f042 0201 	orr.w	r2, r2, #1
 8004f9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a23      	ldr	r2, [pc, #140]	; (8005034 <HAL_TIM_Base_Start_IT+0xc4>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d01d      	beq.n	8004fe6 <HAL_TIM_Base_Start_IT+0x76>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fb2:	d018      	beq.n	8004fe6 <HAL_TIM_Base_Start_IT+0x76>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a1f      	ldr	r2, [pc, #124]	; (8005038 <HAL_TIM_Base_Start_IT+0xc8>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d013      	beq.n	8004fe6 <HAL_TIM_Base_Start_IT+0x76>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a1e      	ldr	r2, [pc, #120]	; (800503c <HAL_TIM_Base_Start_IT+0xcc>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d00e      	beq.n	8004fe6 <HAL_TIM_Base_Start_IT+0x76>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a1c      	ldr	r2, [pc, #112]	; (8005040 <HAL_TIM_Base_Start_IT+0xd0>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d009      	beq.n	8004fe6 <HAL_TIM_Base_Start_IT+0x76>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a1b      	ldr	r2, [pc, #108]	; (8005044 <HAL_TIM_Base_Start_IT+0xd4>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d004      	beq.n	8004fe6 <HAL_TIM_Base_Start_IT+0x76>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a19      	ldr	r2, [pc, #100]	; (8005048 <HAL_TIM_Base_Start_IT+0xd8>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d115      	bne.n	8005012 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	689a      	ldr	r2, [r3, #8]
 8004fec:	4b17      	ldr	r3, [pc, #92]	; (800504c <HAL_TIM_Base_Start_IT+0xdc>)
 8004fee:	4013      	ands	r3, r2
 8004ff0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2b06      	cmp	r3, #6
 8004ff6:	d015      	beq.n	8005024 <HAL_TIM_Base_Start_IT+0xb4>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ffe:	d011      	beq.n	8005024 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f042 0201 	orr.w	r2, r2, #1
 800500e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005010:	e008      	b.n	8005024 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f042 0201 	orr.w	r2, r2, #1
 8005020:	601a      	str	r2, [r3, #0]
 8005022:	e000      	b.n	8005026 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005024:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	3714      	adds	r7, #20
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr
 8005034:	40012c00 	.word	0x40012c00
 8005038:	40000400 	.word	0x40000400
 800503c:	40000800 	.word	0x40000800
 8005040:	40000c00 	.word	0x40000c00
 8005044:	40013400 	.word	0x40013400
 8005048:	40014000 	.word	0x40014000
 800504c:	00010007 	.word	0x00010007

08005050 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d101      	bne.n	8005062 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e049      	b.n	80050f6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d106      	bne.n	800507c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 f841 	bl	80050fe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2202      	movs	r2, #2
 8005080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	3304      	adds	r3, #4
 800508c:	4619      	mov	r1, r3
 800508e:	4610      	mov	r0, r2
 8005090:	f000 fc58 	bl	8005944 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3708      	adds	r7, #8
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}

080050fe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80050fe:	b480      	push	{r7}
 8005100:	b083      	sub	sp, #12
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005106:	bf00      	nop
 8005108:	370c      	adds	r7, #12
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
	...

08005114 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d109      	bne.n	8005138 <HAL_TIM_PWM_Start+0x24>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800512a:	b2db      	uxtb	r3, r3
 800512c:	2b01      	cmp	r3, #1
 800512e:	bf14      	ite	ne
 8005130:	2301      	movne	r3, #1
 8005132:	2300      	moveq	r3, #0
 8005134:	b2db      	uxtb	r3, r3
 8005136:	e03c      	b.n	80051b2 <HAL_TIM_PWM_Start+0x9e>
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	2b04      	cmp	r3, #4
 800513c:	d109      	bne.n	8005152 <HAL_TIM_PWM_Start+0x3e>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005144:	b2db      	uxtb	r3, r3
 8005146:	2b01      	cmp	r3, #1
 8005148:	bf14      	ite	ne
 800514a:	2301      	movne	r3, #1
 800514c:	2300      	moveq	r3, #0
 800514e:	b2db      	uxtb	r3, r3
 8005150:	e02f      	b.n	80051b2 <HAL_TIM_PWM_Start+0x9e>
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	2b08      	cmp	r3, #8
 8005156:	d109      	bne.n	800516c <HAL_TIM_PWM_Start+0x58>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800515e:	b2db      	uxtb	r3, r3
 8005160:	2b01      	cmp	r3, #1
 8005162:	bf14      	ite	ne
 8005164:	2301      	movne	r3, #1
 8005166:	2300      	moveq	r3, #0
 8005168:	b2db      	uxtb	r3, r3
 800516a:	e022      	b.n	80051b2 <HAL_TIM_PWM_Start+0x9e>
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	2b0c      	cmp	r3, #12
 8005170:	d109      	bne.n	8005186 <HAL_TIM_PWM_Start+0x72>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005178:	b2db      	uxtb	r3, r3
 800517a:	2b01      	cmp	r3, #1
 800517c:	bf14      	ite	ne
 800517e:	2301      	movne	r3, #1
 8005180:	2300      	moveq	r3, #0
 8005182:	b2db      	uxtb	r3, r3
 8005184:	e015      	b.n	80051b2 <HAL_TIM_PWM_Start+0x9e>
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	2b10      	cmp	r3, #16
 800518a:	d109      	bne.n	80051a0 <HAL_TIM_PWM_Start+0x8c>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005192:	b2db      	uxtb	r3, r3
 8005194:	2b01      	cmp	r3, #1
 8005196:	bf14      	ite	ne
 8005198:	2301      	movne	r3, #1
 800519a:	2300      	moveq	r3, #0
 800519c:	b2db      	uxtb	r3, r3
 800519e:	e008      	b.n	80051b2 <HAL_TIM_PWM_Start+0x9e>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	bf14      	ite	ne
 80051ac:	2301      	movne	r3, #1
 80051ae:	2300      	moveq	r3, #0
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d001      	beq.n	80051ba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e09c      	b.n	80052f4 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d104      	bne.n	80051ca <HAL_TIM_PWM_Start+0xb6>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2202      	movs	r2, #2
 80051c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051c8:	e023      	b.n	8005212 <HAL_TIM_PWM_Start+0xfe>
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	2b04      	cmp	r3, #4
 80051ce:	d104      	bne.n	80051da <HAL_TIM_PWM_Start+0xc6>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2202      	movs	r2, #2
 80051d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051d8:	e01b      	b.n	8005212 <HAL_TIM_PWM_Start+0xfe>
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	2b08      	cmp	r3, #8
 80051de:	d104      	bne.n	80051ea <HAL_TIM_PWM_Start+0xd6>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2202      	movs	r2, #2
 80051e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051e8:	e013      	b.n	8005212 <HAL_TIM_PWM_Start+0xfe>
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	2b0c      	cmp	r3, #12
 80051ee:	d104      	bne.n	80051fa <HAL_TIM_PWM_Start+0xe6>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2202      	movs	r2, #2
 80051f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051f8:	e00b      	b.n	8005212 <HAL_TIM_PWM_Start+0xfe>
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	2b10      	cmp	r3, #16
 80051fe:	d104      	bne.n	800520a <HAL_TIM_PWM_Start+0xf6>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2202      	movs	r2, #2
 8005204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005208:	e003      	b.n	8005212 <HAL_TIM_PWM_Start+0xfe>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2202      	movs	r2, #2
 800520e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2201      	movs	r2, #1
 8005218:	6839      	ldr	r1, [r7, #0]
 800521a:	4618      	mov	r0, r3
 800521c:	f000 ff9c 	bl	8006158 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a35      	ldr	r2, [pc, #212]	; (80052fc <HAL_TIM_PWM_Start+0x1e8>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d013      	beq.n	8005252 <HAL_TIM_PWM_Start+0x13e>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a34      	ldr	r2, [pc, #208]	; (8005300 <HAL_TIM_PWM_Start+0x1ec>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d00e      	beq.n	8005252 <HAL_TIM_PWM_Start+0x13e>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a32      	ldr	r2, [pc, #200]	; (8005304 <HAL_TIM_PWM_Start+0x1f0>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d009      	beq.n	8005252 <HAL_TIM_PWM_Start+0x13e>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a31      	ldr	r2, [pc, #196]	; (8005308 <HAL_TIM_PWM_Start+0x1f4>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d004      	beq.n	8005252 <HAL_TIM_PWM_Start+0x13e>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a2f      	ldr	r2, [pc, #188]	; (800530c <HAL_TIM_PWM_Start+0x1f8>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d101      	bne.n	8005256 <HAL_TIM_PWM_Start+0x142>
 8005252:	2301      	movs	r3, #1
 8005254:	e000      	b.n	8005258 <HAL_TIM_PWM_Start+0x144>
 8005256:	2300      	movs	r3, #0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d007      	beq.n	800526c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800526a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a22      	ldr	r2, [pc, #136]	; (80052fc <HAL_TIM_PWM_Start+0x1e8>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d01d      	beq.n	80052b2 <HAL_TIM_PWM_Start+0x19e>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800527e:	d018      	beq.n	80052b2 <HAL_TIM_PWM_Start+0x19e>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a22      	ldr	r2, [pc, #136]	; (8005310 <HAL_TIM_PWM_Start+0x1fc>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d013      	beq.n	80052b2 <HAL_TIM_PWM_Start+0x19e>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a21      	ldr	r2, [pc, #132]	; (8005314 <HAL_TIM_PWM_Start+0x200>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d00e      	beq.n	80052b2 <HAL_TIM_PWM_Start+0x19e>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a1f      	ldr	r2, [pc, #124]	; (8005318 <HAL_TIM_PWM_Start+0x204>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d009      	beq.n	80052b2 <HAL_TIM_PWM_Start+0x19e>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a17      	ldr	r2, [pc, #92]	; (8005300 <HAL_TIM_PWM_Start+0x1ec>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d004      	beq.n	80052b2 <HAL_TIM_PWM_Start+0x19e>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a15      	ldr	r2, [pc, #84]	; (8005304 <HAL_TIM_PWM_Start+0x1f0>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d115      	bne.n	80052de <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	689a      	ldr	r2, [r3, #8]
 80052b8:	4b18      	ldr	r3, [pc, #96]	; (800531c <HAL_TIM_PWM_Start+0x208>)
 80052ba:	4013      	ands	r3, r2
 80052bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2b06      	cmp	r3, #6
 80052c2:	d015      	beq.n	80052f0 <HAL_TIM_PWM_Start+0x1dc>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052ca:	d011      	beq.n	80052f0 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f042 0201 	orr.w	r2, r2, #1
 80052da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052dc:	e008      	b.n	80052f0 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f042 0201 	orr.w	r2, r2, #1
 80052ec:	601a      	str	r2, [r3, #0]
 80052ee:	e000      	b.n	80052f2 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3710      	adds	r7, #16
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	40012c00 	.word	0x40012c00
 8005300:	40013400 	.word	0x40013400
 8005304:	40014000 	.word	0x40014000
 8005308:	40014400 	.word	0x40014400
 800530c:	40014800 	.word	0x40014800
 8005310:	40000400 	.word	0x40000400
 8005314:	40000800 	.word	0x40000800
 8005318:	40000c00 	.word	0x40000c00
 800531c:	00010007 	.word	0x00010007

08005320 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	f003 0302 	and.w	r3, r3, #2
 8005332:	2b02      	cmp	r3, #2
 8005334:	d122      	bne.n	800537c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	f003 0302 	and.w	r3, r3, #2
 8005340:	2b02      	cmp	r3, #2
 8005342:	d11b      	bne.n	800537c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f06f 0202 	mvn.w	r2, #2
 800534c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2201      	movs	r2, #1
 8005352:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	699b      	ldr	r3, [r3, #24]
 800535a:	f003 0303 	and.w	r3, r3, #3
 800535e:	2b00      	cmp	r3, #0
 8005360:	d003      	beq.n	800536a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 facf 	bl	8005906 <HAL_TIM_IC_CaptureCallback>
 8005368:	e005      	b.n	8005376 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 fac1 	bl	80058f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 fad2 	bl	800591a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	f003 0304 	and.w	r3, r3, #4
 8005386:	2b04      	cmp	r3, #4
 8005388:	d122      	bne.n	80053d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	f003 0304 	and.w	r3, r3, #4
 8005394:	2b04      	cmp	r3, #4
 8005396:	d11b      	bne.n	80053d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f06f 0204 	mvn.w	r2, #4
 80053a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2202      	movs	r2, #2
 80053a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d003      	beq.n	80053be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 faa5 	bl	8005906 <HAL_TIM_IC_CaptureCallback>
 80053bc:	e005      	b.n	80053ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 fa97 	bl	80058f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 faa8 	bl	800591a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	f003 0308 	and.w	r3, r3, #8
 80053da:	2b08      	cmp	r3, #8
 80053dc:	d122      	bne.n	8005424 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	f003 0308 	and.w	r3, r3, #8
 80053e8:	2b08      	cmp	r3, #8
 80053ea:	d11b      	bne.n	8005424 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f06f 0208 	mvn.w	r2, #8
 80053f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2204      	movs	r2, #4
 80053fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	69db      	ldr	r3, [r3, #28]
 8005402:	f003 0303 	and.w	r3, r3, #3
 8005406:	2b00      	cmp	r3, #0
 8005408:	d003      	beq.n	8005412 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 fa7b 	bl	8005906 <HAL_TIM_IC_CaptureCallback>
 8005410:	e005      	b.n	800541e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 fa6d 	bl	80058f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 fa7e 	bl	800591a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	f003 0310 	and.w	r3, r3, #16
 800542e:	2b10      	cmp	r3, #16
 8005430:	d122      	bne.n	8005478 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	f003 0310 	and.w	r3, r3, #16
 800543c:	2b10      	cmp	r3, #16
 800543e:	d11b      	bne.n	8005478 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f06f 0210 	mvn.w	r2, #16
 8005448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2208      	movs	r2, #8
 800544e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	69db      	ldr	r3, [r3, #28]
 8005456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800545a:	2b00      	cmp	r3, #0
 800545c:	d003      	beq.n	8005466 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 fa51 	bl	8005906 <HAL_TIM_IC_CaptureCallback>
 8005464:	e005      	b.n	8005472 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 fa43 	bl	80058f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f000 fa54 	bl	800591a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	f003 0301 	and.w	r3, r3, #1
 8005482:	2b01      	cmp	r3, #1
 8005484:	d10e      	bne.n	80054a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	f003 0301 	and.w	r3, r3, #1
 8005490:	2b01      	cmp	r3, #1
 8005492:	d107      	bne.n	80054a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f06f 0201 	mvn.w	r2, #1
 800549c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f7fb ff32 	bl	8001308 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ae:	2b80      	cmp	r3, #128	; 0x80
 80054b0:	d10e      	bne.n	80054d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054bc:	2b80      	cmp	r3, #128	; 0x80
 80054be:	d107      	bne.n	80054d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 ff7a 	bl	80063c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054de:	d10e      	bne.n	80054fe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ea:	2b80      	cmp	r3, #128	; 0x80
 80054ec:	d107      	bne.n	80054fe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80054f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 ff6d 	bl	80063d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005508:	2b40      	cmp	r3, #64	; 0x40
 800550a:	d10e      	bne.n	800552a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005516:	2b40      	cmp	r3, #64	; 0x40
 8005518:	d107      	bne.n	800552a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005522:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 fa02 	bl	800592e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	f003 0320 	and.w	r3, r3, #32
 8005534:	2b20      	cmp	r3, #32
 8005536:	d10e      	bne.n	8005556 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	f003 0320 	and.w	r3, r3, #32
 8005542:	2b20      	cmp	r3, #32
 8005544:	d107      	bne.n	8005556 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f06f 0220 	mvn.w	r2, #32
 800554e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 ff2d 	bl	80063b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005556:	bf00      	nop
 8005558:	3708      	adds	r7, #8
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
	...

08005560 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005572:	2b01      	cmp	r3, #1
 8005574:	d101      	bne.n	800557a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005576:	2302      	movs	r3, #2
 8005578:	e0fd      	b.n	8005776 <HAL_TIM_PWM_ConfigChannel+0x216>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2201      	movs	r2, #1
 800557e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2b14      	cmp	r3, #20
 8005586:	f200 80f0 	bhi.w	800576a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800558a:	a201      	add	r2, pc, #4	; (adr r2, 8005590 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800558c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005590:	080055e5 	.word	0x080055e5
 8005594:	0800576b 	.word	0x0800576b
 8005598:	0800576b 	.word	0x0800576b
 800559c:	0800576b 	.word	0x0800576b
 80055a0:	08005625 	.word	0x08005625
 80055a4:	0800576b 	.word	0x0800576b
 80055a8:	0800576b 	.word	0x0800576b
 80055ac:	0800576b 	.word	0x0800576b
 80055b0:	08005667 	.word	0x08005667
 80055b4:	0800576b 	.word	0x0800576b
 80055b8:	0800576b 	.word	0x0800576b
 80055bc:	0800576b 	.word	0x0800576b
 80055c0:	080056a7 	.word	0x080056a7
 80055c4:	0800576b 	.word	0x0800576b
 80055c8:	0800576b 	.word	0x0800576b
 80055cc:	0800576b 	.word	0x0800576b
 80055d0:	080056e9 	.word	0x080056e9
 80055d4:	0800576b 	.word	0x0800576b
 80055d8:	0800576b 	.word	0x0800576b
 80055dc:	0800576b 	.word	0x0800576b
 80055e0:	08005729 	.word	0x08005729
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68b9      	ldr	r1, [r7, #8]
 80055ea:	4618      	mov	r0, r3
 80055ec:	f000 fa44 	bl	8005a78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	699a      	ldr	r2, [r3, #24]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f042 0208 	orr.w	r2, r2, #8
 80055fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	699a      	ldr	r2, [r3, #24]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f022 0204 	bic.w	r2, r2, #4
 800560e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6999      	ldr	r1, [r3, #24]
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	691a      	ldr	r2, [r3, #16]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	430a      	orrs	r2, r1
 8005620:	619a      	str	r2, [r3, #24]
      break;
 8005622:	e0a3      	b.n	800576c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68b9      	ldr	r1, [r7, #8]
 800562a:	4618      	mov	r0, r3
 800562c:	f000 fab4 	bl	8005b98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	699a      	ldr	r2, [r3, #24]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800563e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	699a      	ldr	r2, [r3, #24]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800564e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6999      	ldr	r1, [r3, #24]
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	021a      	lsls	r2, r3, #8
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	430a      	orrs	r2, r1
 8005662:	619a      	str	r2, [r3, #24]
      break;
 8005664:	e082      	b.n	800576c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68b9      	ldr	r1, [r7, #8]
 800566c:	4618      	mov	r0, r3
 800566e:	f000 fb1d 	bl	8005cac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	69da      	ldr	r2, [r3, #28]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f042 0208 	orr.w	r2, r2, #8
 8005680:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	69da      	ldr	r2, [r3, #28]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f022 0204 	bic.w	r2, r2, #4
 8005690:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	69d9      	ldr	r1, [r3, #28]
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	691a      	ldr	r2, [r3, #16]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	430a      	orrs	r2, r1
 80056a2:	61da      	str	r2, [r3, #28]
      break;
 80056a4:	e062      	b.n	800576c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68b9      	ldr	r1, [r7, #8]
 80056ac:	4618      	mov	r0, r3
 80056ae:	f000 fb85 	bl	8005dbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	69da      	ldr	r2, [r3, #28]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	69da      	ldr	r2, [r3, #28]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	69d9      	ldr	r1, [r3, #28]
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	691b      	ldr	r3, [r3, #16]
 80056dc:	021a      	lsls	r2, r3, #8
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	430a      	orrs	r2, r1
 80056e4:	61da      	str	r2, [r3, #28]
      break;
 80056e6:	e041      	b.n	800576c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68b9      	ldr	r1, [r7, #8]
 80056ee:	4618      	mov	r0, r3
 80056f0:	f000 fbce 	bl	8005e90 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f042 0208 	orr.w	r2, r2, #8
 8005702:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f022 0204 	bic.w	r2, r2, #4
 8005712:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	691a      	ldr	r2, [r3, #16]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	430a      	orrs	r2, r1
 8005724:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005726:	e021      	b.n	800576c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68b9      	ldr	r1, [r7, #8]
 800572e:	4618      	mov	r0, r3
 8005730:	f000 fc12 	bl	8005f58 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005742:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005752:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	691b      	ldr	r3, [r3, #16]
 800575e:	021a      	lsls	r2, r3, #8
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	430a      	orrs	r2, r1
 8005766:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005768:	e000      	b.n	800576c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800576a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3710      	adds	r7, #16
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop

08005780 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005790:	2b01      	cmp	r3, #1
 8005792:	d101      	bne.n	8005798 <HAL_TIM_ConfigClockSource+0x18>
 8005794:	2302      	movs	r3, #2
 8005796:	e0a8      	b.n	80058ea <HAL_TIM_ConfigClockSource+0x16a>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2202      	movs	r2, #2
 80057a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80057ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057c2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2b40      	cmp	r3, #64	; 0x40
 80057d2:	d067      	beq.n	80058a4 <HAL_TIM_ConfigClockSource+0x124>
 80057d4:	2b40      	cmp	r3, #64	; 0x40
 80057d6:	d80b      	bhi.n	80057f0 <HAL_TIM_ConfigClockSource+0x70>
 80057d8:	2b10      	cmp	r3, #16
 80057da:	d073      	beq.n	80058c4 <HAL_TIM_ConfigClockSource+0x144>
 80057dc:	2b10      	cmp	r3, #16
 80057de:	d802      	bhi.n	80057e6 <HAL_TIM_ConfigClockSource+0x66>
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d06f      	beq.n	80058c4 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80057e4:	e078      	b.n	80058d8 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80057e6:	2b20      	cmp	r3, #32
 80057e8:	d06c      	beq.n	80058c4 <HAL_TIM_ConfigClockSource+0x144>
 80057ea:	2b30      	cmp	r3, #48	; 0x30
 80057ec:	d06a      	beq.n	80058c4 <HAL_TIM_ConfigClockSource+0x144>
      break;
 80057ee:	e073      	b.n	80058d8 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80057f0:	2b70      	cmp	r3, #112	; 0x70
 80057f2:	d00d      	beq.n	8005810 <HAL_TIM_ConfigClockSource+0x90>
 80057f4:	2b70      	cmp	r3, #112	; 0x70
 80057f6:	d804      	bhi.n	8005802 <HAL_TIM_ConfigClockSource+0x82>
 80057f8:	2b50      	cmp	r3, #80	; 0x50
 80057fa:	d033      	beq.n	8005864 <HAL_TIM_ConfigClockSource+0xe4>
 80057fc:	2b60      	cmp	r3, #96	; 0x60
 80057fe:	d041      	beq.n	8005884 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8005800:	e06a      	b.n	80058d8 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005806:	d066      	beq.n	80058d6 <HAL_TIM_ConfigClockSource+0x156>
 8005808:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800580c:	d017      	beq.n	800583e <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800580e:	e063      	b.n	80058d8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6818      	ldr	r0, [r3, #0]
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	6899      	ldr	r1, [r3, #8]
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	685a      	ldr	r2, [r3, #4]
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	f000 fc7a 	bl	8006118 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005832:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	609a      	str	r2, [r3, #8]
      break;
 800583c:	e04c      	b.n	80058d8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6818      	ldr	r0, [r3, #0]
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	6899      	ldr	r1, [r3, #8]
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	685a      	ldr	r2, [r3, #4]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	f000 fc63 	bl	8006118 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	689a      	ldr	r2, [r3, #8]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005860:	609a      	str	r2, [r3, #8]
      break;
 8005862:	e039      	b.n	80058d8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6818      	ldr	r0, [r3, #0]
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	6859      	ldr	r1, [r3, #4]
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	461a      	mov	r2, r3
 8005872:	f000 fbd7 	bl	8006024 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2150      	movs	r1, #80	; 0x50
 800587c:	4618      	mov	r0, r3
 800587e:	f000 fc30 	bl	80060e2 <TIM_ITRx_SetConfig>
      break;
 8005882:	e029      	b.n	80058d8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6818      	ldr	r0, [r3, #0]
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	6859      	ldr	r1, [r3, #4]
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	461a      	mov	r2, r3
 8005892:	f000 fbf6 	bl	8006082 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	2160      	movs	r1, #96	; 0x60
 800589c:	4618      	mov	r0, r3
 800589e:	f000 fc20 	bl	80060e2 <TIM_ITRx_SetConfig>
      break;
 80058a2:	e019      	b.n	80058d8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6818      	ldr	r0, [r3, #0]
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	6859      	ldr	r1, [r3, #4]
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	461a      	mov	r2, r3
 80058b2:	f000 fbb7 	bl	8006024 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2140      	movs	r1, #64	; 0x40
 80058bc:	4618      	mov	r0, r3
 80058be:	f000 fc10 	bl	80060e2 <TIM_ITRx_SetConfig>
      break;
 80058c2:	e009      	b.n	80058d8 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4619      	mov	r1, r3
 80058ce:	4610      	mov	r0, r2
 80058d0:	f000 fc07 	bl	80060e2 <TIM_ITRx_SetConfig>
        break;
 80058d4:	e000      	b.n	80058d8 <HAL_TIM_ConfigClockSource+0x158>
      break;
 80058d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3710      	adds	r7, #16
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}

080058f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058f2:	b480      	push	{r7}
 80058f4:	b083      	sub	sp, #12
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058fa:	bf00      	nop
 80058fc:	370c      	adds	r7, #12
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr

08005906 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005906:	b480      	push	{r7}
 8005908:	b083      	sub	sp, #12
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800590e:	bf00      	nop
 8005910:	370c      	adds	r7, #12
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr

0800591a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800591a:	b480      	push	{r7}
 800591c:	b083      	sub	sp, #12
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005922:	bf00      	nop
 8005924:	370c      	adds	r7, #12
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr

0800592e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800592e:	b480      	push	{r7}
 8005930:	b083      	sub	sp, #12
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005936:	bf00      	nop
 8005938:	370c      	adds	r7, #12
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
	...

08005944 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005944:	b480      	push	{r7}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a40      	ldr	r2, [pc, #256]	; (8005a58 <TIM_Base_SetConfig+0x114>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d013      	beq.n	8005984 <TIM_Base_SetConfig+0x40>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005962:	d00f      	beq.n	8005984 <TIM_Base_SetConfig+0x40>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a3d      	ldr	r2, [pc, #244]	; (8005a5c <TIM_Base_SetConfig+0x118>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d00b      	beq.n	8005984 <TIM_Base_SetConfig+0x40>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a3c      	ldr	r2, [pc, #240]	; (8005a60 <TIM_Base_SetConfig+0x11c>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d007      	beq.n	8005984 <TIM_Base_SetConfig+0x40>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a3b      	ldr	r2, [pc, #236]	; (8005a64 <TIM_Base_SetConfig+0x120>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d003      	beq.n	8005984 <TIM_Base_SetConfig+0x40>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	4a3a      	ldr	r2, [pc, #232]	; (8005a68 <TIM_Base_SetConfig+0x124>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d108      	bne.n	8005996 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800598a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	4313      	orrs	r3, r2
 8005994:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a2f      	ldr	r2, [pc, #188]	; (8005a58 <TIM_Base_SetConfig+0x114>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d01f      	beq.n	80059de <TIM_Base_SetConfig+0x9a>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059a4:	d01b      	beq.n	80059de <TIM_Base_SetConfig+0x9a>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a2c      	ldr	r2, [pc, #176]	; (8005a5c <TIM_Base_SetConfig+0x118>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d017      	beq.n	80059de <TIM_Base_SetConfig+0x9a>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a2b      	ldr	r2, [pc, #172]	; (8005a60 <TIM_Base_SetConfig+0x11c>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d013      	beq.n	80059de <TIM_Base_SetConfig+0x9a>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a2a      	ldr	r2, [pc, #168]	; (8005a64 <TIM_Base_SetConfig+0x120>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d00f      	beq.n	80059de <TIM_Base_SetConfig+0x9a>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a29      	ldr	r2, [pc, #164]	; (8005a68 <TIM_Base_SetConfig+0x124>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d00b      	beq.n	80059de <TIM_Base_SetConfig+0x9a>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a28      	ldr	r2, [pc, #160]	; (8005a6c <TIM_Base_SetConfig+0x128>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d007      	beq.n	80059de <TIM_Base_SetConfig+0x9a>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a27      	ldr	r2, [pc, #156]	; (8005a70 <TIM_Base_SetConfig+0x12c>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d003      	beq.n	80059de <TIM_Base_SetConfig+0x9a>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a26      	ldr	r2, [pc, #152]	; (8005a74 <TIM_Base_SetConfig+0x130>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d108      	bne.n	80059f0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	695b      	ldr	r3, [r3, #20]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	689a      	ldr	r2, [r3, #8]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a10      	ldr	r2, [pc, #64]	; (8005a58 <TIM_Base_SetConfig+0x114>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d00f      	beq.n	8005a3c <TIM_Base_SetConfig+0xf8>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a12      	ldr	r2, [pc, #72]	; (8005a68 <TIM_Base_SetConfig+0x124>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d00b      	beq.n	8005a3c <TIM_Base_SetConfig+0xf8>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a11      	ldr	r2, [pc, #68]	; (8005a6c <TIM_Base_SetConfig+0x128>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d007      	beq.n	8005a3c <TIM_Base_SetConfig+0xf8>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a10      	ldr	r2, [pc, #64]	; (8005a70 <TIM_Base_SetConfig+0x12c>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d003      	beq.n	8005a3c <TIM_Base_SetConfig+0xf8>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a0f      	ldr	r2, [pc, #60]	; (8005a74 <TIM_Base_SetConfig+0x130>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d103      	bne.n	8005a44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	691a      	ldr	r2, [r3, #16]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	615a      	str	r2, [r3, #20]
}
 8005a4a:	bf00      	nop
 8005a4c:	3714      	adds	r7, #20
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	40012c00 	.word	0x40012c00
 8005a5c:	40000400 	.word	0x40000400
 8005a60:	40000800 	.word	0x40000800
 8005a64:	40000c00 	.word	0x40000c00
 8005a68:	40013400 	.word	0x40013400
 8005a6c:	40014000 	.word	0x40014000
 8005a70:	40014400 	.word	0x40014400
 8005a74:	40014800 	.word	0x40014800

08005a78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b087      	sub	sp, #28
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a1b      	ldr	r3, [r3, #32]
 8005a86:	f023 0201 	bic.w	r2, r3, #1
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a1b      	ldr	r3, [r3, #32]
 8005a92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	699b      	ldr	r3, [r3, #24]
 8005a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f023 0303 	bic.w	r3, r3, #3
 8005ab2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	f023 0302 	bic.w	r3, r3, #2
 8005ac4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	697a      	ldr	r2, [r7, #20]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a2c      	ldr	r2, [pc, #176]	; (8005b84 <TIM_OC1_SetConfig+0x10c>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d00f      	beq.n	8005af8 <TIM_OC1_SetConfig+0x80>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a2b      	ldr	r2, [pc, #172]	; (8005b88 <TIM_OC1_SetConfig+0x110>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d00b      	beq.n	8005af8 <TIM_OC1_SetConfig+0x80>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a2a      	ldr	r2, [pc, #168]	; (8005b8c <TIM_OC1_SetConfig+0x114>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d007      	beq.n	8005af8 <TIM_OC1_SetConfig+0x80>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a29      	ldr	r2, [pc, #164]	; (8005b90 <TIM_OC1_SetConfig+0x118>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d003      	beq.n	8005af8 <TIM_OC1_SetConfig+0x80>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a28      	ldr	r2, [pc, #160]	; (8005b94 <TIM_OC1_SetConfig+0x11c>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d10c      	bne.n	8005b12 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	f023 0308 	bic.w	r3, r3, #8
 8005afe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	697a      	ldr	r2, [r7, #20]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	f023 0304 	bic.w	r3, r3, #4
 8005b10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a1b      	ldr	r2, [pc, #108]	; (8005b84 <TIM_OC1_SetConfig+0x10c>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d00f      	beq.n	8005b3a <TIM_OC1_SetConfig+0xc2>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a1a      	ldr	r2, [pc, #104]	; (8005b88 <TIM_OC1_SetConfig+0x110>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d00b      	beq.n	8005b3a <TIM_OC1_SetConfig+0xc2>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a19      	ldr	r2, [pc, #100]	; (8005b8c <TIM_OC1_SetConfig+0x114>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d007      	beq.n	8005b3a <TIM_OC1_SetConfig+0xc2>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a18      	ldr	r2, [pc, #96]	; (8005b90 <TIM_OC1_SetConfig+0x118>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d003      	beq.n	8005b3a <TIM_OC1_SetConfig+0xc2>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a17      	ldr	r2, [pc, #92]	; (8005b94 <TIM_OC1_SetConfig+0x11c>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d111      	bne.n	8005b5e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	695b      	ldr	r3, [r3, #20]
 8005b4e:	693a      	ldr	r2, [r7, #16]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	699b      	ldr	r3, [r3, #24]
 8005b58:	693a      	ldr	r2, [r7, #16]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	685a      	ldr	r2, [r3, #4]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	621a      	str	r2, [r3, #32]
}
 8005b78:	bf00      	nop
 8005b7a:	371c      	adds	r7, #28
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr
 8005b84:	40012c00 	.word	0x40012c00
 8005b88:	40013400 	.word	0x40013400
 8005b8c:	40014000 	.word	0x40014000
 8005b90:	40014400 	.word	0x40014400
 8005b94:	40014800 	.word	0x40014800

08005b98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b087      	sub	sp, #28
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a1b      	ldr	r3, [r3, #32]
 8005ba6:	f023 0210 	bic.w	r2, r3, #16
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a1b      	ldr	r3, [r3, #32]
 8005bb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	699b      	ldr	r3, [r3, #24]
 8005bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	021b      	lsls	r3, r3, #8
 8005bda:	68fa      	ldr	r2, [r7, #12]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	f023 0320 	bic.w	r3, r3, #32
 8005be6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	011b      	lsls	r3, r3, #4
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a28      	ldr	r2, [pc, #160]	; (8005c98 <TIM_OC2_SetConfig+0x100>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d003      	beq.n	8005c04 <TIM_OC2_SetConfig+0x6c>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a27      	ldr	r2, [pc, #156]	; (8005c9c <TIM_OC2_SetConfig+0x104>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d10d      	bne.n	8005c20 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	011b      	lsls	r3, r3, #4
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c1e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a1d      	ldr	r2, [pc, #116]	; (8005c98 <TIM_OC2_SetConfig+0x100>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d00f      	beq.n	8005c48 <TIM_OC2_SetConfig+0xb0>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	4a1c      	ldr	r2, [pc, #112]	; (8005c9c <TIM_OC2_SetConfig+0x104>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d00b      	beq.n	8005c48 <TIM_OC2_SetConfig+0xb0>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	4a1b      	ldr	r2, [pc, #108]	; (8005ca0 <TIM_OC2_SetConfig+0x108>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d007      	beq.n	8005c48 <TIM_OC2_SetConfig+0xb0>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	4a1a      	ldr	r2, [pc, #104]	; (8005ca4 <TIM_OC2_SetConfig+0x10c>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d003      	beq.n	8005c48 <TIM_OC2_SetConfig+0xb0>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	4a19      	ldr	r2, [pc, #100]	; (8005ca8 <TIM_OC2_SetConfig+0x110>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d113      	bne.n	8005c70 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	695b      	ldr	r3, [r3, #20]
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	693a      	ldr	r2, [r7, #16]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	699b      	ldr	r3, [r3, #24]
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	693a      	ldr	r2, [r7, #16]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	693a      	ldr	r2, [r7, #16]
 8005c74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	685a      	ldr	r2, [r3, #4]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	697a      	ldr	r2, [r7, #20]
 8005c88:	621a      	str	r2, [r3, #32]
}
 8005c8a:	bf00      	nop
 8005c8c:	371c      	adds	r7, #28
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	40012c00 	.word	0x40012c00
 8005c9c:	40013400 	.word	0x40013400
 8005ca0:	40014000 	.word	0x40014000
 8005ca4:	40014400 	.word	0x40014400
 8005ca8:	40014800 	.word	0x40014800

08005cac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b087      	sub	sp, #28
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a1b      	ldr	r3, [r3, #32]
 8005cba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a1b      	ldr	r3, [r3, #32]
 8005cc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	69db      	ldr	r3, [r3, #28]
 8005cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f023 0303 	bic.w	r3, r3, #3
 8005ce6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005cf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	021b      	lsls	r3, r3, #8
 8005d00:	697a      	ldr	r2, [r7, #20]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a27      	ldr	r2, [pc, #156]	; (8005da8 <TIM_OC3_SetConfig+0xfc>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d003      	beq.n	8005d16 <TIM_OC3_SetConfig+0x6a>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a26      	ldr	r2, [pc, #152]	; (8005dac <TIM_OC3_SetConfig+0x100>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d10d      	bne.n	8005d32 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	021b      	lsls	r3, r3, #8
 8005d24:	697a      	ldr	r2, [r7, #20]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a1c      	ldr	r2, [pc, #112]	; (8005da8 <TIM_OC3_SetConfig+0xfc>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d00f      	beq.n	8005d5a <TIM_OC3_SetConfig+0xae>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a1b      	ldr	r2, [pc, #108]	; (8005dac <TIM_OC3_SetConfig+0x100>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d00b      	beq.n	8005d5a <TIM_OC3_SetConfig+0xae>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a1a      	ldr	r2, [pc, #104]	; (8005db0 <TIM_OC3_SetConfig+0x104>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d007      	beq.n	8005d5a <TIM_OC3_SetConfig+0xae>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a19      	ldr	r2, [pc, #100]	; (8005db4 <TIM_OC3_SetConfig+0x108>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d003      	beq.n	8005d5a <TIM_OC3_SetConfig+0xae>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a18      	ldr	r2, [pc, #96]	; (8005db8 <TIM_OC3_SetConfig+0x10c>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d113      	bne.n	8005d82 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	011b      	lsls	r3, r3, #4
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	699b      	ldr	r3, [r3, #24]
 8005d7a:	011b      	lsls	r3, r3, #4
 8005d7c:	693a      	ldr	r2, [r7, #16]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	693a      	ldr	r2, [r7, #16]
 8005d86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	685a      	ldr	r2, [r3, #4]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	697a      	ldr	r2, [r7, #20]
 8005d9a:	621a      	str	r2, [r3, #32]
}
 8005d9c:	bf00      	nop
 8005d9e:	371c      	adds	r7, #28
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr
 8005da8:	40012c00 	.word	0x40012c00
 8005dac:	40013400 	.word	0x40013400
 8005db0:	40014000 	.word	0x40014000
 8005db4:	40014400 	.word	0x40014400
 8005db8:	40014800 	.word	0x40014800

08005dbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b087      	sub	sp, #28
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6a1b      	ldr	r3, [r3, #32]
 8005dca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6a1b      	ldr	r3, [r3, #32]
 8005dd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	69db      	ldr	r3, [r3, #28]
 8005de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005dea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005df6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	021b      	lsls	r3, r3, #8
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	031b      	lsls	r3, r3, #12
 8005e12:	693a      	ldr	r2, [r7, #16]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a18      	ldr	r2, [pc, #96]	; (8005e7c <TIM_OC4_SetConfig+0xc0>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d00f      	beq.n	8005e40 <TIM_OC4_SetConfig+0x84>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a17      	ldr	r2, [pc, #92]	; (8005e80 <TIM_OC4_SetConfig+0xc4>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d00b      	beq.n	8005e40 <TIM_OC4_SetConfig+0x84>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a16      	ldr	r2, [pc, #88]	; (8005e84 <TIM_OC4_SetConfig+0xc8>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d007      	beq.n	8005e40 <TIM_OC4_SetConfig+0x84>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a15      	ldr	r2, [pc, #84]	; (8005e88 <TIM_OC4_SetConfig+0xcc>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d003      	beq.n	8005e40 <TIM_OC4_SetConfig+0x84>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4a14      	ldr	r2, [pc, #80]	; (8005e8c <TIM_OC4_SetConfig+0xd0>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d109      	bne.n	8005e54 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	695b      	ldr	r3, [r3, #20]
 8005e4c:	019b      	lsls	r3, r3, #6
 8005e4e:	697a      	ldr	r2, [r7, #20]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	697a      	ldr	r2, [r7, #20]
 8005e58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	685a      	ldr	r2, [r3, #4]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	693a      	ldr	r2, [r7, #16]
 8005e6c:	621a      	str	r2, [r3, #32]
}
 8005e6e:	bf00      	nop
 8005e70:	371c      	adds	r7, #28
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	40012c00 	.word	0x40012c00
 8005e80:	40013400 	.word	0x40013400
 8005e84:	40014000 	.word	0x40014000
 8005e88:	40014400 	.word	0x40014400
 8005e8c:	40014800 	.word	0x40014800

08005e90 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b087      	sub	sp, #28
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a1b      	ldr	r3, [r3, #32]
 8005e9e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a1b      	ldr	r3, [r3, #32]
 8005eaa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005ed4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	041b      	lsls	r3, r3, #16
 8005edc:	693a      	ldr	r2, [r7, #16]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a17      	ldr	r2, [pc, #92]	; (8005f44 <TIM_OC5_SetConfig+0xb4>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d00f      	beq.n	8005f0a <TIM_OC5_SetConfig+0x7a>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a16      	ldr	r2, [pc, #88]	; (8005f48 <TIM_OC5_SetConfig+0xb8>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d00b      	beq.n	8005f0a <TIM_OC5_SetConfig+0x7a>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a15      	ldr	r2, [pc, #84]	; (8005f4c <TIM_OC5_SetConfig+0xbc>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d007      	beq.n	8005f0a <TIM_OC5_SetConfig+0x7a>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a14      	ldr	r2, [pc, #80]	; (8005f50 <TIM_OC5_SetConfig+0xc0>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d003      	beq.n	8005f0a <TIM_OC5_SetConfig+0x7a>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4a13      	ldr	r2, [pc, #76]	; (8005f54 <TIM_OC5_SetConfig+0xc4>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d109      	bne.n	8005f1e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f10:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	021b      	lsls	r3, r3, #8
 8005f18:	697a      	ldr	r2, [r7, #20]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	697a      	ldr	r2, [r7, #20]
 8005f22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	68fa      	ldr	r2, [r7, #12]
 8005f28:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	685a      	ldr	r2, [r3, #4]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	693a      	ldr	r2, [r7, #16]
 8005f36:	621a      	str	r2, [r3, #32]
}
 8005f38:	bf00      	nop
 8005f3a:	371c      	adds	r7, #28
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr
 8005f44:	40012c00 	.word	0x40012c00
 8005f48:	40013400 	.word	0x40013400
 8005f4c:	40014000 	.word	0x40014000
 8005f50:	40014400 	.word	0x40014400
 8005f54:	40014800 	.word	0x40014800

08005f58 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b087      	sub	sp, #28
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a1b      	ldr	r3, [r3, #32]
 8005f66:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	021b      	lsls	r3, r3, #8
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	051b      	lsls	r3, r3, #20
 8005fa6:	693a      	ldr	r2, [r7, #16]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a18      	ldr	r2, [pc, #96]	; (8006010 <TIM_OC6_SetConfig+0xb8>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d00f      	beq.n	8005fd4 <TIM_OC6_SetConfig+0x7c>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4a17      	ldr	r2, [pc, #92]	; (8006014 <TIM_OC6_SetConfig+0xbc>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d00b      	beq.n	8005fd4 <TIM_OC6_SetConfig+0x7c>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4a16      	ldr	r2, [pc, #88]	; (8006018 <TIM_OC6_SetConfig+0xc0>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d007      	beq.n	8005fd4 <TIM_OC6_SetConfig+0x7c>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a15      	ldr	r2, [pc, #84]	; (800601c <TIM_OC6_SetConfig+0xc4>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d003      	beq.n	8005fd4 <TIM_OC6_SetConfig+0x7c>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a14      	ldr	r2, [pc, #80]	; (8006020 <TIM_OC6_SetConfig+0xc8>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d109      	bne.n	8005fe8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fda:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	695b      	ldr	r3, [r3, #20]
 8005fe0:	029b      	lsls	r3, r3, #10
 8005fe2:	697a      	ldr	r2, [r7, #20]
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	697a      	ldr	r2, [r7, #20]
 8005fec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	685a      	ldr	r2, [r3, #4]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	693a      	ldr	r2, [r7, #16]
 8006000:	621a      	str	r2, [r3, #32]
}
 8006002:	bf00      	nop
 8006004:	371c      	adds	r7, #28
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr
 800600e:	bf00      	nop
 8006010:	40012c00 	.word	0x40012c00
 8006014:	40013400 	.word	0x40013400
 8006018:	40014000 	.word	0x40014000
 800601c:	40014400 	.word	0x40014400
 8006020:	40014800 	.word	0x40014800

08006024 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006024:	b480      	push	{r7}
 8006026:	b087      	sub	sp, #28
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6a1b      	ldr	r3, [r3, #32]
 8006034:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6a1b      	ldr	r3, [r3, #32]
 800603a:	f023 0201 	bic.w	r2, r3, #1
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800604e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	011b      	lsls	r3, r3, #4
 8006054:	693a      	ldr	r2, [r7, #16]
 8006056:	4313      	orrs	r3, r2
 8006058:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	f023 030a 	bic.w	r3, r3, #10
 8006060:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006062:	697a      	ldr	r2, [r7, #20]
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	4313      	orrs	r3, r2
 8006068:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	693a      	ldr	r2, [r7, #16]
 800606e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	697a      	ldr	r2, [r7, #20]
 8006074:	621a      	str	r2, [r3, #32]
}
 8006076:	bf00      	nop
 8006078:	371c      	adds	r7, #28
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr

08006082 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006082:	b480      	push	{r7}
 8006084:	b087      	sub	sp, #28
 8006086:	af00      	add	r7, sp, #0
 8006088:	60f8      	str	r0, [r7, #12]
 800608a:	60b9      	str	r1, [r7, #8]
 800608c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6a1b      	ldr	r3, [r3, #32]
 8006092:	f023 0210 	bic.w	r2, r3, #16
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	699b      	ldr	r3, [r3, #24]
 800609e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6a1b      	ldr	r3, [r3, #32]
 80060a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	031b      	lsls	r3, r3, #12
 80060b2:	697a      	ldr	r2, [r7, #20]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	011b      	lsls	r3, r3, #4
 80060c4:	693a      	ldr	r2, [r7, #16]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	697a      	ldr	r2, [r7, #20]
 80060ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	693a      	ldr	r2, [r7, #16]
 80060d4:	621a      	str	r2, [r3, #32]
}
 80060d6:	bf00      	nop
 80060d8:	371c      	adds	r7, #28
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr

080060e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060e2:	b480      	push	{r7}
 80060e4:	b085      	sub	sp, #20
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
 80060ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060fa:	683a      	ldr	r2, [r7, #0]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	4313      	orrs	r3, r2
 8006100:	f043 0307 	orr.w	r3, r3, #7
 8006104:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	609a      	str	r2, [r3, #8]
}
 800610c:	bf00      	nop
 800610e:	3714      	adds	r7, #20
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006118:	b480      	push	{r7}
 800611a:	b087      	sub	sp, #28
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]
 8006124:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006132:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	021a      	lsls	r2, r3, #8
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	431a      	orrs	r2, r3
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	4313      	orrs	r3, r2
 8006140:	697a      	ldr	r2, [r7, #20]
 8006142:	4313      	orrs	r3, r2
 8006144:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	697a      	ldr	r2, [r7, #20]
 800614a:	609a      	str	r2, [r3, #8]
}
 800614c:	bf00      	nop
 800614e:	371c      	adds	r7, #28
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006158:	b480      	push	{r7}
 800615a:	b087      	sub	sp, #28
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	f003 031f 	and.w	r3, r3, #31
 800616a:	2201      	movs	r2, #1
 800616c:	fa02 f303 	lsl.w	r3, r2, r3
 8006170:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6a1a      	ldr	r2, [r3, #32]
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	43db      	mvns	r3, r3
 800617a:	401a      	ands	r2, r3
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6a1a      	ldr	r2, [r3, #32]
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	f003 031f 	and.w	r3, r3, #31
 800618a:	6879      	ldr	r1, [r7, #4]
 800618c:	fa01 f303 	lsl.w	r3, r1, r3
 8006190:	431a      	orrs	r2, r3
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	621a      	str	r2, [r3, #32]
}
 8006196:	bf00      	nop
 8006198:	371c      	adds	r7, #28
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
	...

080061a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d101      	bne.n	80061bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061b8:	2302      	movs	r3, #2
 80061ba:	e068      	b.n	800628e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2202      	movs	r2, #2
 80061c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a2e      	ldr	r2, [pc, #184]	; (800629c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d004      	beq.n	80061f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a2d      	ldr	r2, [pc, #180]	; (80062a0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d108      	bne.n	8006202 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80061f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	4313      	orrs	r3, r2
 8006200:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006208:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	4313      	orrs	r3, r2
 8006212:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68fa      	ldr	r2, [r7, #12]
 800621a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a1e      	ldr	r2, [pc, #120]	; (800629c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d01d      	beq.n	8006262 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800622e:	d018      	beq.n	8006262 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a1b      	ldr	r2, [pc, #108]	; (80062a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d013      	beq.n	8006262 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a1a      	ldr	r2, [pc, #104]	; (80062a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d00e      	beq.n	8006262 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a18      	ldr	r2, [pc, #96]	; (80062ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d009      	beq.n	8006262 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a13      	ldr	r2, [pc, #76]	; (80062a0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d004      	beq.n	8006262 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a14      	ldr	r2, [pc, #80]	; (80062b0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d10c      	bne.n	800627c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006268:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	68ba      	ldr	r2, [r7, #8]
 8006270:	4313      	orrs	r3, r2
 8006272:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3714      	adds	r7, #20
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop
 800629c:	40012c00 	.word	0x40012c00
 80062a0:	40013400 	.word	0x40013400
 80062a4:	40000400 	.word	0x40000400
 80062a8:	40000800 	.word	0x40000800
 80062ac:	40000c00 	.word	0x40000c00
 80062b0:	40014000 	.word	0x40014000

080062b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b085      	sub	sp, #20
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80062be:	2300      	movs	r3, #0
 80062c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d101      	bne.n	80062d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80062cc:	2302      	movs	r3, #2
 80062ce:	e065      	b.n	800639c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	4313      	orrs	r3, r2
 8006300:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4313      	orrs	r3, r2
 800630e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	691b      	ldr	r3, [r3, #16]
 800631a:	4313      	orrs	r3, r2
 800631c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	695b      	ldr	r3, [r3, #20]
 8006328:	4313      	orrs	r3, r2
 800632a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006336:	4313      	orrs	r3, r2
 8006338:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	699b      	ldr	r3, [r3, #24]
 8006344:	041b      	lsls	r3, r3, #16
 8006346:	4313      	orrs	r3, r2
 8006348:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a16      	ldr	r2, [pc, #88]	; (80063a8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d004      	beq.n	800635e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a14      	ldr	r2, [pc, #80]	; (80063ac <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d115      	bne.n	800638a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006368:	051b      	lsls	r3, r3, #20
 800636a:	4313      	orrs	r3, r2
 800636c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	69db      	ldr	r3, [r3, #28]
 8006378:	4313      	orrs	r3, r2
 800637a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	6a1b      	ldr	r3, [r3, #32]
 8006386:	4313      	orrs	r3, r2
 8006388:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	3714      	adds	r7, #20
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr
 80063a8:	40012c00 	.word	0x40012c00
 80063ac:	40013400 	.word	0x40013400

080063b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063b8:	bf00      	nop
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063cc:	bf00      	nop
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80063e0:	bf00      	nop
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d101      	bne.n	80063fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e040      	b.n	8006480 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006402:	2b00      	cmp	r3, #0
 8006404:	d106      	bne.n	8006414 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f7fb f942 	bl	8001698 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2224      	movs	r2, #36	; 0x24
 8006418:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f022 0201 	bic.w	r2, r2, #1
 8006428:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 f82c 	bl	8006488 <UART_SetConfig>
 8006430:	4603      	mov	r3, r0
 8006432:	2b01      	cmp	r3, #1
 8006434:	d101      	bne.n	800643a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e022      	b.n	8006480 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643e:	2b00      	cmp	r3, #0
 8006440:	d002      	beq.n	8006448 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 faaa 	bl	800699c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	685a      	ldr	r2, [r3, #4]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006456:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	689a      	ldr	r2, [r3, #8]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006466:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f042 0201 	orr.w	r2, r2, #1
 8006476:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 fb31 	bl	8006ae0 <UART_CheckIdleState>
 800647e:	4603      	mov	r3, r0
}
 8006480:	4618      	mov	r0, r3
 8006482:	3708      	adds	r7, #8
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006488:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800648c:	b088      	sub	sp, #32
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006492:	2300      	movs	r3, #0
 8006494:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	689a      	ldr	r2, [r3, #8]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	431a      	orrs	r2, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	695b      	ldr	r3, [r3, #20]
 80064a4:	431a      	orrs	r2, r3
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	69db      	ldr	r3, [r3, #28]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	4bac      	ldr	r3, [pc, #688]	; (8006768 <UART_SetConfig+0x2e0>)
 80064b6:	4013      	ands	r3, r2
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	6812      	ldr	r2, [r2, #0]
 80064bc:	69f9      	ldr	r1, [r7, #28]
 80064be:	430b      	orrs	r3, r1
 80064c0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	68da      	ldr	r2, [r3, #12]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	430a      	orrs	r2, r1
 80064d6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	699b      	ldr	r3, [r3, #24]
 80064dc:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4aa2      	ldr	r2, [pc, #648]	; (800676c <UART_SetConfig+0x2e4>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d004      	beq.n	80064f2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6a1b      	ldr	r3, [r3, #32]
 80064ec:	69fa      	ldr	r2, [r7, #28]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	69fa      	ldr	r2, [r7, #28]
 8006502:	430a      	orrs	r2, r1
 8006504:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a99      	ldr	r2, [pc, #612]	; (8006770 <UART_SetConfig+0x2e8>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d121      	bne.n	8006554 <UART_SetConfig+0xcc>
 8006510:	4b98      	ldr	r3, [pc, #608]	; (8006774 <UART_SetConfig+0x2ec>)
 8006512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006516:	f003 0303 	and.w	r3, r3, #3
 800651a:	2b03      	cmp	r3, #3
 800651c:	d816      	bhi.n	800654c <UART_SetConfig+0xc4>
 800651e:	a201      	add	r2, pc, #4	; (adr r2, 8006524 <UART_SetConfig+0x9c>)
 8006520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006524:	08006535 	.word	0x08006535
 8006528:	08006541 	.word	0x08006541
 800652c:	0800653b 	.word	0x0800653b
 8006530:	08006547 	.word	0x08006547
 8006534:	2301      	movs	r3, #1
 8006536:	76fb      	strb	r3, [r7, #27]
 8006538:	e0e8      	b.n	800670c <UART_SetConfig+0x284>
 800653a:	2302      	movs	r3, #2
 800653c:	76fb      	strb	r3, [r7, #27]
 800653e:	e0e5      	b.n	800670c <UART_SetConfig+0x284>
 8006540:	2304      	movs	r3, #4
 8006542:	76fb      	strb	r3, [r7, #27]
 8006544:	e0e2      	b.n	800670c <UART_SetConfig+0x284>
 8006546:	2308      	movs	r3, #8
 8006548:	76fb      	strb	r3, [r7, #27]
 800654a:	e0df      	b.n	800670c <UART_SetConfig+0x284>
 800654c:	2310      	movs	r3, #16
 800654e:	76fb      	strb	r3, [r7, #27]
 8006550:	bf00      	nop
 8006552:	e0db      	b.n	800670c <UART_SetConfig+0x284>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a87      	ldr	r2, [pc, #540]	; (8006778 <UART_SetConfig+0x2f0>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d134      	bne.n	80065c8 <UART_SetConfig+0x140>
 800655e:	4b85      	ldr	r3, [pc, #532]	; (8006774 <UART_SetConfig+0x2ec>)
 8006560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006564:	f003 030c 	and.w	r3, r3, #12
 8006568:	2b0c      	cmp	r3, #12
 800656a:	d829      	bhi.n	80065c0 <UART_SetConfig+0x138>
 800656c:	a201      	add	r2, pc, #4	; (adr r2, 8006574 <UART_SetConfig+0xec>)
 800656e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006572:	bf00      	nop
 8006574:	080065a9 	.word	0x080065a9
 8006578:	080065c1 	.word	0x080065c1
 800657c:	080065c1 	.word	0x080065c1
 8006580:	080065c1 	.word	0x080065c1
 8006584:	080065b5 	.word	0x080065b5
 8006588:	080065c1 	.word	0x080065c1
 800658c:	080065c1 	.word	0x080065c1
 8006590:	080065c1 	.word	0x080065c1
 8006594:	080065af 	.word	0x080065af
 8006598:	080065c1 	.word	0x080065c1
 800659c:	080065c1 	.word	0x080065c1
 80065a0:	080065c1 	.word	0x080065c1
 80065a4:	080065bb 	.word	0x080065bb
 80065a8:	2300      	movs	r3, #0
 80065aa:	76fb      	strb	r3, [r7, #27]
 80065ac:	e0ae      	b.n	800670c <UART_SetConfig+0x284>
 80065ae:	2302      	movs	r3, #2
 80065b0:	76fb      	strb	r3, [r7, #27]
 80065b2:	e0ab      	b.n	800670c <UART_SetConfig+0x284>
 80065b4:	2304      	movs	r3, #4
 80065b6:	76fb      	strb	r3, [r7, #27]
 80065b8:	e0a8      	b.n	800670c <UART_SetConfig+0x284>
 80065ba:	2308      	movs	r3, #8
 80065bc:	76fb      	strb	r3, [r7, #27]
 80065be:	e0a5      	b.n	800670c <UART_SetConfig+0x284>
 80065c0:	2310      	movs	r3, #16
 80065c2:	76fb      	strb	r3, [r7, #27]
 80065c4:	bf00      	nop
 80065c6:	e0a1      	b.n	800670c <UART_SetConfig+0x284>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a6b      	ldr	r2, [pc, #428]	; (800677c <UART_SetConfig+0x2f4>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d120      	bne.n	8006614 <UART_SetConfig+0x18c>
 80065d2:	4b68      	ldr	r3, [pc, #416]	; (8006774 <UART_SetConfig+0x2ec>)
 80065d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065d8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80065dc:	2b10      	cmp	r3, #16
 80065de:	d00f      	beq.n	8006600 <UART_SetConfig+0x178>
 80065e0:	2b10      	cmp	r3, #16
 80065e2:	d802      	bhi.n	80065ea <UART_SetConfig+0x162>
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d005      	beq.n	80065f4 <UART_SetConfig+0x16c>
 80065e8:	e010      	b.n	800660c <UART_SetConfig+0x184>
 80065ea:	2b20      	cmp	r3, #32
 80065ec:	d005      	beq.n	80065fa <UART_SetConfig+0x172>
 80065ee:	2b30      	cmp	r3, #48	; 0x30
 80065f0:	d009      	beq.n	8006606 <UART_SetConfig+0x17e>
 80065f2:	e00b      	b.n	800660c <UART_SetConfig+0x184>
 80065f4:	2300      	movs	r3, #0
 80065f6:	76fb      	strb	r3, [r7, #27]
 80065f8:	e088      	b.n	800670c <UART_SetConfig+0x284>
 80065fa:	2302      	movs	r3, #2
 80065fc:	76fb      	strb	r3, [r7, #27]
 80065fe:	e085      	b.n	800670c <UART_SetConfig+0x284>
 8006600:	2304      	movs	r3, #4
 8006602:	76fb      	strb	r3, [r7, #27]
 8006604:	e082      	b.n	800670c <UART_SetConfig+0x284>
 8006606:	2308      	movs	r3, #8
 8006608:	76fb      	strb	r3, [r7, #27]
 800660a:	e07f      	b.n	800670c <UART_SetConfig+0x284>
 800660c:	2310      	movs	r3, #16
 800660e:	76fb      	strb	r3, [r7, #27]
 8006610:	bf00      	nop
 8006612:	e07b      	b.n	800670c <UART_SetConfig+0x284>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a59      	ldr	r2, [pc, #356]	; (8006780 <UART_SetConfig+0x2f8>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d120      	bne.n	8006660 <UART_SetConfig+0x1d8>
 800661e:	4b55      	ldr	r3, [pc, #340]	; (8006774 <UART_SetConfig+0x2ec>)
 8006620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006624:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006628:	2b40      	cmp	r3, #64	; 0x40
 800662a:	d00f      	beq.n	800664c <UART_SetConfig+0x1c4>
 800662c:	2b40      	cmp	r3, #64	; 0x40
 800662e:	d802      	bhi.n	8006636 <UART_SetConfig+0x1ae>
 8006630:	2b00      	cmp	r3, #0
 8006632:	d005      	beq.n	8006640 <UART_SetConfig+0x1b8>
 8006634:	e010      	b.n	8006658 <UART_SetConfig+0x1d0>
 8006636:	2b80      	cmp	r3, #128	; 0x80
 8006638:	d005      	beq.n	8006646 <UART_SetConfig+0x1be>
 800663a:	2bc0      	cmp	r3, #192	; 0xc0
 800663c:	d009      	beq.n	8006652 <UART_SetConfig+0x1ca>
 800663e:	e00b      	b.n	8006658 <UART_SetConfig+0x1d0>
 8006640:	2300      	movs	r3, #0
 8006642:	76fb      	strb	r3, [r7, #27]
 8006644:	e062      	b.n	800670c <UART_SetConfig+0x284>
 8006646:	2302      	movs	r3, #2
 8006648:	76fb      	strb	r3, [r7, #27]
 800664a:	e05f      	b.n	800670c <UART_SetConfig+0x284>
 800664c:	2304      	movs	r3, #4
 800664e:	76fb      	strb	r3, [r7, #27]
 8006650:	e05c      	b.n	800670c <UART_SetConfig+0x284>
 8006652:	2308      	movs	r3, #8
 8006654:	76fb      	strb	r3, [r7, #27]
 8006656:	e059      	b.n	800670c <UART_SetConfig+0x284>
 8006658:	2310      	movs	r3, #16
 800665a:	76fb      	strb	r3, [r7, #27]
 800665c:	bf00      	nop
 800665e:	e055      	b.n	800670c <UART_SetConfig+0x284>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a47      	ldr	r2, [pc, #284]	; (8006784 <UART_SetConfig+0x2fc>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d124      	bne.n	80066b4 <UART_SetConfig+0x22c>
 800666a:	4b42      	ldr	r3, [pc, #264]	; (8006774 <UART_SetConfig+0x2ec>)
 800666c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006670:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006674:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006678:	d012      	beq.n	80066a0 <UART_SetConfig+0x218>
 800667a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800667e:	d802      	bhi.n	8006686 <UART_SetConfig+0x1fe>
 8006680:	2b00      	cmp	r3, #0
 8006682:	d007      	beq.n	8006694 <UART_SetConfig+0x20c>
 8006684:	e012      	b.n	80066ac <UART_SetConfig+0x224>
 8006686:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800668a:	d006      	beq.n	800669a <UART_SetConfig+0x212>
 800668c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006690:	d009      	beq.n	80066a6 <UART_SetConfig+0x21e>
 8006692:	e00b      	b.n	80066ac <UART_SetConfig+0x224>
 8006694:	2300      	movs	r3, #0
 8006696:	76fb      	strb	r3, [r7, #27]
 8006698:	e038      	b.n	800670c <UART_SetConfig+0x284>
 800669a:	2302      	movs	r3, #2
 800669c:	76fb      	strb	r3, [r7, #27]
 800669e:	e035      	b.n	800670c <UART_SetConfig+0x284>
 80066a0:	2304      	movs	r3, #4
 80066a2:	76fb      	strb	r3, [r7, #27]
 80066a4:	e032      	b.n	800670c <UART_SetConfig+0x284>
 80066a6:	2308      	movs	r3, #8
 80066a8:	76fb      	strb	r3, [r7, #27]
 80066aa:	e02f      	b.n	800670c <UART_SetConfig+0x284>
 80066ac:	2310      	movs	r3, #16
 80066ae:	76fb      	strb	r3, [r7, #27]
 80066b0:	bf00      	nop
 80066b2:	e02b      	b.n	800670c <UART_SetConfig+0x284>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a2c      	ldr	r2, [pc, #176]	; (800676c <UART_SetConfig+0x2e4>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d124      	bne.n	8006708 <UART_SetConfig+0x280>
 80066be:	4b2d      	ldr	r3, [pc, #180]	; (8006774 <UART_SetConfig+0x2ec>)
 80066c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80066c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066cc:	d012      	beq.n	80066f4 <UART_SetConfig+0x26c>
 80066ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066d2:	d802      	bhi.n	80066da <UART_SetConfig+0x252>
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d007      	beq.n	80066e8 <UART_SetConfig+0x260>
 80066d8:	e012      	b.n	8006700 <UART_SetConfig+0x278>
 80066da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066de:	d006      	beq.n	80066ee <UART_SetConfig+0x266>
 80066e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80066e4:	d009      	beq.n	80066fa <UART_SetConfig+0x272>
 80066e6:	e00b      	b.n	8006700 <UART_SetConfig+0x278>
 80066e8:	2300      	movs	r3, #0
 80066ea:	76fb      	strb	r3, [r7, #27]
 80066ec:	e00e      	b.n	800670c <UART_SetConfig+0x284>
 80066ee:	2302      	movs	r3, #2
 80066f0:	76fb      	strb	r3, [r7, #27]
 80066f2:	e00b      	b.n	800670c <UART_SetConfig+0x284>
 80066f4:	2304      	movs	r3, #4
 80066f6:	76fb      	strb	r3, [r7, #27]
 80066f8:	e008      	b.n	800670c <UART_SetConfig+0x284>
 80066fa:	2308      	movs	r3, #8
 80066fc:	76fb      	strb	r3, [r7, #27]
 80066fe:	e005      	b.n	800670c <UART_SetConfig+0x284>
 8006700:	2310      	movs	r3, #16
 8006702:	76fb      	strb	r3, [r7, #27]
 8006704:	bf00      	nop
 8006706:	e001      	b.n	800670c <UART_SetConfig+0x284>
 8006708:	2310      	movs	r3, #16
 800670a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a16      	ldr	r2, [pc, #88]	; (800676c <UART_SetConfig+0x2e4>)
 8006712:	4293      	cmp	r3, r2
 8006714:	f040 8087 	bne.w	8006826 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006718:	7efb      	ldrb	r3, [r7, #27]
 800671a:	2b08      	cmp	r3, #8
 800671c:	d836      	bhi.n	800678c <UART_SetConfig+0x304>
 800671e:	a201      	add	r2, pc, #4	; (adr r2, 8006724 <UART_SetConfig+0x29c>)
 8006720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006724:	08006749 	.word	0x08006749
 8006728:	0800678d 	.word	0x0800678d
 800672c:	08006751 	.word	0x08006751
 8006730:	0800678d 	.word	0x0800678d
 8006734:	08006757 	.word	0x08006757
 8006738:	0800678d 	.word	0x0800678d
 800673c:	0800678d 	.word	0x0800678d
 8006740:	0800678d 	.word	0x0800678d
 8006744:	0800675f 	.word	0x0800675f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006748:	f7fd fe7e 	bl	8004448 <HAL_RCC_GetPCLK1Freq>
 800674c:	6178      	str	r0, [r7, #20]
        break;
 800674e:	e022      	b.n	8006796 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006750:	4b0d      	ldr	r3, [pc, #52]	; (8006788 <UART_SetConfig+0x300>)
 8006752:	617b      	str	r3, [r7, #20]
        break;
 8006754:	e01f      	b.n	8006796 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006756:	f7fd fde1 	bl	800431c <HAL_RCC_GetSysClockFreq>
 800675a:	6178      	str	r0, [r7, #20]
        break;
 800675c:	e01b      	b.n	8006796 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800675e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006762:	617b      	str	r3, [r7, #20]
        break;
 8006764:	e017      	b.n	8006796 <UART_SetConfig+0x30e>
 8006766:	bf00      	nop
 8006768:	efff69f3 	.word	0xefff69f3
 800676c:	40008000 	.word	0x40008000
 8006770:	40013800 	.word	0x40013800
 8006774:	40021000 	.word	0x40021000
 8006778:	40004400 	.word	0x40004400
 800677c:	40004800 	.word	0x40004800
 8006780:	40004c00 	.word	0x40004c00
 8006784:	40005000 	.word	0x40005000
 8006788:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800678c:	2300      	movs	r3, #0
 800678e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	76bb      	strb	r3, [r7, #26]
        break;
 8006794:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	2b00      	cmp	r3, #0
 800679a:	f000 80f1 	beq.w	8006980 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	685a      	ldr	r2, [r3, #4]
 80067a2:	4613      	mov	r3, r2
 80067a4:	005b      	lsls	r3, r3, #1
 80067a6:	4413      	add	r3, r2
 80067a8:	697a      	ldr	r2, [r7, #20]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d305      	bcc.n	80067ba <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80067b4:	697a      	ldr	r2, [r7, #20]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d902      	bls.n	80067c0 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	76bb      	strb	r3, [r7, #26]
 80067be:	e0df      	b.n	8006980 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	4619      	mov	r1, r3
 80067c4:	f04f 0200 	mov.w	r2, #0
 80067c8:	f04f 0300 	mov.w	r3, #0
 80067cc:	f04f 0400 	mov.w	r4, #0
 80067d0:	0214      	lsls	r4, r2, #8
 80067d2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80067d6:	020b      	lsls	r3, r1, #8
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	6852      	ldr	r2, [r2, #4]
 80067dc:	0852      	lsrs	r2, r2, #1
 80067de:	4611      	mov	r1, r2
 80067e0:	f04f 0200 	mov.w	r2, #0
 80067e4:	eb13 0b01 	adds.w	fp, r3, r1
 80067e8:	eb44 0c02 	adc.w	ip, r4, r2
 80067ec:	4658      	mov	r0, fp
 80067ee:	4661      	mov	r1, ip
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	f04f 0400 	mov.w	r4, #0
 80067f8:	461a      	mov	r2, r3
 80067fa:	4623      	mov	r3, r4
 80067fc:	f7fa f8da 	bl	80009b4 <__aeabi_uldivmod>
 8006800:	4603      	mov	r3, r0
 8006802:	460c      	mov	r4, r1
 8006804:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800680c:	d308      	bcc.n	8006820 <UART_SetConfig+0x398>
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006814:	d204      	bcs.n	8006820 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	693a      	ldr	r2, [r7, #16]
 800681c:	60da      	str	r2, [r3, #12]
 800681e:	e0af      	b.n	8006980 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	76bb      	strb	r3, [r7, #26]
 8006824:	e0ac      	b.n	8006980 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	69db      	ldr	r3, [r3, #28]
 800682a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800682e:	d15b      	bne.n	80068e8 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8006830:	7efb      	ldrb	r3, [r7, #27]
 8006832:	2b08      	cmp	r3, #8
 8006834:	d827      	bhi.n	8006886 <UART_SetConfig+0x3fe>
 8006836:	a201      	add	r2, pc, #4	; (adr r2, 800683c <UART_SetConfig+0x3b4>)
 8006838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800683c:	08006861 	.word	0x08006861
 8006840:	08006869 	.word	0x08006869
 8006844:	08006871 	.word	0x08006871
 8006848:	08006887 	.word	0x08006887
 800684c:	08006877 	.word	0x08006877
 8006850:	08006887 	.word	0x08006887
 8006854:	08006887 	.word	0x08006887
 8006858:	08006887 	.word	0x08006887
 800685c:	0800687f 	.word	0x0800687f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006860:	f7fd fdf2 	bl	8004448 <HAL_RCC_GetPCLK1Freq>
 8006864:	6178      	str	r0, [r7, #20]
        break;
 8006866:	e013      	b.n	8006890 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006868:	f7fd fe04 	bl	8004474 <HAL_RCC_GetPCLK2Freq>
 800686c:	6178      	str	r0, [r7, #20]
        break;
 800686e:	e00f      	b.n	8006890 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006870:	4b49      	ldr	r3, [pc, #292]	; (8006998 <UART_SetConfig+0x510>)
 8006872:	617b      	str	r3, [r7, #20]
        break;
 8006874:	e00c      	b.n	8006890 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006876:	f7fd fd51 	bl	800431c <HAL_RCC_GetSysClockFreq>
 800687a:	6178      	str	r0, [r7, #20]
        break;
 800687c:	e008      	b.n	8006890 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800687e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006882:	617b      	str	r3, [r7, #20]
        break;
 8006884:	e004      	b.n	8006890 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8006886:	2300      	movs	r3, #0
 8006888:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	76bb      	strb	r3, [r7, #26]
        break;
 800688e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d074      	beq.n	8006980 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	005a      	lsls	r2, r3, #1
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	085b      	lsrs	r3, r3, #1
 80068a0:	441a      	add	r2, r3
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	2b0f      	cmp	r3, #15
 80068b2:	d916      	bls.n	80068e2 <UART_SetConfig+0x45a>
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068ba:	d212      	bcs.n	80068e2 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	b29b      	uxth	r3, r3
 80068c0:	f023 030f 	bic.w	r3, r3, #15
 80068c4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	085b      	lsrs	r3, r3, #1
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	f003 0307 	and.w	r3, r3, #7
 80068d0:	b29a      	uxth	r2, r3
 80068d2:	89fb      	ldrh	r3, [r7, #14]
 80068d4:	4313      	orrs	r3, r2
 80068d6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	89fa      	ldrh	r2, [r7, #14]
 80068de:	60da      	str	r2, [r3, #12]
 80068e0:	e04e      	b.n	8006980 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	76bb      	strb	r3, [r7, #26]
 80068e6:	e04b      	b.n	8006980 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068e8:	7efb      	ldrb	r3, [r7, #27]
 80068ea:	2b08      	cmp	r3, #8
 80068ec:	d827      	bhi.n	800693e <UART_SetConfig+0x4b6>
 80068ee:	a201      	add	r2, pc, #4	; (adr r2, 80068f4 <UART_SetConfig+0x46c>)
 80068f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f4:	08006919 	.word	0x08006919
 80068f8:	08006921 	.word	0x08006921
 80068fc:	08006929 	.word	0x08006929
 8006900:	0800693f 	.word	0x0800693f
 8006904:	0800692f 	.word	0x0800692f
 8006908:	0800693f 	.word	0x0800693f
 800690c:	0800693f 	.word	0x0800693f
 8006910:	0800693f 	.word	0x0800693f
 8006914:	08006937 	.word	0x08006937
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006918:	f7fd fd96 	bl	8004448 <HAL_RCC_GetPCLK1Freq>
 800691c:	6178      	str	r0, [r7, #20]
        break;
 800691e:	e013      	b.n	8006948 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006920:	f7fd fda8 	bl	8004474 <HAL_RCC_GetPCLK2Freq>
 8006924:	6178      	str	r0, [r7, #20]
        break;
 8006926:	e00f      	b.n	8006948 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006928:	4b1b      	ldr	r3, [pc, #108]	; (8006998 <UART_SetConfig+0x510>)
 800692a:	617b      	str	r3, [r7, #20]
        break;
 800692c:	e00c      	b.n	8006948 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800692e:	f7fd fcf5 	bl	800431c <HAL_RCC_GetSysClockFreq>
 8006932:	6178      	str	r0, [r7, #20]
        break;
 8006934:	e008      	b.n	8006948 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006936:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800693a:	617b      	str	r3, [r7, #20]
        break;
 800693c:	e004      	b.n	8006948 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800693e:	2300      	movs	r3, #0
 8006940:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	76bb      	strb	r3, [r7, #26]
        break;
 8006946:	bf00      	nop
    }

    if (pclk != 0U)
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d018      	beq.n	8006980 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	685b      	ldr	r3, [r3, #4]
 8006952:	085a      	lsrs	r2, r3, #1
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	441a      	add	r2, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006960:	b29b      	uxth	r3, r3
 8006962:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	2b0f      	cmp	r3, #15
 8006968:	d908      	bls.n	800697c <UART_SetConfig+0x4f4>
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006970:	d204      	bcs.n	800697c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	693a      	ldr	r2, [r7, #16]
 8006978:	60da      	str	r2, [r3, #12]
 800697a:	e001      	b.n	8006980 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800698c:	7ebb      	ldrb	r3, [r7, #26]
}
 800698e:	4618      	mov	r0, r3
 8006990:	3720      	adds	r7, #32
 8006992:	46bd      	mov	sp, r7
 8006994:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006998:	00f42400 	.word	0x00f42400

0800699c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a8:	f003 0301 	and.w	r3, r3, #1
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00a      	beq.n	80069c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	430a      	orrs	r2, r1
 80069c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ca:	f003 0302 	and.w	r3, r3, #2
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d00a      	beq.n	80069e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	430a      	orrs	r2, r1
 80069e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ec:	f003 0304 	and.w	r3, r3, #4
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00a      	beq.n	8006a0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	430a      	orrs	r2, r1
 8006a08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0e:	f003 0308 	and.w	r3, r3, #8
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00a      	beq.n	8006a2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	430a      	orrs	r2, r1
 8006a2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a30:	f003 0310 	and.w	r3, r3, #16
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d00a      	beq.n	8006a4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	430a      	orrs	r2, r1
 8006a4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a52:	f003 0320 	and.w	r3, r3, #32
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00a      	beq.n	8006a70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	430a      	orrs	r2, r1
 8006a6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d01a      	beq.n	8006ab2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	430a      	orrs	r2, r1
 8006a90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a9a:	d10a      	bne.n	8006ab2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	430a      	orrs	r2, r1
 8006ab0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d00a      	beq.n	8006ad4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	430a      	orrs	r2, r1
 8006ad2:	605a      	str	r2, [r3, #4]
  }
}
 8006ad4:	bf00      	nop
 8006ad6:	370c      	adds	r7, #12
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b086      	sub	sp, #24
 8006ae4:	af02      	add	r7, sp, #8
 8006ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006aee:	f7fa ff27 	bl	8001940 <HAL_GetTick>
 8006af2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f003 0308 	and.w	r3, r3, #8
 8006afe:	2b08      	cmp	r3, #8
 8006b00:	d10e      	bne.n	8006b20 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b02:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b06:	9300      	str	r3, [sp, #0]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 f82a 	bl	8006b6a <UART_WaitOnFlagUntilTimeout>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d001      	beq.n	8006b20 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b1c:	2303      	movs	r3, #3
 8006b1e:	e020      	b.n	8006b62 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f003 0304 	and.w	r3, r3, #4
 8006b2a:	2b04      	cmp	r3, #4
 8006b2c:	d10e      	bne.n	8006b4c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b2e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b32:	9300      	str	r3, [sp, #0]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 f814 	bl	8006b6a <UART_WaitOnFlagUntilTimeout>
 8006b42:	4603      	mov	r3, r0
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d001      	beq.n	8006b4c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b48:	2303      	movs	r3, #3
 8006b4a:	e00a      	b.n	8006b62 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2220      	movs	r2, #32
 8006b50:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2220      	movs	r2, #32
 8006b56:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3710      	adds	r7, #16
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b084      	sub	sp, #16
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	60f8      	str	r0, [r7, #12]
 8006b72:	60b9      	str	r1, [r7, #8]
 8006b74:	603b      	str	r3, [r7, #0]
 8006b76:	4613      	mov	r3, r2
 8006b78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b7a:	e05d      	b.n	8006c38 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b7c:	69bb      	ldr	r3, [r7, #24]
 8006b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b82:	d059      	beq.n	8006c38 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b84:	f7fa fedc 	bl	8001940 <HAL_GetTick>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	1ad3      	subs	r3, r2, r3
 8006b8e:	69ba      	ldr	r2, [r7, #24]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d302      	bcc.n	8006b9a <UART_WaitOnFlagUntilTimeout+0x30>
 8006b94:	69bb      	ldr	r3, [r7, #24]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d11b      	bne.n	8006bd2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006ba8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	689a      	ldr	r2, [r3, #8]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f022 0201 	bic.w	r2, r2, #1
 8006bb8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2220      	movs	r2, #32
 8006bbe:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2220      	movs	r2, #32
 8006bc4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006bce:	2303      	movs	r3, #3
 8006bd0:	e042      	b.n	8006c58 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 0304 	and.w	r3, r3, #4
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d02b      	beq.n	8006c38 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	69db      	ldr	r3, [r3, #28]
 8006be6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bee:	d123      	bne.n	8006c38 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006bf8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006c08:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	689a      	ldr	r2, [r3, #8]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f022 0201 	bic.w	r2, r2, #1
 8006c18:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2220      	movs	r2, #32
 8006c1e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2220      	movs	r2, #32
 8006c24:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2220      	movs	r2, #32
 8006c2a:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8006c34:	2303      	movs	r3, #3
 8006c36:	e00f      	b.n	8006c58 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	69da      	ldr	r2, [r3, #28]
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	4013      	ands	r3, r2
 8006c42:	68ba      	ldr	r2, [r7, #8]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	bf0c      	ite	eq
 8006c48:	2301      	moveq	r3, #1
 8006c4a:	2300      	movne	r3, #0
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	461a      	mov	r2, r3
 8006c50:	79fb      	ldrb	r3, [r7, #7]
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d092      	beq.n	8006b7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3710      	adds	r7, #16
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <__libc_init_array>:
 8006c60:	b570      	push	{r4, r5, r6, lr}
 8006c62:	4e0d      	ldr	r6, [pc, #52]	; (8006c98 <__libc_init_array+0x38>)
 8006c64:	4c0d      	ldr	r4, [pc, #52]	; (8006c9c <__libc_init_array+0x3c>)
 8006c66:	1ba4      	subs	r4, r4, r6
 8006c68:	10a4      	asrs	r4, r4, #2
 8006c6a:	2500      	movs	r5, #0
 8006c6c:	42a5      	cmp	r5, r4
 8006c6e:	d109      	bne.n	8006c84 <__libc_init_array+0x24>
 8006c70:	4e0b      	ldr	r6, [pc, #44]	; (8006ca0 <__libc_init_array+0x40>)
 8006c72:	4c0c      	ldr	r4, [pc, #48]	; (8006ca4 <__libc_init_array+0x44>)
 8006c74:	f000 f820 	bl	8006cb8 <_init>
 8006c78:	1ba4      	subs	r4, r4, r6
 8006c7a:	10a4      	asrs	r4, r4, #2
 8006c7c:	2500      	movs	r5, #0
 8006c7e:	42a5      	cmp	r5, r4
 8006c80:	d105      	bne.n	8006c8e <__libc_init_array+0x2e>
 8006c82:	bd70      	pop	{r4, r5, r6, pc}
 8006c84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006c88:	4798      	blx	r3
 8006c8a:	3501      	adds	r5, #1
 8006c8c:	e7ee      	b.n	8006c6c <__libc_init_array+0xc>
 8006c8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006c92:	4798      	blx	r3
 8006c94:	3501      	adds	r5, #1
 8006c96:	e7f2      	b.n	8006c7e <__libc_init_array+0x1e>
 8006c98:	08006d20 	.word	0x08006d20
 8006c9c:	08006d20 	.word	0x08006d20
 8006ca0:	08006d20 	.word	0x08006d20
 8006ca4:	08006d24 	.word	0x08006d24

08006ca8 <memset>:
 8006ca8:	4402      	add	r2, r0
 8006caa:	4603      	mov	r3, r0
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d100      	bne.n	8006cb2 <memset+0xa>
 8006cb0:	4770      	bx	lr
 8006cb2:	f803 1b01 	strb.w	r1, [r3], #1
 8006cb6:	e7f9      	b.n	8006cac <memset+0x4>

08006cb8 <_init>:
 8006cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cba:	bf00      	nop
 8006cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cbe:	bc08      	pop	{r3}
 8006cc0:	469e      	mov	lr, r3
 8006cc2:	4770      	bx	lr

08006cc4 <_fini>:
 8006cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cc6:	bf00      	nop
 8006cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cca:	bc08      	pop	{r3}
 8006ccc:	469e      	mov	lr, r3
 8006cce:	4770      	bx	lr
