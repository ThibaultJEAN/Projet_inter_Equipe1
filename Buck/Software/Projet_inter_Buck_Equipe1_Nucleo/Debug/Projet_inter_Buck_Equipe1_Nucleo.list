
Projet_inter_Buck_Equipe1_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  08007260  08007260  00017260  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007648  08007648  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007648  08007648  00017648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007650  08007650  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007650  08007650  00017650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007654  08007654  00017654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007658  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  200001dc  08007834  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000410  08007834  00020410  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a4a0  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003142  00000000  00000000  0003a6ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c747  00000000  00000000  0003d7ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000f18  00000000  00000000  00049f38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001550  00000000  00000000  0004ae50  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0002a0bd  00000000  00000000  0004c3a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000e9e6  00000000  00000000  0007645d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    001084b3  00000000  00000000  00084e43  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0018d2f6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003a7c  00000000  00000000  0018d374  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007244 	.word	0x08007244

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08007244 	.word	0x08007244

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <Set_Duty_Cycle>:
#include "Buck.h"

extern TIM_HandleTypeDef htim1;

void Set_Duty_Cycle(){
 8000f48:	b5d0      	push	{r4, r6, r7, lr}

	if (Duty_Cycle>F_TIM1*DUTY_MAX){
 8000f4a:	4c13      	ldr	r4, [pc, #76]	; (8000f98 <Set_Duty_Cycle+0x50>)
 8000f4c:	6820      	ldr	r0, [r4, #0]
 8000f4e:	f7ff fae9 	bl	8000524 <__aeabi_i2d>
 8000f52:	a30d      	add	r3, pc, #52	; (adr r3, 8000f88 <Set_Duty_Cycle+0x40>)
 8000f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f58:	4606      	mov	r6, r0
 8000f5a:	460f      	mov	r7, r1
 8000f5c:	f7ff fddc 	bl	8000b18 <__aeabi_dcmpgt>
 8000f60:	b138      	cbz	r0, 8000f72 <Set_Duty_Cycle+0x2a>
		Duty_Cycle= F_TIM1*DUTY_MAX;
 8000f62:	f240 13df 	movw	r3, #479	; 0x1df
	} else if (Duty_Cycle<F_TIM1*DUTY_MIN)	{
		Duty_Cycle=F_TIM1*DUTY_MIN;
 8000f66:	6023      	str	r3, [r4, #0]
	}
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,Duty_Cycle);
 8000f68:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <Set_Duty_Cycle+0x54>)
 8000f6a:	6822      	ldr	r2, [r4, #0]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000f70:	bdd0      	pop	{r4, r6, r7, pc}
	} else if (Duty_Cycle<F_TIM1*DUTY_MIN)	{
 8000f72:	a307      	add	r3, pc, #28	; (adr r3, 8000f90 <Set_Duty_Cycle+0x48>)
 8000f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f78:	4630      	mov	r0, r6
 8000f7a:	4639      	mov	r1, r7
 8000f7c:	f7ff fdae 	bl	8000adc <__aeabi_dcmplt>
 8000f80:	2800      	cmp	r0, #0
 8000f82:	d0f1      	beq.n	8000f68 <Set_Duty_Cycle+0x20>
		Duty_Cycle=F_TIM1*DUTY_MIN;
 8000f84:	2335      	movs	r3, #53	; 0x35
 8000f86:	e7ee      	b.n	8000f66 <Set_Duty_Cycle+0x1e>
 8000f88:	33333333 	.word	0x33333333
 8000f8c:	407dfb33 	.word	0x407dfb33
 8000f90:	66666667 	.word	0x66666667
 8000f94:	404aa666 	.word	0x404aa666
 8000f98:	2000022c 	.word	0x2000022c
 8000f9c:	200002f0 	.word	0x200002f0

08000fa0 <SetVout>:

void SetVout(float target){
	if(target>VOUT_MAX)target=VOUT_MAX;
 8000fa0:	eddf 7a17 	vldr	s15, [pc, #92]	; 8001000 <SetVout+0x60>
 8000fa4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
void SetVout(float target){
 8000fac:	b508      	push	{r3, lr}
	if(target>VOUT_MAX)target=VOUT_MAX;
 8000fae:	dc19      	bgt.n	8000fe4 <SetVout+0x44>
	if(target<VOUT_MIN)target=VOUT_MIN;
 8000fb0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8000fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fb8:	d501      	bpl.n	8000fbe <SetVout+0x1e>
 8000fba:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8001004 <SetVout+0x64>
	Vout_set = (target)*(KVOUTMON*4096.0)/VCC;
 8000fbe:	ee10 0a10 	vmov	r0, s0
 8000fc2:	f7ff fac1 	bl	8000548 <__aeabi_f2d>
 8000fc6:	a30a      	add	r3, pc, #40	; (adr r3, 8000ff0 <SetVout+0x50>)
 8000fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fcc:	f7ff fb14 	bl	80005f8 <__aeabi_dmul>
 8000fd0:	a309      	add	r3, pc, #36	; (adr r3, 8000ff8 <SetVout+0x58>)
 8000fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd6:	f7ff fc39 	bl	800084c <__aeabi_ddiv>
 8000fda:	f7ff fdbd 	bl	8000b58 <__aeabi_d2iz>
 8000fde:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <SetVout+0x68>)
 8000fe0:	6018      	str	r0, [r3, #0]
}
 8000fe2:	bd08      	pop	{r3, pc}
	if(target>VOUT_MAX)target=VOUT_MAX;
 8000fe4:	eeb0 0a67 	vmov.f32	s0, s15
 8000fe8:	e7e9      	b.n	8000fbe <SetVout+0x1e>
 8000fea:	bf00      	nop
 8000fec:	f3af 8000 	nop.w
 8000ff0:	bec9cdc5 	.word	0xbec9cdc5
 8000ff4:	406b5183 	.word	0x406b5183
 8000ff8:	66666666 	.word	0x66666666
 8000ffc:	400a6666 	.word	0x400a6666
 8001000:	42400000 	.word	0x42400000
 8001004:	00000000 	.word	0x00000000
 8001008:	20000240 	.word	0x20000240
 800100c:	00000000 	.word	0x00000000

08001010 <SetI>:

void SetI(float target){
	if(target>IOUT_MAX)target=IOUT_MAX;
 8001010:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8001014:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
void SetI(float target){
 800101c:	b508      	push	{r3, lr}
	if(target>IOUT_MAX)target=IOUT_MAX;
 800101e:	dc19      	bgt.n	8001054 <SetI+0x44>
	if(target<IOUT_MIN)target=IOUT_MIN;
 8001020:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8001024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001028:	d501      	bpl.n	800102e <SetI+0x1e>
 800102a:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8001070 <SetI+0x60>
	Iout_set = (target)*(KIMON*4096.0)/VCC;
 800102e:	ee10 0a10 	vmov	r0, s0
 8001032:	f7ff fa89 	bl	8000548 <__aeabi_f2d>
 8001036:	a30a      	add	r3, pc, #40	; (adr r3, 8001060 <SetI+0x50>)
 8001038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800103c:	f7ff fadc 	bl	80005f8 <__aeabi_dmul>
 8001040:	a309      	add	r3, pc, #36	; (adr r3, 8001068 <SetI+0x58>)
 8001042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001046:	f7ff fc01 	bl	800084c <__aeabi_ddiv>
 800104a:	f7ff fd85 	bl	8000b58 <__aeabi_d2iz>
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <SetI+0x64>)
 8001050:	6018      	str	r0, [r3, #0]
}
 8001052:	bd08      	pop	{r3, pc}
	if(target>IOUT_MAX)target=IOUT_MAX;
 8001054:	eeb0 0a67 	vmov.f32	s0, s15
 8001058:	e7e9      	b.n	800102e <SetI+0x1e>
 800105a:	bf00      	nop
 800105c:	f3af 8000 	nop.w
 8001060:	0624dd2f 	.word	0x0624dd2f
 8001064:	40939581 	.word	0x40939581
 8001068:	66666666 	.word	0x66666666
 800106c:	400a6666 	.word	0x400a6666
 8001070:	00000000 	.word	0x00000000
 8001074:	2000020c 	.word	0x2000020c

08001078 <Set_Duty_OL>:

void Set_Duty_OL(float target){
 8001078:	b508      	push	{r3, lr}
	if(target>DUTY_MAX)target=DUTY_MAX;
 800107a:	ee10 0a10 	vmov	r0, s0
void Set_Duty_OL(float target){
 800107e:	ed2d 8b02 	vpush	{d8}
 8001082:	eeb0 8a40 	vmov.f32	s16, s0
	if(target>DUTY_MAX)target=DUTY_MAX;
 8001086:	f7ff fa5f 	bl	8000548 <__aeabi_f2d>
 800108a:	a31e      	add	r3, pc, #120	; (adr r3, 8001104 <Set_Duty_OL+0x8c>)
 800108c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001090:	f7ff fd42 	bl	8000b18 <__aeabi_dcmpgt>
 8001094:	eddf 7a16 	vldr	s15, [pc, #88]	; 80010f0 <Set_Duty_OL+0x78>
 8001098:	2800      	cmp	r0, #0
 800109a:	bf18      	it	ne
 800109c:	eeb0 8a67 	vmovne.f32	s16, s15
	if(target<DUTY_MIN)target=DUTY_MIN;
 80010a0:	ee18 0a10 	vmov	r0, s16
 80010a4:	f7ff fa50 	bl	8000548 <__aeabi_f2d>
 80010a8:	a30f      	add	r3, pc, #60	; (adr r3, 80010e8 <Set_Duty_OL+0x70>)
 80010aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ae:	f7ff fd15 	bl	8000adc <__aeabi_dcmplt>
 80010b2:	eddf 7a10 	vldr	s15, [pc, #64]	; 80010f4 <Set_Duty_OL+0x7c>
	Duty_Cycle=(target)*F_TIM1;
 80010b6:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80010f8 <Set_Duty_OL+0x80>
 80010ba:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80010fc <Set_Duty_OL+0x84>
 80010be:	4b10      	ldr	r3, [pc, #64]	; (8001100 <Set_Duty_OL+0x88>)
	if(target<DUTY_MIN)target=DUTY_MIN;
 80010c0:	2800      	cmp	r0, #0
 80010c2:	bf18      	it	ne
 80010c4:	eeb0 8a67 	vmovne.f32	s16, s15
	Duty_Cycle=(target)*F_TIM1;
 80010c8:	ee28 8a00 	vmul.f32	s16, s16, s0
 80010cc:	eec8 7a07 	vdiv.f32	s15, s16, s14
	Set_Duty_Cycle();
}
 80010d0:	ecbd 8b02 	vpop	{d8}
	Duty_Cycle=(target)*F_TIM1;
 80010d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010d8:	edc3 7a00 	vstr	s15, [r3]
}
 80010dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Set_Duty_Cycle();
 80010e0:	f7ff bf32 	b.w	8000f48 <Set_Duty_Cycle>
 80010e4:	f3af 8000 	nop.w
 80010e8:	9999999a 	.word	0x9999999a
 80010ec:	3fb99999 	.word	0x3fb99999
 80010f0:	3f666666 	.word	0x3f666666
 80010f4:	3dcccccd 	.word	0x3dcccccd
 80010f8:	4c989680 	.word	0x4c989680
 80010fc:	48127c00 	.word	0x48127c00
 8001100:	2000022c 	.word	0x2000022c
 8001104:	cccccccd 	.word	0xcccccccd
 8001108:	3feccccc 	.word	0x3feccccc
 800110c:	00000000 	.word	0x00000000

08001110 <RegulateCV>:

void RegulateCV(void){
 8001110:	b508      	push	{r3, lr}
	Delta_Err = Vout_set - Vout_mon;
 8001112:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <RegulateCV+0x40>)
 8001114:	6818      	ldr	r0, [r3, #0]
 8001116:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <RegulateCV+0x44>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	1ac0      	subs	r0, r0, r3
 800111c:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <RegulateCV+0x48>)
 800111e:	6018      	str	r0, [r3, #0]
		Err_Tot = SAT_ERR_TOT;
	}else if (Err_Tot < -(SAT_ERR_TOT)){
		Err_Tot = -SAT_ERR_TOT;
	}
*/
	Delta_Duty = (Delta_Err *KP_CV) ;//+ (Err_Tot *KI_CV );
 8001120:	f7ff fa00 	bl	8000524 <__aeabi_i2d>
 8001124:	a308      	add	r3, pc, #32	; (adr r3, 8001148 <RegulateCV+0x38>)
 8001126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112a:	f7ff fa65 	bl	80005f8 <__aeabi_dmul>
 800112e:	f7ff fd13 	bl	8000b58 <__aeabi_d2iz>
 8001132:	4b0a      	ldr	r3, [pc, #40]	; (800115c <RegulateCV+0x4c>)
	Duty_Cycle += Delta_Duty;
 8001134:	4a0a      	ldr	r2, [pc, #40]	; (8001160 <RegulateCV+0x50>)
	Delta_Duty = (Delta_Err *KP_CV) ;//+ (Err_Tot *KI_CV );
 8001136:	6018      	str	r0, [r3, #0]
	Duty_Cycle += Delta_Duty;
 8001138:	6813      	ldr	r3, [r2, #0]
 800113a:	4403      	add	r3, r0
 800113c:	6013      	str	r3, [r2, #0]

	Set_Duty_Cycle();
}
 800113e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Set_Duty_Cycle();
 8001142:	f7ff bf01 	b.w	8000f48 <Set_Duty_Cycle>
 8001146:	bf00      	nop
 8001148:	47ae147b 	.word	0x47ae147b
 800114c:	3f847ae1 	.word	0x3f847ae1
 8001150:	20000240 	.word	0x20000240
 8001154:	20000228 	.word	0x20000228
 8001158:	20000230 	.word	0x20000230
 800115c:	20000218 	.word	0x20000218
 8001160:	2000022c 	.word	0x2000022c
 8001164:	00000000 	.word	0x00000000

08001168 <RegulateCC>:

void RegulateCC(void){
 8001168:	b508      	push	{r3, lr}
	Delta_Err = Iout_set - I_mon;
 800116a:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <RegulateCC+0x40>)
 800116c:	6818      	ldr	r0, [r3, #0]
 800116e:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <RegulateCC+0x44>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	1ac0      	subs	r0, r0, r3
 8001174:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <RegulateCC+0x48>)
 8001176:	6018      	str	r0, [r3, #0]
	if (Err_Tot < -(SAT_ERR_TOT))
	{
		Err_Tot = -SAT_ERR_TOT;
	}*/

	Delta_Duty = (Delta_Err *KP_CC);//+ (Err_Tot * KI_CC);
 8001178:	f7ff f9d4 	bl	8000524 <__aeabi_i2d>
 800117c:	a308      	add	r3, pc, #32	; (adr r3, 80011a0 <RegulateCC+0x38>)
 800117e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001182:	f7ff fa39 	bl	80005f8 <__aeabi_dmul>
 8001186:	f7ff fce7 	bl	8000b58 <__aeabi_d2iz>
 800118a:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <RegulateCC+0x4c>)
	Duty_Cycle += Delta_Duty;
 800118c:	4a0a      	ldr	r2, [pc, #40]	; (80011b8 <RegulateCC+0x50>)
	Delta_Duty = (Delta_Err *KP_CC);//+ (Err_Tot * KI_CC);
 800118e:	6018      	str	r0, [r3, #0]
	Duty_Cycle += Delta_Duty;
 8001190:	6813      	ldr	r3, [r2, #0]
 8001192:	4403      	add	r3, r0
 8001194:	6013      	str	r3, [r2, #0]

	Set_Duty_Cycle();
}
 8001196:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Set_Duty_Cycle();
 800119a:	f7ff bed5 	b.w	8000f48 <Set_Duty_Cycle>
 800119e:	bf00      	nop
 80011a0:	9999999a 	.word	0x9999999a
 80011a4:	3fb99999 	.word	0x3fb99999
 80011a8:	2000020c 	.word	0x2000020c
 80011ac:	2000021c 	.word	0x2000021c
 80011b0:	20000230 	.word	0x20000230
 80011b4:	20000218 	.word	0x20000218
 80011b8:	2000022c 	.word	0x2000022c
 80011bc:	00000000 	.word	0x00000000

080011c0 <getVout>:
	Pin_p = Pin;
	Iout_set = Iout_set + I_inc;*/
}


float getVout(void){
 80011c0:	b508      	push	{r3, lr}
	return (float)Vout_mon*(VCC/KVOUTMON/4096.0);
 80011c2:	4b0d      	ldr	r3, [pc, #52]	; (80011f8 <getVout+0x38>)
 80011c4:	6818      	ldr	r0, [r3, #0]
 80011c6:	ee07 0a90 	vmov	s15, r0
 80011ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ce:	ee17 0a90 	vmov	r0, s15
 80011d2:	f7ff f9b9 	bl	8000548 <__aeabi_f2d>
 80011d6:	a306      	add	r3, pc, #24	; (adr r3, 80011f0 <getVout+0x30>)
 80011d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011dc:	f7ff fa0c 	bl	80005f8 <__aeabi_dmul>
 80011e0:	f7ff fce2 	bl	8000ba8 <__aeabi_d2f>
}
 80011e4:	ee00 0a10 	vmov	s0, r0
 80011e8:	bd08      	pop	{r3, pc}
 80011ea:	bf00      	nop
 80011ec:	f3af 8000 	nop.w
 80011f0:	f2c97f2c 	.word	0xf2c97f2c
 80011f4:	3f8eec97 	.word	0x3f8eec97
 80011f8:	20000228 	.word	0x20000228
 80011fc:	00000000 	.word	0x00000000

08001200 <getIout>:
float getIout(void){
 8001200:	b508      	push	{r3, lr}
	return (float)I_mon*(VCC/KIMON/4096.0);
 8001202:	4b0d      	ldr	r3, [pc, #52]	; (8001238 <getIout+0x38>)
 8001204:	6818      	ldr	r0, [r3, #0]
 8001206:	ee07 0a90 	vmov	s15, r0
 800120a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800120e:	ee17 0a90 	vmov	r0, s15
 8001212:	f7ff f999 	bl	8000548 <__aeabi_f2d>
 8001216:	a306      	add	r3, pc, #24	; (adr r3, 8001230 <getIout+0x30>)
 8001218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121c:	f7ff f9ec 	bl	80005f8 <__aeabi_dmul>
 8001220:	f7ff fcc2 	bl	8000ba8 <__aeabi_d2f>
}
 8001224:	ee00 0a10 	vmov	s0, r0
 8001228:	bd08      	pop	{r3, pc}
 800122a:	bf00      	nop
 800122c:	f3af 8000 	nop.w
 8001230:	91919191 	.word	0x91919191
 8001234:	3f659191 	.word	0x3f659191
 8001238:	2000021c 	.word	0x2000021c
 800123c:	00000000 	.word	0x00000000

08001240 <getVin>:
float getVin(void){
 8001240:	b508      	push	{r3, lr}
	return (float)Vin_mon*(VCC/KVINMON/4096.0);
 8001242:	4b0d      	ldr	r3, [pc, #52]	; (8001278 <getVin+0x38>)
 8001244:	6818      	ldr	r0, [r3, #0]
 8001246:	ee07 0a90 	vmov	s15, r0
 800124a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800124e:	ee17 0a90 	vmov	r0, s15
 8001252:	f7ff f979 	bl	8000548 <__aeabi_f2d>
 8001256:	a306      	add	r3, pc, #24	; (adr r3, 8001270 <getVin+0x30>)
 8001258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125c:	f7ff f9cc 	bl	80005f8 <__aeabi_dmul>
 8001260:	f7ff fca2 	bl	8000ba8 <__aeabi_d2f>
}
 8001264:	ee00 0a10 	vmov	s0, r0
 8001268:	bd08      	pop	{r3, pc}
 800126a:	bf00      	nop
 800126c:	f3af 8000 	nop.w
 8001270:	27d0fdfb 	.word	0x27d0fdfb
 8001274:	3f8e25b6 	.word	0x3f8e25b6
 8001278:	20000210 	.word	0x20000210

0800127c <printBuckStatus>:

void printBuckStatus(void){
 800127c:	b570      	push	{r4, r5, r6, lr}
 800127e:	b088      	sub	sp, #32
	printf("Vin %.1fV, Vout %.1fV, Iout %.2fA, Duty : %d%%, Regmode ",getVin(), getVout(), getIout(), Duty_Cycle*100/533);
 8001280:	f7ff ffde 	bl	8001240 <getVin>
 8001284:	ed8d 0a07 	vstr	s0, [sp, #28]
 8001288:	f7ff ff9a 	bl	80011c0 <getVout>
 800128c:	ee10 6a10 	vmov	r6, s0
 8001290:	f7ff ffb6 	bl	8001200 <getIout>
 8001294:	9807      	ldr	r0, [sp, #28]
 8001296:	ed8d 0a06 	vstr	s0, [sp, #24]
 800129a:	f7ff f955 	bl	8000548 <__aeabi_f2d>
 800129e:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <printBuckStatus+0x8c>)
 80012a0:	ed9d 0a06 	vldr	s0, [sp, #24]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	4604      	mov	r4, r0
 80012a8:	2364      	movs	r3, #100	; 0x64
 80012aa:	ee10 0a10 	vmov	r0, s0
 80012ae:	460d      	mov	r5, r1
 80012b0:	4353      	muls	r3, r2
 80012b2:	f240 2215 	movw	r2, #533	; 0x215
 80012b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80012ba:	9304      	str	r3, [sp, #16]
 80012bc:	f7ff f944 	bl	8000548 <__aeabi_f2d>
 80012c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80012c4:	4630      	mov	r0, r6
 80012c6:	f7ff f93f 	bl	8000548 <__aeabi_f2d>
 80012ca:	462b      	mov	r3, r5
 80012cc:	e9cd 0100 	strd	r0, r1, [sp]
 80012d0:	4622      	mov	r2, r4
 80012d2:	480e      	ldr	r0, [pc, #56]	; (800130c <printBuckStatus+0x90>)
 80012d4:	f004 f888 	bl	80053e8 <iprintf>
	switch(Reg_Mode){
 80012d8:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <printBuckStatus+0x94>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2b03      	cmp	r3, #3
 80012de:	d806      	bhi.n	80012ee <printBuckStatus+0x72>
 80012e0:	e8df f003 	tbb	[pc, r3]
 80012e4:	0b0f0d02 	.word	0x0b0f0d02
	case REG_MODE_CV :
		printf("CV");
 80012e8:	480a      	ldr	r0, [pc, #40]	; (8001314 <printBuckStatus+0x98>)
		break;
	case REG_MODE_CC :
		printf("CC");
		break;
	case REG_MODE_MPPT:
		printf("MPPT");
 80012ea:	f004 f87d 	bl	80053e8 <iprintf>
		break;
	default :
		break;
	}
	printf("\r\n");
 80012ee:	480a      	ldr	r0, [pc, #40]	; (8001318 <printBuckStatus+0x9c>)
//	printf("\tI_mon : %d\t Vin_mon : %d Err : %d\r\n",I_mon,Vin_mon,Delta_Err);
}
 80012f0:	b008      	add	sp, #32
 80012f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	printf("\r\n");
 80012f6:	f004 b8eb 	b.w	80054d0 <puts>
		printf("OL");
 80012fa:	4808      	ldr	r0, [pc, #32]	; (800131c <printBuckStatus+0xa0>)
 80012fc:	e7f5      	b.n	80012ea <printBuckStatus+0x6e>
		printf("CC");
 80012fe:	4808      	ldr	r0, [pc, #32]	; (8001320 <printBuckStatus+0xa4>)
 8001300:	e7f3      	b.n	80012ea <printBuckStatus+0x6e>
		printf("MPPT");
 8001302:	4808      	ldr	r0, [pc, #32]	; (8001324 <printBuckStatus+0xa8>)
 8001304:	e7f1      	b.n	80012ea <printBuckStatus+0x6e>
 8001306:	bf00      	nop
 8001308:	2000022c 	.word	0x2000022c
 800130c:	08007260 	.word	0x08007260
 8001310:	20000224 	.word	0x20000224
 8001314:	08007299 	.word	0x08007299
 8001318:	08007329 	.word	0x08007329
 800131c:	0800729c 	.word	0x0800729c
 8001320:	0800729f 	.word	0x0800729f
 8001324:	080072a2 	.word	0x080072a2

08001328 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800132a:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800132c:	2224      	movs	r2, #36	; 0x24
 800132e:	2100      	movs	r1, #0
 8001330:	a806      	add	r0, sp, #24
 8001332:	f003 fbf5 	bl	8004b20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001336:	2214      	movs	r2, #20
 8001338:	2100      	movs	r1, #0
 800133a:	4668      	mov	r0, sp
 800133c:	f003 fbf0 	bl	8004b20 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001340:	2100      	movs	r1, #0
 8001342:	2288      	movs	r2, #136	; 0x88
 8001344:	a816      	add	r0, sp, #88	; 0x58
 8001346:	f003 fbeb 	bl	8004b20 <memset>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800134a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800134e:	2310      	movs	r3, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001350:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001352:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001356:	2701      	movs	r7, #1
 8001358:	230a      	movs	r3, #10
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800135a:	2607      	movs	r6, #7
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800135c:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLN = 10;
 800135e:	e9cd 7311 	strd	r7, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001362:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001364:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001368:	e9cd 6413 	strd	r6, r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800136c:	9415      	str	r4, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800136e:	f001 fd11 	bl	8002d94 <HAL_RCC_OscConfig>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001372:	2303      	movs	r3, #3
 8001374:	210f      	movs	r1, #15
 8001376:	e9cd 1300 	strd	r1, r3, [sp]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800137a:	2500      	movs	r5, #0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800137c:	2104      	movs	r1, #4
 800137e:	4668      	mov	r0, sp
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001380:	e9cd 5502 	strd	r5, r5, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001384:	9504      	str	r5, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001386:	f001 ff8b 	bl	80032a0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 800138a:	f244 0302 	movw	r3, #16386	; 0x4002
 800138e:	9316      	str	r3, [sp, #88]	; 0x58
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001390:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001394:	9334      	str	r3, [sp, #208]	; 0xd0
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001396:	2308      	movs	r3, #8
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001398:	e9cd 3619 	strd	r3, r6, [sp, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800139c:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800139e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013a2:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80013a4:	9525      	str	r5, [sp, #148]	; 0x94
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80013a6:	e9cd 4717 	strd	r4, r7, [sp, #92]	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80013aa:	e9cd 441b 	strd	r4, r4, [sp, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013ae:	f002 f937 	bl	8003620 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80013b2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80013b6:	f001 fc27 	bl	8002c08 <HAL_PWREx_ControlVoltageScaling>
  {
    Error_Handler();
  }
}
 80013ba:	b039      	add	sp, #228	; 0xe4
 80013bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080013c0 <main>:
{
 80013c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013c4:	ed2d 8b02 	vpush	{d8}
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c8:	4dcd      	ldr	r5, [pc, #820]	; (8001700 <main+0x340>)
  huart2.Instance = USART2;
 80013ca:	4fce      	ldr	r7, [pc, #824]	; (8001704 <main+0x344>)
{
 80013cc:	b0a1      	sub	sp, #132	; 0x84
  HAL_Init();
 80013ce:	f000 fca5 	bl	8001d1c <HAL_Init>
  SystemClock_Config();
 80013d2:	f7ff ffa9 	bl	8001328 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d6:	2214      	movs	r2, #20
 80013d8:	2100      	movs	r1, #0
 80013da:	a815      	add	r0, sp, #84	; 0x54
 80013dc:	f003 fba0 	bl	8004b20 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e0:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80013e2:	f043 0304 	orr.w	r3, r3, #4
 80013e6:	64eb      	str	r3, [r5, #76]	; 0x4c
 80013e8:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80013ea:	f003 0304 	and.w	r3, r3, #4
 80013ee:	9303      	str	r3, [sp, #12]
 80013f0:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013f2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80013f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013f8:	64eb      	str	r3, [r5, #76]	; 0x4c
 80013fa:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80013fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001400:	9304      	str	r3, [sp, #16]
 8001402:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001404:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001406:	f043 0301 	orr.w	r3, r3, #1
 800140a:	64eb      	str	r3, [r5, #76]	; 0x4c
 800140c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	9305      	str	r3, [sp, #20]
 8001414:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001416:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001418:	f043 0302 	orr.w	r3, r3, #2
 800141c:	64eb      	str	r3, [r5, #76]	; 0x4c
 800141e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	9306      	str	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001426:	2200      	movs	r2, #0
 8001428:	2120      	movs	r1, #32
 800142a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800142e:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001430:	f001 fbdc 	bl	8002bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8001434:	2200      	movs	r2, #0
 8001436:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800143a:	48b3      	ldr	r0, [pc, #716]	; (8001708 <main+0x348>)
 800143c:	f001 fbd6 	bl	8002bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001440:	4bb2      	ldr	r3, [pc, #712]	; (800170c <main+0x34c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001442:	48b3      	ldr	r0, [pc, #716]	; (8001710 <main+0x350>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001446:	f44f 5b00 	mov.w	fp, #8192	; 0x2000
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800144a:	a915      	add	r1, sp, #84	; 0x54

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144c:	f04f 0901 	mov.w	r9, #1
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001450:	e9cd b315 	strd	fp, r3, [sp, #84]	; 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001454:	f04f 0820 	mov.w	r8, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	9417      	str	r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800145a:	f001 fae5 	bl	8002a28 <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800145e:	a915      	add	r1, sp, #84	; 0x54
 8001460:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 8001464:	f04f 0a10 	mov.w	sl, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001468:	e9cd 8915 	strd	r8, r9, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146c:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001470:	f001 fada 	bl	8002a28 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8001474:	a915      	add	r1, sp, #84	; 0x54
 8001476:	48a6      	ldr	r0, [pc, #664]	; (8001710 <main+0x350>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001478:	f8cd 905c 	str.w	r9, [sp, #92]	; 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800147c:	e9cd a415 	strd	sl, r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8001480:	f001 fad2 	bl	8002a28 <HAL_GPIO_Init>
  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8001484:	a915      	add	r1, sp, #84	; 0x54
 8001486:	48a0      	ldr	r0, [pc, #640]	; (8001708 <main+0x348>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001488:	e9cd b915 	strd	fp, r9, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148c:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8001490:	f001 faca 	bl	8002a28 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001494:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001496:	ea43 0309 	orr.w	r3, r3, r9
 800149a:	64ab      	str	r3, [r5, #72]	; 0x48
 800149c:	6cab      	ldr	r3, [r5, #72]	; 0x48
  hadc1.Instance = ADC1;
 800149e:	4d9d      	ldr	r5, [pc, #628]	; (8001714 <main+0x354>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014a0:	ea03 0309 	and.w	r3, r3, r9
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80014a4:	4621      	mov	r1, r4
 80014a6:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014a8:	9302      	str	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80014aa:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014ac:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80014ae:	f001 f96f 	bl	8002790 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014b2:	200b      	movs	r0, #11
 80014b4:	f001 f9a0 	bl	80027f8 <HAL_NVIC_EnableIRQ>
  huart2.Init.BaudRate = 115200;
 80014b8:	4a97      	ldr	r2, [pc, #604]	; (8001718 <main+0x358>)
  huart2.Init.Parity = UART_PARITY_NONE;
 80014ba:	613c      	str	r4, [r7, #16]
  huart2.Init.BaudRate = 115200;
 80014bc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014c0:	260c      	movs	r6, #12
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014c2:	4638      	mov	r0, r7
  huart2.Init.BaudRate = 115200;
 80014c4:	e9c7 2300 	strd	r2, r3, [r7]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014c8:	e9c7 6405 	strd	r6, r4, [r7, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014cc:	e9c7 4402 	strd	r4, r4, [r7, #8]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014d0:	e9c7 4407 	strd	r4, r4, [r7, #28]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014d4:	627c      	str	r4, [r7, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014d6:	f003 facb 	bl	8004a70 <HAL_UART_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 80014da:	2218      	movs	r2, #24
 80014dc:	4621      	mov	r1, r4
 80014de:	a815      	add	r0, sp, #84	; 0x54
  ADC_MultiModeTypeDef multimode = {0};
 80014e0:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 80014e4:	9410      	str	r4, [sp, #64]	; 0x40
  ADC_ChannelConfTypeDef sConfig = {0};
 80014e6:	f003 fb1b 	bl	8004b20 <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 80014ea:	498c      	ldr	r1, [pc, #560]	; (800171c <main+0x35c>)
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80014ec:	f8c5 9010 	str.w	r9, [r5, #16]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 80014f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80014f4:	e9c5 1300 	strd	r1, r3, [r5]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80014f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80014fc:	2308      	movs	r3, #8
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80014fe:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8001502:	e9c5 020a 	strd	r0, r2, [r5, #40]	; 0x28
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001506:	616b      	str	r3, [r5, #20]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001508:	f885 9030 	strb.w	r9, [r5, #48]	; 0x30
  hadc1.Init.NbrOfConversion = 3;
 800150c:	2303      	movs	r3, #3
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800150e:	f44f 5980 	mov.w	r9, #4096	; 0x1000
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001512:	4628      	mov	r0, r5
  hadc1.Init.NbrOfConversion = 3;
 8001514:	61eb      	str	r3, [r5, #28]
 8001516:	9301      	str	r3, [sp, #4]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001518:	f8c5 9034 	str.w	r9, [r5, #52]	; 0x34
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800151c:	e9c5 4402 	strd	r4, r4, [r5, #8]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001520:	762c      	strb	r4, [r5, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001522:	766c      	strb	r4, [r5, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001524:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.OversamplingMode = DISABLE;
 8001528:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800152c:	f000 fc4c 	bl	8001dc8 <HAL_ADC_Init>
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001530:	a90e      	add	r1, sp, #56	; 0x38
 8001532:	4628      	mov	r0, r5
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001534:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001536:	f001 f8a1 	bl	800267c <HAL_ADCEx_MultiModeConfigChannel>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800153a:	f8df c20c 	ldr.w	ip, [pc, #524]	; 8001748 <main+0x388>
 800153e:	2206      	movs	r2, #6
 8001540:	e9cd c215 	strd	ip, r2, [sp, #84]	; 0x54
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001544:	f04f 0e05 	mov.w	lr, #5
 8001548:	227f      	movs	r2, #127	; 0x7f
 800154a:	e9cd e217 	strd	lr, r2, [sp, #92]	; 0x5c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800154e:	a915      	add	r1, sp, #84	; 0x54
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001550:	2204      	movs	r2, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001552:	4628      	mov	r0, r5
  sConfig.Offset = 0;
 8001554:	e9cd 2419 	strd	r2, r4, [sp, #100]	; 0x64
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001558:	f000 fd5a 	bl	8002010 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_2;
 800155c:	4a70      	ldr	r2, [pc, #448]	; (8001720 <main+0x360>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800155e:	a915      	add	r1, sp, #84	; 0x54
 8001560:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001562:	e9cd 2615 	strd	r2, r6, [sp, #84]	; 0x54
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001566:	f000 fd53 	bl	8002010 <HAL_ADC_ConfigChannel>
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800156a:	4b6e      	ldr	r3, [pc, #440]	; (8001724 <main+0x364>)
  htim1.Init.Period = 80000000UL/F_PWM;
 800156c:	4e6e      	ldr	r6, [pc, #440]	; (8001728 <main+0x368>)
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800156e:	2212      	movs	r2, #18
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001570:	a915      	add	r1, sp, #84	; 0x54
 8001572:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001574:	e9cd 3215 	strd	r3, r2, [sp, #84]	; 0x54
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001578:	f000 fd4a 	bl	8002010 <HAL_ADC_ConfigChannel>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800157c:	4652      	mov	r2, sl
 800157e:	4621      	mov	r1, r4
 8001580:	a80a      	add	r0, sp, #40	; 0x28
 8001582:	f003 facd 	bl	8004b20 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001586:	221c      	movs	r2, #28
 8001588:	4621      	mov	r1, r4
 800158a:	a80e      	add	r0, sp, #56	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800158c:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8001590:	9409      	str	r4, [sp, #36]	; 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001592:	f003 fac5 	bl	8004b20 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001596:	4621      	mov	r1, r4
 8001598:	222c      	movs	r2, #44	; 0x2c
 800159a:	a815      	add	r0, sp, #84	; 0x54
 800159c:	f003 fac0 	bl	8004b20 <memset>
  htim1.Init.Period = 80000000UL/F_PWM;
 80015a0:	f240 2215 	movw	r2, #533	; 0x215
 80015a4:	60f2      	str	r2, [r6, #12]
  htim1.Instance = TIM1;
 80015a6:	4a61      	ldr	r2, [pc, #388]	; (800172c <main+0x36c>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a8:	60b4      	str	r4, [r6, #8]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015aa:	4630      	mov	r0, r6
  htim1.Init.Prescaler = 0;
 80015ac:	e9c6 2400 	strd	r2, r4, [r6]
  htim1.Init.RepetitionCounter = 0;
 80015b0:	e9c6 4404 	strd	r4, r4, [r6, #16]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b4:	61b4      	str	r4, [r6, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015b6:	f002 fc9b 	bl	8003ef0 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015ba:	a90a      	add	r1, sp, #40	; 0x28
 80015bc:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015be:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015c2:	f002 fdc7 	bl	8004154 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015c6:	4630      	mov	r0, r6
 80015c8:	f002 fcc2 	bl	8003f50 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015cc:	a907      	add	r1, sp, #28
 80015ce:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015d0:	e9cd 4407 	strd	r4, r4, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d4:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015d6:	f002 fee9 	bl	80043ac <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015da:	2260      	movs	r2, #96	; 0x60
  sConfigOC.Pulse = 0;
 80015dc:	e9cd 240e 	strd	r2, r4, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015e0:	a90e      	add	r1, sp, #56	; 0x38
 80015e2:	4622      	mov	r2, r4
 80015e4:	4630      	mov	r0, r6
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015e6:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015ea:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015ee:	9414      	str	r4, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015f0:	f002 fd24 	bl	800403c <HAL_TIM_PWM_ConfigChannel>
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015f8:	a915      	add	r1, sp, #84	; 0x54
 80015fa:	4630      	mov	r0, r6
  sBreakDeadTimeConfig.Break2Filter = 0;
 80015fc:	e9cd 241d 	strd	r2, r4, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001600:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.DeadTime = 0;
 8001604:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001608:	e9cd 4b19 	strd	r4, fp, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800160c:	e9cd 441b 	strd	r4, r4, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001610:	941f      	str	r4, [sp, #124]	; 0x7c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001612:	f002 ff15 	bl	8004440 <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 8001616:	4630      	mov	r0, r6
 8001618:	f000 fa62 	bl	8001ae0 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800161c:	4652      	mov	r2, sl
 800161e:	4621      	mov	r1, r4
  htim2.Init.Period = 80000000UL/(F_ACQ);
 8001620:	f8df a128 	ldr.w	sl, [pc, #296]	; 800174c <main+0x38c>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001624:	a815      	add	r0, sp, #84	; 0x54
 8001626:	f003 fa7b 	bl	8004b20 <memset>
  htim2.Init.Period = 80000000UL/(F_ACQ);
 800162a:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800162e:	f8ca 200c 	str.w	r2, [sl, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001632:	4650      	mov	r0, sl
  htim2.Instance = TIM2;
 8001634:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 0;
 8001638:	e9ca 2400 	strd	r2, r4, [sl]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800163c:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 8001640:	9410      	str	r4, [sp, #64]	; 0x40
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001642:	f8ca 4008 	str.w	r4, [sl, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001646:	f8ca 4010 	str.w	r4, [sl, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800164a:	f8ca 4018 	str.w	r4, [sl, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800164e:	f002 fc4f 	bl	8003ef0 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001652:	a915      	add	r1, sp, #84	; 0x54
 8001654:	4650      	mov	r0, sl
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001656:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800165a:	f002 fd7b 	bl	8004154 <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800165e:	2280      	movs	r2, #128	; 0x80
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001660:	a90e      	add	r1, sp, #56	; 0x38
 8001662:	4650      	mov	r0, sl
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001664:	9210      	str	r2, [sp, #64]	; 0x40
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001666:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
  Reg_Mode=REG_MODE_CV;
 800166a:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8001750 <main+0x390>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800166e:	f002 fe9d 	bl	80043ac <HAL_TIMEx_MasterConfigSynchronization>
  Set_Duty_OL(0);
 8001672:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8001730 <main+0x370>
 8001676:	f7ff fcff 	bl	8001078 <Set_Duty_OL>
  SetVout(24.0);
 800167a:	eeb3 0a08 	vmov.f32	s0, #56	; 0x41c00000  24.0
  Reg_Mode=REG_MODE_CV;
 800167e:	f8c9 4000 	str.w	r4, [r9]
  SetVout(24.0);
 8001682:	f7ff fc8d 	bl	8000fa0 <SetVout>
  SetI(1.0);
 8001686:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800168a:	f7ff fcc1 	bl	8001010 <SetI>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t *)&ADC_buffer, 3);
 800168e:	9b01      	ldr	r3, [sp, #4]
 8001690:	4928      	ldr	r1, [pc, #160]	; (8001734 <main+0x374>)
 8001692:	461a      	mov	r2, r3
 8001694:	4628      	mov	r0, r5
 8001696:	f000 ff6f 	bl	8002578 <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim2);
 800169a:	4650      	mov	r0, sl
 800169c:	f002 fad2 	bl	8003c44 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_IT(&hadc1);
 80016a0:	4628      	mov	r0, r5
 80016a2:	f000 fec3 	bl	800242c <HAL_ADC_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80016a6:	4621      	mov	r1, r4
 80016a8:	4630      	mov	r0, r6
 80016aa:	f002 fe7d 	bl	80043a8 <HAL_TIM_PWM_Start>
	printf("Buck started\r\n");
 80016ae:	4822      	ldr	r0, [pc, #136]	; (8001738 <main+0x378>)
  unsigned char c=' ';
 80016b0:	f88d 8054 	strb.w	r8, [sp, #84]	; 0x54
	printf("Buck started\r\n");
 80016b4:	f003 ff0c 	bl	80054d0 <puts>
		  printf("Switched to CC mode\r\n");
 80016b8:	4d20      	ldr	r5, [pc, #128]	; (800173c <main+0x37c>)
		  printf("Switched to OL mode\r\n");
 80016ba:	4e21      	ldr	r6, [pc, #132]	; (8001740 <main+0x380>)
  float v=24.0, increment=1.0;
 80016bc:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80016c0:	eeb3 8a08 	vmov.f32	s16, #56	; 0x41c00000  24.0
	  HAL_UART_Receive(&huart2, &c, 1, 10);
 80016c4:	230a      	movs	r3, #10
 80016c6:	2201      	movs	r2, #1
 80016c8:	a915      	add	r1, sp, #84	; 0x54
 80016ca:	4638      	mov	r0, r7
 80016cc:	f003 f92e 	bl	800492c <HAL_UART_Receive>
	  switch(c){
 80016d0:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80016d4:	2b63      	cmp	r3, #99	; 0x63
 80016d6:	d060      	beq.n	800179a <main+0x3da>
 80016d8:	d843      	bhi.n	8001762 <main+0x3a2>
 80016da:	2b2b      	cmp	r3, #43	; 0x2b
 80016dc:	d07b      	beq.n	80017d6 <main+0x416>
 80016de:	2b2d      	cmp	r3, #45	; 0x2d
 80016e0:	d07d      	beq.n	80017de <main+0x41e>
	  c=' ';
 80016e2:	2320      	movs	r3, #32
		if(!HAL_GPIO_ReadPin(B1_GPIO_Port,B1_Pin)){
 80016e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016e8:	4809      	ldr	r0, [pc, #36]	; (8001710 <main+0x350>)
	  c=' ';
 80016ea:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
		if(!HAL_GPIO_ReadPin(B1_GPIO_Port,B1_Pin)){
 80016ee:	f001 fa77 	bl	8002be0 <HAL_GPIO_ReadPin>
 80016f2:	2800      	cmp	r0, #0
 80016f4:	f040 8096 	bne.w	8001824 <main+0x464>
			printf("B1 pressed !\r\n");
 80016f8:	4812      	ldr	r0, [pc, #72]	; (8001744 <main+0x384>)
 80016fa:	f003 fee9 	bl	80054d0 <puts>
 80016fe:	e029      	b.n	8001754 <main+0x394>
 8001700:	40021000 	.word	0x40021000
 8001704:	20000388 	.word	0x20000388
 8001708:	48000400 	.word	0x48000400
 800170c:	10210000 	.word	0x10210000
 8001710:	48000800 	.word	0x48000800
 8001714:	20000244 	.word	0x20000244
 8001718:	40004400 	.word	0x40004400
 800171c:	50040000 	.word	0x50040000
 8001720:	08600004 	.word	0x08600004
 8001724:	0c900008 	.word	0x0c900008
 8001728:	200002f0 	.word	0x200002f0
 800172c:	40012c00 	.word	0x40012c00
 8001730:	00000000 	.word	0x00000000
 8001734:	20000234 	.word	0x20000234
 8001738:	080072a7 	.word	0x080072a7
 800173c:	080072ca 	.word	0x080072ca
 8001740:	080072df 	.word	0x080072df
 8001744:	0800731d 	.word	0x0800731d
 8001748:	04300002 	.word	0x04300002
 800174c:	2000033c 	.word	0x2000033c
 8001750:	20000224 	.word	0x20000224
		HAL_Delay(500);
 8001754:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001758:	f000 fb08 	bl	8001d6c <HAL_Delay>
		printBuckStatus();
 800175c:	f7ff fd8e 	bl	800127c <printBuckStatus>
	  HAL_UART_Receive(&huart2, &c, 1, 10);
 8001760:	e7b0      	b.n	80016c4 <main+0x304>
	  switch(c){
 8001762:	2b6f      	cmp	r3, #111	; 0x6f
 8001764:	d028      	beq.n	80017b8 <main+0x3f8>
 8001766:	2b76      	cmp	r3, #118	; 0x76
 8001768:	d008      	beq.n	800177c <main+0x3bc>
 800176a:	2b6d      	cmp	r3, #109	; 0x6d
 800176c:	d1b9      	bne.n	80016e2 <main+0x322>
		  printf("Switched to MPPT mode\r\n");
 800176e:	4831      	ldr	r0, [pc, #196]	; (8001834 <main+0x474>)
 8001770:	f003 feae 	bl	80054d0 <puts>
		  Reg_Mode=REG_MODE_MPPT;
 8001774:	2302      	movs	r3, #2
 8001776:	f8c9 3000 	str.w	r3, [r9]
		  break;
 800177a:	e7b2      	b.n	80016e2 <main+0x322>
		  printf("Switched to CV mode\r\n");
 800177c:	482e      	ldr	r0, [pc, #184]	; (8001838 <main+0x478>)
 800177e:	f003 fea7 	bl	80054d0 <puts>
		  Reg_Mode=REG_MODE_CV;
 8001782:	2300      	movs	r3, #0
			SetVout(24.0);
 8001784:	eeb3 0a08 	vmov.f32	s0, #56	; 0x41c00000  24.0
		  Reg_Mode=REG_MODE_CV;
 8001788:	f8c9 3000 	str.w	r3, [r9]
			increment=1.0;
 800178c:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
			SetVout(24.0);
 8001790:	f7ff fc06 	bl	8000fa0 <SetVout>
			v=24.0;
 8001794:	eeb3 8a08 	vmov.f32	s16, #56	; 0x41c00000  24.0
		  break;
 8001798:	e7a3      	b.n	80016e2 <main+0x322>
		  printf("Switched to CC mode\r\n");
 800179a:	4628      	mov	r0, r5
 800179c:	f003 fe98 	bl	80054d0 <puts>
		  Reg_Mode=REG_MODE_CC;
 80017a0:	2301      	movs	r3, #1
			SetI(0.5);
 80017a2:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
		  Reg_Mode=REG_MODE_CC;
 80017a6:	f8c9 3000 	str.w	r3, [r9]
			increment=0.25;
 80017aa:	eef5 8a00 	vmov.f32	s17, #80	; 0x3e800000  0.250
			SetI(0.5);
 80017ae:	f7ff fc2f 	bl	8001010 <SetI>
			v=0.5;
 80017b2:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
		  break;
 80017b6:	e794      	b.n	80016e2 <main+0x322>
		  printf("Switched to OL mode\r\n");
 80017b8:	4630      	mov	r0, r6
 80017ba:	f003 fe89 	bl	80054d0 <puts>
		  Reg_Mode=REG_MODE_OL;
 80017be:	2303      	movs	r3, #3
			Set_Duty_OL(0.1);
 80017c0:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 800183c <main+0x47c>
		  Reg_Mode=REG_MODE_OL;
 80017c4:	f8c9 3000 	str.w	r3, [r9]
			increment=0.05;
 80017c8:	eddf 8a1d 	vldr	s17, [pc, #116]	; 8001840 <main+0x480>
			v=0.1;
 80017cc:	ed9f 8a1b 	vldr	s16, [pc, #108]	; 800183c <main+0x47c>
			Set_Duty_OL(0.1);
 80017d0:	f7ff fc52 	bl	8001078 <Set_Duty_OL>
		  break;
 80017d4:	e785      	b.n	80016e2 <main+0x322>
		  v+=2*increment;
 80017d6:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80017da:	eea8 8aa7 	vfma.f32	s16, s17, s15
		  v-=increment;
 80017de:	ee38 8a68 	vsub.f32	s16, s16, s17
		  printf("SetPoint : %.2f\r\n",v);
 80017e2:	ee18 0a10 	vmov	r0, s16
 80017e6:	f7fe feaf 	bl	8000548 <__aeabi_f2d>
 80017ea:	4602      	mov	r2, r0
 80017ec:	460b      	mov	r3, r1
 80017ee:	4815      	ldr	r0, [pc, #84]	; (8001844 <main+0x484>)
 80017f0:	f003 fdfa 	bl	80053e8 <iprintf>
			switch(Reg_Mode){
 80017f4:	f8d9 3000 	ldr.w	r3, [r9]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d00e      	beq.n	800181a <main+0x45a>
 80017fc:	2b03      	cmp	r3, #3
 80017fe:	d007      	beq.n	8001810 <main+0x450>
 8001800:	2b00      	cmp	r3, #0
 8001802:	f47f af6e 	bne.w	80016e2 <main+0x322>
				SetVout(v);
 8001806:	eeb0 0a48 	vmov.f32	s0, s16
 800180a:	f7ff fbc9 	bl	8000fa0 <SetVout>
				break;
 800180e:	e768      	b.n	80016e2 <main+0x322>
				Set_Duty_OL(v);
 8001810:	eeb0 0a48 	vmov.f32	s0, s16
 8001814:	f7ff fc30 	bl	8001078 <Set_Duty_OL>
				break;
 8001818:	e763      	b.n	80016e2 <main+0x322>
				SetI(v);
 800181a:	eeb0 0a48 	vmov.f32	s0, s16
 800181e:	f7ff fbf7 	bl	8001010 <SetI>
				break;
 8001822:	e75e      	b.n	80016e2 <main+0x322>
		}else if(!HAL_GPIO_ReadPin(B2_GPIO_Port,B2_Pin)){
 8001824:	2110      	movs	r1, #16
 8001826:	4808      	ldr	r0, [pc, #32]	; (8001848 <main+0x488>)
 8001828:	f001 f9da 	bl	8002be0 <HAL_GPIO_ReadPin>
 800182c:	2800      	cmp	r0, #0
 800182e:	d191      	bne.n	8001754 <main+0x394>
 8001830:	e762      	b.n	80016f8 <main+0x338>
 8001832:	bf00      	nop
 8001834:	080072f4 	.word	0x080072f4
 8001838:	080072b5 	.word	0x080072b5
 800183c:	3dcccccd 	.word	0x3dcccccd
 8001840:	3d4ccccd 	.word	0x3d4ccccd
 8001844:	0800730b 	.word	0x0800730b
 8001848:	48000800 	.word	0x48000800

0800184c <__io_putchar>:

}

/* USER CODE BEGIN 4 */
int __io_putchar(int ch){
 800184c:	b513      	push	{r0, r1, r4, lr}
	uint8_t c[1];
	c[0] = ch & 0x00FF;
 800184e:	a902      	add	r1, sp, #8
int __io_putchar(int ch){
 8001850:	4604      	mov	r4, r0
	c[0] = ch & 0x00FF;
 8001852:	f801 0d04 	strb.w	r0, [r1, #-4]!
	HAL_UART_Transmit(&huart2, &*c, 1, 10);
 8001856:	230a      	movs	r3, #10
 8001858:	2201      	movs	r2, #1
 800185a:	4803      	ldr	r0, [pc, #12]	; (8001868 <__io_putchar+0x1c>)
 800185c:	f003 f80e 	bl	800487c <HAL_UART_Transmit>
	//HAL_Delay(1);
	return ch;
}
 8001860:	4620      	mov	r0, r4
 8001862:	b002      	add	sp, #8
 8001864:	bd10      	pop	{r4, pc}
 8001866:	bf00      	nop
 8001868:	20000388 	.word	0x20000388

0800186c <_write>:

int _write(int file,char *ptr, int len){
 800186c:	b570      	push	{r4, r5, r6, lr}
 800186e:	460e      	mov	r6, r1
 8001870:	4615      	mov	r5, r2
	int DataIdx;
	for(DataIdx= 0; DataIdx< len; DataIdx++){
 8001872:	460c      	mov	r4, r1
 8001874:	1ba3      	subs	r3, r4, r6
 8001876:	429d      	cmp	r5, r3
 8001878:	dc01      	bgt.n	800187e <_write+0x12>
		__io_putchar(*ptr++);
	}
	return len;
}
 800187a:	4628      	mov	r0, r5
 800187c:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 800187e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001882:	f7ff ffe3 	bl	800184c <__io_putchar>
 8001886:	e7f5      	b.n	8001874 <_write+0x8>

08001888 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
}
 8001888:	4770      	bx	lr
 800188a:	0000      	movs	r0, r0
 800188c:	0000      	movs	r0, r0
	...

08001890 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,1);
	Vout_mon = .99*Vout_mon + .01*ADC_buffer[0];
 8001892:	4d41      	ldr	r5, [pc, #260]	; (8001998 <HAL_ADC_ConvCpltCallback+0x108>)
 8001894:	4c41      	ldr	r4, [pc, #260]	; (800199c <HAL_ADC_ConvCpltCallback+0x10c>)
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,1);
 8001896:	2201      	movs	r2, #1
 8001898:	2120      	movs	r1, #32
 800189a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800189e:	f001 f9a5 	bl	8002bec <HAL_GPIO_WritePin>
	Vout_mon = .99*Vout_mon + .01*ADC_buffer[0];
 80018a2:	6828      	ldr	r0, [r5, #0]
 80018a4:	f7fe fe3e 	bl	8000524 <__aeabi_i2d>
 80018a8:	a337      	add	r3, pc, #220	; (adr r3, 8001988 <HAL_ADC_ConvCpltCallback+0xf8>)
 80018aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ae:	f7fe fea3 	bl	80005f8 <__aeabi_dmul>
 80018b2:	4606      	mov	r6, r0
 80018b4:	6820      	ldr	r0, [r4, #0]
 80018b6:	460f      	mov	r7, r1
 80018b8:	f7fe fe24 	bl	8000504 <__aeabi_ui2d>
 80018bc:	a334      	add	r3, pc, #208	; (adr r3, 8001990 <HAL_ADC_ConvCpltCallback+0x100>)
 80018be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c2:	f7fe fe99 	bl	80005f8 <__aeabi_dmul>
 80018c6:	4602      	mov	r2, r0
 80018c8:	460b      	mov	r3, r1
 80018ca:	4630      	mov	r0, r6
 80018cc:	4639      	mov	r1, r7
 80018ce:	f7fe fcdd 	bl	800028c <__adddf3>
 80018d2:	f7ff f941 	bl	8000b58 <__aeabi_d2iz>
 80018d6:	6028      	str	r0, [r5, #0]
	Vin_mon = .99*Vin_mon + .01*ADC_buffer[1];
 80018d8:	4d31      	ldr	r5, [pc, #196]	; (80019a0 <HAL_ADC_ConvCpltCallback+0x110>)
 80018da:	6828      	ldr	r0, [r5, #0]
 80018dc:	f7fe fe22 	bl	8000524 <__aeabi_i2d>
 80018e0:	a329      	add	r3, pc, #164	; (adr r3, 8001988 <HAL_ADC_ConvCpltCallback+0xf8>)
 80018e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e6:	f7fe fe87 	bl	80005f8 <__aeabi_dmul>
 80018ea:	4606      	mov	r6, r0
 80018ec:	6860      	ldr	r0, [r4, #4]
 80018ee:	460f      	mov	r7, r1
 80018f0:	f7fe fe08 	bl	8000504 <__aeabi_ui2d>
 80018f4:	a326      	add	r3, pc, #152	; (adr r3, 8001990 <HAL_ADC_ConvCpltCallback+0x100>)
 80018f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fa:	f7fe fe7d 	bl	80005f8 <__aeabi_dmul>
 80018fe:	4602      	mov	r2, r0
 8001900:	460b      	mov	r3, r1
 8001902:	4630      	mov	r0, r6
 8001904:	4639      	mov	r1, r7
 8001906:	f7fe fcc1 	bl	800028c <__adddf3>
 800190a:	f7ff f925 	bl	8000b58 <__aeabi_d2iz>
 800190e:	6028      	str	r0, [r5, #0]
	I_mon = .99*I_mon + .01*ADC_buffer[2];
 8001910:	4d24      	ldr	r5, [pc, #144]	; (80019a4 <HAL_ADC_ConvCpltCallback+0x114>)
 8001912:	6828      	ldr	r0, [r5, #0]
 8001914:	f7fe fe06 	bl	8000524 <__aeabi_i2d>
 8001918:	a31b      	add	r3, pc, #108	; (adr r3, 8001988 <HAL_ADC_ConvCpltCallback+0xf8>)
 800191a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191e:	f7fe fe6b 	bl	80005f8 <__aeabi_dmul>
 8001922:	4606      	mov	r6, r0
 8001924:	68a0      	ldr	r0, [r4, #8]
 8001926:	460f      	mov	r7, r1
 8001928:	f7fe fdec 	bl	8000504 <__aeabi_ui2d>
 800192c:	a318      	add	r3, pc, #96	; (adr r3, 8001990 <HAL_ADC_ConvCpltCallback+0x100>)
 800192e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001932:	f7fe fe61 	bl	80005f8 <__aeabi_dmul>
 8001936:	460b      	mov	r3, r1
 8001938:	4602      	mov	r2, r0
 800193a:	4639      	mov	r1, r7
 800193c:	4630      	mov	r0, r6
 800193e:	f7fe fca5 	bl	800028c <__adddf3>
 8001942:	f7ff f909 	bl	8000b58 <__aeabi_d2iz>

	switch(Reg_Mode){
 8001946:	4b18      	ldr	r3, [pc, #96]	; (80019a8 <HAL_ADC_ConvCpltCallback+0x118>)
	I_mon = .99*I_mon + .01*ADC_buffer[2];
 8001948:	6028      	str	r0, [r5, #0]
	switch(Reg_Mode){
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b03      	cmp	r3, #3
 800194e:	d805      	bhi.n	800195c <HAL_ADC_ConvCpltCallback+0xcc>
 8001950:	e8df f003 	tbb	[pc, r3]
 8001954:	0c120f02 	.word	0x0c120f02
	case REG_MODE_CV :
		RegulateCV();
 8001958:	f7ff fbda 	bl	8001110 <RegulateCV>
		Set_Duty_OL(0.1);
		break;
	default :
		break;
	}
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,0);
 800195c:	2200      	movs	r2, #0
 800195e:	2120      	movs	r1, #32
 8001960:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000

}
 8001964:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,0);
 8001968:	f001 b940 	b.w	8002bec <HAL_GPIO_WritePin>
		Set_Duty_Cycle();
 800196c:	f7ff faec 	bl	8000f48 <Set_Duty_Cycle>
		break;
 8001970:	e7f4      	b.n	800195c <HAL_ADC_ConvCpltCallback+0xcc>
		RegulateCC();
 8001972:	f7ff fbf9 	bl	8001168 <RegulateCC>
		break;
 8001976:	e7f1      	b.n	800195c <HAL_ADC_ConvCpltCallback+0xcc>
		Set_Duty_OL(0.1);
 8001978:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80019ac <HAL_ADC_ConvCpltCallback+0x11c>
 800197c:	f7ff fb7c 	bl	8001078 <Set_Duty_OL>
		break;
 8001980:	e7ec      	b.n	800195c <HAL_ADC_ConvCpltCallback+0xcc>
 8001982:	bf00      	nop
 8001984:	f3af 8000 	nop.w
 8001988:	7ae147ae 	.word	0x7ae147ae
 800198c:	3fefae14 	.word	0x3fefae14
 8001990:	47ae147b 	.word	0x47ae147b
 8001994:	3f847ae1 	.word	0x3f847ae1
 8001998:	20000228 	.word	0x20000228
 800199c:	20000234 	.word	0x20000234
 80019a0:	20000210 	.word	0x20000210
 80019a4:	2000021c 	.word	0x2000021c
 80019a8:	20000224 	.word	0x20000224
 80019ac:	3dcccccd 	.word	0x3dcccccd

080019b0 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80019b0:	4770      	bx	lr
	...

080019b4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b4:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <HAL_MspInit+0x2c>)
 80019b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80019b8:	f042 0201 	orr.w	r2, r2, #1
 80019bc:	661a      	str	r2, [r3, #96]	; 0x60
 80019be:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 80019c0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c2:	f002 0201 	and.w	r2, r2, #1
 80019c6:	9200      	str	r2, [sp, #0]
 80019c8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019cc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80019d0:	659a      	str	r2, [r3, #88]	; 0x58
 80019d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d8:	9301      	str	r3, [sp, #4]
 80019da:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019dc:	b002      	add	sp, #8
 80019de:	4770      	bx	lr
 80019e0:	40021000 	.word	0x40021000

080019e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019e4:	b530      	push	{r4, r5, lr}
 80019e6:	4605      	mov	r5, r0
 80019e8:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ea:	2214      	movs	r2, #20
 80019ec:	2100      	movs	r1, #0
 80019ee:	a803      	add	r0, sp, #12
 80019f0:	f003 f896 	bl	8004b20 <memset>
  if(hadc->Instance==ADC1)
 80019f4:	682a      	ldr	r2, [r5, #0]
 80019f6:	4b1e      	ldr	r3, [pc, #120]	; (8001a70 <HAL_ADC_MspInit+0x8c>)
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d137      	bne.n	8001a6c <HAL_ADC_MspInit+0x88>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80019fc:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8001a00:	f5a3 33f8 	sub.w	r3, r3, #126976	; 0x1f000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001a04:	4c1b      	ldr	r4, [pc, #108]	; (8001a74 <HAL_ADC_MspInit+0x90>)
    __HAL_RCC_ADC_CLK_ENABLE();
 8001a06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a08:	481b      	ldr	r0, [pc, #108]	; (8001a78 <HAL_ADC_MspInit+0x94>)
    __HAL_RCC_ADC_CLK_ENABLE();
 8001a0a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a0e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a10:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a12:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001a16:	9201      	str	r2, [sp, #4]
 8001a18:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a1c:	f042 0204 	orr.w	r2, r2, #4
 8001a20:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a24:	f003 0304 	and.w	r3, r3, #4
 8001a28:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a2a:	2207      	movs	r2, #7
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a2c:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a2e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a30:	230b      	movs	r3, #11
 8001a32:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a36:	f000 fff7 	bl	8002a28 <HAL_GPIO_Init>
    hdma_adc1.Init.Request = DMA_REQUEST_0;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a3a:	2080      	movs	r0, #128	; 0x80
 8001a3c:	f44f 7200 	mov.w	r2, #512	; 0x200
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001a40:	490e      	ldr	r1, [pc, #56]	; (8001a7c <HAL_ADC_MspInit+0x98>)
 8001a42:	2300      	movs	r3, #0
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a44:	e9c4 0204 	strd	r0, r2, [r4, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001a48:	f44f 6c00 	mov.w	ip, #2048	; 0x800
 8001a4c:	2220      	movs	r2, #32
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a4e:	4620      	mov	r0, r4
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8001a50:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a54:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001a58:	e9c4 c206 	strd	ip, r2, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a5c:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a5e:	f000 feef 	bl	8002840 <HAL_DMA_Init>
 8001a62:	b108      	cbz	r0, 8001a68 <HAL_ADC_MspInit+0x84>
    {
      Error_Handler();
 8001a64:	f7ff ffa4 	bl	80019b0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a68:	64ec      	str	r4, [r5, #76]	; 0x4c
 8001a6a:	62a5      	str	r5, [r4, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a6c:	b009      	add	sp, #36	; 0x24
 8001a6e:	bd30      	pop	{r4, r5, pc}
 8001a70:	50040000 	.word	0x50040000
 8001a74:	200002a8 	.word	0x200002a8
 8001a78:	48000800 	.word	0x48000800
 8001a7c:	40020008 	.word	0x40020008

08001a80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a80:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM1)
 8001a82:	6803      	ldr	r3, [r0, #0]
 8001a84:	4a14      	ldr	r2, [pc, #80]	; (8001ad8 <HAL_TIM_Base_MspInit+0x58>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d10c      	bne.n	8001aa4 <HAL_TIM_Base_MspInit+0x24>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a8a:	4b14      	ldr	r3, [pc, #80]	; (8001adc <HAL_TIM_Base_MspInit+0x5c>)
 8001a8c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a92:	661a      	str	r2, [r3, #96]	; 0x60
 8001a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a9e:	b003      	add	sp, #12
 8001aa0:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM2)
 8001aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aa8:	d1f9      	bne.n	8001a9e <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001aaa:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8001aae:	2102      	movs	r1, #2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ab0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ab2:	f042 0201 	orr.w	r2, r2, #1
 8001ab6:	659a      	str	r2, [r3, #88]	; 0x58
 8001ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ac4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8001ac6:	f000 fe63 	bl	8002790 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001aca:	201c      	movs	r0, #28
}
 8001acc:	b003      	add	sp, #12
 8001ace:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ad2:	f000 be91 	b.w	80027f8 <HAL_NVIC_EnableIRQ>
 8001ad6:	bf00      	nop
 8001ad8:	40012c00 	.word	0x40012c00
 8001adc:	40021000 	.word	0x40021000

08001ae0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ae0:	b510      	push	{r4, lr}
 8001ae2:	4604      	mov	r4, r0
 8001ae4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae6:	2214      	movs	r2, #20
 8001ae8:	2100      	movs	r1, #0
 8001aea:	a801      	add	r0, sp, #4
 8001aec:	f003 f818 	bl	8004b20 <memset>
  if(htim->Instance==TIM1)
 8001af0:	6822      	ldr	r2, [r4, #0]
 8001af2:	4b0e      	ldr	r3, [pc, #56]	; (8001b2c <HAL_TIM_MspPostInit+0x4c>)
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d116      	bne.n	8001b26 <HAL_TIM_MspPostInit+0x46>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af8:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afc:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b00:	f042 0201 	orr.w	r2, r2, #1
 8001b04:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	9300      	str	r3, [sp, #0]
 8001b0e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b14:	2302      	movs	r3, #2
 8001b16:	e9cd 2301 	strd	r2, r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b22:	f000 ff81 	bl	8002a28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001b26:	b006      	add	sp, #24
 8001b28:	bd10      	pop	{r4, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40012c00 	.word	0x40012c00

08001b30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b30:	b510      	push	{r4, lr}
 8001b32:	4604      	mov	r4, r0
 8001b34:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b36:	2214      	movs	r2, #20
 8001b38:	2100      	movs	r1, #0
 8001b3a:	a803      	add	r0, sp, #12
 8001b3c:	f002 fff0 	bl	8004b20 <memset>
  if(huart->Instance==USART2)
 8001b40:	6822      	ldr	r2, [r4, #0]
 8001b42:	4b13      	ldr	r3, [pc, #76]	; (8001b90 <HAL_UART_MspInit+0x60>)
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d120      	bne.n	8001b8a <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b48:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b4c:	2103      	movs	r1, #3
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b4e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b50:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001b54:	659a      	str	r2, [r3, #88]	; 0x58
 8001b56:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b58:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001b5c:	9201      	str	r2, [sp, #4]
 8001b5e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b62:	f042 0201 	orr.w	r2, r2, #1
 8001b66:	64da      	str	r2, [r3, #76]	; 0x4c
 8001b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	9302      	str	r3, [sp, #8]
 8001b70:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b72:	220c      	movs	r2, #12
 8001b74:	2302      	movs	r3, #2
 8001b76:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b7a:	2307      	movs	r3, #7
 8001b7c:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b84:	a903      	add	r1, sp, #12
 8001b86:	f000 ff4f 	bl	8002a28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b8a:	b008      	add	sp, #32
 8001b8c:	bd10      	pop	{r4, pc}
 8001b8e:	bf00      	nop
 8001b90:	40004400 	.word	0x40004400

08001b94 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b94:	4770      	bx	lr

08001b96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b96:	e7fe      	b.n	8001b96 <HardFault_Handler>

08001b98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b98:	e7fe      	b.n	8001b98 <MemManage_Handler>

08001b9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b9a:	e7fe      	b.n	8001b9a <BusFault_Handler>

08001b9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b9c:	e7fe      	b.n	8001b9c <UsageFault_Handler>

08001b9e <SVC_Handler>:
 8001b9e:	4770      	bx	lr

08001ba0 <DebugMon_Handler>:
 8001ba0:	4770      	bx	lr

08001ba2 <PendSV_Handler>:
 8001ba2:	4770      	bx	lr

08001ba4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ba4:	f000 b8d0 	b.w	8001d48 <HAL_IncTick>

08001ba8 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ba8:	4801      	ldr	r0, [pc, #4]	; (8001bb0 <DMA1_Channel1_IRQHandler+0x8>)
 8001baa:	f000 bef3 	b.w	8002994 <HAL_DMA_IRQHandler>
 8001bae:	bf00      	nop
 8001bb0:	200002a8 	.word	0x200002a8

08001bb4 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001bb4:	4801      	ldr	r0, [pc, #4]	; (8001bbc <TIM2_IRQHandler+0x8>)
 8001bb6:	f002 b884 	b.w	8003cc2 <HAL_TIM_IRQHandler>
 8001bba:	bf00      	nop
 8001bbc:	2000033c 	.word	0x2000033c

08001bc0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bc0:	b570      	push	{r4, r5, r6, lr}
 8001bc2:	460e      	mov	r6, r1
 8001bc4:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bc6:	460c      	mov	r4, r1
 8001bc8:	1ba3      	subs	r3, r4, r6
 8001bca:	429d      	cmp	r5, r3
 8001bcc:	dc01      	bgt.n	8001bd2 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001bce:	4628      	mov	r0, r5
 8001bd0:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001bd2:	f3af 8000 	nop.w
 8001bd6:	f804 0b01 	strb.w	r0, [r4], #1
 8001bda:	e7f5      	b.n	8001bc8 <_read+0x8>

08001bdc <_close>:
}

int _close(int file)
{
	return -1;
}
 8001bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001be0:	4770      	bx	lr

08001be2 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001be2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001be6:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001be8:	2000      	movs	r0, #0
 8001bea:	4770      	bx	lr

08001bec <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001bec:	2001      	movs	r0, #1
 8001bee:	4770      	bx	lr

08001bf0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001bf0:	2000      	movs	r0, #0
 8001bf2:	4770      	bx	lr

08001bf4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <_sbrk+0x30>)
 8001bf6:	6819      	ldr	r1, [r3, #0]
{
 8001bf8:	b510      	push	{r4, lr}
 8001bfa:	4602      	mov	r2, r0
  if (NULL == __sbrk_heap_end)
 8001bfc:	b909      	cbnz	r1, 8001c02 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001bfe:	490a      	ldr	r1, [pc, #40]	; (8001c28 <_sbrk+0x34>)
 8001c00:	6019      	str	r1, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c02:	6818      	ldr	r0, [r3, #0]
 8001c04:	4909      	ldr	r1, [pc, #36]	; (8001c2c <_sbrk+0x38>)
 8001c06:	4c0a      	ldr	r4, [pc, #40]	; (8001c30 <_sbrk+0x3c>)
 8001c08:	4402      	add	r2, r0
 8001c0a:	1b09      	subs	r1, r1, r4
 8001c0c:	428a      	cmp	r2, r1
 8001c0e:	d906      	bls.n	8001c1e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001c10:	f002 ff5c 	bl	8004acc <__errno>
 8001c14:	230c      	movs	r3, #12
 8001c16:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001c18:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001c1c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001c1e:	601a      	str	r2, [r3, #0]
  return (void *)prev_heap_end;
 8001c20:	e7fc      	b.n	8001c1c <_sbrk+0x28>
 8001c22:	bf00      	nop
 8001c24:	200001f8 	.word	0x200001f8
 8001c28:	20000410 	.word	0x20000410
 8001c2c:	20018000 	.word	0x20018000
 8001c30:	00000400 	.word	0x00000400

08001c34 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c34:	490f      	ldr	r1, [pc, #60]	; (8001c74 <SystemInit+0x40>)
 8001c36:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001c3a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001c42:	4b0d      	ldr	r3, [pc, #52]	; (8001c78 <SystemInit+0x44>)
 8001c44:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001c46:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8001c48:	f042 0201 	orr.w	r2, r2, #1
 8001c4c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8001c4e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8001c56:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8001c5a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001c5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c60:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c68:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001c6a:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001c70:	608b      	str	r3, [r1, #8]
#endif
}
 8001c72:	4770      	bx	lr
 8001c74:	e000ed00 	.word	0xe000ed00
 8001c78:	40021000 	.word	0x40021000

08001c7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cb4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c80:	f7ff ffd8 	bl	8001c34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001c84:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001c86:	e003      	b.n	8001c90 <LoopCopyDataInit>

08001c88 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001c88:	4b0b      	ldr	r3, [pc, #44]	; (8001cb8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001c8a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001c8c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001c8e:	3104      	adds	r1, #4

08001c90 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001c90:	480a      	ldr	r0, [pc, #40]	; (8001cbc <LoopForever+0xa>)
	ldr	r3, =_edata
 8001c92:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001c94:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001c96:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001c98:	d3f6      	bcc.n	8001c88 <CopyDataInit>
	ldr	r2, =_sbss
 8001c9a:	4a0a      	ldr	r2, [pc, #40]	; (8001cc4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001c9c:	e002      	b.n	8001ca4 <LoopFillZerobss>

08001c9e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001c9e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001ca0:	f842 3b04 	str.w	r3, [r2], #4

08001ca4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001ca4:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <LoopForever+0x16>)
	cmp	r2, r3
 8001ca6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001ca8:	d3f9      	bcc.n	8001c9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001caa:	f002 ff15 	bl	8004ad8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cae:	f7ff fb87 	bl	80013c0 <main>

08001cb2 <LoopForever>:

LoopForever:
    b LoopForever
 8001cb2:	e7fe      	b.n	8001cb2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001cb4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001cb8:	08007658 	.word	0x08007658
	ldr	r0, =_sdata
 8001cbc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001cc0:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8001cc4:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8001cc8:	20000410 	.word	0x20000410

08001ccc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ccc:	e7fe      	b.n	8001ccc <ADC1_2_IRQHandler>
	...

08001cd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cd0:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001cd2:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <HAL_InitTick+0x40>)
{
 8001cd4:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 8001cd6:	7818      	ldrb	r0, [r3, #0]
 8001cd8:	b908      	cbnz	r0, 8001cde <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8001cda:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8001cdc:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001cde:	4a0d      	ldr	r2, [pc, #52]	; (8001d14 <HAL_InitTick+0x44>)
 8001ce0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ce4:	fbb3 f3f0 	udiv	r3, r3, r0
 8001ce8:	6810      	ldr	r0, [r2, #0]
 8001cea:	fbb0 f0f3 	udiv	r0, r0, r3
 8001cee:	f000 fd91 	bl	8002814 <HAL_SYSTICK_Config>
 8001cf2:	4604      	mov	r4, r0
 8001cf4:	2800      	cmp	r0, #0
 8001cf6:	d1f0      	bne.n	8001cda <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cf8:	2d0f      	cmp	r5, #15
 8001cfa:	d8ee      	bhi.n	8001cda <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	4629      	mov	r1, r5
 8001d00:	f04f 30ff 	mov.w	r0, #4294967295
 8001d04:	f000 fd44 	bl	8002790 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d08:	4b03      	ldr	r3, [pc, #12]	; (8001d18 <HAL_InitTick+0x48>)
 8001d0a:	4620      	mov	r0, r4
 8001d0c:	601d      	str	r5, [r3, #0]
 8001d0e:	e7e5      	b.n	8001cdc <HAL_InitTick+0xc>
 8001d10:	20000004 	.word	0x20000004
 8001d14:	20000000 	.word	0x20000000
 8001d18:	20000008 	.word	0x20000008

08001d1c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d1c:	4a09      	ldr	r2, [pc, #36]	; (8001d44 <HAL_Init+0x28>)
 8001d1e:	6813      	ldr	r3, [r2, #0]
 8001d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8001d24:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d26:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d28:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d2a:	f000 fd1f 	bl	800276c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d2e:	2000      	movs	r0, #0
 8001d30:	f7ff ffce 	bl	8001cd0 <HAL_InitTick>
 8001d34:	4604      	mov	r4, r0
 8001d36:	b918      	cbnz	r0, 8001d40 <HAL_Init+0x24>
    HAL_MspInit();
 8001d38:	f7ff fe3c 	bl	80019b4 <HAL_MspInit>
}
 8001d3c:	4620      	mov	r0, r4
 8001d3e:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001d40:	2401      	movs	r4, #1
 8001d42:	e7fb      	b.n	8001d3c <HAL_Init+0x20>
 8001d44:	40022000 	.word	0x40022000

08001d48 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001d48:	4a03      	ldr	r2, [pc, #12]	; (8001d58 <HAL_IncTick+0x10>)
 8001d4a:	4b04      	ldr	r3, [pc, #16]	; (8001d5c <HAL_IncTick+0x14>)
 8001d4c:	6811      	ldr	r1, [r2, #0]
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	440b      	add	r3, r1
 8001d52:	6013      	str	r3, [r2, #0]
}
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	20000408 	.word	0x20000408
 8001d5c:	20000004 	.word	0x20000004

08001d60 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001d60:	4b01      	ldr	r3, [pc, #4]	; (8001d68 <HAL_GetTick+0x8>)
 8001d62:	6818      	ldr	r0, [r3, #0]
}
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	20000408 	.word	0x20000408

08001d6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d6c:	b538      	push	{r3, r4, r5, lr}
 8001d6e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001d70:	f7ff fff6 	bl	8001d60 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d74:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)uwTickFreq;
 8001d76:	bf1c      	itt	ne
 8001d78:	4b05      	ldrne	r3, [pc, #20]	; (8001d90 <HAL_Delay+0x24>)
 8001d7a:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001d7c:	4605      	mov	r5, r0
    wait += (uint32_t)uwTickFreq;
 8001d7e:	bf18      	it	ne
 8001d80:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d82:	f7ff ffed 	bl	8001d60 <HAL_GetTick>
 8001d86:	1b40      	subs	r0, r0, r5
 8001d88:	42a0      	cmp	r0, r4
 8001d8a:	d3fa      	bcc.n	8001d82 <HAL_Delay+0x16>
  {
  }
}
 8001d8c:	bd38      	pop	{r3, r4, r5, pc}
 8001d8e:	bf00      	nop
 8001d90:	20000004 	.word	0x20000004

08001d94 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d94:	b530      	push	{r4, r5, lr}
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001d96:	0dcc      	lsrs	r4, r1, #23
 8001d98:	f004 0404 	and.w	r4, r4, #4
 8001d9c:	3014      	adds	r0, #20

  MODIFY_REG(*preg,
 8001d9e:	f3c1 5104 	ubfx	r1, r1, #20, #5
 8001da2:	5823      	ldr	r3, [r4, r0]
 8001da4:	2507      	movs	r5, #7
 8001da6:	408d      	lsls	r5, r1
 8001da8:	ea23 0305 	bic.w	r3, r3, r5
 8001dac:	fa02 f101 	lsl.w	r1, r2, r1
 8001db0:	4319      	orrs	r1, r3
 8001db2:	5021      	str	r1, [r4, r0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001db4:	bd30      	pop	{r4, r5, pc}

08001db6 <LL_ADC_IsEnabled>:
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001db6:	6880      	ldr	r0, [r0, #8]
}
 8001db8:	f000 0001 	and.w	r0, r0, #1
 8001dbc:	4770      	bx	lr

08001dbe <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001dbe:	6880      	ldr	r0, [r0, #8]
}
 8001dc0:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8001dc4:	4770      	bx	lr
	...

08001dc8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001dc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001dce:	4604      	mov	r4, r0
 8001dd0:	2800      	cmp	r0, #0
 8001dd2:	f000 80a1 	beq.w	8001f18 <HAL_ADC_Init+0x150>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001dd6:	6d45      	ldr	r5, [r0, #84]	; 0x54
 8001dd8:	b925      	cbnz	r5, 8001de4 <HAL_ADC_Init+0x1c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dda:	f7ff fe03 	bl	80019e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dde:	65a5      	str	r5, [r4, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001de0:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001de4:	6820      	ldr	r0, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001de6:	6883      	ldr	r3, [r0, #8]
 8001de8:	009b      	lsls	r3, r3, #2
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001dea:	bf41      	itttt	mi
 8001dec:	6883      	ldrmi	r3, [r0, #8]
 8001dee:	f023 4320 	bicmi.w	r3, r3, #2684354560	; 0xa0000000
 8001df2:	f023 033f 	bicmi.w	r3, r3, #63	; 0x3f
 8001df6:	6083      	strmi	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001df8:	6883      	ldr	r3, [r0, #8]
 8001dfa:	00dd      	lsls	r5, r3, #3
 8001dfc:	d504      	bpl.n	8001e08 <HAL_ADC_Init+0x40>
 8001dfe:	6883      	ldr	r3, [r0, #8]
 8001e00:	00d9      	lsls	r1, r3, #3
 8001e02:	d515      	bpl.n	8001e30 <HAL_ADC_Init+0x68>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e04:	2100      	movs	r1, #0
 8001e06:	e01c      	b.n	8001e42 <HAL_ADC_Init+0x7a>
  MODIFY_REG(ADCx->CR,
 8001e08:	6883      	ldr	r3, [r0, #8]
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001e0a:	4a56      	ldr	r2, [pc, #344]	; (8001f64 <HAL_ADC_Init+0x19c>)
 8001e0c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001e10:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e18:	6083      	str	r3, [r0, #8]
 8001e1a:	4b53      	ldr	r3, [pc, #332]	; (8001f68 <HAL_ADC_Init+0x1a0>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	fbb3 f3f2 	udiv	r3, r3, r2
    while (wait_loop_index != 0UL)
    {
      wait_loop_index--;
 8001e22:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8001e24:	9b01      	ldr	r3, [sp, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d0e9      	beq.n	8001dfe <HAL_ADC_Init+0x36>
      wait_loop_index--;
 8001e2a:	9b01      	ldr	r3, [sp, #4]
 8001e2c:	3b01      	subs	r3, #1
 8001e2e:	e7f8      	b.n	8001e22 <HAL_ADC_Init+0x5a>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e30:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001e32:	f043 0310 	orr.w	r3, r3, #16
 8001e36:	6563      	str	r3, [r4, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e38:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001e3a:	f043 0301 	orr.w	r3, r3, #1
 8001e3e:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001e40:	2101      	movs	r1, #1

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e42:	f7ff ffbc 	bl	8001dbe <LL_ADC_REG_IsConversionOngoing>

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e46:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001e48:	f013 0f10 	tst.w	r3, #16
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e4c:	6d63      	ldr	r3, [r4, #84]	; 0x54
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e4e:	d160      	bne.n	8001f12 <HAL_ADC_Init+0x14a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001e50:	2800      	cmp	r0, #0
 8001e52:	d15e      	bne.n	8001f12 <HAL_ADC_Init+0x14a>
    ADC_STATE_CLR_SET(hadc->State,
 8001e54:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001e58:	f043 0302 	orr.w	r3, r3, #2
 8001e5c:	6563      	str	r3, [r4, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e5e:	6820      	ldr	r0, [r4, #0]
 8001e60:	f7ff ffa9 	bl	8001db6 <LL_ADC_IsEnabled>
 8001e64:	b998      	cbnz	r0, 8001e8e <HAL_ADC_Init+0xc6>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e66:	4841      	ldr	r0, [pc, #260]	; (8001f6c <HAL_ADC_Init+0x1a4>)
 8001e68:	f7ff ffa5 	bl	8001db6 <LL_ADC_IsEnabled>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	4840      	ldr	r0, [pc, #256]	; (8001f70 <HAL_ADC_Init+0x1a8>)
 8001e70:	f7ff ffa1 	bl	8001db6 <LL_ADC_IsEnabled>
 8001e74:	4303      	orrs	r3, r0
 8001e76:	483f      	ldr	r0, [pc, #252]	; (8001f74 <HAL_ADC_Init+0x1ac>)
 8001e78:	f7ff ff9d 	bl	8001db6 <LL_ADC_IsEnabled>
 8001e7c:	4303      	orrs	r3, r0
 8001e7e:	d106      	bne.n	8001e8e <HAL_ADC_Init+0xc6>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e80:	4a3d      	ldr	r2, [pc, #244]	; (8001f78 <HAL_ADC_Init+0x1b0>)
 8001e82:	6860      	ldr	r0, [r4, #4]
 8001e84:	6893      	ldr	r3, [r2, #8]
 8001e86:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001e8a:	4303      	orrs	r3, r0
 8001e8c:	6093      	str	r3, [r2, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8001e8e:	68e0      	ldr	r0, [r4, #12]
 8001e90:	6b63      	ldr	r3, [r4, #52]	; 0x34
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e92:	f894 2020 	ldrb.w	r2, [r4, #32]
                hadc->Init.DataAlign                                                   |
 8001e96:	4303      	orrs	r3, r0
 8001e98:	68a0      	ldr	r0, [r4, #8]
 8001e9a:	4303      	orrs	r3, r0
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e9c:	7e60      	ldrb	r0, [r4, #25]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e9e:	2a01      	cmp	r2, #1
                hadc->Init.DataAlign                                                   |
 8001ea0:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ea4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ea8:	bf02      	ittt	eq
 8001eaa:	6a62      	ldreq	r2, [r4, #36]	; 0x24
 8001eac:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8001eb0:	ea43 4342 	orreq.w	r3, r3, r2, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001eb4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001eb6:	b122      	cbz	r2, 8001ec2 <HAL_ADC_Init+0xfa>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8001eb8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001eba:	f402 7270 	and.w	r2, r2, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001ebe:	4302      	orrs	r2, r0
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ec0:	4313      	orrs	r3, r2
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001ec2:	6820      	ldr	r0, [r4, #0]
 8001ec4:	4a2d      	ldr	r2, [pc, #180]	; (8001f7c <HAL_ADC_Init+0x1b4>)
 8001ec6:	68c5      	ldr	r5, [r0, #12]
 8001ec8:	402a      	ands	r2, r5
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	60c3      	str	r3, [r0, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ece:	f7ff ff76 	bl	8001dbe <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001ed2:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ed4:	689a      	ldr	r2, [r3, #8]
 8001ed6:	0712      	lsls	r2, r2, #28
 8001ed8:	d520      	bpl.n	8001f1c <HAL_ADC_Init+0x154>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001eda:	6922      	ldr	r2, [r4, #16]
 8001edc:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ede:	bf05      	ittet	eq
 8001ee0:	6b18      	ldreq	r0, [r3, #48]	; 0x30
 8001ee2:	69e2      	ldreq	r2, [r4, #28]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ee4:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ee6:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8001eea:	bf06      	itte	eq
 8001eec:	f020 000f 	biceq.w	r0, r0, #15
 8001ef0:	4302      	orreq	r2, r0
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ef2:	f022 020f 	bicne.w	r2, r2, #15
 8001ef6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ef8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001efa:	f023 0303 	bic.w	r3, r3, #3
 8001efe:	f043 0301 	orr.w	r3, r3, #1
 8001f02:	6563      	str	r3, [r4, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8001f04:	4608      	mov	r0, r1
 8001f06:	b003      	add	sp, #12
 8001f08:	bd30      	pop	{r4, r5, pc}
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f0a:	691a      	ldr	r2, [r3, #16]
 8001f0c:	f022 0201 	bic.w	r2, r2, #1
 8001f10:	e026      	b.n	8001f60 <HAL_ADC_Init+0x198>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f12:	f043 0310 	orr.w	r3, r3, #16
 8001f16:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 8001f18:	2101      	movs	r1, #1
 8001f1a:	e7f3      	b.n	8001f04 <HAL_ADC_Init+0x13c>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f1c:	2800      	cmp	r0, #0
 8001f1e:	d1dc      	bne.n	8001eda <HAL_ADC_Init+0x112>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001f20:	68d8      	ldr	r0, [r3, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f22:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f26:	7e25      	ldrb	r5, [r4, #24]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f28:	0052      	lsls	r2, r2, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001f2a:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f2e:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001f32:	f020 0002 	bic.w	r0, r0, #2
 8001f36:	4302      	orrs	r2, r0
 8001f38:	60da      	str	r2, [r3, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8001f3a:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8001f3e:	2a01      	cmp	r2, #1
 8001f40:	d1e3      	bne.n	8001f0a <HAL_ADC_Init+0x142>
        MODIFY_REG(hadc->Instance->CFGR2,
 8001f42:	e9d4 250f 	ldrd	r2, r5, [r4, #60]	; 0x3c
 8001f46:	432a      	orrs	r2, r5
 8001f48:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8001f4a:	6918      	ldr	r0, [r3, #16]
 8001f4c:	f042 0201 	orr.w	r2, r2, #1
 8001f50:	432a      	orrs	r2, r5
 8001f52:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8001f54:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8001f58:	432a      	orrs	r2, r5
 8001f5a:	f020 0004 	bic.w	r0, r0, #4
 8001f5e:	4302      	orrs	r2, r0
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f60:	611a      	str	r2, [r3, #16]
 8001f62:	e7ba      	b.n	8001eda <HAL_ADC_Init+0x112>
 8001f64:	00030d40 	.word	0x00030d40
 8001f68:	20000000 	.word	0x20000000
 8001f6c:	50040000 	.word	0x50040000
 8001f70:	50040100 	.word	0x50040100
 8001f74:	50040200 	.word	0x50040200
 8001f78:	50040300 	.word	0x50040300
 8001f7c:	fff0c007 	.word	0xfff0c007

08001f80 <HAL_ADC_ConvHalfCpltCallback>:
 8001f80:	4770      	bx	lr

08001f82 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f82:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001f84:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8001f86:	f7ff fffb 	bl	8001f80 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f8a:	bd08      	pop	{r3, pc}

08001f8c <HAL_ADC_ErrorCallback>:
 8001f8c:	4770      	bx	lr

08001f8e <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f8e:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001f90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001f92:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 8001f96:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001f9a:	d121      	bne.n	8001fe0 <ADC_DMAConvCplt+0x52>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fa0:	655a      	str	r2, [r3, #84]	; 0x54
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	6811      	ldr	r1, [r2, #0]
 8001fa6:	0708      	lsls	r0, r1, #28
 8001fa8:	d516      	bpl.n	8001fd8 <ADC_DMAConvCplt+0x4a>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001faa:	68d1      	ldr	r1, [r2, #12]
 8001fac:	f411 6f40 	tst.w	r1, #3072	; 0xc00
 8001fb0:	d10e      	bne.n	8001fd0 <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001fb2:	68d2      	ldr	r2, [r2, #12]
 8001fb4:	f412 5f00 	tst.w	r2, #8192	; 0x2000
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001fb8:	d10a      	bne.n	8001fd0 <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001fba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001fbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fc0:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001fc2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001fc4:	04d1      	lsls	r1, r2, #19
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fc6:	bf5e      	ittt	pl
 8001fc8:	6d5a      	ldrpl	r2, [r3, #84]	; 0x54
 8001fca:	f042 0201 	orrpl.w	r2, r2, #1
 8001fce:	655a      	strpl	r2, [r3, #84]	; 0x54
    HAL_ADC_ConvCpltCallback(hadc);
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff fc5d 	bl	8001890 <HAL_ADC_ConvCpltCallback>
}
 8001fd6:	bd10      	pop	{r4, pc}
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001fd8:	68d2      	ldr	r2, [r2, #12]
 8001fda:	f012 0f02 	tst.w	r2, #2
 8001fde:	e7eb      	b.n	8001fb8 <ADC_DMAConvCplt+0x2a>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001fe0:	06d2      	lsls	r2, r2, #27
 8001fe2:	d503      	bpl.n	8001fec <ADC_DMAConvCplt+0x5e>
      HAL_ADC_ErrorCallback(hadc);
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff ffd1 	bl	8001f8c <HAL_ADC_ErrorCallback>
 8001fea:	e7f4      	b.n	8001fd6 <ADC_DMAConvCplt+0x48>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001fee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff4:	4718      	bx	r3

08001ff6 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ff6:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8001ff8:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001ffa:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001ffc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002000:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002002:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002004:	f043 0304 	orr.w	r3, r3, #4
 8002008:	6583      	str	r3, [r0, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800200a:	f7ff ffbf 	bl	8001f8c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800200e:	bd08      	pop	{r3, pc}

08002010 <HAL_ADC_ConfigChannel>:
{
 8002010:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0UL;
 8002012:	2300      	movs	r3, #0
 8002014:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8002016:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800201a:	2b01      	cmp	r3, #1
{
 800201c:	4605      	mov	r5, r0
 800201e:	460c      	mov	r4, r1
  __HAL_LOCK(hadc);
 8002020:	f000 817e 	beq.w	8002320 <HAL_ADC_ConfigChannel+0x310>
 8002024:	2301      	movs	r3, #1
 8002026:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800202a:	6800      	ldr	r0, [r0, #0]
 800202c:	f7ff fec7 	bl	8001dbe <LL_ADC_REG_IsConversionOngoing>
 8002030:	2800      	cmp	r0, #0
 8002032:	f040 816f 	bne.w	8002314 <HAL_ADC_ConfigChannel+0x304>
    if (sConfig->Rank <= 5U)
 8002036:	684b      	ldr	r3, [r1, #4]
 8002038:	2b05      	cmp	r3, #5
 800203a:	d808      	bhi.n	800204e <HAL_ADC_ConfigChannel+0x3e>
      switch (sConfig->Rank)
 800203c:	3b02      	subs	r3, #2
 800203e:	2b03      	cmp	r3, #3
 8002040:	d866      	bhi.n	8002110 <HAL_ADC_ConfigChannel+0x100>
 8002042:	e8df f003 	tbb	[pc, r3]
 8002046:	5e02      	.short	0x5e02
 8002048:	6260      	.short	0x6260
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800204a:	230c      	movs	r3, #12
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800204c:	6063      	str	r3, [r4, #4]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800204e:	6862      	ldr	r2, [r4, #4]
 8002050:	6828      	ldr	r0, [r5, #0]
  MODIFY_REG(*preg,
 8002052:	6823      	ldr	r3, [r4, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002054:	0991      	lsrs	r1, r2, #6
 8002056:	f001 010c 	and.w	r1, r1, #12
 800205a:	f100 0730 	add.w	r7, r0, #48	; 0x30
  MODIFY_REG(*preg,
 800205e:	f002 021f 	and.w	r2, r2, #31
 8002062:	59ce      	ldr	r6, [r1, r7]
 8002064:	f04f 0c1f 	mov.w	ip, #31
 8002068:	f3c3 6384 	ubfx	r3, r3, #26, #5
 800206c:	4093      	lsls	r3, r2
 800206e:	fa0c f202 	lsl.w	r2, ip, r2
 8002072:	ea26 0202 	bic.w	r2, r6, r2
 8002076:	4313      	orrs	r3, r2
 8002078:	51cb      	str	r3, [r1, r7]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800207a:	f7ff fea0 	bl	8001dbe <LL_ADC_REG_IsConversionOngoing>
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800207e:	682b      	ldr	r3, [r5, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002080:	689a      	ldr	r2, [r3, #8]
 8002082:	0711      	lsls	r1, r2, #28
 8002084:	f140 814e 	bpl.w	8002324 <HAL_ADC_ConfigChannel+0x314>
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002088:	6828      	ldr	r0, [r5, #0]
 800208a:	f7ff fe94 	bl	8001db6 <LL_ADC_IsEnabled>
 800208e:	2800      	cmp	r0, #0
 8002090:	f040 80c5 	bne.w	800221e <HAL_ADC_ConfigChannel+0x20e>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002094:	68e6      	ldr	r6, [r4, #12]
 8002096:	6828      	ldr	r0, [r5, #0]
 8002098:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(ADCx->DIFSEL,
 800209a:	4abd      	ldr	r2, [pc, #756]	; (8002390 <HAL_ADC_ConfigChannel+0x380>)
 800209c:	f8d0 10b0 	ldr.w	r1, [r0, #176]	; 0xb0
 80020a0:	f006 0c18 	and.w	ip, r6, #24
 80020a4:	f3c3 0712 	ubfx	r7, r3, #0, #19
 80020a8:	fa22 f20c 	lsr.w	r2, r2, ip
 80020ac:	401a      	ands	r2, r3
 80020ae:	ea21 0107 	bic.w	r1, r1, r7
 80020b2:	430a      	orrs	r2, r1
 80020b4:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80020b8:	4ab6      	ldr	r2, [pc, #728]	; (8002394 <HAL_ADC_ConfigChannel+0x384>)
 80020ba:	4296      	cmp	r6, r2
 80020bc:	f040 80af 	bne.w	800221e <HAL_ADC_ConfigChannel+0x20e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80020c0:	2f00      	cmp	r7, #0
 80020c2:	f040 8085 	bne.w	80021d0 <HAL_ADC_ConfigChannel+0x1c0>
 80020c6:	0e9a      	lsrs	r2, r3, #26
 80020c8:	3201      	adds	r2, #1
 80020ca:	f002 061f 	and.w	r6, r2, #31
 80020ce:	0692      	lsls	r2, r2, #26
 80020d0:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020d4:	2e09      	cmp	r6, #9
 80020d6:	f04f 0201 	mov.w	r2, #1
 80020da:	fa02 f206 	lsl.w	r2, r2, r6
 80020de:	f240 8091 	bls.w	8002204 <HAL_ADC_ConfigChannel+0x1f4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80020e2:	430a      	orrs	r2, r1
 80020e4:	2f00      	cmp	r7, #0
 80020e6:	f040 80bb 	bne.w	8002260 <HAL_ADC_ConfigChannel+0x250>
 80020ea:	0e9b      	lsrs	r3, r3, #26
 80020ec:	3301      	adds	r3, #1
 80020ee:	f003 031f 	and.w	r3, r3, #31
 80020f2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80020f6:	391e      	subs	r1, #30
 80020f8:	0509      	lsls	r1, r1, #20
 80020fa:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020fe:	4311      	orrs	r1, r2
 8002100:	e08a      	b.n	8002218 <HAL_ADC_ConfigChannel+0x208>
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002102:	2312      	movs	r3, #18
 8002104:	e7a2      	b.n	800204c <HAL_ADC_ConfigChannel+0x3c>
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002106:	2318      	movs	r3, #24
 8002108:	e7a0      	b.n	800204c <HAL_ADC_ConfigChannel+0x3c>
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800210a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800210e:	e79d      	b.n	800204c <HAL_ADC_ConfigChannel+0x3c>
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002110:	2306      	movs	r3, #6
 8002112:	e79b      	b.n	800204c <HAL_ADC_ConfigChannel+0x3c>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002114:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8002116:	6e19      	ldr	r1, [r3, #96]	; 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002118:	f3c2 0612 	ubfx	r6, r2, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800211c:	f3c1 6184 	ubfx	r1, r1, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002120:	2e00      	cmp	r6, #0
 8002122:	d13a      	bne.n	800219a <HAL_ADC_ConfigChannel+0x18a>
 8002124:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002128:	4291      	cmp	r1, r2
  MODIFY_REG(*preg,
 800212a:	bf02      	ittt	eq
 800212c:	6e1a      	ldreq	r2, [r3, #96]	; 0x60
 800212e:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8002132:	661a      	streq	r2, [r3, #96]	; 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002134:	6826      	ldr	r6, [r4, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002136:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002138:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800213a:	f3c6 0712 	ubfx	r7, r6, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800213e:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8002142:	f100 010c 	add.w	r1, r0, #12
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002146:	bb6f      	cbnz	r7, 80021a4 <HAL_ADC_ConfigChannel+0x194>
 8002148:	f3c6 6784 	ubfx	r7, r6, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800214c:	42ba      	cmp	r2, r7
 800214e:	f040 810c 	bne.w	800236a <HAL_ADC_ConfigChannel+0x35a>
  MODIFY_REG(*preg,
 8002152:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002154:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002158:	665a      	str	r2, [r3, #100]	; 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800215a:	6826      	ldr	r6, [r4, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800215c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800215e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002160:	f3c6 0712 	ubfx	r7, r6, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002164:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002168:	bb37      	cbnz	r7, 80021b8 <HAL_ADC_ConfigChannel+0x1a8>
 800216a:	f3c6 6684 	ubfx	r6, r6, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800216e:	42b2      	cmp	r2, r6
 8002170:	f040 8100 	bne.w	8002374 <HAL_ADC_ConfigChannel+0x364>
  MODIFY_REG(*preg,
 8002174:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002176:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800217a:	669a      	str	r2, [r3, #104]	; 0x68
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800217c:	68c3      	ldr	r3, [r0, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800217e:	6823      	ldr	r3, [r4, #0]
 8002180:	68c2      	ldr	r2, [r0, #12]
 8002182:	f3c3 0012 	ubfx	r0, r3, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002186:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800218a:	2800      	cmp	r0, #0
 800218c:	f000 80f7 	beq.w	800237e <HAL_ADC_ConfigChannel+0x36e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002190:	fa93 f3a3 	rbit	r3, r3
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8002194:	fab3 f383 	clz	r3, r3
 8002198:	e0f3      	b.n	8002382 <HAL_ADC_ConfigChannel+0x372>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219a:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 800219e:	fab2 f282 	clz	r2, r2
 80021a2:	e7c1      	b.n	8002128 <HAL_ADC_ConfigChannel+0x118>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a4:	fa96 f7a6 	rbit	r7, r6
  return __builtin_clz(value);
 80021a8:	fab7 f787 	clz	r7, r7
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80021ac:	42ba      	cmp	r2, r7
 80021ae:	d0d0      	beq.n	8002152 <HAL_ADC_ConfigChannel+0x142>
 80021b0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80021b2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80021b4:	f3c2 6284 	ubfx	r2, r2, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b8:	fa96 f6a6 	rbit	r6, r6
  return __builtin_clz(value);
 80021bc:	fab6 f686 	clz	r6, r6
 80021c0:	4296      	cmp	r6, r2
 80021c2:	d0d7      	beq.n	8002174 <HAL_ADC_ConfigChannel+0x164>
 80021c4:	68c3      	ldr	r3, [r0, #12]
 80021c6:	68c2      	ldr	r2, [r0, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021c8:	6823      	ldr	r3, [r4, #0]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80021ca:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80021ce:	e7df      	b.n	8002190 <HAL_ADC_ConfigChannel+0x180>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d0:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 80021d4:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021d8:	3201      	adds	r2, #1
 80021da:	f002 021f 	and.w	r2, r2, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021de:	2a09      	cmp	r2, #9
 80021e0:	d82c      	bhi.n	800223c <HAL_ADC_ConfigChannel+0x22c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e2:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 80021e6:	fab1 f181 	clz	r1, r1
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021ea:	3101      	adds	r1, #1
 80021ec:	0689      	lsls	r1, r1, #26
 80021ee:	f001 41f8 	and.w	r1, r1, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f2:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 80021f6:	fab2 f282 	clz	r2, r2
 80021fa:	3201      	adds	r2, #1
 80021fc:	f002 061f 	and.w	r6, r2, #31
 8002200:	2201      	movs	r2, #1
 8002202:	40b2      	lsls	r2, r6
 8002204:	4311      	orrs	r1, r2
 8002206:	b9a7      	cbnz	r7, 8002232 <HAL_ADC_ConfigChannel+0x222>
 8002208:	0e9b      	lsrs	r3, r3, #26
 800220a:	3301      	adds	r3, #1
 800220c:	f003 031f 	and.w	r3, r3, #31
 8002210:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002214:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002216:	4319      	orrs	r1, r3
 8002218:	68a2      	ldr	r2, [r4, #8]
 800221a:	f7ff fdbb 	bl	8001d94 <LL_ADC_SetChannelSamplingTime>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800221e:	6822      	ldr	r2, [r4, #0]
 8002220:	4b5d      	ldr	r3, [pc, #372]	; (8002398 <HAL_ADC_ConfigChannel+0x388>)
 8002222:	421a      	tst	r2, r3
 8002224:	d128      	bne.n	8002278 <HAL_ADC_ConfigChannel+0x268>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002226:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8002228:	2300      	movs	r3, #0
 800222a:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
}
 800222e:	b003      	add	sp, #12
 8002230:	bdf0      	pop	{r4, r5, r6, r7, pc}
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002232:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002236:	fab3 f383 	clz	r3, r3
 800223a:	e7e6      	b.n	800220a <HAL_ADC_ConfigChannel+0x1fa>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223c:	fa93 f1a3 	rbit	r1, r3
  return __builtin_clz(value);
 8002240:	fab1 f181 	clz	r1, r1
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002244:	3101      	adds	r1, #1
 8002246:	0689      	lsls	r1, r1, #26
 8002248:	f001 41f8 	and.w	r1, r1, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224c:	fa93 f2a3 	rbit	r2, r3
  return __builtin_clz(value);
 8002250:	fab2 f282 	clz	r2, r2
 8002254:	3201      	adds	r2, #1
 8002256:	f002 061f 	and.w	r6, r2, #31
 800225a:	2201      	movs	r2, #1
 800225c:	40b2      	lsls	r2, r6
 800225e:	e740      	b.n	80020e2 <HAL_ADC_ConfigChannel+0xd2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002260:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 8002264:	fab3 f383 	clz	r3, r3
 8002268:	3301      	adds	r3, #1
 800226a:	f003 031f 	and.w	r3, r3, #31
 800226e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002272:	f1a3 011e 	sub.w	r1, r3, #30
 8002276:	e73f      	b.n	80020f8 <HAL_ADC_ConfigChannel+0xe8>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002278:	4948      	ldr	r1, [pc, #288]	; (800239c <HAL_ADC_ConfigChannel+0x38c>)
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800227a:	4b49      	ldr	r3, [pc, #292]	; (80023a0 <HAL_ADC_ConfigChannel+0x390>)
 800227c:	6888      	ldr	r0, [r1, #8]
 800227e:	429a      	cmp	r2, r3
 8002280:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 8002284:	460c      	mov	r4, r1
 8002286:	d11e      	bne.n	80022c6 <HAL_ADC_ConfigChannel+0x2b6>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002288:	0202      	lsls	r2, r0, #8
 800228a:	d4cc      	bmi.n	8002226 <HAL_ADC_ConfigChannel+0x216>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800228c:	682b      	ldr	r3, [r5, #0]
 800228e:	4a45      	ldr	r2, [pc, #276]	; (80023a4 <HAL_ADC_ConfigChannel+0x394>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d003      	beq.n	800229c <HAL_ADC_ConfigChannel+0x28c>
 8002294:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8002298:	4293      	cmp	r3, r2
 800229a:	d1c4      	bne.n	8002226 <HAL_ADC_ConfigChannel+0x216>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800229c:	68a3      	ldr	r3, [r4, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800229e:	4a42      	ldr	r2, [pc, #264]	; (80023a8 <HAL_ADC_ConfigChannel+0x398>)
 80022a0:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 80022a4:	4333      	orrs	r3, r6
 80022a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022aa:	60a3      	str	r3, [r4, #8]
 80022ac:	4b3f      	ldr	r3, [pc, #252]	; (80023ac <HAL_ADC_ConfigChannel+0x39c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	fbb3 f2f2 	udiv	r2, r3, r2
 80022b4:	230c      	movs	r3, #12
 80022b6:	4353      	muls	r3, r2
            wait_loop_index--;
 80022b8:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 80022ba:	9b01      	ldr	r3, [sp, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d0b2      	beq.n	8002226 <HAL_ADC_ConfigChannel+0x216>
            wait_loop_index--;
 80022c0:	9b01      	ldr	r3, [sp, #4]
 80022c2:	3b01      	subs	r3, #1
 80022c4:	e7f8      	b.n	80022b8 <HAL_ADC_ConfigChannel+0x2a8>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80022c6:	4b3a      	ldr	r3, [pc, #232]	; (80023b0 <HAL_ADC_ConfigChannel+0x3a0>)
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d111      	bne.n	80022f0 <HAL_ADC_ConfigChannel+0x2e0>
 80022cc:	01c3      	lsls	r3, r0, #7
 80022ce:	d4aa      	bmi.n	8002226 <HAL_ADC_ConfigChannel+0x216>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80022d0:	682b      	ldr	r3, [r5, #0]
 80022d2:	4a34      	ldr	r2, [pc, #208]	; (80023a4 <HAL_ADC_ConfigChannel+0x394>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d003      	beq.n	80022e0 <HAL_ADC_ConfigChannel+0x2d0>
 80022d8:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80022dc:	4293      	cmp	r3, r2
 80022de:	d1a2      	bne.n	8002226 <HAL_ADC_ConfigChannel+0x216>
 80022e0:	68a3      	ldr	r3, [r4, #8]
 80022e2:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 80022e6:	4333      	orrs	r3, r6
 80022e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022ec:	60a3      	str	r3, [r4, #8]
 80022ee:	e79a      	b.n	8002226 <HAL_ADC_ConfigChannel+0x216>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80022f0:	4b30      	ldr	r3, [pc, #192]	; (80023b4 <HAL_ADC_ConfigChannel+0x3a4>)
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d197      	bne.n	8002226 <HAL_ADC_ConfigChannel+0x216>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80022f6:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 80022fa:	d194      	bne.n	8002226 <HAL_ADC_ConfigChannel+0x216>
        if (ADC_VREFINT_INSTANCE(hadc))
 80022fc:	682a      	ldr	r2, [r5, #0]
 80022fe:	4b29      	ldr	r3, [pc, #164]	; (80023a4 <HAL_ADC_ConfigChannel+0x394>)
 8002300:	429a      	cmp	r2, r3
 8002302:	d190      	bne.n	8002226 <HAL_ADC_ConfigChannel+0x216>
 8002304:	688b      	ldr	r3, [r1, #8]
 8002306:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 800230a:	4333      	orrs	r3, r6
 800230c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002310:	608b      	str	r3, [r1, #8]
 8002312:	e789      	b.n	8002228 <HAL_ADC_ConfigChannel+0x218>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002314:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 8002316:	f042 0220 	orr.w	r2, r2, #32
 800231a:	656a      	str	r2, [r5, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 800231c:	4618      	mov	r0, r3
 800231e:	e783      	b.n	8002228 <HAL_ADC_ConfigChannel+0x218>
  __HAL_LOCK(hadc);
 8002320:	2002      	movs	r0, #2
 8002322:	e784      	b.n	800222e <HAL_ADC_ConfigChannel+0x21e>
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002324:	2800      	cmp	r0, #0
 8002326:	f47f aeaf 	bne.w	8002088 <HAL_ADC_ConfigChannel+0x78>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800232a:	4618      	mov	r0, r3
 800232c:	68a2      	ldr	r2, [r4, #8]
 800232e:	6821      	ldr	r1, [r4, #0]
 8002330:	f7ff fd30 	bl	8001d94 <LL_ADC_SetChannelSamplingTime>
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002334:	6926      	ldr	r6, [r4, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002336:	682b      	ldr	r3, [r5, #0]
 8002338:	6822      	ldr	r2, [r4, #0]
 800233a:	68d9      	ldr	r1, [r3, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800233c:	2e04      	cmp	r6, #4
 800233e:	f103 0060 	add.w	r0, r3, #96	; 0x60
 8002342:	f43f aee7 	beq.w	8002114 <HAL_ADC_ConfigChannel+0x104>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002346:	f3c1 03c1 	ubfx	r3, r1, #3, #2
 800234a:	0059      	lsls	r1, r3, #1
 800234c:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(*preg,
 800234e:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 8002352:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8002356:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800235a:	408b      	lsls	r3, r1
 800235c:	4313      	orrs	r3, r2
 800235e:	4a16      	ldr	r2, [pc, #88]	; (80023b8 <HAL_ADC_ConfigChannel+0x3a8>)
 8002360:	403a      	ands	r2, r7
 8002362:	4313      	orrs	r3, r2
 8002364:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
 8002368:	e68e      	b.n	8002088 <HAL_ADC_ConfigChannel+0x78>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800236a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800236c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800236e:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8002372:	e6fa      	b.n	800216a <HAL_ADC_ConfigChannel+0x15a>
 8002374:	68c3      	ldr	r3, [r0, #12]
 8002376:	68c2      	ldr	r2, [r0, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002378:	6823      	ldr	r3, [r4, #0]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800237a:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800237e:	f3c3 6384 	ubfx	r3, r3, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002382:	4293      	cmp	r3, r2
  MODIFY_REG(*preg,
 8002384:	bf02      	ittt	eq
 8002386:	680b      	ldreq	r3, [r1, #0]
 8002388:	f023 4300 	biceq.w	r3, r3, #2147483648	; 0x80000000
 800238c:	600b      	streq	r3, [r1, #0]
 800238e:	e67b      	b.n	8002088 <HAL_ADC_ConfigChannel+0x78>
 8002390:	0007ffff 	.word	0x0007ffff
 8002394:	407f0000 	.word	0x407f0000
 8002398:	80080000 	.word	0x80080000
 800239c:	50040300 	.word	0x50040300
 80023a0:	c7520000 	.word	0xc7520000
 80023a4:	50040000 	.word	0x50040000
 80023a8:	00030d40 	.word	0x00030d40
 80023ac:	20000000 	.word	0x20000000
 80023b0:	cb840000 	.word	0xcb840000
 80023b4:	80000001 	.word	0x80000001
 80023b8:	03fff000 	.word	0x03fff000

080023bc <ADC_Enable>:
{
 80023bc:	b570      	push	{r4, r5, r6, lr}
 80023be:	4604      	mov	r4, r0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023c0:	6800      	ldr	r0, [r0, #0]
 80023c2:	f7ff fcf8 	bl	8001db6 <LL_ADC_IsEnabled>
 80023c6:	b108      	cbz	r0, 80023cc <ADC_Enable+0x10>
  return HAL_OK;
 80023c8:	2000      	movs	r0, #0
}
 80023ca:	bd70      	pop	{r4, r5, r6, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80023cc:	6822      	ldr	r2, [r4, #0]
 80023ce:	4b15      	ldr	r3, [pc, #84]	; (8002424 <ADC_Enable+0x68>)
 80023d0:	6891      	ldr	r1, [r2, #8]
 80023d2:	4219      	tst	r1, r3
 80023d4:	d009      	beq.n	80023ea <ADC_Enable+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023d6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80023d8:	f043 0310 	orr.w	r3, r3, #16
 80023dc:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80023e0:	f043 0301 	orr.w	r3, r3, #1
 80023e4:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 80023e6:	2001      	movs	r0, #1
 80023e8:	e7ef      	b.n	80023ca <ADC_Enable+0xe>
  MODIFY_REG(ADCx->CR,
 80023ea:	6893      	ldr	r3, [r2, #8]
 80023ec:	4d0e      	ldr	r5, [pc, #56]	; (8002428 <ADC_Enable+0x6c>)
 80023ee:	402b      	ands	r3, r5
 80023f0:	f043 0301 	orr.w	r3, r3, #1
 80023f4:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80023f6:	f7ff fcb3 	bl	8001d60 <HAL_GetTick>
 80023fa:	4606      	mov	r6, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80023fc:	6820      	ldr	r0, [r4, #0]
 80023fe:	6803      	ldr	r3, [r0, #0]
 8002400:	07db      	lsls	r3, r3, #31
 8002402:	d4e1      	bmi.n	80023c8 <ADC_Enable+0xc>
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002404:	f7ff fcd7 	bl	8001db6 <LL_ADC_IsEnabled>
 8002408:	b928      	cbnz	r0, 8002416 <ADC_Enable+0x5a>
        LL_ADC_Enable(hadc->Instance);
 800240a:	6822      	ldr	r2, [r4, #0]
 800240c:	6893      	ldr	r3, [r2, #8]
 800240e:	402b      	ands	r3, r5
 8002410:	f043 0301 	orr.w	r3, r3, #1
 8002414:	6093      	str	r3, [r2, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002416:	f7ff fca3 	bl	8001d60 <HAL_GetTick>
 800241a:	1b80      	subs	r0, r0, r6
 800241c:	2802      	cmp	r0, #2
 800241e:	d9ed      	bls.n	80023fc <ADC_Enable+0x40>
 8002420:	e7d9      	b.n	80023d6 <ADC_Enable+0x1a>
 8002422:	bf00      	nop
 8002424:	8000003f 	.word	0x8000003f
 8002428:	7fffffc0 	.word	0x7fffffc0

0800242c <HAL_ADC_Start_IT>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800242c:	4b4f      	ldr	r3, [pc, #316]	; (800256c <HAL_ADC_Start_IT+0x140>)
{
 800242e:	b570      	push	{r4, r5, r6, lr}
 8002430:	4604      	mov	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002432:	6800      	ldr	r0, [r0, #0]
 8002434:	689e      	ldr	r6, [r3, #8]
 8002436:	f7ff fcc2 	bl	8001dbe <LL_ADC_REG_IsConversionOngoing>
 800243a:	4605      	mov	r5, r0
 800243c:	2800      	cmp	r0, #0
 800243e:	f040 808f 	bne.w	8002560 <HAL_ADC_Start_IT+0x134>
    __HAL_LOCK(hadc);
 8002442:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8002446:	2b01      	cmp	r3, #1
 8002448:	f000 808a 	beq.w	8002560 <HAL_ADC_Start_IT+0x134>
 800244c:	2301      	movs	r3, #1
 800244e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    tmp_hal_status = ADC_Enable(hadc);
 8002452:	4620      	mov	r0, r4
 8002454:	f7ff ffb2 	bl	80023bc <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002458:	2800      	cmp	r0, #0
 800245a:	d17e      	bne.n	800255a <HAL_ADC_Start_IT+0x12e>
      ADC_STATE_CLR_SET(hadc->State,
 800245c:	6d63      	ldr	r3, [r4, #84]	; 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800245e:	4944      	ldr	r1, [pc, #272]	; (8002570 <HAL_ADC_Start_IT+0x144>)
      ADC_STATE_CLR_SET(hadc->State,
 8002460:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002464:	f023 0301 	bic.w	r3, r3, #1
 8002468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800246c:	6563      	str	r3, [r4, #84]	; 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800246e:	6823      	ldr	r3, [r4, #0]
 8002470:	428b      	cmp	r3, r1
 8002472:	f006 021f 	and.w	r2, r6, #31
 8002476:	d075      	beq.n	8002564 <HAL_ADC_Start_IT+0x138>
 8002478:	4619      	mov	r1, r3
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800247a:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800247c:	f425 1580 	bic.w	r5, r5, #1048576	; 0x100000
 8002480:	6565      	str	r5, [r4, #84]	; 0x54
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002482:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8002484:	f415 5580 	ands.w	r5, r5, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002488:	bf1c      	itt	ne
 800248a:	6da5      	ldrne	r5, [r4, #88]	; 0x58
 800248c:	f025 0506 	bicne.w	r5, r5, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8002490:	65a5      	str	r5, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002492:	251c      	movs	r5, #28
 8002494:	601d      	str	r5, [r3, #0]
      __HAL_UNLOCK(hadc);
 8002496:	2500      	movs	r5, #0
 8002498:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800249c:	685d      	ldr	r5, [r3, #4]
 800249e:	f025 051c 	bic.w	r5, r5, #28
 80024a2:	605d      	str	r5, [r3, #4]
      switch (hadc->Init.EOCSelection)
 80024a4:	6965      	ldr	r5, [r4, #20]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80024a6:	685e      	ldr	r6, [r3, #4]
      switch (hadc->Init.EOCSelection)
 80024a8:	2d08      	cmp	r5, #8
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80024aa:	bf0c      	ite	eq
 80024ac:	f046 0608 	orreq.w	r6, r6, #8
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80024b0:	f046 0604 	orrne.w	r6, r6, #4
 80024b4:	605e      	str	r6, [r3, #4]
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80024b6:	6b66      	ldr	r6, [r4, #52]	; 0x34
 80024b8:	b91e      	cbnz	r6, 80024c2 <HAL_ADC_Start_IT+0x96>
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80024ba:	685e      	ldr	r6, [r3, #4]
 80024bc:	f046 0610 	orr.w	r6, r6, #16
 80024c0:	605e      	str	r6, [r3, #4]
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024c2:	428b      	cmp	r3, r1
 80024c4:	d007      	beq.n	80024d6 <HAL_ADC_Start_IT+0xaa>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024c6:	2a09      	cmp	r2, #9
 80024c8:	d828      	bhi.n	800251c <HAL_ADC_Start_IT+0xf0>
 80024ca:	f240 2621 	movw	r6, #545	; 0x221
 80024ce:	fa26 f202 	lsr.w	r2, r6, r2
 80024d2:	07d6      	lsls	r6, r2, #31
 80024d4:	d522      	bpl.n	800251c <HAL_ADC_Start_IT+0xf0>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80024d6:	68da      	ldr	r2, [r3, #12]
 80024d8:	0191      	lsls	r1, r2, #6
 80024da:	d516      	bpl.n	800250a <HAL_ADC_Start_IT+0xde>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024dc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80024de:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80024e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80024e6:	6562      	str	r2, [r4, #84]	; 0x54
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80024e8:	685a      	ldr	r2, [r3, #4]
          switch (hadc->Init.EOCSelection)
 80024ea:	2d08      	cmp	r5, #8
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80024ec:	bf0b      	itete	eq
 80024ee:	f022 0220 	biceq.w	r2, r2, #32
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80024f2:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80024f6:	605a      	streq	r2, [r3, #4]
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80024f8:	605a      	strne	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80024fa:	bf0b      	itete	eq
 80024fc:	685a      	ldreq	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80024fe:	685a      	ldrne	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002500:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002504:	f042 0220 	orrne.w	r2, r2, #32
 8002508:	605a      	str	r2, [r3, #4]
  MODIFY_REG(ADCx->CR,
 800250a:	689a      	ldr	r2, [r3, #8]
 800250c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002510:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002514:	f042 0204 	orr.w	r2, r2, #4
 8002518:	609a      	str	r2, [r3, #8]
}
 800251a:	bd70      	pop	{r4, r5, r6, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800251c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800251e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002522:	6562      	str	r2, [r4, #84]	; 0x54
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002524:	68ca      	ldr	r2, [r1, #12]
 8002526:	0192      	lsls	r2, r2, #6
 8002528:	d5f7      	bpl.n	800251a <HAL_ADC_Start_IT+0xee>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800252a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800252c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002530:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002534:	6562      	str	r2, [r4, #84]	; 0x54
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002536:	685a      	ldr	r2, [r3, #4]
          switch (hadc->Init.EOCSelection)
 8002538:	2d08      	cmp	r5, #8
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800253a:	bf0b      	itete	eq
 800253c:	f022 0220 	biceq.w	r2, r2, #32
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002540:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002544:	605a      	streq	r2, [r3, #4]
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002546:	605a      	strne	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002548:	bf0b      	itete	eq
 800254a:	685a      	ldreq	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800254c:	685a      	ldrne	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800254e:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002552:	f042 0220 	orrne.w	r2, r2, #32
 8002556:	605a      	str	r2, [r3, #4]
              break;
 8002558:	e7df      	b.n	800251a <HAL_ADC_Start_IT+0xee>
      __HAL_UNLOCK(hadc);
 800255a:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 800255e:	e7dc      	b.n	800251a <HAL_ADC_Start_IT+0xee>
    tmp_hal_status = HAL_BUSY;
 8002560:	2002      	movs	r0, #2
 8002562:	e7da      	b.n	800251a <HAL_ADC_Start_IT+0xee>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002564:	4903      	ldr	r1, [pc, #12]	; (8002574 <HAL_ADC_Start_IT+0x148>)
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002566:	2a00      	cmp	r2, #0
 8002568:	d087      	beq.n	800247a <HAL_ADC_Start_IT+0x4e>
 800256a:	e78a      	b.n	8002482 <HAL_ADC_Start_IT+0x56>
 800256c:	50040300 	.word	0x50040300
 8002570:	50040100 	.word	0x50040100
 8002574:	50040000 	.word	0x50040000

08002578 <HAL_ADC_Start_DMA>:
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002578:	4b37      	ldr	r3, [pc, #220]	; (8002658 <HAL_ADC_Start_DMA+0xe0>)
{
 800257a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800257e:	4604      	mov	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002580:	6800      	ldr	r0, [r0, #0]
 8002582:	689b      	ldr	r3, [r3, #8]
{
 8002584:	460e      	mov	r6, r1
 8002586:	4617      	mov	r7, r2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002588:	f7ff fc19 	bl	8001dbe <LL_ADC_REG_IsConversionOngoing>
 800258c:	2800      	cmp	r0, #0
 800258e:	d15d      	bne.n	800264c <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 8002590:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 8002594:	2a01      	cmp	r2, #1
 8002596:	d059      	beq.n	800264c <HAL_ADC_Start_DMA+0xd4>
 8002598:	f003 081f 	and.w	r8, r3, #31
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800259c:	f1b8 0f09 	cmp.w	r8, #9
    __HAL_LOCK(hadc);
 80025a0:	f04f 0301 	mov.w	r3, #1
 80025a4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025a8:	d84b      	bhi.n	8002642 <HAL_ADC_Start_DMA+0xca>
 80025aa:	f240 2321 	movw	r3, #545	; 0x221
 80025ae:	fa23 f308 	lsr.w	r3, r3, r8
 80025b2:	43db      	mvns	r3, r3
 80025b4:	f013 0501 	ands.w	r5, r3, #1
 80025b8:	d143      	bne.n	8002642 <HAL_ADC_Start_DMA+0xca>
      tmp_hal_status = ADC_Enable(hadc);
 80025ba:	4620      	mov	r0, r4
 80025bc:	f7ff fefe 	bl	80023bc <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 80025c0:	2800      	cmp	r0, #0
 80025c2:	d13b      	bne.n	800263c <HAL_ADC_Start_DMA+0xc4>
        ADC_STATE_CLR_SET(hadc->State,
 80025c4:	6d63      	ldr	r3, [r4, #84]	; 0x54
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025c6:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 80025c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80025cc:	f023 0301 	bic.w	r3, r3, #1
 80025d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025d4:	6563      	str	r3, [r4, #84]	; 0x54
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025d6:	4b21      	ldr	r3, [pc, #132]	; (800265c <HAL_ADC_Start_DMA+0xe4>)
 80025d8:	4299      	cmp	r1, r3
 80025da:	d039      	beq.n	8002650 <HAL_ADC_Start_DMA+0xd8>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025dc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80025de:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80025e2:	6563      	str	r3, [r4, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80025e4:	6d63      	ldr	r3, [r4, #84]	; 0x54
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80025e6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80025e8:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80025ec:	bf1c      	itt	ne
 80025ee:	6da3      	ldrne	r3, [r4, #88]	; 0x58
 80025f0:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 80025f4:	65a3      	str	r3, [r4, #88]	; 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80025f6:	4b1a      	ldr	r3, [pc, #104]	; (8002660 <HAL_ADC_Start_DMA+0xe8>)
 80025f8:	62c3      	str	r3, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80025fa:	4b1a      	ldr	r3, [pc, #104]	; (8002664 <HAL_ADC_Start_DMA+0xec>)
 80025fc:	6303      	str	r3, [r0, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80025fe:	4b1a      	ldr	r3, [pc, #104]	; (8002668 <HAL_ADC_Start_DMA+0xf0>)
 8002600:	6343      	str	r3, [r0, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002602:	231c      	movs	r3, #28
 8002604:	600b      	str	r3, [r1, #0]
        __HAL_UNLOCK(hadc);
 8002606:	2300      	movs	r3, #0
 8002608:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800260c:	684b      	ldr	r3, [r1, #4]
 800260e:	f043 0310 	orr.w	r3, r3, #16
 8002612:	604b      	str	r3, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002614:	68cb      	ldr	r3, [r1, #12]
 8002616:	f043 0301 	orr.w	r3, r3, #1
 800261a:	60cb      	str	r3, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800261c:	4632      	mov	r2, r6
 800261e:	463b      	mov	r3, r7
 8002620:	3140      	adds	r1, #64	; 0x40
 8002622:	f000 f977 	bl	8002914 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002626:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8002628:	6893      	ldr	r3, [r2, #8]
 800262a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800262e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002632:	f043 0304 	orr.w	r3, r3, #4
 8002636:	6093      	str	r3, [r2, #8]
}
 8002638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_UNLOCK(hadc);
 800263c:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 8002640:	e7fa      	b.n	8002638 <HAL_ADC_Start_DMA+0xc0>
      __HAL_UNLOCK(hadc);
 8002642:	2300      	movs	r3, #0
 8002644:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      tmp_hal_status = HAL_ERROR;
 8002648:	2001      	movs	r0, #1
 800264a:	e7f5      	b.n	8002638 <HAL_ADC_Start_DMA+0xc0>
    tmp_hal_status = HAL_BUSY;
 800264c:	2002      	movs	r0, #2
 800264e:	e7f3      	b.n	8002638 <HAL_ADC_Start_DMA+0xc0>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002650:	f1b8 0f00 	cmp.w	r8, #0
 8002654:	d0c2      	beq.n	80025dc <HAL_ADC_Start_DMA+0x64>
 8002656:	e7c5      	b.n	80025e4 <HAL_ADC_Start_DMA+0x6c>
 8002658:	50040300 	.word	0x50040300
 800265c:	50040100 	.word	0x50040100
 8002660:	08001f8f 	.word	0x08001f8f
 8002664:	08001f83 	.word	0x08001f83
 8002668:	08001ff7 	.word	0x08001ff7

0800266c <LL_ADC_IsEnabled>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800266c:	6880      	ldr	r0, [r0, #8]
}
 800266e:	f000 0001 	and.w	r0, r0, #1
 8002672:	4770      	bx	lr

08002674 <LL_ADC_REG_IsConversionOngoing>:
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002674:	6880      	ldr	r0, [r0, #8]
}
 8002676:	f3c0 0080 	ubfx	r0, r0, #2, #1
 800267a:	4770      	bx	lr

0800267c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800267c:	b530      	push	{r4, r5, lr}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800267e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8002682:	2b01      	cmp	r3, #1
{
 8002684:	b09b      	sub	sp, #108	; 0x6c
 8002686:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 8002688:	d066      	beq.n	8002758 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
 800268a:	2301      	movs	r3, #1
 800268c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002690:	4b32      	ldr	r3, [pc, #200]	; (800275c <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
 8002692:	6800      	ldr	r0, [r0, #0]
 8002694:	4298      	cmp	r0, r3
 8002696:	bf0c      	ite	eq
 8002698:	f503 7380 	addeq.w	r3, r3, #256	; 0x100
 800269c:	2300      	movne	r3, #0
 800269e:	9301      	str	r3, [sp, #4]

  if (tmphadcSlave.Instance == NULL)
 80026a0:	9801      	ldr	r0, [sp, #4]
 80026a2:	b940      	cbnz	r0, 80026b6 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026a4:	6d53      	ldr	r3, [r2, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80026a6:	f882 0050 	strb.w	r0, [r2, #80]	; 0x50
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026aa:	f043 0320 	orr.w	r3, r3, #32
 80026ae:	6553      	str	r3, [r2, #84]	; 0x54

    return HAL_ERROR;
 80026b0:	2001      	movs	r0, #1
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80026b2:	b01b      	add	sp, #108	; 0x6c
 80026b4:	bd30      	pop	{r4, r5, pc}
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80026b6:	f7ff ffdd 	bl	8002674 <LL_ADC_REG_IsConversionOngoing>
 80026ba:	4603      	mov	r3, r0
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026bc:	6810      	ldr	r0, [r2, #0]
 80026be:	f7ff ffd9 	bl	8002674 <LL_ADC_REG_IsConversionOngoing>
 80026c2:	2800      	cmp	r0, #0
 80026c4:	d142      	bne.n	800274c <HAL_ADCEx_MultiModeConfigChannel+0xd0>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d140      	bne.n	800274c <HAL_ADCEx_MultiModeConfigChannel+0xd0>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80026ca:	680b      	ldr	r3, [r1, #0]
 80026cc:	4c24      	ldr	r4, [pc, #144]	; (8002760 <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
 80026ce:	b333      	cbz	r3, 800271e <HAL_ADCEx_MultiModeConfigChannel+0xa2>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80026d0:	68a3      	ldr	r3, [r4, #8]
 80026d2:	6848      	ldr	r0, [r1, #4]
 80026d4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80026d8:	4303      	orrs	r3, r0
 80026da:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
 80026de:	ea43 3340 	orr.w	r3, r3, r0, lsl #13
 80026e2:	60a3      	str	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026e4:	481d      	ldr	r0, [pc, #116]	; (800275c <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
 80026e6:	f7ff ffc1 	bl	800266c <LL_ADC_IsEnabled>
 80026ea:	4603      	mov	r3, r0
 80026ec:	481d      	ldr	r0, [pc, #116]	; (8002764 <HAL_ADCEx_MultiModeConfigChannel+0xe8>)
 80026ee:	f7ff ffbd 	bl	800266c <LL_ADC_IsEnabled>
 80026f2:	4303      	orrs	r3, r0
 80026f4:	481c      	ldr	r0, [pc, #112]	; (8002768 <HAL_ADCEx_MultiModeConfigChannel+0xec>)
 80026f6:	f7ff ffb9 	bl	800266c <LL_ADC_IsEnabled>
 80026fa:	4318      	orrs	r0, r3
 80026fc:	d004      	beq.n	8002708 <HAL_ADCEx_MultiModeConfigChannel+0x8c>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026fe:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8002700:	2300      	movs	r3, #0
 8002702:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
  return tmp_hal_status;
 8002706:	e7d4      	b.n	80026b2 <HAL_ADCEx_MultiModeConfigChannel+0x36>
        MODIFY_REG(tmpADC_Common->CCR,
 8002708:	680b      	ldr	r3, [r1, #0]
 800270a:	68a5      	ldr	r5, [r4, #8]
 800270c:	6889      	ldr	r1, [r1, #8]
 800270e:	430b      	orrs	r3, r1
 8002710:	f425 6171 	bic.w	r1, r5, #3856	; 0xf10
 8002714:	f021 010f 	bic.w	r1, r1, #15
 8002718:	430b      	orrs	r3, r1
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800271a:	60a3      	str	r3, [r4, #8]
 800271c:	e7f0      	b.n	8002700 <HAL_ADCEx_MultiModeConfigChannel+0x84>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800271e:	68a3      	ldr	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002720:	480e      	ldr	r0, [pc, #56]	; (800275c <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002722:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002726:	60a3      	str	r3, [r4, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002728:	f7ff ffa0 	bl	800266c <LL_ADC_IsEnabled>
 800272c:	4603      	mov	r3, r0
 800272e:	480d      	ldr	r0, [pc, #52]	; (8002764 <HAL_ADCEx_MultiModeConfigChannel+0xe8>)
 8002730:	f7ff ff9c 	bl	800266c <LL_ADC_IsEnabled>
 8002734:	4303      	orrs	r3, r0
 8002736:	480c      	ldr	r0, [pc, #48]	; (8002768 <HAL_ADCEx_MultiModeConfigChannel+0xec>)
 8002738:	f7ff ff98 	bl	800266c <LL_ADC_IsEnabled>
 800273c:	4318      	orrs	r0, r3
 800273e:	d1de      	bne.n	80026fe <HAL_ADCEx_MultiModeConfigChannel+0x82>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002740:	68a3      	ldr	r3, [r4, #8]
 8002742:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002746:	f023 030f 	bic.w	r3, r3, #15
 800274a:	e7e6      	b.n	800271a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800274c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800274e:	f043 0320 	orr.w	r3, r3, #32
 8002752:	6553      	str	r3, [r2, #84]	; 0x54
    tmp_hal_status = HAL_ERROR;
 8002754:	2001      	movs	r0, #1
 8002756:	e7d3      	b.n	8002700 <HAL_ADCEx_MultiModeConfigChannel+0x84>
  __HAL_LOCK(hadc);
 8002758:	2002      	movs	r0, #2
 800275a:	e7aa      	b.n	80026b2 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 800275c:	50040000 	.word	0x50040000
 8002760:	50040300 	.word	0x50040300
 8002764:	50040100 	.word	0x50040100
 8002768:	50040200 	.word	0x50040200

0800276c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800276c:	4a07      	ldr	r2, [pc, #28]	; (800278c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800276e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002770:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002774:	041b      	lsls	r3, r3, #16
 8002776:	0c1b      	lsrs	r3, r3, #16
 8002778:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800277c:	0200      	lsls	r0, r0, #8
 800277e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002782:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8002786:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8002788:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800278a:	4770      	bx	lr
 800278c:	e000ed00 	.word	0xe000ed00

08002790 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002790:	4b17      	ldr	r3, [pc, #92]	; (80027f0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002792:	b570      	push	{r4, r5, r6, lr}
 8002794:	68dc      	ldr	r4, [r3, #12]
 8002796:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800279a:	f1c4 0507 	rsb	r5, r4, #7
 800279e:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027a0:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027a4:	bf28      	it	cs
 80027a6:	2504      	movcs	r5, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a8:	f04f 36ff 	mov.w	r6, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027ac:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027ae:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027b2:	bf8c      	ite	hi
 80027b4:	3c03      	subhi	r4, #3
 80027b6:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b8:	ea21 0303 	bic.w	r3, r1, r3
 80027bc:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027be:	fa06 f404 	lsl.w	r4, r6, r4
 80027c2:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 80027c6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027c8:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027cc:	bfa8      	it	ge
 80027ce:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 80027d2:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d6:	bfbc      	itt	lt
 80027d8:	f000 000f 	andlt.w	r0, r0, #15
 80027dc:	4a05      	ldrlt	r2, [pc, #20]	; (80027f4 <HAL_NVIC_SetPriority+0x64>)
 80027de:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e0:	bfaa      	itet	ge
 80027e2:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e6:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e8:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80027ec:	bd70      	pop	{r4, r5, r6, pc}
 80027ee:	bf00      	nop
 80027f0:	e000ed00 	.word	0xe000ed00
 80027f4:	e000ed14 	.word	0xe000ed14

080027f8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80027f8:	2800      	cmp	r0, #0
 80027fa:	db08      	blt.n	800280e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027fc:	2301      	movs	r3, #1
 80027fe:	0942      	lsrs	r2, r0, #5
 8002800:	f000 001f 	and.w	r0, r0, #31
 8002804:	fa03 f000 	lsl.w	r0, r3, r0
 8002808:	4b01      	ldr	r3, [pc, #4]	; (8002810 <HAL_NVIC_EnableIRQ+0x18>)
 800280a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800280e:	4770      	bx	lr
 8002810:	e000e100 	.word	0xe000e100

08002814 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002814:	3801      	subs	r0, #1
 8002816:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800281a:	d20a      	bcs.n	8002832 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800281c:	4b06      	ldr	r3, [pc, #24]	; (8002838 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800281e:	4a07      	ldr	r2, [pc, #28]	; (800283c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002820:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002822:	21f0      	movs	r1, #240	; 0xf0
 8002824:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002828:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800282a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800282c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002832:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	e000e010 	.word	0xe000e010
 800283c:	e000ed00 	.word	0xe000ed00

08002840 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002840:	b530      	push	{r4, r5, lr}
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002842:	2800      	cmp	r0, #0
 8002844:	d058      	beq.n	80028f8 <HAL_DMA_Init+0xb8>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002846:	6801      	ldr	r1, [r0, #0]
 8002848:	4b2c      	ldr	r3, [pc, #176]	; (80028fc <HAL_DMA_Init+0xbc>)
 800284a:	4299      	cmp	r1, r3
 800284c:	f04f 0414 	mov.w	r4, #20
 8002850:	d842      	bhi.n	80028d8 <HAL_DMA_Init+0x98>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002852:	4a2b      	ldr	r2, [pc, #172]	; (8002900 <HAL_DMA_Init+0xc0>)
 8002854:	440a      	add	r2, r1
 8002856:	fbb2 f2f4 	udiv	r2, r2, r4
 800285a:	0092      	lsls	r2, r2, #2
 800285c:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800285e:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
 8002862:	6403      	str	r3, [r0, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002864:	2302      	movs	r3, #2
 8002866:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800286a:	e9d0 4302 	ldrd	r4, r3, [r0, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800286e:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 8002870:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 8002872:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002874:	432b      	orrs	r3, r5
 8002876:	6945      	ldr	r5, [r0, #20]
 8002878:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800287a:	6985      	ldr	r5, [r0, #24]
 800287c:	432b      	orrs	r3, r5
 800287e:	69c5      	ldr	r5, [r0, #28]
 8002880:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8002882:	6a05      	ldr	r5, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002884:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8002888:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 800288c:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 800288e:	4313      	orrs	r3, r2
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002890:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
  hdma->Instance->CCR = tmp;
 8002894:	600b      	str	r3, [r1, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002896:	d016      	beq.n	80028c6 <HAL_DMA_Init+0x86>
 8002898:	6c41      	ldr	r1, [r0, #68]	; 0x44
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800289a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800289c:	f001 021c 	and.w	r2, r1, #28
 80028a0:	6841      	ldr	r1, [r0, #4]
 80028a2:	230f      	movs	r3, #15
 80028a4:	4093      	lsls	r3, r2
 80028a6:	4091      	lsls	r1, r2
 80028a8:	4a16      	ldr	r2, [pc, #88]	; (8002904 <HAL_DMA_Init+0xc4>)
 80028aa:	4294      	cmp	r4, r2
 80028ac:	ea6f 0303 	mvn.w	r3, r3
 80028b0:	d11a      	bne.n	80028e8 <HAL_DMA_Init+0xa8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80028b2:	f8d2 40a8 	ldr.w	r4, [r2, #168]	; 0xa8
 80028b6:	4023      	ands	r3, r4
 80028b8:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80028bc:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
 80028c0:	4319      	orrs	r1, r3
 80028c2:	f8c2 10a8 	str.w	r1, [r2, #168]	; 0xa8
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028c6:	2300      	movs	r3, #0

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80028c8:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028ca:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80028cc:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State = HAL_DMA_STATE_READY;
 80028d0:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

  return HAL_OK;
 80028d4:	4618      	mov	r0, r3
}
 80028d6:	bd30      	pop	{r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80028d8:	4b0b      	ldr	r3, [pc, #44]	; (8002908 <HAL_DMA_Init+0xc8>)
 80028da:	440b      	add	r3, r1
 80028dc:	fbb3 f3f4 	udiv	r3, r3, r4
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80028e4:	4b09      	ldr	r3, [pc, #36]	; (800290c <HAL_DMA_Init+0xcc>)
 80028e6:	e7bc      	b.n	8002862 <HAL_DMA_Init+0x22>
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80028e8:	4a09      	ldr	r2, [pc, #36]	; (8002910 <HAL_DMA_Init+0xd0>)
 80028ea:	6814      	ldr	r4, [r2, #0]
 80028ec:	4023      	ands	r3, r4
 80028ee:	6013      	str	r3, [r2, #0]
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80028f0:	6813      	ldr	r3, [r2, #0]
 80028f2:	4319      	orrs	r1, r3
 80028f4:	6011      	str	r1, [r2, #0]
 80028f6:	e7e6      	b.n	80028c6 <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 80028f8:	2001      	movs	r0, #1
 80028fa:	e7ec      	b.n	80028d6 <HAL_DMA_Init+0x96>
 80028fc:	40020407 	.word	0x40020407
 8002900:	bffdfff8 	.word	0xbffdfff8
 8002904:	40020000 	.word	0x40020000
 8002908:	bffdfbf8 	.word	0xbffdfbf8
 800290c:	40020400 	.word	0x40020400
 8002910:	400204a8 	.word	0x400204a8

08002914 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002914:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002916:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 800291a:	2c01      	cmp	r4, #1
 800291c:	d038      	beq.n	8002990 <HAL_DMA_Start_IT+0x7c>

  if(HAL_DMA_STATE_READY == hdma->State)
 800291e:	f890 5025 	ldrb.w	r5, [r0, #37]	; 0x25
  __HAL_LOCK(hdma);
 8002922:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8002924:	b2ed      	uxtb	r5, r5
 8002926:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 8002928:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
 800292c:	f04f 0600 	mov.w	r6, #0
 8002930:	f04f 0402 	mov.w	r4, #2
  if(HAL_DMA_STATE_READY == hdma->State)
 8002934:	d12a      	bne.n	800298c <HAL_DMA_Start_IT+0x78>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002936:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800293a:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800293c:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 800293e:	6826      	ldr	r6, [r4, #0]
 8002940:	f026 0601 	bic.w	r6, r6, #1
 8002944:	6026      	str	r6, [r4, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002946:	e9d0 7610 	ldrd	r7, r6, [r0, #64]	; 0x40
 800294a:	f006 061c 	and.w	r6, r6, #28
 800294e:	40b5      	lsls	r5, r6
 8002950:	607d      	str	r5, [r7, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002952:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002954:	6883      	ldr	r3, [r0, #8]
 8002956:	6805      	ldr	r5, [r0, #0]
 8002958:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 800295a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800295c:	bf0b      	itete	eq
 800295e:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002960:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002962:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002964:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8002966:	b14b      	cbz	r3, 800297c <HAL_DMA_Start_IT+0x68>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002968:	6823      	ldr	r3, [r4, #0]
 800296a:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800296e:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8002970:	682b      	ldr	r3, [r5, #0]
 8002972:	f043 0301 	orr.w	r3, r3, #1
 8002976:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002978:	2000      	movs	r0, #0
}
 800297a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800297c:	6823      	ldr	r3, [r4, #0]
 800297e:	f023 0304 	bic.w	r3, r3, #4
 8002982:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002984:	6823      	ldr	r3, [r4, #0]
 8002986:	f043 030a 	orr.w	r3, r3, #10
 800298a:	e7f0      	b.n	800296e <HAL_DMA_Start_IT+0x5a>
    __HAL_UNLOCK(hdma);
 800298c:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 8002990:	2002      	movs	r0, #2
 8002992:	e7f2      	b.n	800297a <HAL_DMA_Start_IT+0x66>

08002994 <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002994:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002996:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 8002998:	6803      	ldr	r3, [r0, #0]
{
 800299a:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800299c:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80029a0:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80029a2:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80029a4:	2404      	movs	r4, #4
 80029a6:	4094      	lsls	r4, r2
 80029a8:	4234      	tst	r4, r6
 80029aa:	d00e      	beq.n	80029ca <HAL_DMA_IRQHandler+0x36>
 80029ac:	f015 0f04 	tst.w	r5, #4
 80029b0:	d00b      	beq.n	80029ca <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	0692      	lsls	r2, r2, #26
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029b6:	bf5e      	ittt	pl
 80029b8:	681a      	ldrpl	r2, [r3, #0]
 80029ba:	f022 0204 	bicpl.w	r2, r2, #4
 80029be:	601a      	strpl	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 80029c0:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80029c2:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 80029c4:	b373      	cbz	r3, 8002a24 <HAL_DMA_IRQHandler+0x90>
}
 80029c6:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80029c8:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80029ca:	2402      	movs	r4, #2
 80029cc:	4094      	lsls	r4, r2
 80029ce:	4234      	tst	r4, r6
 80029d0:	d012      	beq.n	80029f8 <HAL_DMA_IRQHandler+0x64>
 80029d2:	f015 0f02 	tst.w	r5, #2
 80029d6:	d00f      	beq.n	80029f8 <HAL_DMA_IRQHandler+0x64>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	0695      	lsls	r5, r2, #26
 80029dc:	d406      	bmi.n	80029ec <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	f022 020a 	bic.w	r2, r2, #10
 80029e4:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80029e6:	2301      	movs	r3, #1
 80029e8:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80029ec:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80029ee:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 80029f0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 80029f4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80029f6:	e7e5      	b.n	80029c4 <HAL_DMA_IRQHandler+0x30>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80029f8:	2408      	movs	r4, #8
 80029fa:	4094      	lsls	r4, r2
 80029fc:	4234      	tst	r4, r6
 80029fe:	d011      	beq.n	8002a24 <HAL_DMA_IRQHandler+0x90>
 8002a00:	072c      	lsls	r4, r5, #28
 8002a02:	d50f      	bpl.n	8002a24 <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a04:	681c      	ldr	r4, [r3, #0]
 8002a06:	f024 040e 	bic.w	r4, r4, #14
 8002a0a:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	fa03 f202 	lsl.w	r2, r3, r2
 8002a12:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a14:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8002a16:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8002a20:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002a22:	e7cf      	b.n	80029c4 <HAL_DMA_IRQHandler+0x30>
}
 8002a24:	bc70      	pop	{r4, r5, r6}
 8002a26:	4770      	bx	lr

08002a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a2c:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a2e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a30:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8002bdc <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002a34:	4c67      	ldr	r4, [pc, #412]	; (8002bd4 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a36:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 8002a38:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a3a:	9a01      	ldr	r2, [sp, #4]
 8002a3c:	40da      	lsrs	r2, r3
 8002a3e:	d102      	bne.n	8002a46 <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 8002a40:	b005      	add	sp, #20
 8002a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a46:	f04f 0a01 	mov.w	sl, #1
    if (iocurrent != 0x00u)
 8002a4a:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a4c:	fa0a fa03 	lsl.w	sl, sl, r3
    if (iocurrent != 0x00u)
 8002a50:	ea1a 0c02 	ands.w	ip, sl, r2
 8002a54:	f000 80af 	beq.w	8002bb6 <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a58:	684a      	ldr	r2, [r1, #4]
 8002a5a:	f022 0e10 	bic.w	lr, r2, #16
 8002a5e:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8002a62:	2503      	movs	r5, #3
 8002a64:	f10e 36ff 	add.w	r6, lr, #4294967295
 8002a68:	fa05 f508 	lsl.w	r5, r5, r8
 8002a6c:	2e01      	cmp	r6, #1
 8002a6e:	ea6f 0505 	mvn.w	r5, r5
 8002a72:	d80e      	bhi.n	8002a92 <HAL_GPIO_Init+0x6a>
        temp = GPIOx->OSPEEDR;
 8002a74:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a76:	68cf      	ldr	r7, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a78:	402e      	ands	r6, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a7a:	fa07 f708 	lsl.w	r7, r7, r8
 8002a7e:	4337      	orrs	r7, r6
        GPIOx->OSPEEDR = temp;
 8002a80:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002a82:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002a84:	f3c2 1600 	ubfx	r6, r2, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a88:	ea27 070a 	bic.w	r7, r7, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002a8c:	409e      	lsls	r6, r3
 8002a8e:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8002a90:	6046      	str	r6, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002a92:	f002 0603 	and.w	r6, r2, #3
 8002a96:	2e03      	cmp	r6, #3
 8002a98:	d108      	bne.n	8002aac <HAL_GPIO_Init+0x84>
        temp = GPIOx->ASCR;
 8002a9a:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002a9c:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002aa0:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 8002aa4:	409f      	lsls	r7, r3
 8002aa6:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->ASCR = temp;
 8002aaa:	62c7      	str	r7, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8002aac:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002aae:	ea07 0a05 	and.w	sl, r7, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002ab2:	688f      	ldr	r7, [r1, #8]
 8002ab4:	fa07 f708 	lsl.w	r7, r7, r8
 8002ab8:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002abc:	f1be 0f02 	cmp.w	lr, #2
      GPIOx->PUPDR = temp;
 8002ac0:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ac2:	d116      	bne.n	8002af2 <HAL_GPIO_Init+0xca>
        temp = GPIOx->AFR[position >> 3u];
 8002ac4:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8002ac8:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002acc:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8002ad0:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ad4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8002ad8:	f04f 0e0f 	mov.w	lr, #15
 8002adc:	fa0e fe0b 	lsl.w	lr, lr, fp
 8002ae0:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ae4:	690f      	ldr	r7, [r1, #16]
 8002ae6:	fa07 f70b 	lsl.w	r7, r7, fp
 8002aea:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3u] = temp;
 8002aee:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8002af2:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002af4:	fa06 f608 	lsl.w	r6, r6, r8
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002af8:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002afa:	4335      	orrs	r5, r6
      GPIOx->MODER = temp;
 8002afc:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002afe:	00d5      	lsls	r5, r2, #3
 8002b00:	d559      	bpl.n	8002bb6 <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b02:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 8002b06:	f045 0501 	orr.w	r5, r5, #1
 8002b0a:	f8c9 5060 	str.w	r5, [r9, #96]	; 0x60
 8002b0e:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 8002b12:	f023 0603 	bic.w	r6, r3, #3
 8002b16:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8002b1a:	f005 0501 	and.w	r5, r5, #1
 8002b1e:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8002b22:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b24:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b28:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002b2a:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b2c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002b30:	270f      	movs	r7, #15
 8002b32:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b36:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b3a:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b3e:	d03c      	beq.n	8002bba <HAL_GPIO_Init+0x192>
 8002b40:	4d25      	ldr	r5, [pc, #148]	; (8002bd8 <HAL_GPIO_Init+0x1b0>)
 8002b42:	42a8      	cmp	r0, r5
 8002b44:	d03b      	beq.n	8002bbe <HAL_GPIO_Init+0x196>
 8002b46:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002b4a:	42a8      	cmp	r0, r5
 8002b4c:	d039      	beq.n	8002bc2 <HAL_GPIO_Init+0x19a>
 8002b4e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002b52:	42a8      	cmp	r0, r5
 8002b54:	d037      	beq.n	8002bc6 <HAL_GPIO_Init+0x19e>
 8002b56:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002b5a:	42a8      	cmp	r0, r5
 8002b5c:	d035      	beq.n	8002bca <HAL_GPIO_Init+0x1a2>
 8002b5e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002b62:	42a8      	cmp	r0, r5
 8002b64:	d033      	beq.n	8002bce <HAL_GPIO_Init+0x1a6>
 8002b66:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002b6a:	42a8      	cmp	r0, r5
 8002b6c:	bf14      	ite	ne
 8002b6e:	2507      	movne	r5, #7
 8002b70:	2506      	moveq	r5, #6
 8002b72:	fa05 f50e 	lsl.w	r5, r5, lr
 8002b76:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b78:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 8002b7a:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8002b7c:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b80:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 8002b82:	bf54      	ite	pl
 8002b84:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8002b86:	ea4c 0505 	orrmi.w	r5, ip, r5
        EXTI->IMR1 = temp;
 8002b8a:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 8002b8c:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b8e:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 8002b90:	bf54      	ite	pl
 8002b92:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8002b94:	ea4c 0505 	orrmi.w	r5, ip, r5
        EXTI->EMR1 = temp;
 8002b98:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 8002b9a:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b9c:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 8002b9e:	bf54      	ite	pl
 8002ba0:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8002ba2:	ea4c 0505 	orrmi.w	r5, ip, r5
        EXTI->RTSR1 = temp;
 8002ba6:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8002ba8:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002baa:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 8002bac:	bf54      	ite	pl
 8002bae:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8002bb0:	ea4c 0505 	orrmi.w	r5, ip, r5
        EXTI->FTSR1 = temp;
 8002bb4:	60e5      	str	r5, [r4, #12]
    position++;
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	e73f      	b.n	8002a3a <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002bba:	2500      	movs	r5, #0
 8002bbc:	e7d9      	b.n	8002b72 <HAL_GPIO_Init+0x14a>
 8002bbe:	2501      	movs	r5, #1
 8002bc0:	e7d7      	b.n	8002b72 <HAL_GPIO_Init+0x14a>
 8002bc2:	2502      	movs	r5, #2
 8002bc4:	e7d5      	b.n	8002b72 <HAL_GPIO_Init+0x14a>
 8002bc6:	2503      	movs	r5, #3
 8002bc8:	e7d3      	b.n	8002b72 <HAL_GPIO_Init+0x14a>
 8002bca:	2504      	movs	r5, #4
 8002bcc:	e7d1      	b.n	8002b72 <HAL_GPIO_Init+0x14a>
 8002bce:	2505      	movs	r5, #5
 8002bd0:	e7cf      	b.n	8002b72 <HAL_GPIO_Init+0x14a>
 8002bd2:	bf00      	nop
 8002bd4:	40010400 	.word	0x40010400
 8002bd8:	48000400 	.word	0x48000400
 8002bdc:	40021000 	.word	0x40021000

08002be0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002be0:	6903      	ldr	r3, [r0, #16]
 8002be2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002be4:	bf14      	ite	ne
 8002be6:	2001      	movne	r0, #1
 8002be8:	2000      	moveq	r0, #0
 8002bea:	4770      	bx	lr

08002bec <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bec:	b10a      	cbz	r2, 8002bf2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bee:	6181      	str	r1, [r0, #24]
 8002bf0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002bf2:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8002bf4:	4770      	bx	lr
	...

08002bf8 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002bf8:	4b02      	ldr	r3, [pc, #8]	; (8002c04 <HAL_PWREx_GetVoltageRange+0xc>)
 8002bfa:	6818      	ldr	r0, [r3, #0]
#endif
}
 8002bfc:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	40007000 	.word	0x40007000

08002c08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c08:	4b17      	ldr	r3, [pc, #92]	; (8002c68 <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c0a:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c0c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c10:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c14:	d11c      	bne.n	8002c50 <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c16:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002c1a:	d015      	beq.n	8002c48 <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8002c22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c26:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c28:	4a10      	ldr	r2, [pc, #64]	; (8002c6c <HAL_PWREx_ControlVoltageScaling+0x64>)
 8002c2a:	6811      	ldr	r1, [r2, #0]
 8002c2c:	2232      	movs	r2, #50	; 0x32
 8002c2e:	434a      	muls	r2, r1
 8002c30:	490f      	ldr	r1, [pc, #60]	; (8002c70 <HAL_PWREx_ControlVoltageScaling+0x68>)
 8002c32:	fbb2 f2f1 	udiv	r2, r2, r1
 8002c36:	4619      	mov	r1, r3
 8002c38:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c3a:	6958      	ldr	r0, [r3, #20]
 8002c3c:	0540      	lsls	r0, r0, #21
 8002c3e:	d500      	bpl.n	8002c42 <HAL_PWREx_ControlVoltageScaling+0x3a>
 8002c40:	b922      	cbnz	r2, 8002c4c <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c42:	694b      	ldr	r3, [r1, #20]
 8002c44:	055b      	lsls	r3, r3, #21
 8002c46:	d40d      	bmi.n	8002c64 <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c48:	2000      	movs	r0, #0
 8002c4a:	4770      	bx	lr
        wait_loop_index--;
 8002c4c:	3a01      	subs	r2, #1
 8002c4e:	e7f4      	b.n	8002c3a <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c50:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c54:	bf1f      	itttt	ne
 8002c56:	681a      	ldrne	r2, [r3, #0]
 8002c58:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8002c5c:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8002c60:	601a      	strne	r2, [r3, #0]
 8002c62:	e7f1      	b.n	8002c48 <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 8002c64:	2003      	movs	r0, #3
}
 8002c66:	4770      	bx	lr
 8002c68:	40007000 	.word	0x40007000
 8002c6c:	20000000 	.word	0x20000000
 8002c70:	000f4240 	.word	0x000f4240

08002c74 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c74:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c76:	4d1e      	ldr	r5, [pc, #120]	; (8002cf0 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8002c78:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002c7a:	00da      	lsls	r2, r3, #3
{
 8002c7c:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c7e:	d518      	bpl.n	8002cb2 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c80:	f7ff ffba 	bl	8002bf8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c84:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002c88:	d123      	bne.n	8002cd2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c8a:	2c80      	cmp	r4, #128	; 0x80
 8002c8c:	d929      	bls.n	8002ce2 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c8e:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c90:	bf8c      	ite	hi
 8002c92:	2002      	movhi	r0, #2
 8002c94:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c96:	4a17      	ldr	r2, [pc, #92]	; (8002cf4 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8002c98:	6813      	ldr	r3, [r2, #0]
 8002c9a:	f023 0307 	bic.w	r3, r3, #7
 8002c9e:	4303      	orrs	r3, r0
 8002ca0:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ca2:	6813      	ldr	r3, [r2, #0]
 8002ca4:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8002ca8:	1a18      	subs	r0, r3, r0
 8002caa:	bf18      	it	ne
 8002cac:	2001      	movne	r0, #1
 8002cae:	b003      	add	sp, #12
 8002cb0:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8002cb2:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cb8:	65ab      	str	r3, [r5, #88]	; 0x58
 8002cba:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc0:	9301      	str	r3, [sp, #4]
 8002cc2:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8002cc4:	f7ff ff98 	bl	8002bf8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8002cc8:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002cca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cce:	65ab      	str	r3, [r5, #88]	; 0x58
 8002cd0:	e7d8      	b.n	8002c84 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8002cd2:	2c80      	cmp	r4, #128	; 0x80
 8002cd4:	d807      	bhi.n	8002ce6 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8002cd6:	d008      	beq.n	8002cea <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8002cd8:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8002cdc:	4258      	negs	r0, r3
 8002cde:	4158      	adcs	r0, r3
 8002ce0:	e7d9      	b.n	8002c96 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ce2:	2000      	movs	r0, #0
 8002ce4:	e7d7      	b.n	8002c96 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8002ce6:	2003      	movs	r0, #3
 8002ce8:	e7d5      	b.n	8002c96 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8002cea:	2002      	movs	r0, #2
 8002cec:	e7d3      	b.n	8002c96 <RCC_SetFlashLatencyFromMSIRange+0x22>
 8002cee:	bf00      	nop
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	40022000 	.word	0x40022000

08002cf8 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cf8:	4b22      	ldr	r3, [pc, #136]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x8c>)
 8002cfa:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cfc:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002cfe:	f012 020c 	ands.w	r2, r2, #12
 8002d02:	d005      	beq.n	8002d10 <HAL_RCC_GetSysClockFreq+0x18>
 8002d04:	2a0c      	cmp	r2, #12
 8002d06:	d115      	bne.n	8002d34 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d08:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d0c:	2901      	cmp	r1, #1
 8002d0e:	d118      	bne.n	8002d42 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d10:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8002d12:	481d      	ldr	r0, [pc, #116]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d14:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d16:	bf55      	itete	pl
 8002d18:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d1c:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d1e:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d22:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8002d26:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d2a:	b34a      	cbz	r2, 8002d80 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002d2c:	2a0c      	cmp	r2, #12
 8002d2e:	d009      	beq.n	8002d44 <HAL_RCC_GetSysClockFreq+0x4c>
 8002d30:	2000      	movs	r0, #0
  return sysclockfreq;
 8002d32:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d34:	2a04      	cmp	r2, #4
 8002d36:	d022      	beq.n	8002d7e <HAL_RCC_GetSysClockFreq+0x86>
 8002d38:	2a08      	cmp	r2, #8
 8002d3a:	4814      	ldr	r0, [pc, #80]	; (8002d8c <HAL_RCC_GetSysClockFreq+0x94>)
 8002d3c:	bf18      	it	ne
 8002d3e:	2000      	movne	r0, #0
 8002d40:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d42:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d44:	68da      	ldr	r2, [r3, #12]
 8002d46:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8002d4a:	2a02      	cmp	r2, #2
 8002d4c:	d015      	beq.n	8002d7a <HAL_RCC_GetSysClockFreq+0x82>
      pllvco = HSE_VALUE;
 8002d4e:	490f      	ldr	r1, [pc, #60]	; (8002d8c <HAL_RCC_GetSysClockFreq+0x94>)
 8002d50:	2a03      	cmp	r2, #3
 8002d52:	bf08      	it	eq
 8002d54:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d56:	68da      	ldr	r2, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d58:	68d9      	ldr	r1, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d60:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d64:	f3c2 1202 	ubfx	r2, r2, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d68:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d6a:	4348      	muls	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d6c:	3201      	adds	r2, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d6e:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d70:	fbb0 f0f2 	udiv	r0, r0, r2
    sysclockfreq = pllvco / pllr;
 8002d74:	fbb0 f0f3 	udiv	r0, r0, r3
 8002d78:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8002d7a:	4805      	ldr	r0, [pc, #20]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d7c:	e7eb      	b.n	8002d56 <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8002d7e:	4804      	ldr	r0, [pc, #16]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	40021000 	.word	0x40021000
 8002d88:	08007344 	.word	0x08007344
 8002d8c:	007a1200 	.word	0x007a1200
 8002d90:	00f42400 	.word	0x00f42400

08002d94 <HAL_RCC_OscConfig>:
{
 8002d94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8002d98:	4605      	mov	r5, r0
 8002d9a:	b918      	cbnz	r0, 8002da4 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8002d9c:	2001      	movs	r0, #1
}
 8002d9e:	b003      	add	sp, #12
 8002da0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002da4:	4ca7      	ldr	r4, [pc, #668]	; (8003044 <HAL_RCC_OscConfig+0x2b0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002da6:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002da8:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002daa:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002dac:	06d8      	lsls	r0, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dae:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002db2:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002db6:	d53d      	bpl.n	8002e34 <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002db8:	b11e      	cbz	r6, 8002dc2 <HAL_RCC_OscConfig+0x2e>
 8002dba:	2e0c      	cmp	r6, #12
 8002dbc:	d166      	bne.n	8002e8c <HAL_RCC_OscConfig+0xf8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002dbe:	2f01      	cmp	r7, #1
 8002dc0:	d164      	bne.n	8002e8c <HAL_RCC_OscConfig+0xf8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002dc2:	6823      	ldr	r3, [r4, #0]
 8002dc4:	0799      	lsls	r1, r3, #30
 8002dc6:	d502      	bpl.n	8002dce <HAL_RCC_OscConfig+0x3a>
 8002dc8:	69ab      	ldr	r3, [r5, #24]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d0e6      	beq.n	8002d9c <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002dce:	6823      	ldr	r3, [r4, #0]
 8002dd0:	6a28      	ldr	r0, [r5, #32]
 8002dd2:	071a      	lsls	r2, r3, #28
 8002dd4:	bf56      	itet	pl
 8002dd6:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8002dda:	6823      	ldrmi	r3, [r4, #0]
 8002ddc:	091b      	lsrpl	r3, r3, #4
 8002dde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002de2:	4298      	cmp	r0, r3
 8002de4:	d93b      	bls.n	8002e5e <HAL_RCC_OscConfig+0xca>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002de6:	f7ff ff45 	bl	8002c74 <RCC_SetFlashLatencyFromMSIRange>
 8002dea:	2800      	cmp	r0, #0
 8002dec:	d1d6      	bne.n	8002d9c <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dee:	6823      	ldr	r3, [r4, #0]
 8002df0:	f043 0308 	orr.w	r3, r3, #8
 8002df4:	6023      	str	r3, [r4, #0]
 8002df6:	6823      	ldr	r3, [r4, #0]
 8002df8:	6a2a      	ldr	r2, [r5, #32]
 8002dfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e02:	6863      	ldr	r3, [r4, #4]
 8002e04:	69ea      	ldr	r2, [r5, #28]
 8002e06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e0a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002e0e:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e10:	f7ff ff72 	bl	8002cf8 <HAL_RCC_GetSysClockFreq>
 8002e14:	68a3      	ldr	r3, [r4, #8]
 8002e16:	4a8c      	ldr	r2, [pc, #560]	; (8003048 <HAL_RCC_OscConfig+0x2b4>)
 8002e18:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002e1c:	5cd3      	ldrb	r3, [r2, r3]
 8002e1e:	f003 031f 	and.w	r3, r3, #31
 8002e22:	40d8      	lsrs	r0, r3
 8002e24:	4b89      	ldr	r3, [pc, #548]	; (800304c <HAL_RCC_OscConfig+0x2b8>)
 8002e26:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8002e28:	4b89      	ldr	r3, [pc, #548]	; (8003050 <HAL_RCC_OscConfig+0x2bc>)
 8002e2a:	6818      	ldr	r0, [r3, #0]
 8002e2c:	f7fe ff50 	bl	8001cd0 <HAL_InitTick>
        if(status != HAL_OK)
 8002e30:	2800      	cmp	r0, #0
 8002e32:	d1b4      	bne.n	8002d9e <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e34:	682b      	ldr	r3, [r5, #0]
 8002e36:	07d9      	lsls	r1, r3, #31
 8002e38:	d45f      	bmi.n	8002efa <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e3a:	682b      	ldr	r3, [r5, #0]
 8002e3c:	079a      	lsls	r2, r3, #30
 8002e3e:	f100 809e 	bmi.w	8002f7e <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e42:	682b      	ldr	r3, [r5, #0]
 8002e44:	0719      	lsls	r1, r3, #28
 8002e46:	f100 80d2 	bmi.w	8002fee <HAL_RCC_OscConfig+0x25a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e4a:	682b      	ldr	r3, [r5, #0]
 8002e4c:	075a      	lsls	r2, r3, #29
 8002e4e:	f100 8101 	bmi.w	8003054 <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e52:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f040 816a 	bne.w	800312e <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8002e5a:	2000      	movs	r0, #0
 8002e5c:	e79f      	b.n	8002d9e <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e5e:	6823      	ldr	r3, [r4, #0]
 8002e60:	f043 0308 	orr.w	r3, r3, #8
 8002e64:	6023      	str	r3, [r4, #0]
 8002e66:	6823      	ldr	r3, [r4, #0]
 8002e68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e6c:	4303      	orrs	r3, r0
 8002e6e:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e70:	6863      	ldr	r3, [r4, #4]
 8002e72:	69ea      	ldr	r2, [r5, #28]
 8002e74:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e78:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002e7c:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e7e:	2e00      	cmp	r6, #0
 8002e80:	d1c6      	bne.n	8002e10 <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e82:	f7ff fef7 	bl	8002c74 <RCC_SetFlashLatencyFromMSIRange>
 8002e86:	2800      	cmp	r0, #0
 8002e88:	d0c2      	beq.n	8002e10 <HAL_RCC_OscConfig+0x7c>
 8002e8a:	e787      	b.n	8002d9c <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e8c:	69ab      	ldr	r3, [r5, #24]
 8002e8e:	b31b      	cbz	r3, 8002ed8 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_MSI_ENABLE();
 8002e90:	6823      	ldr	r3, [r4, #0]
 8002e92:	f043 0301 	orr.w	r3, r3, #1
 8002e96:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002e98:	f7fe ff62 	bl	8001d60 <HAL_GetTick>
 8002e9c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e9e:	6823      	ldr	r3, [r4, #0]
 8002ea0:	079b      	lsls	r3, r3, #30
 8002ea2:	d511      	bpl.n	8002ec8 <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ea4:	6823      	ldr	r3, [r4, #0]
 8002ea6:	f043 0308 	orr.w	r3, r3, #8
 8002eaa:	6023      	str	r3, [r4, #0]
 8002eac:	6823      	ldr	r3, [r4, #0]
 8002eae:	6a2a      	ldr	r2, [r5, #32]
 8002eb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002eb8:	6863      	ldr	r3, [r4, #4]
 8002eba:	69ea      	ldr	r2, [r5, #28]
 8002ebc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ec0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002ec4:	6063      	str	r3, [r4, #4]
 8002ec6:	e7b5      	b.n	8002e34 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ec8:	f7fe ff4a 	bl	8001d60 <HAL_GetTick>
 8002ecc:	eba0 0008 	sub.w	r0, r0, r8
 8002ed0:	2802      	cmp	r0, #2
 8002ed2:	d9e4      	bls.n	8002e9e <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 8002ed4:	2003      	movs	r0, #3
 8002ed6:	e762      	b.n	8002d9e <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8002ed8:	6823      	ldr	r3, [r4, #0]
 8002eda:	f023 0301 	bic.w	r3, r3, #1
 8002ede:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002ee0:	f7fe ff3e 	bl	8001d60 <HAL_GetTick>
 8002ee4:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ee6:	6823      	ldr	r3, [r4, #0]
 8002ee8:	0798      	lsls	r0, r3, #30
 8002eea:	d5a3      	bpl.n	8002e34 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002eec:	f7fe ff38 	bl	8001d60 <HAL_GetTick>
 8002ef0:	eba0 0008 	sub.w	r0, r0, r8
 8002ef4:	2802      	cmp	r0, #2
 8002ef6:	d9f6      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x152>
 8002ef8:	e7ec      	b.n	8002ed4 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002efa:	2e08      	cmp	r6, #8
 8002efc:	d003      	beq.n	8002f06 <HAL_RCC_OscConfig+0x172>
 8002efe:	2e0c      	cmp	r6, #12
 8002f00:	d108      	bne.n	8002f14 <HAL_RCC_OscConfig+0x180>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f02:	2f03      	cmp	r7, #3
 8002f04:	d106      	bne.n	8002f14 <HAL_RCC_OscConfig+0x180>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f06:	6823      	ldr	r3, [r4, #0]
 8002f08:	039b      	lsls	r3, r3, #14
 8002f0a:	d596      	bpl.n	8002e3a <HAL_RCC_OscConfig+0xa6>
 8002f0c:	686b      	ldr	r3, [r5, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d193      	bne.n	8002e3a <HAL_RCC_OscConfig+0xa6>
 8002f12:	e743      	b.n	8002d9c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f14:	686b      	ldr	r3, [r5, #4]
 8002f16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f1a:	d110      	bne.n	8002f3e <HAL_RCC_OscConfig+0x1aa>
 8002f1c:	6823      	ldr	r3, [r4, #0]
 8002f1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f22:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002f24:	f7fe ff1c 	bl	8001d60 <HAL_GetTick>
 8002f28:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f2a:	6823      	ldr	r3, [r4, #0]
 8002f2c:	0398      	lsls	r0, r3, #14
 8002f2e:	d484      	bmi.n	8002e3a <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f30:	f7fe ff16 	bl	8001d60 <HAL_GetTick>
 8002f34:	eba0 0008 	sub.w	r0, r0, r8
 8002f38:	2864      	cmp	r0, #100	; 0x64
 8002f3a:	d9f6      	bls.n	8002f2a <HAL_RCC_OscConfig+0x196>
 8002f3c:	e7ca      	b.n	8002ed4 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f42:	d104      	bne.n	8002f4e <HAL_RCC_OscConfig+0x1ba>
 8002f44:	6823      	ldr	r3, [r4, #0]
 8002f46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f4a:	6023      	str	r3, [r4, #0]
 8002f4c:	e7e6      	b.n	8002f1c <HAL_RCC_OscConfig+0x188>
 8002f4e:	6822      	ldr	r2, [r4, #0]
 8002f50:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002f54:	6022      	str	r2, [r4, #0]
 8002f56:	6822      	ldr	r2, [r4, #0]
 8002f58:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f5c:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1e0      	bne.n	8002f24 <HAL_RCC_OscConfig+0x190>
        tickstart = HAL_GetTick();
 8002f62:	f7fe fefd 	bl	8001d60 <HAL_GetTick>
 8002f66:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f68:	6823      	ldr	r3, [r4, #0]
 8002f6a:	0399      	lsls	r1, r3, #14
 8002f6c:	f57f af65 	bpl.w	8002e3a <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f70:	f7fe fef6 	bl	8001d60 <HAL_GetTick>
 8002f74:	eba0 0008 	sub.w	r0, r0, r8
 8002f78:	2864      	cmp	r0, #100	; 0x64
 8002f7a:	d9f5      	bls.n	8002f68 <HAL_RCC_OscConfig+0x1d4>
 8002f7c:	e7aa      	b.n	8002ed4 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002f7e:	2e04      	cmp	r6, #4
 8002f80:	d003      	beq.n	8002f8a <HAL_RCC_OscConfig+0x1f6>
 8002f82:	2e0c      	cmp	r6, #12
 8002f84:	d110      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f86:	2f02      	cmp	r7, #2
 8002f88:	d10e      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f8a:	6823      	ldr	r3, [r4, #0]
 8002f8c:	055a      	lsls	r2, r3, #21
 8002f8e:	d503      	bpl.n	8002f98 <HAL_RCC_OscConfig+0x204>
 8002f90:	68eb      	ldr	r3, [r5, #12]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	f43f af02 	beq.w	8002d9c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f98:	6863      	ldr	r3, [r4, #4]
 8002f9a:	692a      	ldr	r2, [r5, #16]
 8002f9c:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8002fa0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002fa4:	6063      	str	r3, [r4, #4]
 8002fa6:	e74c      	b.n	8002e42 <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fa8:	68eb      	ldr	r3, [r5, #12]
 8002faa:	b17b      	cbz	r3, 8002fcc <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8002fac:	6823      	ldr	r3, [r4, #0]
 8002fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fb2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002fb4:	f7fe fed4 	bl	8001d60 <HAL_GetTick>
 8002fb8:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fba:	6823      	ldr	r3, [r4, #0]
 8002fbc:	055b      	lsls	r3, r3, #21
 8002fbe:	d4eb      	bmi.n	8002f98 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fc0:	f7fe fece 	bl	8001d60 <HAL_GetTick>
 8002fc4:	1bc0      	subs	r0, r0, r7
 8002fc6:	2802      	cmp	r0, #2
 8002fc8:	d9f7      	bls.n	8002fba <HAL_RCC_OscConfig+0x226>
 8002fca:	e783      	b.n	8002ed4 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8002fcc:	6823      	ldr	r3, [r4, #0]
 8002fce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fd2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002fd4:	f7fe fec4 	bl	8001d60 <HAL_GetTick>
 8002fd8:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fda:	6823      	ldr	r3, [r4, #0]
 8002fdc:	0558      	lsls	r0, r3, #21
 8002fde:	f57f af30 	bpl.w	8002e42 <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fe2:	f7fe febd 	bl	8001d60 <HAL_GetTick>
 8002fe6:	1bc0      	subs	r0, r0, r7
 8002fe8:	2802      	cmp	r0, #2
 8002fea:	d9f6      	bls.n	8002fda <HAL_RCC_OscConfig+0x246>
 8002fec:	e772      	b.n	8002ed4 <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fee:	696b      	ldr	r3, [r5, #20]
 8002ff0:	b19b      	cbz	r3, 800301a <HAL_RCC_OscConfig+0x286>
      __HAL_RCC_LSI_ENABLE();
 8002ff2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002ff6:	f043 0301 	orr.w	r3, r3, #1
 8002ffa:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002ffe:	f7fe feaf 	bl	8001d60 <HAL_GetTick>
 8003002:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003004:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003008:	079b      	lsls	r3, r3, #30
 800300a:	f53f af1e 	bmi.w	8002e4a <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800300e:	f7fe fea7 	bl	8001d60 <HAL_GetTick>
 8003012:	1bc0      	subs	r0, r0, r7
 8003014:	2802      	cmp	r0, #2
 8003016:	d9f5      	bls.n	8003004 <HAL_RCC_OscConfig+0x270>
 8003018:	e75c      	b.n	8002ed4 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_LSI_DISABLE();
 800301a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800301e:	f023 0301 	bic.w	r3, r3, #1
 8003022:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003026:	f7fe fe9b 	bl	8001d60 <HAL_GetTick>
 800302a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800302c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003030:	0798      	lsls	r0, r3, #30
 8003032:	f57f af0a 	bpl.w	8002e4a <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003036:	f7fe fe93 	bl	8001d60 <HAL_GetTick>
 800303a:	1bc0      	subs	r0, r0, r7
 800303c:	2802      	cmp	r0, #2
 800303e:	d9f5      	bls.n	800302c <HAL_RCC_OscConfig+0x298>
 8003040:	e748      	b.n	8002ed4 <HAL_RCC_OscConfig+0x140>
 8003042:	bf00      	nop
 8003044:	40021000 	.word	0x40021000
 8003048:	0800732b 	.word	0x0800732b
 800304c:	20000000 	.word	0x20000000
 8003050:	20000008 	.word	0x20000008
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003054:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003056:	00d9      	lsls	r1, r3, #3
 8003058:	d429      	bmi.n	80030ae <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_PWR_CLK_ENABLE();
 800305a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800305c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003060:	65a3      	str	r3, [r4, #88]	; 0x58
 8003062:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003068:	9301      	str	r3, [sp, #4]
 800306a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800306c:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003070:	4f89      	ldr	r7, [pc, #548]	; (8003298 <HAL_RCC_OscConfig+0x504>)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	05da      	lsls	r2, r3, #23
 8003076:	d51d      	bpl.n	80030b4 <HAL_RCC_OscConfig+0x320>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003078:	68ab      	ldr	r3, [r5, #8]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d12b      	bne.n	80030d6 <HAL_RCC_OscConfig+0x342>
 800307e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003082:	f043 0301 	orr.w	r3, r3, #1
 8003086:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 800308a:	f7fe fe69 	bl	8001d60 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800308e:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003092:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003094:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003098:	0798      	lsls	r0, r3, #30
 800309a:	d542      	bpl.n	8003122 <HAL_RCC_OscConfig+0x38e>
    if(pwrclkchanged == SET)
 800309c:	f1b8 0f00 	cmp.w	r8, #0
 80030a0:	f43f aed7 	beq.w	8002e52 <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 80030a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80030a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030aa:	65a3      	str	r3, [r4, #88]	; 0x58
 80030ac:	e6d1      	b.n	8002e52 <HAL_RCC_OscConfig+0xbe>
    FlagStatus       pwrclkchanged = RESET;
 80030ae:	f04f 0800 	mov.w	r8, #0
 80030b2:	e7dd      	b.n	8003070 <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ba:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80030bc:	f7fe fe50 	bl	8001d60 <HAL_GetTick>
 80030c0:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	05db      	lsls	r3, r3, #23
 80030c6:	d4d7      	bmi.n	8003078 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030c8:	f7fe fe4a 	bl	8001d60 <HAL_GetTick>
 80030cc:	eba0 0009 	sub.w	r0, r0, r9
 80030d0:	2802      	cmp	r0, #2
 80030d2:	d9f6      	bls.n	80030c2 <HAL_RCC_OscConfig+0x32e>
 80030d4:	e6fe      	b.n	8002ed4 <HAL_RCC_OscConfig+0x140>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030d6:	2b05      	cmp	r3, #5
 80030d8:	d106      	bne.n	80030e8 <HAL_RCC_OscConfig+0x354>
 80030da:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80030de:	f043 0304 	orr.w	r3, r3, #4
 80030e2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80030e6:	e7ca      	b.n	800307e <HAL_RCC_OscConfig+0x2ea>
 80030e8:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80030ec:	f022 0201 	bic.w	r2, r2, #1
 80030f0:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 80030f4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80030f8:	f022 0204 	bic.w	r2, r2, #4
 80030fc:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1c2      	bne.n	800308a <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 8003104:	f7fe fe2c 	bl	8001d60 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003108:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800310c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800310e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8003112:	0799      	lsls	r1, r3, #30
 8003114:	d5c2      	bpl.n	800309c <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003116:	f7fe fe23 	bl	8001d60 <HAL_GetTick>
 800311a:	1bc0      	subs	r0, r0, r7
 800311c:	4548      	cmp	r0, r9
 800311e:	d9f6      	bls.n	800310e <HAL_RCC_OscConfig+0x37a>
 8003120:	e6d8      	b.n	8002ed4 <HAL_RCC_OscConfig+0x140>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003122:	f7fe fe1d 	bl	8001d60 <HAL_GetTick>
 8003126:	1bc0      	subs	r0, r0, r7
 8003128:	4548      	cmp	r0, r9
 800312a:	d9b3      	bls.n	8003094 <HAL_RCC_OscConfig+0x300>
 800312c:	e6d2      	b.n	8002ed4 <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800312e:	2b02      	cmp	r3, #2
 8003130:	f040 808f 	bne.w	8003252 <HAL_RCC_OscConfig+0x4be>
      pll_config = RCC->PLLCFGR;
 8003134:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003136:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003138:	f003 0103 	and.w	r1, r3, #3
 800313c:	4291      	cmp	r1, r2
 800313e:	d124      	bne.n	800318a <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003140:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8003142:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003146:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003148:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800314c:	d11d      	bne.n	800318a <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800314e:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8003150:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003154:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8003158:	d117      	bne.n	800318a <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800315a:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800315c:	3a07      	subs	r2, #7
 800315e:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 8003162:	bf18      	it	ne
 8003164:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003166:	4291      	cmp	r1, r2
 8003168:	d10f      	bne.n	800318a <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800316a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800316c:	0852      	lsrs	r2, r2, #1
 800316e:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8003172:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003174:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8003178:	d107      	bne.n	800318a <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800317a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800317c:	0852      	lsrs	r2, r2, #1
 800317e:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8003182:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003184:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8003188:	d04a      	beq.n	8003220 <HAL_RCC_OscConfig+0x48c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800318a:	2e0c      	cmp	r6, #12
 800318c:	f43f ae06 	beq.w	8002d9c <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003190:	6823      	ldr	r3, [r4, #0]
 8003192:	015a      	lsls	r2, r3, #5
 8003194:	f53f ae02 	bmi.w	8002d9c <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003198:	6823      	ldr	r3, [r4, #0]
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	f53f adfe 	bmi.w	8002d9c <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 80031a0:	6823      	ldr	r3, [r4, #0]
 80031a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031a6:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 80031a8:	f7fe fdda 	bl	8001d60 <HAL_GetTick>
 80031ac:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031ae:	6823      	ldr	r3, [r4, #0]
 80031b0:	019f      	lsls	r7, r3, #6
 80031b2:	d42f      	bmi.n	8003214 <HAL_RCC_OscConfig+0x480>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031b4:	68e2      	ldr	r2, [r4, #12]
 80031b6:	4b39      	ldr	r3, [pc, #228]	; (800329c <HAL_RCC_OscConfig+0x508>)
 80031b8:	4013      	ands	r3, r2
 80031ba:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80031bc:	4313      	orrs	r3, r2
 80031be:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80031c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80031c4:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80031c6:	3a01      	subs	r2, #1
 80031c8:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80031cc:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80031ce:	0912      	lsrs	r2, r2, #4
 80031d0:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 80031d4:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80031d6:	0852      	lsrs	r2, r2, #1
 80031d8:	3a01      	subs	r2, #1
 80031da:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80031de:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80031e0:	0852      	lsrs	r2, r2, #1
 80031e2:	3a01      	subs	r2, #1
 80031e4:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80031e8:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 80031ea:	6823      	ldr	r3, [r4, #0]
 80031ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031f0:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031f2:	68e3      	ldr	r3, [r4, #12]
 80031f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031f8:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 80031fa:	f7fe fdb1 	bl	8001d60 <HAL_GetTick>
 80031fe:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003200:	6823      	ldr	r3, [r4, #0]
 8003202:	0198      	lsls	r0, r3, #6
 8003204:	f53f ae29 	bmi.w	8002e5a <HAL_RCC_OscConfig+0xc6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003208:	f7fe fdaa 	bl	8001d60 <HAL_GetTick>
 800320c:	1b40      	subs	r0, r0, r5
 800320e:	2802      	cmp	r0, #2
 8003210:	d9f6      	bls.n	8003200 <HAL_RCC_OscConfig+0x46c>
 8003212:	e65f      	b.n	8002ed4 <HAL_RCC_OscConfig+0x140>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003214:	f7fe fda4 	bl	8001d60 <HAL_GetTick>
 8003218:	1b80      	subs	r0, r0, r6
 800321a:	2802      	cmp	r0, #2
 800321c:	d9c7      	bls.n	80031ae <HAL_RCC_OscConfig+0x41a>
 800321e:	e659      	b.n	8002ed4 <HAL_RCC_OscConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003220:	6823      	ldr	r3, [r4, #0]
 8003222:	0199      	lsls	r1, r3, #6
 8003224:	f53f ae19 	bmi.w	8002e5a <HAL_RCC_OscConfig+0xc6>
          __HAL_RCC_PLL_ENABLE();
 8003228:	6823      	ldr	r3, [r4, #0]
 800322a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800322e:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003230:	68e3      	ldr	r3, [r4, #12]
 8003232:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003236:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 8003238:	f7fe fd92 	bl	8001d60 <HAL_GetTick>
 800323c:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800323e:	6823      	ldr	r3, [r4, #0]
 8003240:	019a      	lsls	r2, r3, #6
 8003242:	f53f ae0a 	bmi.w	8002e5a <HAL_RCC_OscConfig+0xc6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003246:	f7fe fd8b 	bl	8001d60 <HAL_GetTick>
 800324a:	1b40      	subs	r0, r0, r5
 800324c:	2802      	cmp	r0, #2
 800324e:	d9f6      	bls.n	800323e <HAL_RCC_OscConfig+0x4aa>
 8003250:	e640      	b.n	8002ed4 <HAL_RCC_OscConfig+0x140>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003252:	2e0c      	cmp	r6, #12
 8003254:	f43f ada2 	beq.w	8002d9c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8003258:	6823      	ldr	r3, [r4, #0]
 800325a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800325e:	6023      	str	r3, [r4, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003260:	6823      	ldr	r3, [r4, #0]
 8003262:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003266:	bf02      	ittt	eq
 8003268:	68e3      	ldreq	r3, [r4, #12]
 800326a:	f023 0303 	biceq.w	r3, r3, #3
 800326e:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003270:	68e3      	ldr	r3, [r4, #12]
 8003272:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800327a:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 800327c:	f7fe fd70 	bl	8001d60 <HAL_GetTick>
 8003280:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003282:	6823      	ldr	r3, [r4, #0]
 8003284:	019b      	lsls	r3, r3, #6
 8003286:	f57f ade8 	bpl.w	8002e5a <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800328a:	f7fe fd69 	bl	8001d60 <HAL_GetTick>
 800328e:	1b40      	subs	r0, r0, r5
 8003290:	2802      	cmp	r0, #2
 8003292:	d9f6      	bls.n	8003282 <HAL_RCC_OscConfig+0x4ee>
 8003294:	e61e      	b.n	8002ed4 <HAL_RCC_OscConfig+0x140>
 8003296:	bf00      	nop
 8003298:	40007000 	.word	0x40007000
 800329c:	f99d808c 	.word	0xf99d808c

080032a0 <HAL_RCC_ClockConfig>:
{
 80032a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032a4:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 80032a6:	4604      	mov	r4, r0
 80032a8:	b910      	cbnz	r0, 80032b0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80032aa:	2001      	movs	r0, #1
}
 80032ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032b0:	4a40      	ldr	r2, [pc, #256]	; (80033b4 <HAL_RCC_ClockConfig+0x114>)
 80032b2:	6813      	ldr	r3, [r2, #0]
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	428b      	cmp	r3, r1
 80032ba:	d32a      	bcc.n	8003312 <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032bc:	6823      	ldr	r3, [r4, #0]
 80032be:	07d9      	lsls	r1, r3, #31
 80032c0:	d432      	bmi.n	8003328 <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032c2:	6821      	ldr	r1, [r4, #0]
 80032c4:	078a      	lsls	r2, r1, #30
 80032c6:	d45b      	bmi.n	8003380 <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032c8:	4a3a      	ldr	r2, [pc, #232]	; (80033b4 <HAL_RCC_ClockConfig+0x114>)
 80032ca:	6813      	ldr	r3, [r2, #0]
 80032cc:	f003 0307 	and.w	r3, r3, #7
 80032d0:	42b3      	cmp	r3, r6
 80032d2:	d85d      	bhi.n	8003390 <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d4:	f011 0f04 	tst.w	r1, #4
 80032d8:	4d37      	ldr	r5, [pc, #220]	; (80033b8 <HAL_RCC_ClockConfig+0x118>)
 80032da:	d164      	bne.n	80033a6 <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032dc:	070b      	lsls	r3, r1, #28
 80032de:	d506      	bpl.n	80032ee <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032e0:	68ab      	ldr	r3, [r5, #8]
 80032e2:	6922      	ldr	r2, [r4, #16]
 80032e4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80032e8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80032ec:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032ee:	f7ff fd03 	bl	8002cf8 <HAL_RCC_GetSysClockFreq>
 80032f2:	68ab      	ldr	r3, [r5, #8]
 80032f4:	4a31      	ldr	r2, [pc, #196]	; (80033bc <HAL_RCC_ClockConfig+0x11c>)
 80032f6:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 80032fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032fe:	5cd3      	ldrb	r3, [r2, r3]
 8003300:	f003 031f 	and.w	r3, r3, #31
 8003304:	40d8      	lsrs	r0, r3
 8003306:	4b2e      	ldr	r3, [pc, #184]	; (80033c0 <HAL_RCC_ClockConfig+0x120>)
 8003308:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 800330a:	4b2e      	ldr	r3, [pc, #184]	; (80033c4 <HAL_RCC_ClockConfig+0x124>)
 800330c:	6818      	ldr	r0, [r3, #0]
 800330e:	f7fe bcdf 	b.w	8001cd0 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003312:	6813      	ldr	r3, [r2, #0]
 8003314:	f023 0307 	bic.w	r3, r3, #7
 8003318:	430b      	orrs	r3, r1
 800331a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800331c:	6813      	ldr	r3, [r2, #0]
 800331e:	f003 0307 	and.w	r3, r3, #7
 8003322:	428b      	cmp	r3, r1
 8003324:	d1c1      	bne.n	80032aa <HAL_RCC_ClockConfig+0xa>
 8003326:	e7c9      	b.n	80032bc <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003328:	6862      	ldr	r2, [r4, #4]
 800332a:	4d23      	ldr	r5, [pc, #140]	; (80033b8 <HAL_RCC_ClockConfig+0x118>)
 800332c:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800332e:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003330:	d11a      	bne.n	8003368 <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003332:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003336:	d0b8      	beq.n	80032aa <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003338:	68ab      	ldr	r3, [r5, #8]
 800333a:	f023 0303 	bic.w	r3, r3, #3
 800333e:	4313      	orrs	r3, r2
 8003340:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8003342:	f7fe fd0d 	bl	8001d60 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003346:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800334a:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800334c:	68ab      	ldr	r3, [r5, #8]
 800334e:	6862      	ldr	r2, [r4, #4]
 8003350:	f003 030c 	and.w	r3, r3, #12
 8003354:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003358:	d0b3      	beq.n	80032c2 <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800335a:	f7fe fd01 	bl	8001d60 <HAL_GetTick>
 800335e:	1bc0      	subs	r0, r0, r7
 8003360:	4540      	cmp	r0, r8
 8003362:	d9f3      	bls.n	800334c <HAL_RCC_ClockConfig+0xac>
        return HAL_TIMEOUT;
 8003364:	2003      	movs	r0, #3
 8003366:	e7a1      	b.n	80032ac <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003368:	2a02      	cmp	r2, #2
 800336a:	d102      	bne.n	8003372 <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800336c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003370:	e7e1      	b.n	8003336 <HAL_RCC_ClockConfig+0x96>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003372:	b912      	cbnz	r2, 800337a <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003374:	f013 0f02 	tst.w	r3, #2
 8003378:	e7dd      	b.n	8003336 <HAL_RCC_ClockConfig+0x96>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800337a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800337e:	e7da      	b.n	8003336 <HAL_RCC_ClockConfig+0x96>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003380:	4a0d      	ldr	r2, [pc, #52]	; (80033b8 <HAL_RCC_ClockConfig+0x118>)
 8003382:	68a0      	ldr	r0, [r4, #8]
 8003384:	6893      	ldr	r3, [r2, #8]
 8003386:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800338a:	4303      	orrs	r3, r0
 800338c:	6093      	str	r3, [r2, #8]
 800338e:	e79b      	b.n	80032c8 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003390:	6813      	ldr	r3, [r2, #0]
 8003392:	f023 0307 	bic.w	r3, r3, #7
 8003396:	4333      	orrs	r3, r6
 8003398:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800339a:	6813      	ldr	r3, [r2, #0]
 800339c:	f003 0307 	and.w	r3, r3, #7
 80033a0:	42b3      	cmp	r3, r6
 80033a2:	d182      	bne.n	80032aa <HAL_RCC_ClockConfig+0xa>
 80033a4:	e796      	b.n	80032d4 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033a6:	68ab      	ldr	r3, [r5, #8]
 80033a8:	68e2      	ldr	r2, [r4, #12]
 80033aa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80033ae:	4313      	orrs	r3, r2
 80033b0:	60ab      	str	r3, [r5, #8]
 80033b2:	e793      	b.n	80032dc <HAL_RCC_ClockConfig+0x3c>
 80033b4:	40022000 	.word	0x40022000
 80033b8:	40021000 	.word	0x40021000
 80033bc:	0800732b 	.word	0x0800732b
 80033c0:	20000000 	.word	0x20000000
 80033c4:	20000008 	.word	0x20000008

080033c8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80033c8:	4b05      	ldr	r3, [pc, #20]	; (80033e0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80033ca:	4a06      	ldr	r2, [pc, #24]	; (80033e4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80033d2:	5cd3      	ldrb	r3, [r2, r3]
 80033d4:	4a04      	ldr	r2, [pc, #16]	; (80033e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033d6:	6810      	ldr	r0, [r2, #0]
 80033d8:	f003 031f 	and.w	r3, r3, #31
}
 80033dc:	40d8      	lsrs	r0, r3
 80033de:	4770      	bx	lr
 80033e0:	40021000 	.word	0x40021000
 80033e4:	0800733b 	.word	0x0800733b
 80033e8:	20000000 	.word	0x20000000

080033ec <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80033ec:	4b05      	ldr	r3, [pc, #20]	; (8003404 <HAL_RCC_GetPCLK2Freq+0x18>)
 80033ee:	4a06      	ldr	r2, [pc, #24]	; (8003408 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80033f6:	5cd3      	ldrb	r3, [r2, r3]
 80033f8:	4a04      	ldr	r2, [pc, #16]	; (800340c <HAL_RCC_GetPCLK2Freq+0x20>)
 80033fa:	6810      	ldr	r0, [r2, #0]
 80033fc:	f003 031f 	and.w	r3, r3, #31
}
 8003400:	40d8      	lsrs	r0, r3
 8003402:	4770      	bx	lr
 8003404:	40021000 	.word	0x40021000
 8003408:	0800733b 	.word	0x0800733b
 800340c:	20000000 	.word	0x20000000

08003410 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003412:	4b44      	ldr	r3, [pc, #272]	; (8003524 <RCCEx_PLLSAI1_Config+0x114>)
 8003414:	68da      	ldr	r2, [r3, #12]
 8003416:	f012 0f03 	tst.w	r2, #3
{
 800341a:	4605      	mov	r5, r0
 800341c:	460e      	mov	r6, r1
 800341e:	6800      	ldr	r0, [r0, #0]
 8003420:	461c      	mov	r4, r3
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003422:	d02a      	beq.n	800347a <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003424:	68da      	ldr	r2, [r3, #12]
 8003426:	f002 0203 	and.w	r2, r2, #3
 800342a:	4282      	cmp	r2, r0
 800342c:	d13c      	bne.n	80034a8 <RCCEx_PLLSAI1_Config+0x98>
       ||
 800342e:	2a00      	cmp	r2, #0
 8003430:	d03a      	beq.n	80034a8 <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003432:	68db      	ldr	r3, [r3, #12]
       ||
 8003434:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003436:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800343a:	3301      	adds	r3, #1
       ||
 800343c:	4293      	cmp	r3, r2
 800343e:	d133      	bne.n	80034a8 <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003440:	6823      	ldr	r3, [r4, #0]
 8003442:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003446:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003448:	f7fe fc8a 	bl	8001d60 <HAL_GetTick>
 800344c:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800344e:	6823      	ldr	r3, [r4, #0]
 8003450:	011a      	lsls	r2, r3, #4
 8003452:	d432      	bmi.n	80034ba <RCCEx_PLLSAI1_Config+0xaa>
 8003454:	68ab      	ldr	r3, [r5, #8]
 8003456:	021f      	lsls	r7, r3, #8
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003458:	2e00      	cmp	r6, #0
 800345a:	d035      	beq.n	80034c8 <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800345c:	2e01      	cmp	r6, #1
 800345e:	d14e      	bne.n	80034fe <RCCEx_PLLSAI1_Config+0xee>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003460:	692a      	ldr	r2, [r5, #16]
 8003462:	6921      	ldr	r1, [r4, #16]
 8003464:	0852      	lsrs	r2, r2, #1
 8003466:	1e53      	subs	r3, r2, #1
 8003468:	f421 02c0 	bic.w	r2, r1, #6291456	; 0x600000
 800346c:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8003470:	433a      	orrs	r2, r7
 8003472:	ea42 5243 	orr.w	r2, r2, r3, lsl #21
 8003476:	6122      	str	r2, [r4, #16]
 8003478:	e031      	b.n	80034de <RCCEx_PLLSAI1_Config+0xce>
    switch(PllSai1->PLLSAI1Source)
 800347a:	2802      	cmp	r0, #2
 800347c:	d010      	beq.n	80034a0 <RCCEx_PLLSAI1_Config+0x90>
 800347e:	2803      	cmp	r0, #3
 8003480:	d014      	beq.n	80034ac <RCCEx_PLLSAI1_Config+0x9c>
 8003482:	2801      	cmp	r0, #1
 8003484:	d110      	bne.n	80034a8 <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	079f      	lsls	r7, r3, #30
 800348a:	d51c      	bpl.n	80034c6 <RCCEx_PLLSAI1_Config+0xb6>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800348c:	68e3      	ldr	r3, [r4, #12]
 800348e:	686a      	ldr	r2, [r5, #4]
 8003490:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8003494:	3a01      	subs	r2, #1
 8003496:	4318      	orrs	r0, r3
 8003498:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800349c:	60e0      	str	r0, [r4, #12]
 800349e:	e7cf      	b.n	8003440 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80034a6:	d1f1      	bne.n	800348c <RCCEx_PLLSAI1_Config+0x7c>
 80034a8:	2001      	movs	r0, #1
 80034aa:	e00c      	b.n	80034c6 <RCCEx_PLLSAI1_Config+0xb6>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	0391      	lsls	r1, r2, #14
 80034b0:	d4ec      	bmi.n	800348c <RCCEx_PLLSAI1_Config+0x7c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80034b8:	e7f5      	b.n	80034a6 <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034ba:	f7fe fc51 	bl	8001d60 <HAL_GetTick>
 80034be:	1bc0      	subs	r0, r0, r7
 80034c0:	2802      	cmp	r0, #2
 80034c2:	d9c4      	bls.n	800344e <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 80034c4:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 80034c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034c8:	6921      	ldr	r1, [r4, #16]
 80034ca:	68eb      	ldr	r3, [r5, #12]
 80034cc:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 80034d0:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80034d4:	091b      	lsrs	r3, r3, #4
 80034d6:	4339      	orrs	r1, r7
 80034d8:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 80034dc:	6121      	str	r1, [r4, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 80034de:	6823      	ldr	r3, [r4, #0]
 80034e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034e4:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 80034e6:	f7fe fc3b 	bl	8001d60 <HAL_GetTick>
 80034ea:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80034ec:	6823      	ldr	r3, [r4, #0]
 80034ee:	011b      	lsls	r3, r3, #4
 80034f0:	d512      	bpl.n	8003518 <RCCEx_PLLSAI1_Config+0x108>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80034f2:	6923      	ldr	r3, [r4, #16]
 80034f4:	69aa      	ldr	r2, [r5, #24]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	6123      	str	r3, [r4, #16]
 80034fa:	2000      	movs	r0, #0
  return status;
 80034fc:	e7e3      	b.n	80034c6 <RCCEx_PLLSAI1_Config+0xb6>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80034fe:	696b      	ldr	r3, [r5, #20]
 8003500:	6922      	ldr	r2, [r4, #16]
 8003502:	085b      	lsrs	r3, r3, #1
 8003504:	1e59      	subs	r1, r3, #1
 8003506:	f022 63c0 	bic.w	r3, r2, #100663296	; 0x6000000
 800350a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800350e:	433b      	orrs	r3, r7
 8003510:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8003514:	6123      	str	r3, [r4, #16]
 8003516:	e7e2      	b.n	80034de <RCCEx_PLLSAI1_Config+0xce>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003518:	f7fe fc22 	bl	8001d60 <HAL_GetTick>
 800351c:	1b80      	subs	r0, r0, r6
 800351e:	2802      	cmp	r0, #2
 8003520:	d9e4      	bls.n	80034ec <RCCEx_PLLSAI1_Config+0xdc>
 8003522:	e7cf      	b.n	80034c4 <RCCEx_PLLSAI1_Config+0xb4>
 8003524:	40021000 	.word	0x40021000

08003528 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800352a:	4b3c      	ldr	r3, [pc, #240]	; (800361c <RCCEx_PLLSAI2_Config+0xf4>)
 800352c:	68da      	ldr	r2, [r3, #12]
 800352e:	f012 0f03 	tst.w	r2, #3
{
 8003532:	4605      	mov	r5, r0
 8003534:	460e      	mov	r6, r1
 8003536:	6800      	ldr	r0, [r0, #0]
 8003538:	461c      	mov	r4, r3
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800353a:	d027      	beq.n	800358c <RCCEx_PLLSAI2_Config+0x64>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800353c:	68da      	ldr	r2, [r3, #12]
 800353e:	f002 0203 	and.w	r2, r2, #3
 8003542:	4282      	cmp	r2, r0
 8003544:	d139      	bne.n	80035ba <RCCEx_PLLSAI2_Config+0x92>
       ||
 8003546:	2a00      	cmp	r2, #0
 8003548:	d037      	beq.n	80035ba <RCCEx_PLLSAI2_Config+0x92>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800354a:	68db      	ldr	r3, [r3, #12]
       ||
 800354c:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800354e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8003552:	3301      	adds	r3, #1
       ||
 8003554:	4293      	cmp	r3, r2
 8003556:	d130      	bne.n	80035ba <RCCEx_PLLSAI2_Config+0x92>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003558:	6823      	ldr	r3, [r4, #0]
 800355a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800355e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003560:	f7fe fbfe 	bl	8001d60 <HAL_GetTick>
 8003564:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003566:	6823      	ldr	r3, [r4, #0]
 8003568:	009a      	lsls	r2, r3, #2
 800356a:	d42f      	bmi.n	80035cc <RCCEx_PLLSAI2_Config+0xa4>
 800356c:	68ab      	ldr	r3, [r5, #8]
 800356e:	0218      	lsls	r0, r3, #8
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003570:	b39e      	cbz	r6, 80035da <RCCEx_PLLSAI2_Config+0xb2>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003572:	6963      	ldr	r3, [r4, #20]
 8003574:	6929      	ldr	r1, [r5, #16]
 8003576:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800357a:	0849      	lsrs	r1, r1, #1
 800357c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003580:	3901      	subs	r1, #1
 8003582:	4303      	orrs	r3, r0
 8003584:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8003588:	6163      	str	r3, [r4, #20]
 800358a:	e031      	b.n	80035f0 <RCCEx_PLLSAI2_Config+0xc8>
    switch(PllSai2->PLLSAI2Source)
 800358c:	2802      	cmp	r0, #2
 800358e:	d010      	beq.n	80035b2 <RCCEx_PLLSAI2_Config+0x8a>
 8003590:	2803      	cmp	r0, #3
 8003592:	d014      	beq.n	80035be <RCCEx_PLLSAI2_Config+0x96>
 8003594:	2801      	cmp	r0, #1
 8003596:	d110      	bne.n	80035ba <RCCEx_PLLSAI2_Config+0x92>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	079f      	lsls	r7, r3, #30
 800359c:	d51c      	bpl.n	80035d8 <RCCEx_PLLSAI2_Config+0xb0>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800359e:	68e3      	ldr	r3, [r4, #12]
 80035a0:	686a      	ldr	r2, [r5, #4]
 80035a2:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 80035a6:	3a01      	subs	r2, #1
 80035a8:	4318      	orrs	r0, r3
 80035aa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80035ae:	60e0      	str	r0, [r4, #12]
 80035b0:	e7d2      	b.n	8003558 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80035b8:	d1f1      	bne.n	800359e <RCCEx_PLLSAI2_Config+0x76>
 80035ba:	2001      	movs	r0, #1
 80035bc:	e00c      	b.n	80035d8 <RCCEx_PLLSAI2_Config+0xb0>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	0391      	lsls	r1, r2, #14
 80035c2:	d4ec      	bmi.n	800359e <RCCEx_PLLSAI2_Config+0x76>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80035ca:	e7f5      	b.n	80035b8 <RCCEx_PLLSAI2_Config+0x90>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80035cc:	f7fe fbc8 	bl	8001d60 <HAL_GetTick>
 80035d0:	1bc0      	subs	r0, r0, r7
 80035d2:	2802      	cmp	r0, #2
 80035d4:	d9c7      	bls.n	8003566 <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 80035d6:	2003      	movs	r0, #3
      }
    }
  }

  return status;
}
 80035d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80035da:	6962      	ldr	r2, [r4, #20]
 80035dc:	68eb      	ldr	r3, [r5, #12]
 80035de:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 80035e2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80035e6:	091b      	lsrs	r3, r3, #4
 80035e8:	4302      	orrs	r2, r0
 80035ea:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 80035ee:	6162      	str	r2, [r4, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 80035f0:	6823      	ldr	r3, [r4, #0]
 80035f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035f6:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 80035f8:	f7fe fbb2 	bl	8001d60 <HAL_GetTick>
 80035fc:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80035fe:	6823      	ldr	r3, [r4, #0]
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	d505      	bpl.n	8003610 <RCCEx_PLLSAI2_Config+0xe8>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003604:	6963      	ldr	r3, [r4, #20]
 8003606:	696a      	ldr	r2, [r5, #20]
 8003608:	4313      	orrs	r3, r2
 800360a:	6163      	str	r3, [r4, #20]
 800360c:	2000      	movs	r0, #0
  return status;
 800360e:	e7e3      	b.n	80035d8 <RCCEx_PLLSAI2_Config+0xb0>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003610:	f7fe fba6 	bl	8001d60 <HAL_GetTick>
 8003614:	1b80      	subs	r0, r0, r6
 8003616:	2802      	cmp	r0, #2
 8003618:	d9f1      	bls.n	80035fe <RCCEx_PLLSAI2_Config+0xd6>
 800361a:	e7dc      	b.n	80035d6 <RCCEx_PLLSAI2_Config+0xae>
 800361c:	40021000 	.word	0x40021000

08003620 <HAL_RCCEx_PeriphCLKConfig>:
{
 8003620:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003624:	6806      	ldr	r6, [r0, #0]
 8003626:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 800362a:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800362c:	d024      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 800362e:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8003630:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8003634:	d02c      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8003636:	d802      	bhi.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003638:	b1c1      	cbz	r1, 800366c <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 800363a:	2601      	movs	r6, #1
 800363c:	e01c      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 800363e:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8003642:	d00d      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003644:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8003648:	d1f7      	bne.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800364a:	4a4e      	ldr	r2, [pc, #312]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800364c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800364e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003652:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003656:	430b      	orrs	r3, r1
 8003658:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800365c:	2600      	movs	r6, #0
 800365e:	e00b      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003660:	4a48      	ldr	r2, [pc, #288]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003662:	68d3      	ldr	r3, [r2, #12]
 8003664:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003668:	60d3      	str	r3, [r2, #12]
 800366a:	e7ee      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800366c:	3004      	adds	r0, #4
 800366e:	f7ff fecf 	bl	8003410 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003672:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8003674:	2800      	cmp	r0, #0
 8003676:	d0e8      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003678:	6823      	ldr	r3, [r4, #0]
 800367a:	04d8      	lsls	r0, r3, #19
 800367c:	d506      	bpl.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 800367e:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8003680:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8003684:	d073      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003686:	d808      	bhi.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003688:	b1a9      	cbz	r1, 80036b6 <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 800368a:	2601      	movs	r6, #1
 800368c:	4635      	mov	r5, r6
 800368e:	e021      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003690:	2100      	movs	r1, #0
 8003692:	3020      	adds	r0, #32
 8003694:	f7ff ff48 	bl	8003528 <RCCEx_PLLSAI2_Config>
 8003698:	e7eb      	b.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 800369a:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 800369e:	d004      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
 80036a0:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 80036a4:	d1f1      	bne.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80036a6:	4635      	mov	r5, r6
 80036a8:	e009      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036aa:	4a36      	ldr	r2, [pc, #216]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036ac:	68d3      	ldr	r3, [r2, #12]
 80036ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036b2:	60d3      	str	r3, [r2, #12]
 80036b4:	e7f7      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036b6:	1d20      	adds	r0, r4, #4
 80036b8:	f7ff feaa 	bl	8003410 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80036bc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80036be:	2d00      	cmp	r5, #0
 80036c0:	d15b      	bne.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x15a>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80036c2:	4a30      	ldr	r2, [pc, #192]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036c4:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80036c6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80036ca:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80036ce:	430b      	orrs	r3, r1
 80036d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036d4:	6823      	ldr	r3, [r4, #0]
 80036d6:	0399      	lsls	r1, r3, #14
 80036d8:	f140 815a 	bpl.w	8003990 <HAL_RCCEx_PeriphCLKConfig+0x370>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036dc:	4f29      	ldr	r7, [pc, #164]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036e0:	00da      	lsls	r2, r3, #3
 80036e2:	d44c      	bmi.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x15e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80036e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80036ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036f2:	9301      	str	r3, [sp, #4]
 80036f4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80036f6:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036fa:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8003788 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80036fe:	f8d9 3000 	ldr.w	r3, [r9]
 8003702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003706:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 800370a:	f7fe fb29 	bl	8001d60 <HAL_GetTick>
 800370e:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003710:	f8d9 3000 	ldr.w	r3, [r9]
 8003714:	05db      	lsls	r3, r3, #23
 8003716:	d539      	bpl.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    if(ret == HAL_OK)
 8003718:	2d00      	cmp	r5, #0
 800371a:	d13e      	bne.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x17a>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800371c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003720:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003724:	d015      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x132>
 8003726:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800372a:	429a      	cmp	r2, r3
 800372c:	d011      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x132>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800372e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8003732:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003736:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800373a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800373e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003742:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003746:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800374a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800374e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003752:	07d8      	lsls	r0, r3, #31
 8003754:	f100 810c 	bmi.w	8003970 <HAL_RCCEx_PeriphCLKConfig+0x350>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003758:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800375c:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8003760:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003764:	4313      	orrs	r3, r2
 8003766:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800376a:	4635      	mov	r5, r6
 800376c:	e015      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x17a>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800376e:	2100      	movs	r1, #0
 8003770:	f104 0020 	add.w	r0, r4, #32
 8003774:	f7ff fed8 	bl	8003528 <RCCEx_PLLSAI2_Config>
 8003778:	e7a0      	b.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
 800377a:	462e      	mov	r6, r5
 800377c:	e7aa      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    FlagStatus       pwrclkchanged = RESET;
 800377e:	f04f 0800 	mov.w	r8, #0
 8003782:	e7ba      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003784:	40021000 	.word	0x40021000
 8003788:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800378c:	f7fe fae8 	bl	8001d60 <HAL_GetTick>
 8003790:	eba0 000a 	sub.w	r0, r0, sl
 8003794:	2802      	cmp	r0, #2
 8003796:	d9bb      	bls.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0xf0>
        ret = HAL_TIMEOUT;
 8003798:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 800379a:	f1b8 0f00 	cmp.w	r8, #0
 800379e:	d003      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      __HAL_RCC_PWR_CLK_DISABLE();
 80037a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037a6:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037a8:	6823      	ldr	r3, [r4, #0]
 80037aa:	07da      	lsls	r2, r3, #31
 80037ac:	d508      	bpl.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037ae:	498e      	ldr	r1, [pc, #568]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 80037b0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80037b2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80037b6:	f022 0203 	bic.w	r2, r2, #3
 80037ba:	4302      	orrs	r2, r0
 80037bc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037c0:	079f      	lsls	r7, r3, #30
 80037c2:	d508      	bpl.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037c4:	4988      	ldr	r1, [pc, #544]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 80037c6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80037c8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80037cc:	f022 020c 	bic.w	r2, r2, #12
 80037d0:	4302      	orrs	r2, r0
 80037d2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037d6:	075e      	lsls	r6, r3, #29
 80037d8:	d508      	bpl.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037da:	4983      	ldr	r1, [pc, #524]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 80037dc:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80037de:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80037e2:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80037e6:	4302      	orrs	r2, r0
 80037e8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037ec:	0718      	lsls	r0, r3, #28
 80037ee:	d508      	bpl.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037f0:	497d      	ldr	r1, [pc, #500]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 80037f2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80037f4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80037f8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80037fc:	4302      	orrs	r2, r0
 80037fe:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003802:	06d9      	lsls	r1, r3, #27
 8003804:	d508      	bpl.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003806:	4978      	ldr	r1, [pc, #480]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 8003808:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800380a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800380e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003812:	4302      	orrs	r2, r0
 8003814:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003818:	069a      	lsls	r2, r3, #26
 800381a:	d508      	bpl.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800381c:	4972      	ldr	r1, [pc, #456]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 800381e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8003820:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003824:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003828:	4302      	orrs	r2, r0
 800382a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800382e:	059f      	lsls	r7, r3, #22
 8003830:	d508      	bpl.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x224>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003832:	496d      	ldr	r1, [pc, #436]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 8003834:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8003836:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800383a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800383e:	4302      	orrs	r2, r0
 8003840:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003844:	055e      	lsls	r6, r3, #21
 8003846:	d508      	bpl.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x23a>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003848:	4967      	ldr	r1, [pc, #412]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 800384a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800384c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003850:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003854:	4302      	orrs	r2, r0
 8003856:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800385a:	0658      	lsls	r0, r3, #25
 800385c:	d508      	bpl.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x250>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800385e:	4962      	ldr	r1, [pc, #392]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 8003860:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8003862:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003866:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800386a:	4302      	orrs	r2, r0
 800386c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003870:	0619      	lsls	r1, r3, #24
 8003872:	d508      	bpl.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x266>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003874:	495c      	ldr	r1, [pc, #368]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 8003876:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003878:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800387c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003880:	4302      	orrs	r2, r0
 8003882:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003886:	05da      	lsls	r2, r3, #23
 8003888:	d508      	bpl.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x27c>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800388a:	4957      	ldr	r1, [pc, #348]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 800388c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800388e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003892:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8003896:	4302      	orrs	r2, r0
 8003898:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800389c:	049b      	lsls	r3, r3, #18
 800389e:	d50f      	bpl.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038a0:	4a51      	ldr	r2, [pc, #324]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 80038a2:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80038a4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80038a8:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80038ac:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80038ae:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038b2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80038b6:	d16d      	bne.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038b8:	68d3      	ldr	r3, [r2, #12]
 80038ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038be:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80038c0:	6823      	ldr	r3, [r4, #0]
 80038c2:	031f      	lsls	r7, r3, #12
 80038c4:	d50f      	bpl.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80038c6:	4a48      	ldr	r2, [pc, #288]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 80038c8:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80038ca:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80038ce:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80038d2:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80038d4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80038d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80038dc:	d165      	bne.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038de:	68d3      	ldr	r3, [r2, #12]
 80038e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038e4:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80038e6:	6823      	ldr	r3, [r4, #0]
 80038e8:	035e      	lsls	r6, r3, #13
 80038ea:	d50f      	bpl.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80038ec:	4a3e      	ldr	r2, [pc, #248]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 80038ee:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80038f0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80038f4:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80038f8:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80038fa:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80038fe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003902:	d15d      	bne.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003904:	68d3      	ldr	r3, [r2, #12]
 8003906:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800390a:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800390c:	6823      	ldr	r3, [r4, #0]
 800390e:	0458      	lsls	r0, r3, #17
 8003910:	d512      	bpl.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x318>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003912:	4935      	ldr	r1, [pc, #212]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 8003914:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8003916:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800391a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800391e:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003920:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003924:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003928:	d155      	bne.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800392a:	2102      	movs	r1, #2
 800392c:	1d20      	adds	r0, r4, #4
 800392e:	f7ff fd6f 	bl	8003410 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8003932:	2800      	cmp	r0, #0
 8003934:	bf18      	it	ne
 8003936:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003938:	6822      	ldr	r2, [r4, #0]
 800393a:	0411      	lsls	r1, r2, #16
 800393c:	d508      	bpl.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x330>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800393e:	492a      	ldr	r1, [pc, #168]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 8003940:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8003942:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003946:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800394a:	4303      	orrs	r3, r0
 800394c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003950:	03d3      	lsls	r3, r2, #15
 8003952:	d509      	bpl.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x348>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003954:	4a24      	ldr	r2, [pc, #144]	; (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 8003956:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800395a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800395e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003962:	430b      	orrs	r3, r1
 8003964:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8003968:	4628      	mov	r0, r5
 800396a:	b002      	add	sp, #8
 800396c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        tickstart = HAL_GetTick();
 8003970:	f7fe f9f6 	bl	8001d60 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003974:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003978:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800397a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800397e:	0799      	lsls	r1, r3, #30
 8003980:	f53f aeea 	bmi.w	8003758 <HAL_RCCEx_PeriphCLKConfig+0x138>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003984:	f7fe f9ec 	bl	8001d60 <HAL_GetTick>
 8003988:	1b40      	subs	r0, r0, r5
 800398a:	4548      	cmp	r0, r9
 800398c:	d9f5      	bls.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800398e:	e703      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8003990:	4635      	mov	r5, r6
 8003992:	e709      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003994:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8003998:	d192      	bne.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800399a:	2101      	movs	r1, #1
 800399c:	1d20      	adds	r0, r4, #4
 800399e:	f7ff fd37 	bl	8003410 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 80039a2:	2800      	cmp	r0, #0
 80039a4:	bf18      	it	ne
 80039a6:	4605      	movne	r5, r0
 80039a8:	e78a      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80039aa:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80039ae:	d19a      	bne.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039b0:	2101      	movs	r1, #1
 80039b2:	1d20      	adds	r0, r4, #4
 80039b4:	f7ff fd2c 	bl	8003410 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80039b8:	2800      	cmp	r0, #0
 80039ba:	bf18      	it	ne
 80039bc:	4605      	movne	r5, r0
 80039be:	e792      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80039c0:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80039c4:	d1a2      	bne.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039c6:	2101      	movs	r1, #1
 80039c8:	1d20      	adds	r0, r4, #4
 80039ca:	f7ff fd21 	bl	8003410 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80039ce:	2800      	cmp	r0, #0
 80039d0:	bf18      	it	ne
 80039d2:	4605      	movne	r5, r0
 80039d4:	e79a      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80039d6:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80039da:	d1ad      	bne.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x318>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80039dc:	2102      	movs	r1, #2
 80039de:	f104 0020 	add.w	r0, r4, #32
 80039e2:	f7ff fda1 	bl	8003528 <RCCEx_PLLSAI2_Config>
 80039e6:	e7a4      	b.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x312>
 80039e8:	40021000 	.word	0x40021000

080039ec <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039ec:	6a03      	ldr	r3, [r0, #32]
 80039ee:	f023 0301 	bic.w	r3, r3, #1
 80039f2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039f4:	6a03      	ldr	r3, [r0, #32]
{
 80039f6:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039f8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039fa:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039fc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039fe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003a02:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003a06:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a08:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8003a0a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8003a0e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a10:	4d1b      	ldr	r5, [pc, #108]	; (8003a80 <TIM_OC1_SetConfig+0x94>)
 8003a12:	42a8      	cmp	r0, r5
 8003a14:	d00f      	beq.n	8003a36 <TIM_OC1_SetConfig+0x4a>
 8003a16:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003a1a:	42a8      	cmp	r0, r5
 8003a1c:	d00b      	beq.n	8003a36 <TIM_OC1_SetConfig+0x4a>
 8003a1e:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8003a22:	42a8      	cmp	r0, r5
 8003a24:	d007      	beq.n	8003a36 <TIM_OC1_SetConfig+0x4a>
 8003a26:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003a2a:	42a8      	cmp	r0, r5
 8003a2c:	d003      	beq.n	8003a36 <TIM_OC1_SetConfig+0x4a>
 8003a2e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003a32:	42a8      	cmp	r0, r5
 8003a34:	d11e      	bne.n	8003a74 <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a36:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a38:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8003a3c:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a3e:	4d10      	ldr	r5, [pc, #64]	; (8003a80 <TIM_OC1_SetConfig+0x94>)
 8003a40:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a42:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a46:	d00f      	beq.n	8003a68 <TIM_OC1_SetConfig+0x7c>
 8003a48:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003a4c:	42a8      	cmp	r0, r5
 8003a4e:	d00b      	beq.n	8003a68 <TIM_OC1_SetConfig+0x7c>
 8003a50:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8003a54:	42a8      	cmp	r0, r5
 8003a56:	d007      	beq.n	8003a68 <TIM_OC1_SetConfig+0x7c>
 8003a58:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003a5c:	42a8      	cmp	r0, r5
 8003a5e:	d003      	beq.n	8003a68 <TIM_OC1_SetConfig+0x7c>
 8003a60:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003a64:	42a8      	cmp	r0, r5
 8003a66:	d105      	bne.n	8003a74 <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a68:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a6c:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 8003a70:	4334      	orrs	r4, r6
 8003a72:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a74:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a76:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a78:	684a      	ldr	r2, [r1, #4]
 8003a7a:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a7c:	6203      	str	r3, [r0, #32]
}
 8003a7e:	bd70      	pop	{r4, r5, r6, pc}
 8003a80:	40012c00 	.word	0x40012c00

08003a84 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a84:	6a03      	ldr	r3, [r0, #32]
 8003a86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a8a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a8c:	6a03      	ldr	r3, [r0, #32]
{
 8003a8e:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a90:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a92:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a94:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a96:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003a9a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003a9e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003aa0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8003aa2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003aa6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003aaa:	4d16      	ldr	r5, [pc, #88]	; (8003b04 <TIM_OC3_SetConfig+0x80>)
 8003aac:	42a8      	cmp	r0, r5
 8003aae:	d003      	beq.n	8003ab8 <TIM_OC3_SetConfig+0x34>
 8003ab0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003ab4:	42a8      	cmp	r0, r5
 8003ab6:	d10d      	bne.n	8003ad4 <TIM_OC3_SetConfig+0x50>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ab8:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8003aba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003abe:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ac2:	4d10      	ldr	r5, [pc, #64]	; (8003b04 <TIM_OC3_SetConfig+0x80>)
 8003ac4:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ac6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aca:	d00e      	beq.n	8003aea <TIM_OC3_SetConfig+0x66>
 8003acc:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003ad0:	42a8      	cmp	r0, r5
 8003ad2:	d00a      	beq.n	8003aea <TIM_OC3_SetConfig+0x66>
 8003ad4:	4d0c      	ldr	r5, [pc, #48]	; (8003b08 <TIM_OC3_SetConfig+0x84>)
 8003ad6:	42a8      	cmp	r0, r5
 8003ad8:	d007      	beq.n	8003aea <TIM_OC3_SetConfig+0x66>
 8003ada:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003ade:	42a8      	cmp	r0, r5
 8003ae0:	d003      	beq.n	8003aea <TIM_OC3_SetConfig+0x66>
 8003ae2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003ae6:	42a8      	cmp	r0, r5
 8003ae8:	d106      	bne.n	8003af8 <TIM_OC3_SetConfig+0x74>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003aea:	f424 5540 	bic.w	r5, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003aee:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 8003af2:	4334      	orrs	r4, r6
 8003af4:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003af8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003afa:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003afc:	684a      	ldr	r2, [r1, #4]
 8003afe:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b00:	6203      	str	r3, [r0, #32]
}
 8003b02:	bd70      	pop	{r4, r5, r6, pc}
 8003b04:	40012c00 	.word	0x40012c00
 8003b08:	40014000 	.word	0x40014000

08003b0c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b0c:	6a03      	ldr	r3, [r0, #32]
 8003b0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b12:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b14:	6a03      	ldr	r3, [r0, #32]
{
 8003b16:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b18:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b1a:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b1c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b1e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003b22:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b26:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b2a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8003b2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b30:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b34:	4d0e      	ldr	r5, [pc, #56]	; (8003b70 <TIM_OC4_SetConfig+0x64>)
 8003b36:	42a8      	cmp	r0, r5
 8003b38:	d00f      	beq.n	8003b5a <TIM_OC4_SetConfig+0x4e>
 8003b3a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003b3e:	42a8      	cmp	r0, r5
 8003b40:	d00b      	beq.n	8003b5a <TIM_OC4_SetConfig+0x4e>
 8003b42:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8003b46:	42a8      	cmp	r0, r5
 8003b48:	d007      	beq.n	8003b5a <TIM_OC4_SetConfig+0x4e>
 8003b4a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003b4e:	42a8      	cmp	r0, r5
 8003b50:	d003      	beq.n	8003b5a <TIM_OC4_SetConfig+0x4e>
 8003b52:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003b56:	42a8      	cmp	r0, r5
 8003b58:	d104      	bne.n	8003b64 <TIM_OC4_SetConfig+0x58>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b5a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b5c:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b60:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b64:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b66:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b68:	684a      	ldr	r2, [r1, #4]
 8003b6a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b6c:	6203      	str	r3, [r0, #32]
}
 8003b6e:	bd30      	pop	{r4, r5, pc}
 8003b70:	40012c00 	.word	0x40012c00

08003b74 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003b74:	6a03      	ldr	r3, [r0, #32]
 8003b76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b7a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b7c:	6a03      	ldr	r3, [r0, #32]
{
 8003b7e:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b80:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b82:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b84:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003b86:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003b8a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8003b8e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003b90:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8003b92:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003b96:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b9a:	4d0f      	ldr	r5, [pc, #60]	; (8003bd8 <TIM_OC5_SetConfig+0x64>)
 8003b9c:	42a8      	cmp	r0, r5
 8003b9e:	d00f      	beq.n	8003bc0 <TIM_OC5_SetConfig+0x4c>
 8003ba0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003ba4:	42a8      	cmp	r0, r5
 8003ba6:	d00b      	beq.n	8003bc0 <TIM_OC5_SetConfig+0x4c>
 8003ba8:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8003bac:	42a8      	cmp	r0, r5
 8003bae:	d007      	beq.n	8003bc0 <TIM_OC5_SetConfig+0x4c>
 8003bb0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003bb4:	42a8      	cmp	r0, r5
 8003bb6:	d003      	beq.n	8003bc0 <TIM_OC5_SetConfig+0x4c>
 8003bb8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003bbc:	42a8      	cmp	r0, r5
 8003bbe:	d104      	bne.n	8003bca <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003bc0:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003bc2:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003bc6:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bca:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003bcc:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003bce:	684a      	ldr	r2, [r1, #4]
 8003bd0:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bd2:	6203      	str	r3, [r0, #32]
}
 8003bd4:	bd30      	pop	{r4, r5, pc}
 8003bd6:	bf00      	nop
 8003bd8:	40012c00 	.word	0x40012c00

08003bdc <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003bdc:	6a03      	ldr	r3, [r0, #32]
 8003bde:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003be2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003be4:	6a03      	ldr	r3, [r0, #32]
{
 8003be6:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003be8:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003bea:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bec:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003bee:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003bf2:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bf6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003bfa:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003bfc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003c00:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c04:	4d0e      	ldr	r5, [pc, #56]	; (8003c40 <TIM_OC6_SetConfig+0x64>)
 8003c06:	42a8      	cmp	r0, r5
 8003c08:	d00f      	beq.n	8003c2a <TIM_OC6_SetConfig+0x4e>
 8003c0a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003c0e:	42a8      	cmp	r0, r5
 8003c10:	d00b      	beq.n	8003c2a <TIM_OC6_SetConfig+0x4e>
 8003c12:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8003c16:	42a8      	cmp	r0, r5
 8003c18:	d007      	beq.n	8003c2a <TIM_OC6_SetConfig+0x4e>
 8003c1a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003c1e:	42a8      	cmp	r0, r5
 8003c20:	d003      	beq.n	8003c2a <TIM_OC6_SetConfig+0x4e>
 8003c22:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003c26:	42a8      	cmp	r0, r5
 8003c28:	d104      	bne.n	8003c34 <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003c2a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003c2c:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003c30:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c34:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c36:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003c38:	684a      	ldr	r2, [r1, #4]
 8003c3a:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c3c:	6203      	str	r3, [r0, #32]
}
 8003c3e:	bd30      	pop	{r4, r5, pc}
 8003c40:	40012c00 	.word	0x40012c00

08003c44 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003c44:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d12f      	bne.n	8003cac <HAL_TIM_Base_Start_IT+0x68>
  htim->State = HAL_TIM_STATE_BUSY;
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c52:	6803      	ldr	r3, [r0, #0]
 8003c54:	68da      	ldr	r2, [r3, #12]
 8003c56:	f042 0201 	orr.w	r2, r2, #1
 8003c5a:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c5c:	4a14      	ldr	r2, [pc, #80]	; (8003cb0 <HAL_TIM_Base_Start_IT+0x6c>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d016      	beq.n	8003c90 <HAL_TIM_Base_Start_IT+0x4c>
 8003c62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c66:	d013      	beq.n	8003c90 <HAL_TIM_Base_Start_IT+0x4c>
 8003c68:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d00f      	beq.n	8003c90 <HAL_TIM_Base_Start_IT+0x4c>
 8003c70:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d00b      	beq.n	8003c90 <HAL_TIM_Base_Start_IT+0x4c>
 8003c78:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d007      	beq.n	8003c90 <HAL_TIM_Base_Start_IT+0x4c>
 8003c80:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d003      	beq.n	8003c90 <HAL_TIM_Base_Start_IT+0x4c>
 8003c88:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d107      	bne.n	8003ca0 <HAL_TIM_Base_Start_IT+0x5c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c90:	6899      	ldr	r1, [r3, #8]
 8003c92:	4a08      	ldr	r2, [pc, #32]	; (8003cb4 <HAL_TIM_Base_Start_IT+0x70>)
 8003c94:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c96:	2a06      	cmp	r2, #6
 8003c98:	d006      	beq.n	8003ca8 <HAL_TIM_Base_Start_IT+0x64>
 8003c9a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003c9e:	d003      	beq.n	8003ca8 <HAL_TIM_Base_Start_IT+0x64>
    __HAL_TIM_ENABLE(htim);
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	f042 0201 	orr.w	r2, r2, #1
 8003ca6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003ca8:	2000      	movs	r0, #0
}
 8003caa:	4770      	bx	lr
    return HAL_ERROR;
 8003cac:	2001      	movs	r0, #1
 8003cae:	4770      	bx	lr
 8003cb0:	40012c00 	.word	0x40012c00
 8003cb4:	00010007 	.word	0x00010007

08003cb8 <HAL_TIM_PWM_MspInit>:
 8003cb8:	4770      	bx	lr

08003cba <HAL_TIM_OC_DelayElapsedCallback>:
 8003cba:	4770      	bx	lr

08003cbc <HAL_TIM_IC_CaptureCallback>:
 8003cbc:	4770      	bx	lr

08003cbe <HAL_TIM_PWM_PulseFinishedCallback>:
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_TIM_TriggerCallback>:
 8003cc0:	4770      	bx	lr

08003cc2 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003cc2:	6803      	ldr	r3, [r0, #0]
 8003cc4:	691a      	ldr	r2, [r3, #16]
 8003cc6:	0791      	lsls	r1, r2, #30
{
 8003cc8:	b510      	push	{r4, lr}
 8003cca:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ccc:	d50f      	bpl.n	8003cee <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003cce:	68da      	ldr	r2, [r3, #12]
 8003cd0:	0792      	lsls	r2, r2, #30
 8003cd2:	d50c      	bpl.n	8003cee <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003cd4:	f06f 0202 	mvn.w	r2, #2
 8003cd8:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003cda:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cdc:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003cde:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ce0:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ce2:	f000 8085 	beq.w	8003df0 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8003ce6:	f7ff ffe9 	bl	8003cbc <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cea:	2300      	movs	r3, #0
 8003cec:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003cee:	6823      	ldr	r3, [r4, #0]
 8003cf0:	691a      	ldr	r2, [r3, #16]
 8003cf2:	0752      	lsls	r2, r2, #29
 8003cf4:	d510      	bpl.n	8003d18 <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003cf6:	68da      	ldr	r2, [r3, #12]
 8003cf8:	0750      	lsls	r0, r2, #29
 8003cfa:	d50d      	bpl.n	8003d18 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003cfc:	f06f 0204 	mvn.w	r2, #4
 8003d00:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d02:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d04:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d06:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d0a:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8003d0c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d0e:	d075      	beq.n	8003dfc <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8003d10:	f7ff ffd4 	bl	8003cbc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d14:	2300      	movs	r3, #0
 8003d16:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d18:	6823      	ldr	r3, [r4, #0]
 8003d1a:	691a      	ldr	r2, [r3, #16]
 8003d1c:	0711      	lsls	r1, r2, #28
 8003d1e:	d50f      	bpl.n	8003d40 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d20:	68da      	ldr	r2, [r3, #12]
 8003d22:	0712      	lsls	r2, r2, #28
 8003d24:	d50c      	bpl.n	8003d40 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d26:	f06f 0208 	mvn.w	r2, #8
 8003d2a:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d2c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d2e:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d30:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d32:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8003d34:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d36:	d067      	beq.n	8003e08 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8003d38:	f7ff ffc0 	bl	8003cbc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d40:	6823      	ldr	r3, [r4, #0]
 8003d42:	691a      	ldr	r2, [r3, #16]
 8003d44:	06d0      	lsls	r0, r2, #27
 8003d46:	d510      	bpl.n	8003d6a <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d48:	68da      	ldr	r2, [r3, #12]
 8003d4a:	06d1      	lsls	r1, r2, #27
 8003d4c:	d50d      	bpl.n	8003d6a <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d4e:	f06f 0210 	mvn.w	r2, #16
 8003d52:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d54:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d56:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d58:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d5c:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8003d5e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d60:	d058      	beq.n	8003e14 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8003d62:	f7ff ffab 	bl	8003cbc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d66:	2300      	movs	r3, #0
 8003d68:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d6a:	6823      	ldr	r3, [r4, #0]
 8003d6c:	691a      	ldr	r2, [r3, #16]
 8003d6e:	07d2      	lsls	r2, r2, #31
 8003d70:	d508      	bpl.n	8003d84 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d72:	68da      	ldr	r2, [r3, #12]
 8003d74:	07d0      	lsls	r0, r2, #31
 8003d76:	d505      	bpl.n	8003d84 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d78:	f06f 0201 	mvn.w	r2, #1
 8003d7c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d7e:	4620      	mov	r0, r4
 8003d80:	f7fd fd82 	bl	8001888 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d84:	6823      	ldr	r3, [r4, #0]
 8003d86:	691a      	ldr	r2, [r3, #16]
 8003d88:	0611      	lsls	r1, r2, #24
 8003d8a:	d508      	bpl.n	8003d9e <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d8c:	68da      	ldr	r2, [r3, #12]
 8003d8e:	0612      	lsls	r2, r2, #24
 8003d90:	d505      	bpl.n	8003d9e <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d92:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d96:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003d98:	4620      	mov	r0, r4
 8003d9a:	f000 fb94 	bl	80044c6 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003d9e:	6823      	ldr	r3, [r4, #0]
 8003da0:	691a      	ldr	r2, [r3, #16]
 8003da2:	05d0      	lsls	r0, r2, #23
 8003da4:	d508      	bpl.n	8003db8 <HAL_TIM_IRQHandler+0xf6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003da6:	68da      	ldr	r2, [r3, #12]
 8003da8:	0611      	lsls	r1, r2, #24
 8003daa:	d505      	bpl.n	8003db8 <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003dac:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003db0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8003db2:	4620      	mov	r0, r4
 8003db4:	f000 fb88 	bl	80044c8 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003db8:	6823      	ldr	r3, [r4, #0]
 8003dba:	691a      	ldr	r2, [r3, #16]
 8003dbc:	0652      	lsls	r2, r2, #25
 8003dbe:	d508      	bpl.n	8003dd2 <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003dc0:	68da      	ldr	r2, [r3, #12]
 8003dc2:	0650      	lsls	r0, r2, #25
 8003dc4:	d505      	bpl.n	8003dd2 <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003dc6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003dca:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003dcc:	4620      	mov	r0, r4
 8003dce:	f7ff ff77 	bl	8003cc0 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003dd2:	6823      	ldr	r3, [r4, #0]
 8003dd4:	691a      	ldr	r2, [r3, #16]
 8003dd6:	0691      	lsls	r1, r2, #26
 8003dd8:	d522      	bpl.n	8003e20 <HAL_TIM_IRQHandler+0x15e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003dda:	68da      	ldr	r2, [r3, #12]
 8003ddc:	0692      	lsls	r2, r2, #26
 8003dde:	d51f      	bpl.n	8003e20 <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003de0:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8003de4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003de6:	611a      	str	r2, [r3, #16]
}
 8003de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8003dec:	f000 bb6a 	b.w	80044c4 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003df0:	f7ff ff63 	bl	8003cba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003df4:	4620      	mov	r0, r4
 8003df6:	f7ff ff62 	bl	8003cbe <HAL_TIM_PWM_PulseFinishedCallback>
 8003dfa:	e776      	b.n	8003cea <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dfc:	f7ff ff5d 	bl	8003cba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e00:	4620      	mov	r0, r4
 8003e02:	f7ff ff5c 	bl	8003cbe <HAL_TIM_PWM_PulseFinishedCallback>
 8003e06:	e785      	b.n	8003d14 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e08:	f7ff ff57 	bl	8003cba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e0c:	4620      	mov	r0, r4
 8003e0e:	f7ff ff56 	bl	8003cbe <HAL_TIM_PWM_PulseFinishedCallback>
 8003e12:	e793      	b.n	8003d3c <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e14:	f7ff ff51 	bl	8003cba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e18:	4620      	mov	r0, r4
 8003e1a:	f7ff ff50 	bl	8003cbe <HAL_TIM_PWM_PulseFinishedCallback>
 8003e1e:	e7a2      	b.n	8003d66 <HAL_TIM_IRQHandler+0xa4>
}
 8003e20:	bd10      	pop	{r4, pc}
	...

08003e24 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e24:	4a30      	ldr	r2, [pc, #192]	; (8003ee8 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8003e26:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e28:	4290      	cmp	r0, r2
 8003e2a:	d012      	beq.n	8003e52 <TIM_Base_SetConfig+0x2e>
 8003e2c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003e30:	d00f      	beq.n	8003e52 <TIM_Base_SetConfig+0x2e>
 8003e32:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003e36:	4290      	cmp	r0, r2
 8003e38:	d00b      	beq.n	8003e52 <TIM_Base_SetConfig+0x2e>
 8003e3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e3e:	4290      	cmp	r0, r2
 8003e40:	d007      	beq.n	8003e52 <TIM_Base_SetConfig+0x2e>
 8003e42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e46:	4290      	cmp	r0, r2
 8003e48:	d003      	beq.n	8003e52 <TIM_Base_SetConfig+0x2e>
 8003e4a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8003e4e:	4290      	cmp	r0, r2
 8003e50:	d119      	bne.n	8003e86 <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 8003e52:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003e58:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e5a:	4a23      	ldr	r2, [pc, #140]	; (8003ee8 <TIM_Base_SetConfig+0xc4>)
 8003e5c:	4290      	cmp	r0, r2
 8003e5e:	d01d      	beq.n	8003e9c <TIM_Base_SetConfig+0x78>
 8003e60:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003e64:	d01a      	beq.n	8003e9c <TIM_Base_SetConfig+0x78>
 8003e66:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003e6a:	4290      	cmp	r0, r2
 8003e6c:	d016      	beq.n	8003e9c <TIM_Base_SetConfig+0x78>
 8003e6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e72:	4290      	cmp	r0, r2
 8003e74:	d012      	beq.n	8003e9c <TIM_Base_SetConfig+0x78>
 8003e76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e7a:	4290      	cmp	r0, r2
 8003e7c:	d00e      	beq.n	8003e9c <TIM_Base_SetConfig+0x78>
 8003e7e:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8003e82:	4290      	cmp	r0, r2
 8003e84:	d00a      	beq.n	8003e9c <TIM_Base_SetConfig+0x78>
 8003e86:	4a19      	ldr	r2, [pc, #100]	; (8003eec <TIM_Base_SetConfig+0xc8>)
 8003e88:	4290      	cmp	r0, r2
 8003e8a:	d007      	beq.n	8003e9c <TIM_Base_SetConfig+0x78>
 8003e8c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e90:	4290      	cmp	r0, r2
 8003e92:	d003      	beq.n	8003e9c <TIM_Base_SetConfig+0x78>
 8003e94:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003e98:	4290      	cmp	r0, r2
 8003e9a:	d103      	bne.n	8003ea4 <TIM_Base_SetConfig+0x80>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e9c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ea2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ea4:	694a      	ldr	r2, [r1, #20]
 8003ea6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003eaa:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8003eac:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003eae:	688b      	ldr	r3, [r1, #8]
 8003eb0:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003eb2:	680b      	ldr	r3, [r1, #0]
 8003eb4:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003eb6:	4b0c      	ldr	r3, [pc, #48]	; (8003ee8 <TIM_Base_SetConfig+0xc4>)
 8003eb8:	4298      	cmp	r0, r3
 8003eba:	d00f      	beq.n	8003edc <TIM_Base_SetConfig+0xb8>
 8003ebc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ec0:	4298      	cmp	r0, r3
 8003ec2:	d00b      	beq.n	8003edc <TIM_Base_SetConfig+0xb8>
 8003ec4:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8003ec8:	4298      	cmp	r0, r3
 8003eca:	d007      	beq.n	8003edc <TIM_Base_SetConfig+0xb8>
 8003ecc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ed0:	4298      	cmp	r0, r3
 8003ed2:	d003      	beq.n	8003edc <TIM_Base_SetConfig+0xb8>
 8003ed4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ed8:	4298      	cmp	r0, r3
 8003eda:	d101      	bne.n	8003ee0 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 8003edc:	690b      	ldr	r3, [r1, #16]
 8003ede:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	6143      	str	r3, [r0, #20]
}
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	40012c00 	.word	0x40012c00
 8003eec:	40014000 	.word	0x40014000

08003ef0 <HAL_TIM_Base_Init>:
{
 8003ef0:	b510      	push	{r4, lr}
  if (htim == NULL)
 8003ef2:	4604      	mov	r4, r0
 8003ef4:	b350      	cbz	r0, 8003f4c <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003ef6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003efa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003efe:	b91b      	cbnz	r3, 8003f08 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003f00:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003f04:	f7fd fdbc 	bl	8001a80 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003f08:	2302      	movs	r3, #2
 8003f0a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f0e:	6820      	ldr	r0, [r4, #0]
 8003f10:	1d21      	adds	r1, r4, #4
 8003f12:	f7ff ff87 	bl	8003e24 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f16:	2301      	movs	r3, #1
 8003f18:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 8003f1c:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f1e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003f22:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003f26:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003f2a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003f2e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f36:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003f3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f3e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8003f42:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003f46:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8003f4a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003f4c:	2001      	movs	r0, #1
 8003f4e:	e7fc      	b.n	8003f4a <HAL_TIM_Base_Init+0x5a>

08003f50 <HAL_TIM_PWM_Init>:
{
 8003f50:	b510      	push	{r4, lr}
  if (htim == NULL)
 8003f52:	4604      	mov	r4, r0
 8003f54:	b350      	cbz	r0, 8003fac <HAL_TIM_PWM_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003f56:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003f5a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003f5e:	b91b      	cbnz	r3, 8003f68 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003f60:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8003f64:	f7ff fea8 	bl	8003cb8 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003f68:	2302      	movs	r3, #2
 8003f6a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f6e:	6820      	ldr	r0, [r4, #0]
 8003f70:	1d21      	adds	r1, r4, #4
 8003f72:	f7ff ff57 	bl	8003e24 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f76:	2301      	movs	r3, #1
 8003f78:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 8003f7c:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f7e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8003f82:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8003f86:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003f8a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8003f8e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f96:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003f9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f9e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8003fa2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8003fa6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8003faa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003fac:	2001      	movs	r0, #1
 8003fae:	e7fc      	b.n	8003faa <HAL_TIM_PWM_Init+0x5a>

08003fb0 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fb0:	6a03      	ldr	r3, [r0, #32]
 8003fb2:	f023 0310 	bic.w	r3, r3, #16
 8003fb6:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003fb8:	6a03      	ldr	r3, [r0, #32]
{
 8003fba:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 8003fbc:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8003fbe:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fc0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003fc2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003fc6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fca:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003fce:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8003fd0:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003fd4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003fd8:	4d16      	ldr	r5, [pc, #88]	; (8004034 <TIM_OC2_SetConfig+0x84>)
 8003fda:	42a8      	cmp	r0, r5
 8003fdc:	d003      	beq.n	8003fe6 <TIM_OC2_SetConfig+0x36>
 8003fde:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003fe2:	42a8      	cmp	r0, r5
 8003fe4:	d10d      	bne.n	8004002 <TIM_OC2_SetConfig+0x52>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003fe6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8003fe8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003fec:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ff0:	4d10      	ldr	r5, [pc, #64]	; (8004034 <TIM_OC2_SetConfig+0x84>)
 8003ff2:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ff4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ff8:	d00e      	beq.n	8004018 <TIM_OC2_SetConfig+0x68>
 8003ffa:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003ffe:	42a8      	cmp	r0, r5
 8004000:	d00a      	beq.n	8004018 <TIM_OC2_SetConfig+0x68>
 8004002:	4d0d      	ldr	r5, [pc, #52]	; (8004038 <TIM_OC2_SetConfig+0x88>)
 8004004:	42a8      	cmp	r0, r5
 8004006:	d007      	beq.n	8004018 <TIM_OC2_SetConfig+0x68>
 8004008:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800400c:	42a8      	cmp	r0, r5
 800400e:	d003      	beq.n	8004018 <TIM_OC2_SetConfig+0x68>
 8004010:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004014:	42a8      	cmp	r0, r5
 8004016:	d106      	bne.n	8004026 <TIM_OC2_SetConfig+0x76>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004018:	f424 6540 	bic.w	r5, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800401c:	e9d1 4605 	ldrd	r4, r6, [r1, #20]
 8004020:	4334      	orrs	r4, r6
 8004022:	ea45 0484 	orr.w	r4, r5, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 8004026:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004028:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800402a:	684a      	ldr	r2, [r1, #4]
 800402c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800402e:	6203      	str	r3, [r0, #32]
}
 8004030:	bd70      	pop	{r4, r5, r6, pc}
 8004032:	bf00      	nop
 8004034:	40012c00 	.word	0x40012c00
 8004038:	40014000 	.word	0x40014000

0800403c <HAL_TIM_PWM_ConfigChannel>:
{
 800403c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800403e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004042:	2b01      	cmp	r3, #1
{
 8004044:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8004046:	d078      	beq.n	800413a <HAL_TIM_PWM_ConfigChannel+0xfe>
 8004048:	2301      	movs	r3, #1
  switch (Channel)
 800404a:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 800404c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8004050:	d040      	beq.n	80040d4 <HAL_TIM_PWM_ConfigChannel+0x98>
 8004052:	d806      	bhi.n	8004062 <HAL_TIM_PWM_ConfigChannel+0x26>
 8004054:	b1e2      	cbz	r2, 8004090 <HAL_TIM_PWM_ConfigChannel+0x54>
 8004056:	2a04      	cmp	r2, #4
 8004058:	d02b      	beq.n	80040b2 <HAL_TIM_PWM_ConfigChannel+0x76>
  __HAL_UNLOCK(htim);
 800405a:	2000      	movs	r0, #0
 800405c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8004060:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8004062:	2a10      	cmp	r2, #16
 8004064:	d047      	beq.n	80040f6 <HAL_TIM_PWM_ConfigChannel+0xba>
 8004066:	2a14      	cmp	r2, #20
 8004068:	d056      	beq.n	8004118 <HAL_TIM_PWM_ConfigChannel+0xdc>
 800406a:	2a0c      	cmp	r2, #12
 800406c:	d1f5      	bne.n	800405a <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800406e:	6800      	ldr	r0, [r0, #0]
 8004070:	f7ff fd4c 	bl	8003b0c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004074:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004076:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004078:	69da      	ldr	r2, [r3, #28]
 800407a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800407e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004080:	69da      	ldr	r2, [r3, #28]
 8004082:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004086:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004088:	69da      	ldr	r2, [r3, #28]
 800408a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800408e:	e030      	b.n	80040f2 <HAL_TIM_PWM_ConfigChannel+0xb6>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004090:	6800      	ldr	r0, [r0, #0]
 8004092:	f7ff fcab 	bl	80039ec <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004096:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004098:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800409a:	699a      	ldr	r2, [r3, #24]
 800409c:	f042 0208 	orr.w	r2, r2, #8
 80040a0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80040a2:	699a      	ldr	r2, [r3, #24]
 80040a4:	f022 0204 	bic.w	r2, r2, #4
 80040a8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040aa:	699a      	ldr	r2, [r3, #24]
 80040ac:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040ae:	619a      	str	r2, [r3, #24]
      break;
 80040b0:	e7d3      	b.n	800405a <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040b2:	6800      	ldr	r0, [r0, #0]
 80040b4:	f7ff ff7c 	bl	8003fb0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040b8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040ba:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040bc:	699a      	ldr	r2, [r3, #24]
 80040be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040c4:	699a      	ldr	r2, [r3, #24]
 80040c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040cc:	699a      	ldr	r2, [r3, #24]
 80040ce:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80040d2:	e7ec      	b.n	80040ae <HAL_TIM_PWM_ConfigChannel+0x72>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040d4:	6800      	ldr	r0, [r0, #0]
 80040d6:	f7ff fcd5 	bl	8003a84 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040da:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040dc:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040de:	69da      	ldr	r2, [r3, #28]
 80040e0:	f042 0208 	orr.w	r2, r2, #8
 80040e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040e6:	69da      	ldr	r2, [r3, #28]
 80040e8:	f022 0204 	bic.w	r2, r2, #4
 80040ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040ee:	69da      	ldr	r2, [r3, #28]
 80040f0:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80040f2:	61da      	str	r2, [r3, #28]
      break;
 80040f4:	e7b1      	b.n	800405a <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80040f6:	6800      	ldr	r0, [r0, #0]
 80040f8:	f7ff fd3c 	bl	8003b74 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80040fc:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80040fe:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004100:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004102:	f042 0208 	orr.w	r2, r2, #8
 8004106:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004108:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800410a:	f022 0204 	bic.w	r2, r2, #4
 800410e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004110:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004112:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004114:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004116:	e7a0      	b.n	800405a <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004118:	6800      	ldr	r0, [r0, #0]
 800411a:	f7ff fd5f 	bl	8003bdc <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800411e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004120:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004122:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004124:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004128:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800412a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800412c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004130:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004132:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004134:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004138:	e7ec      	b.n	8004114 <HAL_TIM_PWM_ConfigChannel+0xd8>
  __HAL_LOCK(htim);
 800413a:	2002      	movs	r0, #2
 800413c:	e790      	b.n	8004060 <HAL_TIM_PWM_ConfigChannel+0x24>

0800413e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800413e:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004140:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004142:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004144:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004148:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800414c:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800414e:	6083      	str	r3, [r0, #8]
}
 8004150:	bd10      	pop	{r4, pc}
	...

08004154 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8004154:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004158:	2b01      	cmp	r3, #1
{
 800415a:	b570      	push	{r4, r5, r6, lr}
 800415c:	4604      	mov	r4, r0
 800415e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8004162:	d017      	beq.n	8004194 <HAL_TIM_ConfigClockSource+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 8004164:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8004168:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 800416a:	2301      	movs	r3, #1
 800416c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8004170:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004172:	4b41      	ldr	r3, [pc, #260]	; (8004278 <HAL_TIM_ConfigClockSource+0x124>)
 8004174:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8004176:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8004178:	680b      	ldr	r3, [r1, #0]
 800417a:	2b40      	cmp	r3, #64	; 0x40
 800417c:	d065      	beq.n	800424a <HAL_TIM_ConfigClockSource+0xf6>
 800417e:	d815      	bhi.n	80041ac <HAL_TIM_ConfigClockSource+0x58>
 8004180:	2b10      	cmp	r3, #16
 8004182:	d00c      	beq.n	800419e <HAL_TIM_ConfigClockSource+0x4a>
 8004184:	d807      	bhi.n	8004196 <HAL_TIM_ConfigClockSource+0x42>
 8004186:	b153      	cbz	r3, 800419e <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_READY;
 8004188:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800418a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800418c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004190:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8004194:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8004196:	2b20      	cmp	r3, #32
 8004198:	d001      	beq.n	800419e <HAL_TIM_ConfigClockSource+0x4a>
 800419a:	2b30      	cmp	r3, #48	; 0x30
 800419c:	d1f4      	bne.n	8004188 <HAL_TIM_ConfigClockSource+0x34>
  tmpsmcr = TIMx->SMCR;
 800419e:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041a0:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 80041a4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041a8:	4313      	orrs	r3, r2
 80041aa:	e01a      	b.n	80041e2 <HAL_TIM_ConfigClockSource+0x8e>
  switch (sClockSourceConfig->ClockSource)
 80041ac:	2b60      	cmp	r3, #96	; 0x60
 80041ae:	d034      	beq.n	800421a <HAL_TIM_ConfigClockSource+0xc6>
 80041b0:	d819      	bhi.n	80041e6 <HAL_TIM_ConfigClockSource+0x92>
 80041b2:	2b50      	cmp	r3, #80	; 0x50
 80041b4:	d1e8      	bne.n	8004188 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041b6:	684a      	ldr	r2, [r1, #4]
 80041b8:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80041ba:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041bc:	6a05      	ldr	r5, [r0, #32]
 80041be:	f025 0501 	bic.w	r5, r5, #1
 80041c2:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041c4:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041c6:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041ce:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80041d2:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80041d4:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80041d6:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80041d8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80041da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041de:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80041e2:	6083      	str	r3, [r0, #8]
 80041e4:	e7d0      	b.n	8004188 <HAL_TIM_ConfigClockSource+0x34>
  switch (sClockSourceConfig->ClockSource)
 80041e6:	2b70      	cmp	r3, #112	; 0x70
 80041e8:	d00c      	beq.n	8004204 <HAL_TIM_ConfigClockSource+0xb0>
 80041ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041ee:	d1cb      	bne.n	8004188 <HAL_TIM_ConfigClockSource+0x34>
      TIM_ETR_SetConfig(htim->Instance,
 80041f0:	68cb      	ldr	r3, [r1, #12]
 80041f2:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80041f6:	f7ff ffa2 	bl	800413e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041fa:	6822      	ldr	r2, [r4, #0]
 80041fc:	6893      	ldr	r3, [r2, #8]
 80041fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004202:	e008      	b.n	8004216 <HAL_TIM_ConfigClockSource+0xc2>
      TIM_ETR_SetConfig(htim->Instance,
 8004204:	68cb      	ldr	r3, [r1, #12]
 8004206:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800420a:	f7ff ff98 	bl	800413e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800420e:	6822      	ldr	r2, [r4, #0]
 8004210:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004212:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004216:	6093      	str	r3, [r2, #8]
      break;
 8004218:	e7b6      	b.n	8004188 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800421a:	684d      	ldr	r5, [r1, #4]
 800421c:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800421e:	6a01      	ldr	r1, [r0, #32]
 8004220:	f021 0110 	bic.w	r1, r1, #16
 8004224:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004226:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8004228:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800422a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800422e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004232:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004236:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800423a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800423c:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800423e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004240:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004244:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8004248:	e7cb      	b.n	80041e2 <HAL_TIM_ConfigClockSource+0x8e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800424a:	684a      	ldr	r2, [r1, #4]
 800424c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800424e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004250:	6a05      	ldr	r5, [r0, #32]
 8004252:	f025 0501 	bic.w	r5, r5, #1
 8004256:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004258:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800425a:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800425e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004262:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8004266:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8004268:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800426a:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800426c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800426e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004272:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8004276:	e7b4      	b.n	80041e2 <HAL_TIM_ConfigClockSource+0x8e>
 8004278:	fffe0088 	.word	0xfffe0088

0800427c <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800427c:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800427e:	f001 011f 	and.w	r1, r1, #31
{
 8004282:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004284:	2401      	movs	r4, #1
 8004286:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8004288:	ea23 0304 	bic.w	r3, r3, r4
 800428c:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800428e:	6a03      	ldr	r3, [r0, #32]
 8004290:	408a      	lsls	r2, r1
 8004292:	431a      	orrs	r2, r3
 8004294:	6202      	str	r2, [r0, #32]
}
 8004296:	bd10      	pop	{r4, pc}

08004298 <HAL_TIM_OC_Start>:
{
 8004298:	b510      	push	{r4, lr}
 800429a:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800429c:	b929      	cbnz	r1, 80042aa <HAL_TIM_OC_Start+0x12>
 800429e:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d031      	beq.n	800430a <HAL_TIM_OC_Start+0x72>
    return HAL_ERROR;
 80042a6:	2001      	movs	r0, #1
}
 80042a8:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80042aa:	2904      	cmp	r1, #4
 80042ac:	d107      	bne.n	80042be <HAL_TIM_OC_Start+0x26>
 80042ae:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d1f7      	bne.n	80042a6 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042b6:	2302      	movs	r3, #2
 80042b8:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 80042bc:	e028      	b.n	8004310 <HAL_TIM_OC_Start+0x78>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80042be:	2908      	cmp	r1, #8
 80042c0:	d107      	bne.n	80042d2 <HAL_TIM_OC_Start+0x3a>
 80042c2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d1ed      	bne.n	80042a6 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042ca:	2302      	movs	r3, #2
 80042cc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80042d0:	e01e      	b.n	8004310 <HAL_TIM_OC_Start+0x78>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80042d2:	290c      	cmp	r1, #12
 80042d4:	d107      	bne.n	80042e6 <HAL_TIM_OC_Start+0x4e>
 80042d6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d1e3      	bne.n	80042a6 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042de:	2302      	movs	r3, #2
 80042e0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 80042e4:	e014      	b.n	8004310 <HAL_TIM_OC_Start+0x78>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80042e6:	2910      	cmp	r1, #16
 80042e8:	d107      	bne.n	80042fa <HAL_TIM_OC_Start+0x62>
 80042ea:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d1d9      	bne.n	80042a6 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042f2:	2302      	movs	r3, #2
 80042f4:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
 80042f8:	e00a      	b.n	8004310 <HAL_TIM_OC_Start+0x78>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80042fa:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d1d1      	bne.n	80042a6 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004302:	2302      	movs	r3, #2
 8004304:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
 8004308:	e002      	b.n	8004310 <HAL_TIM_OC_Start+0x78>
 800430a:	2302      	movs	r3, #2
 800430c:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004310:	2201      	movs	r2, #1
 8004312:	6820      	ldr	r0, [r4, #0]
 8004314:	f7ff ffb2 	bl	800427c <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004318:	6823      	ldr	r3, [r4, #0]
 800431a:	4a20      	ldr	r2, [pc, #128]	; (800439c <HAL_TIM_OC_Start+0x104>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d019      	beq.n	8004354 <HAL_TIM_OC_Start+0xbc>
 8004320:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004324:	4293      	cmp	r3, r2
 8004326:	d015      	beq.n	8004354 <HAL_TIM_OC_Start+0xbc>
 8004328:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800432c:	4293      	cmp	r3, r2
 800432e:	d011      	beq.n	8004354 <HAL_TIM_OC_Start+0xbc>
 8004330:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004334:	4293      	cmp	r3, r2
 8004336:	d00d      	beq.n	8004354 <HAL_TIM_OC_Start+0xbc>
 8004338:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800433c:	4293      	cmp	r3, r2
 800433e:	d009      	beq.n	8004354 <HAL_TIM_OC_Start+0xbc>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004344:	d10e      	bne.n	8004364 <HAL_TIM_OC_Start+0xcc>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004346:	6899      	ldr	r1, [r3, #8]
 8004348:	4a15      	ldr	r2, [pc, #84]	; (80043a0 <HAL_TIM_OC_Start+0x108>)
 800434a:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800434c:	2a06      	cmp	r2, #6
 800434e:	d121      	bne.n	8004394 <HAL_TIM_OC_Start+0xfc>
  return HAL_OK;
 8004350:	2000      	movs	r0, #0
 8004352:	e7a9      	b.n	80042a8 <HAL_TIM_OC_Start+0x10>
    __HAL_TIM_MOE_ENABLE(htim);
 8004354:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004356:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800435a:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800435c:	4a0f      	ldr	r2, [pc, #60]	; (800439c <HAL_TIM_OC_Start+0x104>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d1ee      	bne.n	8004340 <HAL_TIM_OC_Start+0xa8>
 8004362:	e7f0      	b.n	8004346 <HAL_TIM_OC_Start+0xae>
 8004364:	4a0f      	ldr	r2, [pc, #60]	; (80043a4 <HAL_TIM_OC_Start+0x10c>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d0ed      	beq.n	8004346 <HAL_TIM_OC_Start+0xae>
 800436a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800436e:	4293      	cmp	r3, r2
 8004370:	d0e9      	beq.n	8004346 <HAL_TIM_OC_Start+0xae>
 8004372:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004376:	4293      	cmp	r3, r2
 8004378:	d0e5      	beq.n	8004346 <HAL_TIM_OC_Start+0xae>
 800437a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800437e:	4293      	cmp	r3, r2
 8004380:	d0e1      	beq.n	8004346 <HAL_TIM_OC_Start+0xae>
 8004382:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8004386:	4293      	cmp	r3, r2
 8004388:	d0dd      	beq.n	8004346 <HAL_TIM_OC_Start+0xae>
    __HAL_TIM_ENABLE(htim);
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	f042 0201 	orr.w	r2, r2, #1
 8004390:	601a      	str	r2, [r3, #0]
 8004392:	e7dd      	b.n	8004350 <HAL_TIM_OC_Start+0xb8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004394:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004398:	d1f7      	bne.n	800438a <HAL_TIM_OC_Start+0xf2>
 800439a:	e7d9      	b.n	8004350 <HAL_TIM_OC_Start+0xb8>
 800439c:	40012c00 	.word	0x40012c00
 80043a0:	00010007 	.word	0x00010007
 80043a4:	40000400 	.word	0x40000400

080043a8 <HAL_TIM_PWM_Start>:
 80043a8:	f7ff bf76 	b.w	8004298 <HAL_TIM_OC_Start>

080043ac <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043ac:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80043b0:	2b01      	cmp	r3, #1
{
 80043b2:	b570      	push	{r4, r5, r6, lr}
 80043b4:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80043b8:	d039      	beq.n	800442e <HAL_TIMEx_MasterConfigSynchronization+0x82>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043ba:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80043be:	4d1d      	ldr	r5, [pc, #116]	; (8004434 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
  tmpcr2 = htim->Instance->CR2;
 80043c0:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 80043c2:	2201      	movs	r2, #1
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80043c4:	42ab      	cmp	r3, r5
  __HAL_LOCK(htim);
 80043c6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpcr2 = htim->Instance->CR2;
 80043ca:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 80043cc:	689c      	ldr	r4, [r3, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80043ce:	d002      	beq.n	80043d6 <HAL_TIMEx_MasterConfigSynchronization+0x2a>
 80043d0:	4e19      	ldr	r6, [pc, #100]	; (8004438 <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
 80043d2:	42b3      	cmp	r3, r6
 80043d4:	d103      	bne.n	80043de <HAL_TIMEx_MasterConfigSynchronization+0x32>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80043d6:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80043d8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80043dc:	4332      	orrs	r2, r6
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043de:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80043e0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043e4:	4332      	orrs	r2, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043e6:	42ab      	cmp	r3, r5
  htim->Instance->CR2 = tmpcr2;
 80043e8:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043ea:	d015      	beq.n	8004418 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 80043ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043f0:	d012      	beq.n	8004418 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 80043f2:	4a12      	ldr	r2, [pc, #72]	; (800443c <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d00f      	beq.n	8004418 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 80043f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d00b      	beq.n	8004418 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 8004400:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004404:	4293      	cmp	r3, r2
 8004406:	d007      	beq.n	8004418 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 8004408:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800440c:	4293      	cmp	r3, r2
 800440e:	d003      	beq.n	8004418 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
 8004410:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8004414:	4293      	cmp	r3, r2
 8004416:	d104      	bne.n	8004422 <HAL_TIMEx_MasterConfigSynchronization+0x76>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004418:	6889      	ldr	r1, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800441a:	f024 0280 	bic.w	r2, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800441e:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004420:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004422:	2301      	movs	r3, #1
 8004424:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004428:	2300      	movs	r3, #0
 800442a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800442e:	4618      	mov	r0, r3

  return HAL_OK;
}
 8004430:	bd70      	pop	{r4, r5, r6, pc}
 8004432:	bf00      	nop
 8004434:	40012c00 	.word	0x40012c00
 8004438:	40013400 	.word	0x40013400
 800443c:	40000400 	.word	0x40000400

08004440 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004440:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004444:	2b01      	cmp	r3, #1
{
 8004446:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8004448:	d038      	beq.n	80044bc <HAL_TIMEx_ConfigBreakDeadTime+0x7c>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800444a:	68cb      	ldr	r3, [r1, #12]
 800444c:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800444e:	4c1c      	ldr	r4, [pc, #112]	; (80044c0 <HAL_TIMEx_ConfigBreakDeadTime+0x80>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004450:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004454:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004456:	684a      	ldr	r2, [r1, #4]
 8004458:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800445c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800445e:	680a      	ldr	r2, [r1, #0]
 8004460:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004464:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004466:	690a      	ldr	r2, [r1, #16]
 8004468:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800446c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800446e:	694a      	ldr	r2, [r1, #20]
 8004470:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004474:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004476:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8004478:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800447c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800447e:	698a      	ldr	r2, [r1, #24]
 8004480:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8004484:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004488:	6802      	ldr	r2, [r0, #0]
 800448a:	42a2      	cmp	r2, r4
 800448c:	d003      	beq.n	8004496 <HAL_TIMEx_ConfigBreakDeadTime+0x56>
 800448e:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8004492:	42a2      	cmp	r2, r4
 8004494:	d10c      	bne.n	80044b0 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004496:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8004498:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800449c:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80044a0:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80044a2:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80044a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044a8:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80044aa:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80044ae:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80044b0:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80044b2:	2300      	movs	r3, #0
 80044b4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80044b8:	4618      	mov	r0, r3
}
 80044ba:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 80044bc:	2002      	movs	r0, #2
 80044be:	e7fc      	b.n	80044ba <HAL_TIMEx_ConfigBreakDeadTime+0x7a>
 80044c0:	40012c00 	.word	0x40012c00

080044c4 <HAL_TIMEx_CommutCallback>:
 80044c4:	4770      	bx	lr

080044c6 <HAL_TIMEx_BreakCallback>:
 80044c6:	4770      	bx	lr

080044c8 <HAL_TIMEx_Break2Callback>:
 80044c8:	4770      	bx	lr
	...

080044cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ce:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80044d0:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044d2:	6921      	ldr	r1, [r4, #16]
 80044d4:	68a2      	ldr	r2, [r4, #8]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044d6:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044d8:	69c0      	ldr	r0, [r0, #28]
 80044da:	430a      	orrs	r2, r1
 80044dc:	6961      	ldr	r1, [r4, #20]
 80044de:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044e0:	498f      	ldr	r1, [pc, #572]	; (8004720 <UART_SetConfig+0x254>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044e2:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044e4:	4029      	ands	r1, r5
 80044e6:	430a      	orrs	r2, r1
 80044e8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044ea:	685a      	ldr	r2, [r3, #4]
 80044ec:	68e1      	ldr	r1, [r4, #12]
 80044ee:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80044f2:	430a      	orrs	r2, r1
 80044f4:	605a      	str	r2, [r3, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80044f6:	4a8b      	ldr	r2, [pc, #556]	; (8004724 <UART_SetConfig+0x258>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044f8:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80044fa:	4293      	cmp	r3, r2
  {
    tmpreg |= huart->Init.OneBitSampling;
 80044fc:	bf1c      	itt	ne
 80044fe:	6a22      	ldrne	r2, [r4, #32]
 8004500:	4311      	orrne	r1, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004502:	689a      	ldr	r2, [r3, #8]
 8004504:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8004508:	430a      	orrs	r2, r1
 800450a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800450c:	4a86      	ldr	r2, [pc, #536]	; (8004728 <UART_SetConfig+0x25c>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d113      	bne.n	800453a <UART_SetConfig+0x6e>
 8004512:	4b86      	ldr	r3, [pc, #536]	; (800472c <UART_SetConfig+0x260>)
 8004514:	4a86      	ldr	r2, [pc, #536]	; (8004730 <UART_SetConfig+0x264>)
 8004516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800451a:	f003 0303 	and.w	r3, r3, #3
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800451e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004522:	5cd3      	ldrb	r3, [r2, r3]
 8004524:	f040 809d 	bne.w	8004662 <UART_SetConfig+0x196>
  {
    switch (clocksource)
 8004528:	2b08      	cmp	r3, #8
 800452a:	d81f      	bhi.n	800456c <UART_SetConfig+0xa0>
 800452c:	e8df f003 	tbb	[pc, r3]
 8004530:	1e9791dc 	.word	0x1e9791dc
 8004534:	1e1e1ed6 	.word	0x1e1e1ed6
 8004538:	94          	.byte	0x94
 8004539:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800453a:	4a7e      	ldr	r2, [pc, #504]	; (8004734 <UART_SetConfig+0x268>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d106      	bne.n	800454e <UART_SetConfig+0x82>
 8004540:	4b7a      	ldr	r3, [pc, #488]	; (800472c <UART_SetConfig+0x260>)
 8004542:	4a7d      	ldr	r2, [pc, #500]	; (8004738 <UART_SetConfig+0x26c>)
 8004544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004548:	f003 030c 	and.w	r3, r3, #12
 800454c:	e7e7      	b.n	800451e <UART_SetConfig+0x52>
 800454e:	4a7b      	ldr	r2, [pc, #492]	; (800473c <UART_SetConfig+0x270>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d11c      	bne.n	800458e <UART_SetConfig+0xc2>
 8004554:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 8004558:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800455c:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8004560:	2a10      	cmp	r2, #16
 8004562:	f000 80b2 	beq.w	80046ca <UART_SetConfig+0x1fe>
 8004566:	d803      	bhi.n	8004570 <UART_SetConfig+0xa4>
 8004568:	2a00      	cmp	r2, #0
 800456a:	d048      	beq.n	80045fe <UART_SetConfig+0x132>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
        break;
      default:
        pclk = 0U;
        ret = HAL_ERROR;
 800456c:	2001      	movs	r0, #1
 800456e:	e04d      	b.n	800460c <UART_SetConfig+0x140>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004570:	2a20      	cmp	r2, #32
 8004572:	f000 80a2 	beq.w	80046ba <UART_SetConfig+0x1ee>
 8004576:	2a30      	cmp	r2, #48	; 0x30
 8004578:	d1f8      	bne.n	800456c <UART_SetConfig+0xa0>
  if (UART_INSTANCE_LOWPOWER(huart))
 800457a:	4a6a      	ldr	r2, [pc, #424]	; (8004724 <UART_SetConfig+0x258>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d065      	beq.n	800464c <UART_SetConfig+0x180>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004580:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8004584:	f000 80b4 	beq.w	80046f0 <UART_SetConfig+0x224>
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
        break;
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004588:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800458c:	e084      	b.n	8004698 <UART_SetConfig+0x1cc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800458e:	4a6c      	ldr	r2, [pc, #432]	; (8004740 <UART_SetConfig+0x274>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d10e      	bne.n	80045b2 <UART_SetConfig+0xe6>
 8004594:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 8004598:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800459c:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 80045a0:	2a40      	cmp	r2, #64	; 0x40
 80045a2:	f000 8092 	beq.w	80046ca <UART_SetConfig+0x1fe>
 80045a6:	d9df      	bls.n	8004568 <UART_SetConfig+0x9c>
 80045a8:	2a80      	cmp	r2, #128	; 0x80
 80045aa:	f000 8086 	beq.w	80046ba <UART_SetConfig+0x1ee>
 80045ae:	2ac0      	cmp	r2, #192	; 0xc0
 80045b0:	e7e2      	b.n	8004578 <UART_SetConfig+0xac>
 80045b2:	4a64      	ldr	r2, [pc, #400]	; (8004744 <UART_SetConfig+0x278>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d10f      	bne.n	80045d8 <UART_SetConfig+0x10c>
 80045b8:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 80045bc:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80045c0:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80045c4:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80045c8:	d07f      	beq.n	80046ca <UART_SetConfig+0x1fe>
 80045ca:	d9cd      	bls.n	8004568 <UART_SetConfig+0x9c>
 80045cc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80045d0:	d073      	beq.n	80046ba <UART_SetConfig+0x1ee>
 80045d2:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80045d6:	e7cf      	b.n	8004578 <UART_SetConfig+0xac>
 80045d8:	4a52      	ldr	r2, [pc, #328]	; (8004724 <UART_SetConfig+0x258>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d1c6      	bne.n	800456c <UART_SetConfig+0xa0>
 80045de:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
 80045e2:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80045e6:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 80045ea:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80045ee:	d06c      	beq.n	80046ca <UART_SetConfig+0x1fe>
 80045f0:	d9ba      	bls.n	8004568 <UART_SetConfig+0x9c>
 80045f2:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80045f6:	d060      	beq.n	80046ba <UART_SetConfig+0x1ee>
 80045f8:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 80045fc:	e7bc      	b.n	8004578 <UART_SetConfig+0xac>
  if (UART_INSTANCE_LOWPOWER(huart))
 80045fe:	4a49      	ldr	r2, [pc, #292]	; (8004724 <UART_SetConfig+0x258>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d16e      	bne.n	80046e2 <UART_SetConfig+0x216>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004604:	f7fe fee0 	bl	80033c8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004608:	b928      	cbnz	r0, 8004616 <UART_SetConfig+0x14a>
 800460a:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800460c:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800460e:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60

  return ret;
}
 8004612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pclk = (uint32_t) HSI_VALUE;
 8004614:	484c      	ldr	r0, [pc, #304]	; (8004748 <UART_SetConfig+0x27c>)
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004616:	6862      	ldr	r2, [r4, #4]
 8004618:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800461c:	4298      	cmp	r0, r3
 800461e:	d3a5      	bcc.n	800456c <UART_SetConfig+0xa0>
 8004620:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8004624:	d8a2      	bhi.n	800456c <UART_SetConfig+0xa0>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8004626:	0856      	lsrs	r6, r2, #1
 8004628:	f44f 7180 	mov.w	r1, #256	; 0x100
 800462c:	2700      	movs	r7, #0
 800462e:	fbe1 6700 	umlal	r6, r7, r1, r0
 8004632:	2300      	movs	r3, #0
 8004634:	4630      	mov	r0, r6
 8004636:	4639      	mov	r1, r7
 8004638:	f7fc fb06 	bl	8000c48 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800463c:	4b43      	ldr	r3, [pc, #268]	; (800474c <UART_SetConfig+0x280>)
 800463e:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004642:	429a      	cmp	r2, r3
 8004644:	d892      	bhi.n	800456c <UART_SetConfig+0xa0>
        huart->Instance->BRR = usartdiv;
 8004646:	6823      	ldr	r3, [r4, #0]
 8004648:	60d8      	str	r0, [r3, #12]
 800464a:	e7de      	b.n	800460a <UART_SetConfig+0x13e>
        pclk = (uint32_t) LSE_VALUE;
 800464c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004650:	e7e1      	b.n	8004616 <UART_SetConfig+0x14a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8004652:	f7fe fecb 	bl	80033ec <HAL_RCC_GetPCLK2Freq>
        break;
 8004656:	e049      	b.n	80046ec <UART_SetConfig+0x220>
        pclk = (uint32_t) LSE_VALUE;
 8004658:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800465c:	e048      	b.n	80046f0 <UART_SetConfig+0x224>
        pclk = (uint32_t) HSI_VALUE;
 800465e:	483a      	ldr	r0, [pc, #232]	; (8004748 <UART_SetConfig+0x27c>)
 8004660:	e046      	b.n	80046f0 <UART_SetConfig+0x224>
    switch (clocksource)
 8004662:	2b08      	cmp	r3, #8
 8004664:	d882      	bhi.n	800456c <UART_SetConfig+0xa0>
 8004666:	a201      	add	r2, pc, #4	; (adr r2, 800466c <UART_SetConfig+0x1a0>)
 8004668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800466c:	08004691 	.word	0x08004691
 8004670:	080046af 	.word	0x080046af
 8004674:	080046c7 	.word	0x080046c7
 8004678:	0800456d 	.word	0x0800456d
 800467c:	080046b5 	.word	0x080046b5
 8004680:	0800456d 	.word	0x0800456d
 8004684:	0800456d 	.word	0x0800456d
 8004688:	0800456d 	.word	0x0800456d
 800468c:	08004589 	.word	0x08004589
        pclk = HAL_RCC_GetPCLK1Freq();
 8004690:	f7fe fe9a 	bl	80033c8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004694:	2800      	cmp	r0, #0
 8004696:	d0b8      	beq.n	800460a <UART_SetConfig+0x13e>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004698:	6863      	ldr	r3, [r4, #4]
 800469a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800469e:	fbb0 f0f3 	udiv	r0, r0, r3
 80046a2:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046a4:	f1a0 0210 	sub.w	r2, r0, #16
 80046a8:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80046ac:	e7c9      	b.n	8004642 <UART_SetConfig+0x176>
        pclk = HAL_RCC_GetPCLK2Freq();
 80046ae:	f7fe fe9d 	bl	80033ec <HAL_RCC_GetPCLK2Freq>
        break;
 80046b2:	e7ef      	b.n	8004694 <UART_SetConfig+0x1c8>
        pclk = HAL_RCC_GetSysClockFreq();
 80046b4:	f7fe fb20 	bl	8002cf8 <HAL_RCC_GetSysClockFreq>
        break;
 80046b8:	e7ec      	b.n	8004694 <UART_SetConfig+0x1c8>
  if (UART_INSTANCE_LOWPOWER(huart))
 80046ba:	4a1a      	ldr	r2, [pc, #104]	; (8004724 <UART_SetConfig+0x258>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d0a9      	beq.n	8004614 <UART_SetConfig+0x148>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046c0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80046c4:	d0cb      	beq.n	800465e <UART_SetConfig+0x192>
        pclk = (uint32_t) HSI_VALUE;
 80046c6:	4820      	ldr	r0, [pc, #128]	; (8004748 <UART_SetConfig+0x27c>)
 80046c8:	e7e6      	b.n	8004698 <UART_SetConfig+0x1cc>
  if (UART_INSTANCE_LOWPOWER(huart))
 80046ca:	4a16      	ldr	r2, [pc, #88]	; (8004724 <UART_SetConfig+0x258>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d102      	bne.n	80046d6 <UART_SetConfig+0x20a>
        pclk = HAL_RCC_GetSysClockFreq();
 80046d0:	f7fe fb12 	bl	8002cf8 <HAL_RCC_GetSysClockFreq>
        break;
 80046d4:	e798      	b.n	8004608 <UART_SetConfig+0x13c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046d6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80046da:	d1eb      	bne.n	80046b4 <UART_SetConfig+0x1e8>
        pclk = HAL_RCC_GetSysClockFreq();
 80046dc:	f7fe fb0c 	bl	8002cf8 <HAL_RCC_GetSysClockFreq>
        break;
 80046e0:	e004      	b.n	80046ec <UART_SetConfig+0x220>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046e2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80046e6:	d1d3      	bne.n	8004690 <UART_SetConfig+0x1c4>
        pclk = HAL_RCC_GetPCLK1Freq();
 80046e8:	f7fe fe6e 	bl	80033c8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80046ec:	2800      	cmp	r0, #0
 80046ee:	d08c      	beq.n	800460a <UART_SetConfig+0x13e>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80046f0:	6862      	ldr	r2, [r4, #4]
 80046f2:	0853      	lsrs	r3, r2, #1
 80046f4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80046f8:	fbb0 f0f2 	udiv	r0, r0, r2
 80046fc:	b283      	uxth	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046fe:	f1a3 0110 	sub.w	r1, r3, #16
 8004702:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8004706:	4291      	cmp	r1, r2
 8004708:	f63f af30 	bhi.w	800456c <UART_SetConfig+0xa0>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800470c:	f020 000f 	bic.w	r0, r0, #15
 8004710:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 8004712:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004714:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8004718:	4318      	orrs	r0, r3
 800471a:	60d0      	str	r0, [r2, #12]
 800471c:	e775      	b.n	800460a <UART_SetConfig+0x13e>
 800471e:	bf00      	nop
 8004720:	efff69f3 	.word	0xefff69f3
 8004724:	40008000 	.word	0x40008000
 8004728:	40013800 	.word	0x40013800
 800472c:	40021000 	.word	0x40021000
 8004730:	08007374 	.word	0x08007374
 8004734:	40004400 	.word	0x40004400
 8004738:	08007378 	.word	0x08007378
 800473c:	40004800 	.word	0x40004800
 8004740:	40004c00 	.word	0x40004c00
 8004744:	40005000 	.word	0x40005000
 8004748:	00f42400 	.word	0x00f42400
 800474c:	000ffcff 	.word	0x000ffcff

08004750 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004750:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004752:	07da      	lsls	r2, r3, #31
{
 8004754:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004756:	d506      	bpl.n	8004766 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004758:	6801      	ldr	r1, [r0, #0]
 800475a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800475c:	684a      	ldr	r2, [r1, #4]
 800475e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004762:	4322      	orrs	r2, r4
 8004764:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004766:	079c      	lsls	r4, r3, #30
 8004768:	d506      	bpl.n	8004778 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800476a:	6801      	ldr	r1, [r0, #0]
 800476c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800476e:	684a      	ldr	r2, [r1, #4]
 8004770:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004774:	4322      	orrs	r2, r4
 8004776:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004778:	0759      	lsls	r1, r3, #29
 800477a:	d506      	bpl.n	800478a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800477c:	6801      	ldr	r1, [r0, #0]
 800477e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8004780:	684a      	ldr	r2, [r1, #4]
 8004782:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004786:	4322      	orrs	r2, r4
 8004788:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800478a:	071a      	lsls	r2, r3, #28
 800478c:	d506      	bpl.n	800479c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800478e:	6801      	ldr	r1, [r0, #0]
 8004790:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8004792:	684a      	ldr	r2, [r1, #4]
 8004794:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004798:	4322      	orrs	r2, r4
 800479a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800479c:	06dc      	lsls	r4, r3, #27
 800479e:	d506      	bpl.n	80047ae <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047a0:	6801      	ldr	r1, [r0, #0]
 80047a2:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80047a4:	688a      	ldr	r2, [r1, #8]
 80047a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80047aa:	4322      	orrs	r2, r4
 80047ac:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047ae:	0699      	lsls	r1, r3, #26
 80047b0:	d506      	bpl.n	80047c0 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047b2:	6801      	ldr	r1, [r0, #0]
 80047b4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80047b6:	688a      	ldr	r2, [r1, #8]
 80047b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047bc:	4322      	orrs	r2, r4
 80047be:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047c0:	065a      	lsls	r2, r3, #25
 80047c2:	d50f      	bpl.n	80047e4 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047c4:	6801      	ldr	r1, [r0, #0]
 80047c6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80047c8:	684a      	ldr	r2, [r1, #4]
 80047ca:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80047ce:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047d0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047d4:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047d6:	d105      	bne.n	80047e4 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047d8:	684a      	ldr	r2, [r1, #4]
 80047da:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80047dc:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80047e0:	4322      	orrs	r2, r4
 80047e2:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047e4:	061b      	lsls	r3, r3, #24
 80047e6:	d506      	bpl.n	80047f6 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047e8:	6802      	ldr	r2, [r0, #0]
 80047ea:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80047ec:	6853      	ldr	r3, [r2, #4]
 80047ee:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80047f2:	430b      	orrs	r3, r1
 80047f4:	6053      	str	r3, [r2, #4]
  }
}
 80047f6:	bd10      	pop	{r4, pc}

080047f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047fc:	9d06      	ldr	r5, [sp, #24]
 80047fe:	4604      	mov	r4, r0
 8004800:	460f      	mov	r7, r1
 8004802:	4616      	mov	r6, r2
 8004804:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004806:	6821      	ldr	r1, [r4, #0]
 8004808:	69ca      	ldr	r2, [r1, #28]
 800480a:	ea37 0302 	bics.w	r3, r7, r2
 800480e:	bf0c      	ite	eq
 8004810:	2201      	moveq	r2, #1
 8004812:	2200      	movne	r2, #0
 8004814:	42b2      	cmp	r2, r6
 8004816:	d001      	beq.n	800481c <UART_WaitOnFlagUntilTimeout+0x24>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8004818:	2000      	movs	r0, #0
 800481a:	e018      	b.n	800484e <UART_WaitOnFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 800481c:	1c68      	adds	r0, r5, #1
 800481e:	d0f3      	beq.n	8004808 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004820:	f7fd fa9e 	bl	8001d60 <HAL_GetTick>
 8004824:	eba0 0008 	sub.w	r0, r0, r8
 8004828:	42a8      	cmp	r0, r5
 800482a:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800482c:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800482e:	d800      	bhi.n	8004832 <UART_WaitOnFlagUntilTimeout+0x3a>
 8004830:	b97d      	cbnz	r5, 8004852 <UART_WaitOnFlagUntilTimeout+0x5a>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004832:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004836:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004838:	6883      	ldr	r3, [r0, #8]
 800483a:	f023 0301 	bic.w	r3, r3, #1
 800483e:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 8004840:	2320      	movs	r3, #32
 8004842:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004844:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8004846:	2300      	movs	r3, #0
 8004848:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
          return HAL_TIMEOUT;
 800484c:	2003      	movs	r0, #3
}
 800484e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004852:	075a      	lsls	r2, r3, #29
 8004854:	d5d7      	bpl.n	8004806 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004856:	69c3      	ldr	r3, [r0, #28]
 8004858:	051b      	lsls	r3, r3, #20
 800485a:	d5d4      	bpl.n	8004806 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800485c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004860:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004862:	6803      	ldr	r3, [r0, #0]
 8004864:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004868:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800486a:	6883      	ldr	r3, [r0, #8]
 800486c:	f023 0301 	bic.w	r3, r3, #1
 8004870:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 8004872:	2320      	movs	r3, #32
 8004874:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004876:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004878:	67e3      	str	r3, [r4, #124]	; 0x7c
 800487a:	e7e4      	b.n	8004846 <UART_WaitOnFlagUntilTimeout+0x4e>

0800487c <HAL_UART_Transmit>:
{
 800487c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004880:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8004882:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8004884:	2b20      	cmp	r3, #32
{
 8004886:	4604      	mov	r4, r0
 8004888:	460e      	mov	r6, r1
 800488a:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800488c:	d14c      	bne.n	8004928 <HAL_UART_Transmit+0xac>
    if ((pData == NULL) || (Size == 0U))
 800488e:	2900      	cmp	r1, #0
 8004890:	d048      	beq.n	8004924 <HAL_UART_Transmit+0xa8>
 8004892:	2a00      	cmp	r2, #0
 8004894:	d046      	beq.n	8004924 <HAL_UART_Transmit+0xa8>
    __HAL_LOCK(huart);
 8004896:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800489a:	2b01      	cmp	r3, #1
 800489c:	d044      	beq.n	8004928 <HAL_UART_Transmit+0xac>
 800489e:	2301      	movs	r3, #1
 80048a0:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048a4:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048a6:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048a8:	67c5      	str	r5, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048aa:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 80048ac:	f7fd fa58 	bl	8001d60 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048b0:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 80048b2:	f8a4 9050 	strh.w	r9, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 80048ba:	4607      	mov	r7, r0
    huart->TxXferCount = Size;
 80048bc:	f8a4 9052 	strh.w	r9, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048c0:	d103      	bne.n	80048ca <HAL_UART_Transmit+0x4e>
 80048c2:	6923      	ldr	r3, [r4, #16]
 80048c4:	b90b      	cbnz	r3, 80048ca <HAL_UART_Transmit+0x4e>
 80048c6:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80048c8:	461e      	mov	r6, r3
    __HAL_UNLOCK(huart);
 80048ca:	2300      	movs	r3, #0
 80048cc:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    while (huart->TxXferCount > 0U)
 80048d0:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048d4:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 80048d8:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048da:	463b      	mov	r3, r7
    while (huart->TxXferCount > 0U)
 80048dc:	b93a      	cbnz	r2, 80048ee <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048de:	2140      	movs	r1, #64	; 0x40
 80048e0:	4620      	mov	r0, r4
 80048e2:	f7ff ff89 	bl	80047f8 <UART_WaitOnFlagUntilTimeout>
 80048e6:	b940      	cbnz	r0, 80048fa <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 80048e8:	2320      	movs	r3, #32
 80048ea:	6763      	str	r3, [r4, #116]	; 0x74
    return HAL_OK;
 80048ec:	e006      	b.n	80048fc <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048ee:	2200      	movs	r2, #0
 80048f0:	2180      	movs	r1, #128	; 0x80
 80048f2:	4620      	mov	r0, r4
 80048f4:	f7ff ff80 	bl	80047f8 <UART_WaitOnFlagUntilTimeout>
 80048f8:	b118      	cbz	r0, 8004902 <HAL_UART_Transmit+0x86>
        return HAL_TIMEOUT;
 80048fa:	2003      	movs	r0, #3
}
 80048fc:	b003      	add	sp, #12
 80048fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004902:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8004904:	b95e      	cbnz	r6, 800491e <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004906:	f835 3b02 	ldrh.w	r3, [r5], #2
 800490a:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800490e:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8004910:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8004914:	3b01      	subs	r3, #1
 8004916:	b29b      	uxth	r3, r3
 8004918:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 800491c:	e7d8      	b.n	80048d0 <HAL_UART_Transmit+0x54>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800491e:	f816 3b01 	ldrb.w	r3, [r6], #1
 8004922:	e7f4      	b.n	800490e <HAL_UART_Transmit+0x92>
      return  HAL_ERROR;
 8004924:	2001      	movs	r0, #1
 8004926:	e7e9      	b.n	80048fc <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 8004928:	2002      	movs	r0, #2
 800492a:	e7e7      	b.n	80048fc <HAL_UART_Transmit+0x80>

0800492c <HAL_UART_Receive>:
{
 800492c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004930:	4699      	mov	r9, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8004932:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8004934:	2b20      	cmp	r3, #32
{
 8004936:	4604      	mov	r4, r0
 8004938:	460d      	mov	r5, r1
 800493a:	4616      	mov	r6, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 800493c:	d164      	bne.n	8004a08 <HAL_UART_Receive+0xdc>
    if ((pData == NULL) || (Size == 0U))
 800493e:	2900      	cmp	r1, #0
 8004940:	d060      	beq.n	8004a04 <HAL_UART_Receive+0xd8>
 8004942:	2a00      	cmp	r2, #0
 8004944:	d05e      	beq.n	8004a04 <HAL_UART_Receive+0xd8>
    __HAL_LOCK(huart);
 8004946:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800494a:	2b01      	cmp	r3, #1
 800494c:	d05c      	beq.n	8004a08 <HAL_UART_Receive+0xdc>
 800494e:	2301      	movs	r3, #1
 8004950:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004954:	2700      	movs	r7, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004956:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004958:	67c7      	str	r7, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800495a:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 800495c:	f7fd fa00 	bl	8001d60 <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 8004960:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize  = Size;
 8004962:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8004966:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 800496a:	4680      	mov	r8, r0
    huart->RxXferCount = Size;
 800496c:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8004970:	d11c      	bne.n	80049ac <HAL_UART_Receive+0x80>
 8004972:	6922      	ldr	r2, [r4, #16]
 8004974:	b9c2      	cbnz	r2, 80049a8 <HAL_UART_Receive+0x7c>
 8004976:	f240 12ff 	movw	r2, #511	; 0x1ff
 800497a:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800497e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    uhMask = huart->Mask;
 8004982:	f8b4 705c 	ldrh.w	r7, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004986:	d122      	bne.n	80049ce <HAL_UART_Receive+0xa2>
 8004988:	6923      	ldr	r3, [r4, #16]
 800498a:	bb03      	cbnz	r3, 80049ce <HAL_UART_Receive+0xa2>
 800498c:	462e      	mov	r6, r5
      pdata8bits  = NULL;
 800498e:	461d      	mov	r5, r3
    __HAL_UNLOCK(huart);
 8004990:	2300      	movs	r3, #0
 8004992:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    while (huart->RxXferCount > 0U)
 8004996:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 800499a:	b280      	uxth	r0, r0
 800499c:	b9c8      	cbnz	r0, 80049d2 <HAL_UART_Receive+0xa6>
    huart->RxState = HAL_UART_STATE_READY;
 800499e:	2320      	movs	r3, #32
 80049a0:	67a3      	str	r3, [r4, #120]	; 0x78
}
 80049a2:	b003      	add	sp, #12
 80049a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    UART_MASK_COMPUTATION(huart);
 80049a8:	22ff      	movs	r2, #255	; 0xff
 80049aa:	e7e6      	b.n	800497a <HAL_UART_Receive+0x4e>
 80049ac:	b923      	cbnz	r3, 80049b8 <HAL_UART_Receive+0x8c>
 80049ae:	6922      	ldr	r2, [r4, #16]
 80049b0:	2a00      	cmp	r2, #0
 80049b2:	d0f9      	beq.n	80049a8 <HAL_UART_Receive+0x7c>
 80049b4:	227f      	movs	r2, #127	; 0x7f
 80049b6:	e7e0      	b.n	800497a <HAL_UART_Receive+0x4e>
 80049b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049bc:	d104      	bne.n	80049c8 <HAL_UART_Receive+0x9c>
 80049be:	6922      	ldr	r2, [r4, #16]
 80049c0:	2a00      	cmp	r2, #0
 80049c2:	d0f7      	beq.n	80049b4 <HAL_UART_Receive+0x88>
 80049c4:	223f      	movs	r2, #63	; 0x3f
 80049c6:	e7d8      	b.n	800497a <HAL_UART_Receive+0x4e>
 80049c8:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
 80049cc:	e7d7      	b.n	800497e <HAL_UART_Receive+0x52>
      pdata16bits = NULL;
 80049ce:	2600      	movs	r6, #0
 80049d0:	e7de      	b.n	8004990 <HAL_UART_Receive+0x64>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80049d2:	f8cd 9000 	str.w	r9, [sp]
 80049d6:	4643      	mov	r3, r8
 80049d8:	2200      	movs	r2, #0
 80049da:	2120      	movs	r1, #32
 80049dc:	4620      	mov	r0, r4
 80049de:	f7ff ff0b 	bl	80047f8 <UART_WaitOnFlagUntilTimeout>
 80049e2:	b998      	cbnz	r0, 8004a0c <HAL_UART_Receive+0xe0>
 80049e4:	6823      	ldr	r3, [r4, #0]
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80049e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80049e8:	403b      	ands	r3, r7
      if (pdata8bits == NULL)
 80049ea:	b945      	cbnz	r5, 80049fe <HAL_UART_Receive+0xd2>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80049ec:	f826 3b02 	strh.w	r3, [r6], #2
      huart->RxXferCount--;
 80049f0:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 80049f4:	3b01      	subs	r3, #1
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80049fc:	e7cb      	b.n	8004996 <HAL_UART_Receive+0x6a>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80049fe:	f805 3b01 	strb.w	r3, [r5], #1
 8004a02:	e7f5      	b.n	80049f0 <HAL_UART_Receive+0xc4>
      return  HAL_ERROR;
 8004a04:	2001      	movs	r0, #1
 8004a06:	e7cc      	b.n	80049a2 <HAL_UART_Receive+0x76>
    return HAL_BUSY;
 8004a08:	2002      	movs	r0, #2
 8004a0a:	e7ca      	b.n	80049a2 <HAL_UART_Receive+0x76>
        return HAL_TIMEOUT;
 8004a0c:	2003      	movs	r0, #3
 8004a0e:	e7c8      	b.n	80049a2 <HAL_UART_Receive+0x76>

08004a10 <UART_CheckIdleState>:
{
 8004a10:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004a12:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a14:	2600      	movs	r6, #0
 8004a16:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8004a18:	f7fd f9a2 	bl	8001d60 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a1c:	6823      	ldr	r3, [r4, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8004a22:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a24:	d415      	bmi.n	8004a52 <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a26:	6823      	ldr	r3, [r4, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	075b      	lsls	r3, r3, #29
 8004a2c:	d50a      	bpl.n	8004a44 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a2e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a32:	9300      	str	r3, [sp, #0]
 8004a34:	2200      	movs	r2, #0
 8004a36:	462b      	mov	r3, r5
 8004a38:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a3c:	4620      	mov	r0, r4
 8004a3e:	f7ff fedb 	bl	80047f8 <UART_WaitOnFlagUntilTimeout>
 8004a42:	b990      	cbnz	r0, 8004a6a <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 8004a44:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8004a46:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8004a48:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 8004a4a:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8004a4e:	67a3      	str	r3, [r4, #120]	; 0x78
  return HAL_OK;
 8004a50:	e00c      	b.n	8004a6c <UART_CheckIdleState+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a52:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a56:	9300      	str	r3, [sp, #0]
 8004a58:	4632      	mov	r2, r6
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a60:	4620      	mov	r0, r4
 8004a62:	f7ff fec9 	bl	80047f8 <UART_WaitOnFlagUntilTimeout>
 8004a66:	2800      	cmp	r0, #0
 8004a68:	d0dd      	beq.n	8004a26 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8004a6a:	2003      	movs	r0, #3
}
 8004a6c:	b002      	add	sp, #8
 8004a6e:	bd70      	pop	{r4, r5, r6, pc}

08004a70 <HAL_UART_Init>:
{
 8004a70:	b510      	push	{r4, lr}
  if (huart == NULL)
 8004a72:	4604      	mov	r4, r0
 8004a74:	b340      	cbz	r0, 8004ac8 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8004a76:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8004a78:	b91b      	cbnz	r3, 8004a82 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8004a7a:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8004a7e:	f7fd f857 	bl	8001b30 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8004a82:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004a84:	2324      	movs	r3, #36	; 0x24
 8004a86:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8004a88:	6813      	ldr	r3, [r2, #0]
 8004a8a:	f023 0301 	bic.w	r3, r3, #1
 8004a8e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a90:	4620      	mov	r0, r4
 8004a92:	f7ff fd1b 	bl	80044cc <UART_SetConfig>
 8004a96:	2801      	cmp	r0, #1
 8004a98:	d016      	beq.n	8004ac8 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a9c:	b113      	cbz	r3, 8004aa4 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8004a9e:	4620      	mov	r0, r4
 8004aa0:	f7ff fe56 	bl	8004750 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004aa4:	6823      	ldr	r3, [r4, #0]
 8004aa6:	685a      	ldr	r2, [r3, #4]
 8004aa8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004aac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004aae:	689a      	ldr	r2, [r3, #8]
 8004ab0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ab4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8004abc:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8004abe:	601a      	str	r2, [r3, #0]
}
 8004ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8004ac4:	f7ff bfa4 	b.w	8004a10 <UART_CheckIdleState>
}
 8004ac8:	2001      	movs	r0, #1
 8004aca:	bd10      	pop	{r4, pc}

08004acc <__errno>:
 8004acc:	4b01      	ldr	r3, [pc, #4]	; (8004ad4 <__errno+0x8>)
 8004ace:	6818      	ldr	r0, [r3, #0]
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	2000000c 	.word	0x2000000c

08004ad8 <__libc_init_array>:
 8004ad8:	b570      	push	{r4, r5, r6, lr}
 8004ada:	4e0d      	ldr	r6, [pc, #52]	; (8004b10 <__libc_init_array+0x38>)
 8004adc:	4c0d      	ldr	r4, [pc, #52]	; (8004b14 <__libc_init_array+0x3c>)
 8004ade:	1ba4      	subs	r4, r4, r6
 8004ae0:	10a4      	asrs	r4, r4, #2
 8004ae2:	2500      	movs	r5, #0
 8004ae4:	42a5      	cmp	r5, r4
 8004ae6:	d109      	bne.n	8004afc <__libc_init_array+0x24>
 8004ae8:	4e0b      	ldr	r6, [pc, #44]	; (8004b18 <__libc_init_array+0x40>)
 8004aea:	4c0c      	ldr	r4, [pc, #48]	; (8004b1c <__libc_init_array+0x44>)
 8004aec:	f002 fbaa 	bl	8007244 <_init>
 8004af0:	1ba4      	subs	r4, r4, r6
 8004af2:	10a4      	asrs	r4, r4, #2
 8004af4:	2500      	movs	r5, #0
 8004af6:	42a5      	cmp	r5, r4
 8004af8:	d105      	bne.n	8004b06 <__libc_init_array+0x2e>
 8004afa:	bd70      	pop	{r4, r5, r6, pc}
 8004afc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b00:	4798      	blx	r3
 8004b02:	3501      	adds	r5, #1
 8004b04:	e7ee      	b.n	8004ae4 <__libc_init_array+0xc>
 8004b06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b0a:	4798      	blx	r3
 8004b0c:	3501      	adds	r5, #1
 8004b0e:	e7f2      	b.n	8004af6 <__libc_init_array+0x1e>
 8004b10:	08007650 	.word	0x08007650
 8004b14:	08007650 	.word	0x08007650
 8004b18:	08007650 	.word	0x08007650
 8004b1c:	08007654 	.word	0x08007654

08004b20 <memset>:
 8004b20:	4402      	add	r2, r0
 8004b22:	4603      	mov	r3, r0
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d100      	bne.n	8004b2a <memset+0xa>
 8004b28:	4770      	bx	lr
 8004b2a:	f803 1b01 	strb.w	r1, [r3], #1
 8004b2e:	e7f9      	b.n	8004b24 <memset+0x4>

08004b30 <__cvt>:
 8004b30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b34:	ec55 4b10 	vmov	r4, r5, d0
 8004b38:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004b3a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004b3e:	2d00      	cmp	r5, #0
 8004b40:	460e      	mov	r6, r1
 8004b42:	4691      	mov	r9, r2
 8004b44:	4619      	mov	r1, r3
 8004b46:	bfb8      	it	lt
 8004b48:	4622      	movlt	r2, r4
 8004b4a:	462b      	mov	r3, r5
 8004b4c:	f027 0720 	bic.w	r7, r7, #32
 8004b50:	bfbb      	ittet	lt
 8004b52:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004b56:	461d      	movlt	r5, r3
 8004b58:	2300      	movge	r3, #0
 8004b5a:	232d      	movlt	r3, #45	; 0x2d
 8004b5c:	bfb8      	it	lt
 8004b5e:	4614      	movlt	r4, r2
 8004b60:	2f46      	cmp	r7, #70	; 0x46
 8004b62:	700b      	strb	r3, [r1, #0]
 8004b64:	d004      	beq.n	8004b70 <__cvt+0x40>
 8004b66:	2f45      	cmp	r7, #69	; 0x45
 8004b68:	d100      	bne.n	8004b6c <__cvt+0x3c>
 8004b6a:	3601      	adds	r6, #1
 8004b6c:	2102      	movs	r1, #2
 8004b6e:	e000      	b.n	8004b72 <__cvt+0x42>
 8004b70:	2103      	movs	r1, #3
 8004b72:	ab03      	add	r3, sp, #12
 8004b74:	9301      	str	r3, [sp, #4]
 8004b76:	ab02      	add	r3, sp, #8
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	4632      	mov	r2, r6
 8004b7c:	4653      	mov	r3, sl
 8004b7e:	ec45 4b10 	vmov	d0, r4, r5
 8004b82:	f000 fdf9 	bl	8005778 <_dtoa_r>
 8004b86:	2f47      	cmp	r7, #71	; 0x47
 8004b88:	4680      	mov	r8, r0
 8004b8a:	d102      	bne.n	8004b92 <__cvt+0x62>
 8004b8c:	f019 0f01 	tst.w	r9, #1
 8004b90:	d026      	beq.n	8004be0 <__cvt+0xb0>
 8004b92:	2f46      	cmp	r7, #70	; 0x46
 8004b94:	eb08 0906 	add.w	r9, r8, r6
 8004b98:	d111      	bne.n	8004bbe <__cvt+0x8e>
 8004b9a:	f898 3000 	ldrb.w	r3, [r8]
 8004b9e:	2b30      	cmp	r3, #48	; 0x30
 8004ba0:	d10a      	bne.n	8004bb8 <__cvt+0x88>
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	4620      	mov	r0, r4
 8004ba8:	4629      	mov	r1, r5
 8004baa:	f7fb ff8d 	bl	8000ac8 <__aeabi_dcmpeq>
 8004bae:	b918      	cbnz	r0, 8004bb8 <__cvt+0x88>
 8004bb0:	f1c6 0601 	rsb	r6, r6, #1
 8004bb4:	f8ca 6000 	str.w	r6, [sl]
 8004bb8:	f8da 3000 	ldr.w	r3, [sl]
 8004bbc:	4499      	add	r9, r3
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	4620      	mov	r0, r4
 8004bc4:	4629      	mov	r1, r5
 8004bc6:	f7fb ff7f 	bl	8000ac8 <__aeabi_dcmpeq>
 8004bca:	b938      	cbnz	r0, 8004bdc <__cvt+0xac>
 8004bcc:	2230      	movs	r2, #48	; 0x30
 8004bce:	9b03      	ldr	r3, [sp, #12]
 8004bd0:	454b      	cmp	r3, r9
 8004bd2:	d205      	bcs.n	8004be0 <__cvt+0xb0>
 8004bd4:	1c59      	adds	r1, r3, #1
 8004bd6:	9103      	str	r1, [sp, #12]
 8004bd8:	701a      	strb	r2, [r3, #0]
 8004bda:	e7f8      	b.n	8004bce <__cvt+0x9e>
 8004bdc:	f8cd 900c 	str.w	r9, [sp, #12]
 8004be0:	9b03      	ldr	r3, [sp, #12]
 8004be2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004be4:	eba3 0308 	sub.w	r3, r3, r8
 8004be8:	4640      	mov	r0, r8
 8004bea:	6013      	str	r3, [r2, #0]
 8004bec:	b004      	add	sp, #16
 8004bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004bf2 <__exponent>:
 8004bf2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004bf4:	2900      	cmp	r1, #0
 8004bf6:	4604      	mov	r4, r0
 8004bf8:	bfba      	itte	lt
 8004bfa:	4249      	neglt	r1, r1
 8004bfc:	232d      	movlt	r3, #45	; 0x2d
 8004bfe:	232b      	movge	r3, #43	; 0x2b
 8004c00:	2909      	cmp	r1, #9
 8004c02:	f804 2b02 	strb.w	r2, [r4], #2
 8004c06:	7043      	strb	r3, [r0, #1]
 8004c08:	dd20      	ble.n	8004c4c <__exponent+0x5a>
 8004c0a:	f10d 0307 	add.w	r3, sp, #7
 8004c0e:	461f      	mov	r7, r3
 8004c10:	260a      	movs	r6, #10
 8004c12:	fb91 f5f6 	sdiv	r5, r1, r6
 8004c16:	fb06 1115 	mls	r1, r6, r5, r1
 8004c1a:	3130      	adds	r1, #48	; 0x30
 8004c1c:	2d09      	cmp	r5, #9
 8004c1e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004c22:	f103 32ff 	add.w	r2, r3, #4294967295
 8004c26:	4629      	mov	r1, r5
 8004c28:	dc09      	bgt.n	8004c3e <__exponent+0x4c>
 8004c2a:	3130      	adds	r1, #48	; 0x30
 8004c2c:	3b02      	subs	r3, #2
 8004c2e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004c32:	42bb      	cmp	r3, r7
 8004c34:	4622      	mov	r2, r4
 8004c36:	d304      	bcc.n	8004c42 <__exponent+0x50>
 8004c38:	1a10      	subs	r0, r2, r0
 8004c3a:	b003      	add	sp, #12
 8004c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c3e:	4613      	mov	r3, r2
 8004c40:	e7e7      	b.n	8004c12 <__exponent+0x20>
 8004c42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c46:	f804 2b01 	strb.w	r2, [r4], #1
 8004c4a:	e7f2      	b.n	8004c32 <__exponent+0x40>
 8004c4c:	2330      	movs	r3, #48	; 0x30
 8004c4e:	4419      	add	r1, r3
 8004c50:	7083      	strb	r3, [r0, #2]
 8004c52:	1d02      	adds	r2, r0, #4
 8004c54:	70c1      	strb	r1, [r0, #3]
 8004c56:	e7ef      	b.n	8004c38 <__exponent+0x46>

08004c58 <_printf_float>:
 8004c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c5c:	b08d      	sub	sp, #52	; 0x34
 8004c5e:	460c      	mov	r4, r1
 8004c60:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004c64:	4616      	mov	r6, r2
 8004c66:	461f      	mov	r7, r3
 8004c68:	4605      	mov	r5, r0
 8004c6a:	f001 fcb7 	bl	80065dc <_localeconv_r>
 8004c6e:	6803      	ldr	r3, [r0, #0]
 8004c70:	9304      	str	r3, [sp, #16]
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7fb faac 	bl	80001d0 <strlen>
 8004c78:	2300      	movs	r3, #0
 8004c7a:	930a      	str	r3, [sp, #40]	; 0x28
 8004c7c:	f8d8 3000 	ldr.w	r3, [r8]
 8004c80:	9005      	str	r0, [sp, #20]
 8004c82:	3307      	adds	r3, #7
 8004c84:	f023 0307 	bic.w	r3, r3, #7
 8004c88:	f103 0208 	add.w	r2, r3, #8
 8004c8c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004c90:	f8d4 b000 	ldr.w	fp, [r4]
 8004c94:	f8c8 2000 	str.w	r2, [r8]
 8004c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c9c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004ca0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004ca4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004ca8:	9307      	str	r3, [sp, #28]
 8004caa:	f8cd 8018 	str.w	r8, [sp, #24]
 8004cae:	f04f 32ff 	mov.w	r2, #4294967295
 8004cb2:	4ba7      	ldr	r3, [pc, #668]	; (8004f50 <_printf_float+0x2f8>)
 8004cb4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004cb8:	f7fb ff38 	bl	8000b2c <__aeabi_dcmpun>
 8004cbc:	bb70      	cbnz	r0, 8004d1c <_printf_float+0xc4>
 8004cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8004cc2:	4ba3      	ldr	r3, [pc, #652]	; (8004f50 <_printf_float+0x2f8>)
 8004cc4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004cc8:	f7fb ff12 	bl	8000af0 <__aeabi_dcmple>
 8004ccc:	bb30      	cbnz	r0, 8004d1c <_printf_float+0xc4>
 8004cce:	2200      	movs	r2, #0
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	4640      	mov	r0, r8
 8004cd4:	4649      	mov	r1, r9
 8004cd6:	f7fb ff01 	bl	8000adc <__aeabi_dcmplt>
 8004cda:	b110      	cbz	r0, 8004ce2 <_printf_float+0x8a>
 8004cdc:	232d      	movs	r3, #45	; 0x2d
 8004cde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ce2:	4a9c      	ldr	r2, [pc, #624]	; (8004f54 <_printf_float+0x2fc>)
 8004ce4:	4b9c      	ldr	r3, [pc, #624]	; (8004f58 <_printf_float+0x300>)
 8004ce6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004cea:	bf8c      	ite	hi
 8004cec:	4690      	movhi	r8, r2
 8004cee:	4698      	movls	r8, r3
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	f02b 0204 	bic.w	r2, fp, #4
 8004cf6:	6123      	str	r3, [r4, #16]
 8004cf8:	6022      	str	r2, [r4, #0]
 8004cfa:	f04f 0900 	mov.w	r9, #0
 8004cfe:	9700      	str	r7, [sp, #0]
 8004d00:	4633      	mov	r3, r6
 8004d02:	aa0b      	add	r2, sp, #44	; 0x2c
 8004d04:	4621      	mov	r1, r4
 8004d06:	4628      	mov	r0, r5
 8004d08:	f000 f9e6 	bl	80050d8 <_printf_common>
 8004d0c:	3001      	adds	r0, #1
 8004d0e:	f040 808d 	bne.w	8004e2c <_printf_float+0x1d4>
 8004d12:	f04f 30ff 	mov.w	r0, #4294967295
 8004d16:	b00d      	add	sp, #52	; 0x34
 8004d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d1c:	4642      	mov	r2, r8
 8004d1e:	464b      	mov	r3, r9
 8004d20:	4640      	mov	r0, r8
 8004d22:	4649      	mov	r1, r9
 8004d24:	f7fb ff02 	bl	8000b2c <__aeabi_dcmpun>
 8004d28:	b110      	cbz	r0, 8004d30 <_printf_float+0xd8>
 8004d2a:	4a8c      	ldr	r2, [pc, #560]	; (8004f5c <_printf_float+0x304>)
 8004d2c:	4b8c      	ldr	r3, [pc, #560]	; (8004f60 <_printf_float+0x308>)
 8004d2e:	e7da      	b.n	8004ce6 <_printf_float+0x8e>
 8004d30:	6861      	ldr	r1, [r4, #4]
 8004d32:	1c4b      	adds	r3, r1, #1
 8004d34:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8004d38:	a80a      	add	r0, sp, #40	; 0x28
 8004d3a:	d13e      	bne.n	8004dba <_printf_float+0x162>
 8004d3c:	2306      	movs	r3, #6
 8004d3e:	6063      	str	r3, [r4, #4]
 8004d40:	2300      	movs	r3, #0
 8004d42:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004d46:	ab09      	add	r3, sp, #36	; 0x24
 8004d48:	9300      	str	r3, [sp, #0]
 8004d4a:	ec49 8b10 	vmov	d0, r8, r9
 8004d4e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004d52:	6022      	str	r2, [r4, #0]
 8004d54:	f8cd a004 	str.w	sl, [sp, #4]
 8004d58:	6861      	ldr	r1, [r4, #4]
 8004d5a:	4628      	mov	r0, r5
 8004d5c:	f7ff fee8 	bl	8004b30 <__cvt>
 8004d60:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004d64:	2b47      	cmp	r3, #71	; 0x47
 8004d66:	4680      	mov	r8, r0
 8004d68:	d109      	bne.n	8004d7e <_printf_float+0x126>
 8004d6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d6c:	1cd8      	adds	r0, r3, #3
 8004d6e:	db02      	blt.n	8004d76 <_printf_float+0x11e>
 8004d70:	6862      	ldr	r2, [r4, #4]
 8004d72:	4293      	cmp	r3, r2
 8004d74:	dd47      	ble.n	8004e06 <_printf_float+0x1ae>
 8004d76:	f1aa 0a02 	sub.w	sl, sl, #2
 8004d7a:	fa5f fa8a 	uxtb.w	sl, sl
 8004d7e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004d82:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d84:	d824      	bhi.n	8004dd0 <_printf_float+0x178>
 8004d86:	3901      	subs	r1, #1
 8004d88:	4652      	mov	r2, sl
 8004d8a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004d8e:	9109      	str	r1, [sp, #36]	; 0x24
 8004d90:	f7ff ff2f 	bl	8004bf2 <__exponent>
 8004d94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d96:	1813      	adds	r3, r2, r0
 8004d98:	2a01      	cmp	r2, #1
 8004d9a:	4681      	mov	r9, r0
 8004d9c:	6123      	str	r3, [r4, #16]
 8004d9e:	dc02      	bgt.n	8004da6 <_printf_float+0x14e>
 8004da0:	6822      	ldr	r2, [r4, #0]
 8004da2:	07d1      	lsls	r1, r2, #31
 8004da4:	d501      	bpl.n	8004daa <_printf_float+0x152>
 8004da6:	3301      	adds	r3, #1
 8004da8:	6123      	str	r3, [r4, #16]
 8004daa:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d0a5      	beq.n	8004cfe <_printf_float+0xa6>
 8004db2:	232d      	movs	r3, #45	; 0x2d
 8004db4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004db8:	e7a1      	b.n	8004cfe <_printf_float+0xa6>
 8004dba:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004dbe:	f000 8177 	beq.w	80050b0 <_printf_float+0x458>
 8004dc2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004dc6:	d1bb      	bne.n	8004d40 <_printf_float+0xe8>
 8004dc8:	2900      	cmp	r1, #0
 8004dca:	d1b9      	bne.n	8004d40 <_printf_float+0xe8>
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e7b6      	b.n	8004d3e <_printf_float+0xe6>
 8004dd0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004dd4:	d119      	bne.n	8004e0a <_printf_float+0x1b2>
 8004dd6:	2900      	cmp	r1, #0
 8004dd8:	6863      	ldr	r3, [r4, #4]
 8004dda:	dd0c      	ble.n	8004df6 <_printf_float+0x19e>
 8004ddc:	6121      	str	r1, [r4, #16]
 8004dde:	b913      	cbnz	r3, 8004de6 <_printf_float+0x18e>
 8004de0:	6822      	ldr	r2, [r4, #0]
 8004de2:	07d2      	lsls	r2, r2, #31
 8004de4:	d502      	bpl.n	8004dec <_printf_float+0x194>
 8004de6:	3301      	adds	r3, #1
 8004de8:	440b      	add	r3, r1
 8004dea:	6123      	str	r3, [r4, #16]
 8004dec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004dee:	65a3      	str	r3, [r4, #88]	; 0x58
 8004df0:	f04f 0900 	mov.w	r9, #0
 8004df4:	e7d9      	b.n	8004daa <_printf_float+0x152>
 8004df6:	b913      	cbnz	r3, 8004dfe <_printf_float+0x1a6>
 8004df8:	6822      	ldr	r2, [r4, #0]
 8004dfa:	07d0      	lsls	r0, r2, #31
 8004dfc:	d501      	bpl.n	8004e02 <_printf_float+0x1aa>
 8004dfe:	3302      	adds	r3, #2
 8004e00:	e7f3      	b.n	8004dea <_printf_float+0x192>
 8004e02:	2301      	movs	r3, #1
 8004e04:	e7f1      	b.n	8004dea <_printf_float+0x192>
 8004e06:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8004e0a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	db05      	blt.n	8004e1e <_printf_float+0x1c6>
 8004e12:	6822      	ldr	r2, [r4, #0]
 8004e14:	6123      	str	r3, [r4, #16]
 8004e16:	07d1      	lsls	r1, r2, #31
 8004e18:	d5e8      	bpl.n	8004dec <_printf_float+0x194>
 8004e1a:	3301      	adds	r3, #1
 8004e1c:	e7e5      	b.n	8004dea <_printf_float+0x192>
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	bfd4      	ite	le
 8004e22:	f1c3 0302 	rsble	r3, r3, #2
 8004e26:	2301      	movgt	r3, #1
 8004e28:	4413      	add	r3, r2
 8004e2a:	e7de      	b.n	8004dea <_printf_float+0x192>
 8004e2c:	6823      	ldr	r3, [r4, #0]
 8004e2e:	055a      	lsls	r2, r3, #21
 8004e30:	d407      	bmi.n	8004e42 <_printf_float+0x1ea>
 8004e32:	6923      	ldr	r3, [r4, #16]
 8004e34:	4642      	mov	r2, r8
 8004e36:	4631      	mov	r1, r6
 8004e38:	4628      	mov	r0, r5
 8004e3a:	47b8      	blx	r7
 8004e3c:	3001      	adds	r0, #1
 8004e3e:	d12b      	bne.n	8004e98 <_printf_float+0x240>
 8004e40:	e767      	b.n	8004d12 <_printf_float+0xba>
 8004e42:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004e46:	f240 80dc 	bls.w	8005002 <_printf_float+0x3aa>
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e52:	f7fb fe39 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e56:	2800      	cmp	r0, #0
 8004e58:	d033      	beq.n	8004ec2 <_printf_float+0x26a>
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	4a41      	ldr	r2, [pc, #260]	; (8004f64 <_printf_float+0x30c>)
 8004e5e:	4631      	mov	r1, r6
 8004e60:	4628      	mov	r0, r5
 8004e62:	47b8      	blx	r7
 8004e64:	3001      	adds	r0, #1
 8004e66:	f43f af54 	beq.w	8004d12 <_printf_float+0xba>
 8004e6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	db02      	blt.n	8004e78 <_printf_float+0x220>
 8004e72:	6823      	ldr	r3, [r4, #0]
 8004e74:	07d8      	lsls	r0, r3, #31
 8004e76:	d50f      	bpl.n	8004e98 <_printf_float+0x240>
 8004e78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e7c:	4631      	mov	r1, r6
 8004e7e:	4628      	mov	r0, r5
 8004e80:	47b8      	blx	r7
 8004e82:	3001      	adds	r0, #1
 8004e84:	f43f af45 	beq.w	8004d12 <_printf_float+0xba>
 8004e88:	f04f 0800 	mov.w	r8, #0
 8004e8c:	f104 091a 	add.w	r9, r4, #26
 8004e90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e92:	3b01      	subs	r3, #1
 8004e94:	4543      	cmp	r3, r8
 8004e96:	dc09      	bgt.n	8004eac <_printf_float+0x254>
 8004e98:	6823      	ldr	r3, [r4, #0]
 8004e9a:	079b      	lsls	r3, r3, #30
 8004e9c:	f100 8103 	bmi.w	80050a6 <_printf_float+0x44e>
 8004ea0:	68e0      	ldr	r0, [r4, #12]
 8004ea2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ea4:	4298      	cmp	r0, r3
 8004ea6:	bfb8      	it	lt
 8004ea8:	4618      	movlt	r0, r3
 8004eaa:	e734      	b.n	8004d16 <_printf_float+0xbe>
 8004eac:	2301      	movs	r3, #1
 8004eae:	464a      	mov	r2, r9
 8004eb0:	4631      	mov	r1, r6
 8004eb2:	4628      	mov	r0, r5
 8004eb4:	47b8      	blx	r7
 8004eb6:	3001      	adds	r0, #1
 8004eb8:	f43f af2b 	beq.w	8004d12 <_printf_float+0xba>
 8004ebc:	f108 0801 	add.w	r8, r8, #1
 8004ec0:	e7e6      	b.n	8004e90 <_printf_float+0x238>
 8004ec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	dc2b      	bgt.n	8004f20 <_printf_float+0x2c8>
 8004ec8:	2301      	movs	r3, #1
 8004eca:	4a26      	ldr	r2, [pc, #152]	; (8004f64 <_printf_float+0x30c>)
 8004ecc:	4631      	mov	r1, r6
 8004ece:	4628      	mov	r0, r5
 8004ed0:	47b8      	blx	r7
 8004ed2:	3001      	adds	r0, #1
 8004ed4:	f43f af1d 	beq.w	8004d12 <_printf_float+0xba>
 8004ed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004eda:	b923      	cbnz	r3, 8004ee6 <_printf_float+0x28e>
 8004edc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ede:	b913      	cbnz	r3, 8004ee6 <_printf_float+0x28e>
 8004ee0:	6823      	ldr	r3, [r4, #0]
 8004ee2:	07d9      	lsls	r1, r3, #31
 8004ee4:	d5d8      	bpl.n	8004e98 <_printf_float+0x240>
 8004ee6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004eea:	4631      	mov	r1, r6
 8004eec:	4628      	mov	r0, r5
 8004eee:	47b8      	blx	r7
 8004ef0:	3001      	adds	r0, #1
 8004ef2:	f43f af0e 	beq.w	8004d12 <_printf_float+0xba>
 8004ef6:	f04f 0900 	mov.w	r9, #0
 8004efa:	f104 0a1a 	add.w	sl, r4, #26
 8004efe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f00:	425b      	negs	r3, r3
 8004f02:	454b      	cmp	r3, r9
 8004f04:	dc01      	bgt.n	8004f0a <_printf_float+0x2b2>
 8004f06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f08:	e794      	b.n	8004e34 <_printf_float+0x1dc>
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	4652      	mov	r2, sl
 8004f0e:	4631      	mov	r1, r6
 8004f10:	4628      	mov	r0, r5
 8004f12:	47b8      	blx	r7
 8004f14:	3001      	adds	r0, #1
 8004f16:	f43f aefc 	beq.w	8004d12 <_printf_float+0xba>
 8004f1a:	f109 0901 	add.w	r9, r9, #1
 8004f1e:	e7ee      	b.n	8004efe <_printf_float+0x2a6>
 8004f20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f22:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004f24:	429a      	cmp	r2, r3
 8004f26:	bfa8      	it	ge
 8004f28:	461a      	movge	r2, r3
 8004f2a:	2a00      	cmp	r2, #0
 8004f2c:	4691      	mov	r9, r2
 8004f2e:	dd07      	ble.n	8004f40 <_printf_float+0x2e8>
 8004f30:	4613      	mov	r3, r2
 8004f32:	4631      	mov	r1, r6
 8004f34:	4642      	mov	r2, r8
 8004f36:	4628      	mov	r0, r5
 8004f38:	47b8      	blx	r7
 8004f3a:	3001      	adds	r0, #1
 8004f3c:	f43f aee9 	beq.w	8004d12 <_printf_float+0xba>
 8004f40:	f104 031a 	add.w	r3, r4, #26
 8004f44:	f04f 0b00 	mov.w	fp, #0
 8004f48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f4c:	9306      	str	r3, [sp, #24]
 8004f4e:	e015      	b.n	8004f7c <_printf_float+0x324>
 8004f50:	7fefffff 	.word	0x7fefffff
 8004f54:	08007390 	.word	0x08007390
 8004f58:	0800738c 	.word	0x0800738c
 8004f5c:	08007398 	.word	0x08007398
 8004f60:	08007394 	.word	0x08007394
 8004f64:	0800739c 	.word	0x0800739c
 8004f68:	2301      	movs	r3, #1
 8004f6a:	9a06      	ldr	r2, [sp, #24]
 8004f6c:	4631      	mov	r1, r6
 8004f6e:	4628      	mov	r0, r5
 8004f70:	47b8      	blx	r7
 8004f72:	3001      	adds	r0, #1
 8004f74:	f43f aecd 	beq.w	8004d12 <_printf_float+0xba>
 8004f78:	f10b 0b01 	add.w	fp, fp, #1
 8004f7c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004f80:	ebaa 0309 	sub.w	r3, sl, r9
 8004f84:	455b      	cmp	r3, fp
 8004f86:	dcef      	bgt.n	8004f68 <_printf_float+0x310>
 8004f88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	44d0      	add	r8, sl
 8004f90:	db15      	blt.n	8004fbe <_printf_float+0x366>
 8004f92:	6823      	ldr	r3, [r4, #0]
 8004f94:	07da      	lsls	r2, r3, #31
 8004f96:	d412      	bmi.n	8004fbe <_printf_float+0x366>
 8004f98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f9c:	eba3 020a 	sub.w	r2, r3, sl
 8004fa0:	eba3 0a01 	sub.w	sl, r3, r1
 8004fa4:	4592      	cmp	sl, r2
 8004fa6:	bfa8      	it	ge
 8004fa8:	4692      	movge	sl, r2
 8004faa:	f1ba 0f00 	cmp.w	sl, #0
 8004fae:	dc0e      	bgt.n	8004fce <_printf_float+0x376>
 8004fb0:	f04f 0800 	mov.w	r8, #0
 8004fb4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004fb8:	f104 091a 	add.w	r9, r4, #26
 8004fbc:	e019      	b.n	8004ff2 <_printf_float+0x39a>
 8004fbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004fc2:	4631      	mov	r1, r6
 8004fc4:	4628      	mov	r0, r5
 8004fc6:	47b8      	blx	r7
 8004fc8:	3001      	adds	r0, #1
 8004fca:	d1e5      	bne.n	8004f98 <_printf_float+0x340>
 8004fcc:	e6a1      	b.n	8004d12 <_printf_float+0xba>
 8004fce:	4653      	mov	r3, sl
 8004fd0:	4642      	mov	r2, r8
 8004fd2:	4631      	mov	r1, r6
 8004fd4:	4628      	mov	r0, r5
 8004fd6:	47b8      	blx	r7
 8004fd8:	3001      	adds	r0, #1
 8004fda:	d1e9      	bne.n	8004fb0 <_printf_float+0x358>
 8004fdc:	e699      	b.n	8004d12 <_printf_float+0xba>
 8004fde:	2301      	movs	r3, #1
 8004fe0:	464a      	mov	r2, r9
 8004fe2:	4631      	mov	r1, r6
 8004fe4:	4628      	mov	r0, r5
 8004fe6:	47b8      	blx	r7
 8004fe8:	3001      	adds	r0, #1
 8004fea:	f43f ae92 	beq.w	8004d12 <_printf_float+0xba>
 8004fee:	f108 0801 	add.w	r8, r8, #1
 8004ff2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ff6:	1a9b      	subs	r3, r3, r2
 8004ff8:	eba3 030a 	sub.w	r3, r3, sl
 8004ffc:	4543      	cmp	r3, r8
 8004ffe:	dcee      	bgt.n	8004fde <_printf_float+0x386>
 8005000:	e74a      	b.n	8004e98 <_printf_float+0x240>
 8005002:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005004:	2a01      	cmp	r2, #1
 8005006:	dc01      	bgt.n	800500c <_printf_float+0x3b4>
 8005008:	07db      	lsls	r3, r3, #31
 800500a:	d53a      	bpl.n	8005082 <_printf_float+0x42a>
 800500c:	2301      	movs	r3, #1
 800500e:	4642      	mov	r2, r8
 8005010:	4631      	mov	r1, r6
 8005012:	4628      	mov	r0, r5
 8005014:	47b8      	blx	r7
 8005016:	3001      	adds	r0, #1
 8005018:	f43f ae7b 	beq.w	8004d12 <_printf_float+0xba>
 800501c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005020:	4631      	mov	r1, r6
 8005022:	4628      	mov	r0, r5
 8005024:	47b8      	blx	r7
 8005026:	3001      	adds	r0, #1
 8005028:	f108 0801 	add.w	r8, r8, #1
 800502c:	f43f ae71 	beq.w	8004d12 <_printf_float+0xba>
 8005030:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005032:	2200      	movs	r2, #0
 8005034:	f103 3aff 	add.w	sl, r3, #4294967295
 8005038:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800503c:	2300      	movs	r3, #0
 800503e:	f7fb fd43 	bl	8000ac8 <__aeabi_dcmpeq>
 8005042:	b9c8      	cbnz	r0, 8005078 <_printf_float+0x420>
 8005044:	4653      	mov	r3, sl
 8005046:	4642      	mov	r2, r8
 8005048:	4631      	mov	r1, r6
 800504a:	4628      	mov	r0, r5
 800504c:	47b8      	blx	r7
 800504e:	3001      	adds	r0, #1
 8005050:	d10e      	bne.n	8005070 <_printf_float+0x418>
 8005052:	e65e      	b.n	8004d12 <_printf_float+0xba>
 8005054:	2301      	movs	r3, #1
 8005056:	4652      	mov	r2, sl
 8005058:	4631      	mov	r1, r6
 800505a:	4628      	mov	r0, r5
 800505c:	47b8      	blx	r7
 800505e:	3001      	adds	r0, #1
 8005060:	f43f ae57 	beq.w	8004d12 <_printf_float+0xba>
 8005064:	f108 0801 	add.w	r8, r8, #1
 8005068:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800506a:	3b01      	subs	r3, #1
 800506c:	4543      	cmp	r3, r8
 800506e:	dcf1      	bgt.n	8005054 <_printf_float+0x3fc>
 8005070:	464b      	mov	r3, r9
 8005072:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005076:	e6de      	b.n	8004e36 <_printf_float+0x1de>
 8005078:	f04f 0800 	mov.w	r8, #0
 800507c:	f104 0a1a 	add.w	sl, r4, #26
 8005080:	e7f2      	b.n	8005068 <_printf_float+0x410>
 8005082:	2301      	movs	r3, #1
 8005084:	e7df      	b.n	8005046 <_printf_float+0x3ee>
 8005086:	2301      	movs	r3, #1
 8005088:	464a      	mov	r2, r9
 800508a:	4631      	mov	r1, r6
 800508c:	4628      	mov	r0, r5
 800508e:	47b8      	blx	r7
 8005090:	3001      	adds	r0, #1
 8005092:	f43f ae3e 	beq.w	8004d12 <_printf_float+0xba>
 8005096:	f108 0801 	add.w	r8, r8, #1
 800509a:	68e3      	ldr	r3, [r4, #12]
 800509c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800509e:	1a9b      	subs	r3, r3, r2
 80050a0:	4543      	cmp	r3, r8
 80050a2:	dcf0      	bgt.n	8005086 <_printf_float+0x42e>
 80050a4:	e6fc      	b.n	8004ea0 <_printf_float+0x248>
 80050a6:	f04f 0800 	mov.w	r8, #0
 80050aa:	f104 0919 	add.w	r9, r4, #25
 80050ae:	e7f4      	b.n	800509a <_printf_float+0x442>
 80050b0:	2900      	cmp	r1, #0
 80050b2:	f43f ae8b 	beq.w	8004dcc <_printf_float+0x174>
 80050b6:	2300      	movs	r3, #0
 80050b8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80050bc:	ab09      	add	r3, sp, #36	; 0x24
 80050be:	9300      	str	r3, [sp, #0]
 80050c0:	ec49 8b10 	vmov	d0, r8, r9
 80050c4:	6022      	str	r2, [r4, #0]
 80050c6:	f8cd a004 	str.w	sl, [sp, #4]
 80050ca:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80050ce:	4628      	mov	r0, r5
 80050d0:	f7ff fd2e 	bl	8004b30 <__cvt>
 80050d4:	4680      	mov	r8, r0
 80050d6:	e648      	b.n	8004d6a <_printf_float+0x112>

080050d8 <_printf_common>:
 80050d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050dc:	4691      	mov	r9, r2
 80050de:	461f      	mov	r7, r3
 80050e0:	688a      	ldr	r2, [r1, #8]
 80050e2:	690b      	ldr	r3, [r1, #16]
 80050e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050e8:	4293      	cmp	r3, r2
 80050ea:	bfb8      	it	lt
 80050ec:	4613      	movlt	r3, r2
 80050ee:	f8c9 3000 	str.w	r3, [r9]
 80050f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80050f6:	4606      	mov	r6, r0
 80050f8:	460c      	mov	r4, r1
 80050fa:	b112      	cbz	r2, 8005102 <_printf_common+0x2a>
 80050fc:	3301      	adds	r3, #1
 80050fe:	f8c9 3000 	str.w	r3, [r9]
 8005102:	6823      	ldr	r3, [r4, #0]
 8005104:	0699      	lsls	r1, r3, #26
 8005106:	bf42      	ittt	mi
 8005108:	f8d9 3000 	ldrmi.w	r3, [r9]
 800510c:	3302      	addmi	r3, #2
 800510e:	f8c9 3000 	strmi.w	r3, [r9]
 8005112:	6825      	ldr	r5, [r4, #0]
 8005114:	f015 0506 	ands.w	r5, r5, #6
 8005118:	d107      	bne.n	800512a <_printf_common+0x52>
 800511a:	f104 0a19 	add.w	sl, r4, #25
 800511e:	68e3      	ldr	r3, [r4, #12]
 8005120:	f8d9 2000 	ldr.w	r2, [r9]
 8005124:	1a9b      	subs	r3, r3, r2
 8005126:	42ab      	cmp	r3, r5
 8005128:	dc28      	bgt.n	800517c <_printf_common+0xa4>
 800512a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800512e:	6822      	ldr	r2, [r4, #0]
 8005130:	3300      	adds	r3, #0
 8005132:	bf18      	it	ne
 8005134:	2301      	movne	r3, #1
 8005136:	0692      	lsls	r2, r2, #26
 8005138:	d42d      	bmi.n	8005196 <_printf_common+0xbe>
 800513a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800513e:	4639      	mov	r1, r7
 8005140:	4630      	mov	r0, r6
 8005142:	47c0      	blx	r8
 8005144:	3001      	adds	r0, #1
 8005146:	d020      	beq.n	800518a <_printf_common+0xb2>
 8005148:	6823      	ldr	r3, [r4, #0]
 800514a:	68e5      	ldr	r5, [r4, #12]
 800514c:	f8d9 2000 	ldr.w	r2, [r9]
 8005150:	f003 0306 	and.w	r3, r3, #6
 8005154:	2b04      	cmp	r3, #4
 8005156:	bf08      	it	eq
 8005158:	1aad      	subeq	r5, r5, r2
 800515a:	68a3      	ldr	r3, [r4, #8]
 800515c:	6922      	ldr	r2, [r4, #16]
 800515e:	bf0c      	ite	eq
 8005160:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005164:	2500      	movne	r5, #0
 8005166:	4293      	cmp	r3, r2
 8005168:	bfc4      	itt	gt
 800516a:	1a9b      	subgt	r3, r3, r2
 800516c:	18ed      	addgt	r5, r5, r3
 800516e:	f04f 0900 	mov.w	r9, #0
 8005172:	341a      	adds	r4, #26
 8005174:	454d      	cmp	r5, r9
 8005176:	d11a      	bne.n	80051ae <_printf_common+0xd6>
 8005178:	2000      	movs	r0, #0
 800517a:	e008      	b.n	800518e <_printf_common+0xb6>
 800517c:	2301      	movs	r3, #1
 800517e:	4652      	mov	r2, sl
 8005180:	4639      	mov	r1, r7
 8005182:	4630      	mov	r0, r6
 8005184:	47c0      	blx	r8
 8005186:	3001      	adds	r0, #1
 8005188:	d103      	bne.n	8005192 <_printf_common+0xba>
 800518a:	f04f 30ff 	mov.w	r0, #4294967295
 800518e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005192:	3501      	adds	r5, #1
 8005194:	e7c3      	b.n	800511e <_printf_common+0x46>
 8005196:	18e1      	adds	r1, r4, r3
 8005198:	1c5a      	adds	r2, r3, #1
 800519a:	2030      	movs	r0, #48	; 0x30
 800519c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051a0:	4422      	add	r2, r4
 80051a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051aa:	3302      	adds	r3, #2
 80051ac:	e7c5      	b.n	800513a <_printf_common+0x62>
 80051ae:	2301      	movs	r3, #1
 80051b0:	4622      	mov	r2, r4
 80051b2:	4639      	mov	r1, r7
 80051b4:	4630      	mov	r0, r6
 80051b6:	47c0      	blx	r8
 80051b8:	3001      	adds	r0, #1
 80051ba:	d0e6      	beq.n	800518a <_printf_common+0xb2>
 80051bc:	f109 0901 	add.w	r9, r9, #1
 80051c0:	e7d8      	b.n	8005174 <_printf_common+0x9c>
	...

080051c4 <_printf_i>:
 80051c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80051c8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80051cc:	460c      	mov	r4, r1
 80051ce:	7e09      	ldrb	r1, [r1, #24]
 80051d0:	b085      	sub	sp, #20
 80051d2:	296e      	cmp	r1, #110	; 0x6e
 80051d4:	4617      	mov	r7, r2
 80051d6:	4606      	mov	r6, r0
 80051d8:	4698      	mov	r8, r3
 80051da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80051dc:	f000 80b3 	beq.w	8005346 <_printf_i+0x182>
 80051e0:	d822      	bhi.n	8005228 <_printf_i+0x64>
 80051e2:	2963      	cmp	r1, #99	; 0x63
 80051e4:	d036      	beq.n	8005254 <_printf_i+0x90>
 80051e6:	d80a      	bhi.n	80051fe <_printf_i+0x3a>
 80051e8:	2900      	cmp	r1, #0
 80051ea:	f000 80b9 	beq.w	8005360 <_printf_i+0x19c>
 80051ee:	2958      	cmp	r1, #88	; 0x58
 80051f0:	f000 8083 	beq.w	80052fa <_printf_i+0x136>
 80051f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051f8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80051fc:	e032      	b.n	8005264 <_printf_i+0xa0>
 80051fe:	2964      	cmp	r1, #100	; 0x64
 8005200:	d001      	beq.n	8005206 <_printf_i+0x42>
 8005202:	2969      	cmp	r1, #105	; 0x69
 8005204:	d1f6      	bne.n	80051f4 <_printf_i+0x30>
 8005206:	6820      	ldr	r0, [r4, #0]
 8005208:	6813      	ldr	r3, [r2, #0]
 800520a:	0605      	lsls	r5, r0, #24
 800520c:	f103 0104 	add.w	r1, r3, #4
 8005210:	d52a      	bpl.n	8005268 <_printf_i+0xa4>
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	6011      	str	r1, [r2, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	da03      	bge.n	8005222 <_printf_i+0x5e>
 800521a:	222d      	movs	r2, #45	; 0x2d
 800521c:	425b      	negs	r3, r3
 800521e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005222:	486f      	ldr	r0, [pc, #444]	; (80053e0 <_printf_i+0x21c>)
 8005224:	220a      	movs	r2, #10
 8005226:	e039      	b.n	800529c <_printf_i+0xd8>
 8005228:	2973      	cmp	r1, #115	; 0x73
 800522a:	f000 809d 	beq.w	8005368 <_printf_i+0x1a4>
 800522e:	d808      	bhi.n	8005242 <_printf_i+0x7e>
 8005230:	296f      	cmp	r1, #111	; 0x6f
 8005232:	d020      	beq.n	8005276 <_printf_i+0xb2>
 8005234:	2970      	cmp	r1, #112	; 0x70
 8005236:	d1dd      	bne.n	80051f4 <_printf_i+0x30>
 8005238:	6823      	ldr	r3, [r4, #0]
 800523a:	f043 0320 	orr.w	r3, r3, #32
 800523e:	6023      	str	r3, [r4, #0]
 8005240:	e003      	b.n	800524a <_printf_i+0x86>
 8005242:	2975      	cmp	r1, #117	; 0x75
 8005244:	d017      	beq.n	8005276 <_printf_i+0xb2>
 8005246:	2978      	cmp	r1, #120	; 0x78
 8005248:	d1d4      	bne.n	80051f4 <_printf_i+0x30>
 800524a:	2378      	movs	r3, #120	; 0x78
 800524c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005250:	4864      	ldr	r0, [pc, #400]	; (80053e4 <_printf_i+0x220>)
 8005252:	e055      	b.n	8005300 <_printf_i+0x13c>
 8005254:	6813      	ldr	r3, [r2, #0]
 8005256:	1d19      	adds	r1, r3, #4
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	6011      	str	r1, [r2, #0]
 800525c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005260:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005264:	2301      	movs	r3, #1
 8005266:	e08c      	b.n	8005382 <_printf_i+0x1be>
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	6011      	str	r1, [r2, #0]
 800526c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005270:	bf18      	it	ne
 8005272:	b21b      	sxthne	r3, r3
 8005274:	e7cf      	b.n	8005216 <_printf_i+0x52>
 8005276:	6813      	ldr	r3, [r2, #0]
 8005278:	6825      	ldr	r5, [r4, #0]
 800527a:	1d18      	adds	r0, r3, #4
 800527c:	6010      	str	r0, [r2, #0]
 800527e:	0628      	lsls	r0, r5, #24
 8005280:	d501      	bpl.n	8005286 <_printf_i+0xc2>
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	e002      	b.n	800528c <_printf_i+0xc8>
 8005286:	0668      	lsls	r0, r5, #25
 8005288:	d5fb      	bpl.n	8005282 <_printf_i+0xbe>
 800528a:	881b      	ldrh	r3, [r3, #0]
 800528c:	4854      	ldr	r0, [pc, #336]	; (80053e0 <_printf_i+0x21c>)
 800528e:	296f      	cmp	r1, #111	; 0x6f
 8005290:	bf14      	ite	ne
 8005292:	220a      	movne	r2, #10
 8005294:	2208      	moveq	r2, #8
 8005296:	2100      	movs	r1, #0
 8005298:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800529c:	6865      	ldr	r5, [r4, #4]
 800529e:	60a5      	str	r5, [r4, #8]
 80052a0:	2d00      	cmp	r5, #0
 80052a2:	f2c0 8095 	blt.w	80053d0 <_printf_i+0x20c>
 80052a6:	6821      	ldr	r1, [r4, #0]
 80052a8:	f021 0104 	bic.w	r1, r1, #4
 80052ac:	6021      	str	r1, [r4, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d13d      	bne.n	800532e <_printf_i+0x16a>
 80052b2:	2d00      	cmp	r5, #0
 80052b4:	f040 808e 	bne.w	80053d4 <_printf_i+0x210>
 80052b8:	4665      	mov	r5, ip
 80052ba:	2a08      	cmp	r2, #8
 80052bc:	d10b      	bne.n	80052d6 <_printf_i+0x112>
 80052be:	6823      	ldr	r3, [r4, #0]
 80052c0:	07db      	lsls	r3, r3, #31
 80052c2:	d508      	bpl.n	80052d6 <_printf_i+0x112>
 80052c4:	6923      	ldr	r3, [r4, #16]
 80052c6:	6862      	ldr	r2, [r4, #4]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	bfde      	ittt	le
 80052cc:	2330      	movle	r3, #48	; 0x30
 80052ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 80052d2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80052d6:	ebac 0305 	sub.w	r3, ip, r5
 80052da:	6123      	str	r3, [r4, #16]
 80052dc:	f8cd 8000 	str.w	r8, [sp]
 80052e0:	463b      	mov	r3, r7
 80052e2:	aa03      	add	r2, sp, #12
 80052e4:	4621      	mov	r1, r4
 80052e6:	4630      	mov	r0, r6
 80052e8:	f7ff fef6 	bl	80050d8 <_printf_common>
 80052ec:	3001      	adds	r0, #1
 80052ee:	d14d      	bne.n	800538c <_printf_i+0x1c8>
 80052f0:	f04f 30ff 	mov.w	r0, #4294967295
 80052f4:	b005      	add	sp, #20
 80052f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80052fa:	4839      	ldr	r0, [pc, #228]	; (80053e0 <_printf_i+0x21c>)
 80052fc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005300:	6813      	ldr	r3, [r2, #0]
 8005302:	6821      	ldr	r1, [r4, #0]
 8005304:	1d1d      	adds	r5, r3, #4
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6015      	str	r5, [r2, #0]
 800530a:	060a      	lsls	r2, r1, #24
 800530c:	d50b      	bpl.n	8005326 <_printf_i+0x162>
 800530e:	07ca      	lsls	r2, r1, #31
 8005310:	bf44      	itt	mi
 8005312:	f041 0120 	orrmi.w	r1, r1, #32
 8005316:	6021      	strmi	r1, [r4, #0]
 8005318:	b91b      	cbnz	r3, 8005322 <_printf_i+0x15e>
 800531a:	6822      	ldr	r2, [r4, #0]
 800531c:	f022 0220 	bic.w	r2, r2, #32
 8005320:	6022      	str	r2, [r4, #0]
 8005322:	2210      	movs	r2, #16
 8005324:	e7b7      	b.n	8005296 <_printf_i+0xd2>
 8005326:	064d      	lsls	r5, r1, #25
 8005328:	bf48      	it	mi
 800532a:	b29b      	uxthmi	r3, r3
 800532c:	e7ef      	b.n	800530e <_printf_i+0x14a>
 800532e:	4665      	mov	r5, ip
 8005330:	fbb3 f1f2 	udiv	r1, r3, r2
 8005334:	fb02 3311 	mls	r3, r2, r1, r3
 8005338:	5cc3      	ldrb	r3, [r0, r3]
 800533a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800533e:	460b      	mov	r3, r1
 8005340:	2900      	cmp	r1, #0
 8005342:	d1f5      	bne.n	8005330 <_printf_i+0x16c>
 8005344:	e7b9      	b.n	80052ba <_printf_i+0xf6>
 8005346:	6813      	ldr	r3, [r2, #0]
 8005348:	6825      	ldr	r5, [r4, #0]
 800534a:	6961      	ldr	r1, [r4, #20]
 800534c:	1d18      	adds	r0, r3, #4
 800534e:	6010      	str	r0, [r2, #0]
 8005350:	0628      	lsls	r0, r5, #24
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	d501      	bpl.n	800535a <_printf_i+0x196>
 8005356:	6019      	str	r1, [r3, #0]
 8005358:	e002      	b.n	8005360 <_printf_i+0x19c>
 800535a:	066a      	lsls	r2, r5, #25
 800535c:	d5fb      	bpl.n	8005356 <_printf_i+0x192>
 800535e:	8019      	strh	r1, [r3, #0]
 8005360:	2300      	movs	r3, #0
 8005362:	6123      	str	r3, [r4, #16]
 8005364:	4665      	mov	r5, ip
 8005366:	e7b9      	b.n	80052dc <_printf_i+0x118>
 8005368:	6813      	ldr	r3, [r2, #0]
 800536a:	1d19      	adds	r1, r3, #4
 800536c:	6011      	str	r1, [r2, #0]
 800536e:	681d      	ldr	r5, [r3, #0]
 8005370:	6862      	ldr	r2, [r4, #4]
 8005372:	2100      	movs	r1, #0
 8005374:	4628      	mov	r0, r5
 8005376:	f7fa ff33 	bl	80001e0 <memchr>
 800537a:	b108      	cbz	r0, 8005380 <_printf_i+0x1bc>
 800537c:	1b40      	subs	r0, r0, r5
 800537e:	6060      	str	r0, [r4, #4]
 8005380:	6863      	ldr	r3, [r4, #4]
 8005382:	6123      	str	r3, [r4, #16]
 8005384:	2300      	movs	r3, #0
 8005386:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800538a:	e7a7      	b.n	80052dc <_printf_i+0x118>
 800538c:	6923      	ldr	r3, [r4, #16]
 800538e:	462a      	mov	r2, r5
 8005390:	4639      	mov	r1, r7
 8005392:	4630      	mov	r0, r6
 8005394:	47c0      	blx	r8
 8005396:	3001      	adds	r0, #1
 8005398:	d0aa      	beq.n	80052f0 <_printf_i+0x12c>
 800539a:	6823      	ldr	r3, [r4, #0]
 800539c:	079b      	lsls	r3, r3, #30
 800539e:	d413      	bmi.n	80053c8 <_printf_i+0x204>
 80053a0:	68e0      	ldr	r0, [r4, #12]
 80053a2:	9b03      	ldr	r3, [sp, #12]
 80053a4:	4298      	cmp	r0, r3
 80053a6:	bfb8      	it	lt
 80053a8:	4618      	movlt	r0, r3
 80053aa:	e7a3      	b.n	80052f4 <_printf_i+0x130>
 80053ac:	2301      	movs	r3, #1
 80053ae:	464a      	mov	r2, r9
 80053b0:	4639      	mov	r1, r7
 80053b2:	4630      	mov	r0, r6
 80053b4:	47c0      	blx	r8
 80053b6:	3001      	adds	r0, #1
 80053b8:	d09a      	beq.n	80052f0 <_printf_i+0x12c>
 80053ba:	3501      	adds	r5, #1
 80053bc:	68e3      	ldr	r3, [r4, #12]
 80053be:	9a03      	ldr	r2, [sp, #12]
 80053c0:	1a9b      	subs	r3, r3, r2
 80053c2:	42ab      	cmp	r3, r5
 80053c4:	dcf2      	bgt.n	80053ac <_printf_i+0x1e8>
 80053c6:	e7eb      	b.n	80053a0 <_printf_i+0x1dc>
 80053c8:	2500      	movs	r5, #0
 80053ca:	f104 0919 	add.w	r9, r4, #25
 80053ce:	e7f5      	b.n	80053bc <_printf_i+0x1f8>
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d1ac      	bne.n	800532e <_printf_i+0x16a>
 80053d4:	7803      	ldrb	r3, [r0, #0]
 80053d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053da:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053de:	e76c      	b.n	80052ba <_printf_i+0xf6>
 80053e0:	0800739e 	.word	0x0800739e
 80053e4:	080073af 	.word	0x080073af

080053e8 <iprintf>:
 80053e8:	b40f      	push	{r0, r1, r2, r3}
 80053ea:	4b0a      	ldr	r3, [pc, #40]	; (8005414 <iprintf+0x2c>)
 80053ec:	b513      	push	{r0, r1, r4, lr}
 80053ee:	681c      	ldr	r4, [r3, #0]
 80053f0:	b124      	cbz	r4, 80053fc <iprintf+0x14>
 80053f2:	69a3      	ldr	r3, [r4, #24]
 80053f4:	b913      	cbnz	r3, 80053fc <iprintf+0x14>
 80053f6:	4620      	mov	r0, r4
 80053f8:	f001 f866 	bl	80064c8 <__sinit>
 80053fc:	ab05      	add	r3, sp, #20
 80053fe:	9a04      	ldr	r2, [sp, #16]
 8005400:	68a1      	ldr	r1, [r4, #8]
 8005402:	9301      	str	r3, [sp, #4]
 8005404:	4620      	mov	r0, r4
 8005406:	f001 fd29 	bl	8006e5c <_vfiprintf_r>
 800540a:	b002      	add	sp, #8
 800540c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005410:	b004      	add	sp, #16
 8005412:	4770      	bx	lr
 8005414:	2000000c 	.word	0x2000000c

08005418 <_puts_r>:
 8005418:	b570      	push	{r4, r5, r6, lr}
 800541a:	460e      	mov	r6, r1
 800541c:	4605      	mov	r5, r0
 800541e:	b118      	cbz	r0, 8005428 <_puts_r+0x10>
 8005420:	6983      	ldr	r3, [r0, #24]
 8005422:	b90b      	cbnz	r3, 8005428 <_puts_r+0x10>
 8005424:	f001 f850 	bl	80064c8 <__sinit>
 8005428:	69ab      	ldr	r3, [r5, #24]
 800542a:	68ac      	ldr	r4, [r5, #8]
 800542c:	b913      	cbnz	r3, 8005434 <_puts_r+0x1c>
 800542e:	4628      	mov	r0, r5
 8005430:	f001 f84a 	bl	80064c8 <__sinit>
 8005434:	4b23      	ldr	r3, [pc, #140]	; (80054c4 <_puts_r+0xac>)
 8005436:	429c      	cmp	r4, r3
 8005438:	d117      	bne.n	800546a <_puts_r+0x52>
 800543a:	686c      	ldr	r4, [r5, #4]
 800543c:	89a3      	ldrh	r3, [r4, #12]
 800543e:	071b      	lsls	r3, r3, #28
 8005440:	d51d      	bpl.n	800547e <_puts_r+0x66>
 8005442:	6923      	ldr	r3, [r4, #16]
 8005444:	b1db      	cbz	r3, 800547e <_puts_r+0x66>
 8005446:	3e01      	subs	r6, #1
 8005448:	68a3      	ldr	r3, [r4, #8]
 800544a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800544e:	3b01      	subs	r3, #1
 8005450:	60a3      	str	r3, [r4, #8]
 8005452:	b9e9      	cbnz	r1, 8005490 <_puts_r+0x78>
 8005454:	2b00      	cmp	r3, #0
 8005456:	da2e      	bge.n	80054b6 <_puts_r+0x9e>
 8005458:	4622      	mov	r2, r4
 800545a:	210a      	movs	r1, #10
 800545c:	4628      	mov	r0, r5
 800545e:	f000 f83f 	bl	80054e0 <__swbuf_r>
 8005462:	3001      	adds	r0, #1
 8005464:	d011      	beq.n	800548a <_puts_r+0x72>
 8005466:	200a      	movs	r0, #10
 8005468:	e011      	b.n	800548e <_puts_r+0x76>
 800546a:	4b17      	ldr	r3, [pc, #92]	; (80054c8 <_puts_r+0xb0>)
 800546c:	429c      	cmp	r4, r3
 800546e:	d101      	bne.n	8005474 <_puts_r+0x5c>
 8005470:	68ac      	ldr	r4, [r5, #8]
 8005472:	e7e3      	b.n	800543c <_puts_r+0x24>
 8005474:	4b15      	ldr	r3, [pc, #84]	; (80054cc <_puts_r+0xb4>)
 8005476:	429c      	cmp	r4, r3
 8005478:	bf08      	it	eq
 800547a:	68ec      	ldreq	r4, [r5, #12]
 800547c:	e7de      	b.n	800543c <_puts_r+0x24>
 800547e:	4621      	mov	r1, r4
 8005480:	4628      	mov	r0, r5
 8005482:	f000 f87f 	bl	8005584 <__swsetup_r>
 8005486:	2800      	cmp	r0, #0
 8005488:	d0dd      	beq.n	8005446 <_puts_r+0x2e>
 800548a:	f04f 30ff 	mov.w	r0, #4294967295
 800548e:	bd70      	pop	{r4, r5, r6, pc}
 8005490:	2b00      	cmp	r3, #0
 8005492:	da04      	bge.n	800549e <_puts_r+0x86>
 8005494:	69a2      	ldr	r2, [r4, #24]
 8005496:	429a      	cmp	r2, r3
 8005498:	dc06      	bgt.n	80054a8 <_puts_r+0x90>
 800549a:	290a      	cmp	r1, #10
 800549c:	d004      	beq.n	80054a8 <_puts_r+0x90>
 800549e:	6823      	ldr	r3, [r4, #0]
 80054a0:	1c5a      	adds	r2, r3, #1
 80054a2:	6022      	str	r2, [r4, #0]
 80054a4:	7019      	strb	r1, [r3, #0]
 80054a6:	e7cf      	b.n	8005448 <_puts_r+0x30>
 80054a8:	4622      	mov	r2, r4
 80054aa:	4628      	mov	r0, r5
 80054ac:	f000 f818 	bl	80054e0 <__swbuf_r>
 80054b0:	3001      	adds	r0, #1
 80054b2:	d1c9      	bne.n	8005448 <_puts_r+0x30>
 80054b4:	e7e9      	b.n	800548a <_puts_r+0x72>
 80054b6:	6823      	ldr	r3, [r4, #0]
 80054b8:	200a      	movs	r0, #10
 80054ba:	1c5a      	adds	r2, r3, #1
 80054bc:	6022      	str	r2, [r4, #0]
 80054be:	7018      	strb	r0, [r3, #0]
 80054c0:	e7e5      	b.n	800548e <_puts_r+0x76>
 80054c2:	bf00      	nop
 80054c4:	080073f0 	.word	0x080073f0
 80054c8:	08007410 	.word	0x08007410
 80054cc:	080073d0 	.word	0x080073d0

080054d0 <puts>:
 80054d0:	4b02      	ldr	r3, [pc, #8]	; (80054dc <puts+0xc>)
 80054d2:	4601      	mov	r1, r0
 80054d4:	6818      	ldr	r0, [r3, #0]
 80054d6:	f7ff bf9f 	b.w	8005418 <_puts_r>
 80054da:	bf00      	nop
 80054dc:	2000000c 	.word	0x2000000c

080054e0 <__swbuf_r>:
 80054e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054e2:	460e      	mov	r6, r1
 80054e4:	4614      	mov	r4, r2
 80054e6:	4605      	mov	r5, r0
 80054e8:	b118      	cbz	r0, 80054f2 <__swbuf_r+0x12>
 80054ea:	6983      	ldr	r3, [r0, #24]
 80054ec:	b90b      	cbnz	r3, 80054f2 <__swbuf_r+0x12>
 80054ee:	f000 ffeb 	bl	80064c8 <__sinit>
 80054f2:	4b21      	ldr	r3, [pc, #132]	; (8005578 <__swbuf_r+0x98>)
 80054f4:	429c      	cmp	r4, r3
 80054f6:	d12a      	bne.n	800554e <__swbuf_r+0x6e>
 80054f8:	686c      	ldr	r4, [r5, #4]
 80054fa:	69a3      	ldr	r3, [r4, #24]
 80054fc:	60a3      	str	r3, [r4, #8]
 80054fe:	89a3      	ldrh	r3, [r4, #12]
 8005500:	071a      	lsls	r2, r3, #28
 8005502:	d52e      	bpl.n	8005562 <__swbuf_r+0x82>
 8005504:	6923      	ldr	r3, [r4, #16]
 8005506:	b363      	cbz	r3, 8005562 <__swbuf_r+0x82>
 8005508:	6923      	ldr	r3, [r4, #16]
 800550a:	6820      	ldr	r0, [r4, #0]
 800550c:	1ac0      	subs	r0, r0, r3
 800550e:	6963      	ldr	r3, [r4, #20]
 8005510:	b2f6      	uxtb	r6, r6
 8005512:	4283      	cmp	r3, r0
 8005514:	4637      	mov	r7, r6
 8005516:	dc04      	bgt.n	8005522 <__swbuf_r+0x42>
 8005518:	4621      	mov	r1, r4
 800551a:	4628      	mov	r0, r5
 800551c:	f000 ff6a 	bl	80063f4 <_fflush_r>
 8005520:	bb28      	cbnz	r0, 800556e <__swbuf_r+0x8e>
 8005522:	68a3      	ldr	r3, [r4, #8]
 8005524:	3b01      	subs	r3, #1
 8005526:	60a3      	str	r3, [r4, #8]
 8005528:	6823      	ldr	r3, [r4, #0]
 800552a:	1c5a      	adds	r2, r3, #1
 800552c:	6022      	str	r2, [r4, #0]
 800552e:	701e      	strb	r6, [r3, #0]
 8005530:	6963      	ldr	r3, [r4, #20]
 8005532:	3001      	adds	r0, #1
 8005534:	4283      	cmp	r3, r0
 8005536:	d004      	beq.n	8005542 <__swbuf_r+0x62>
 8005538:	89a3      	ldrh	r3, [r4, #12]
 800553a:	07db      	lsls	r3, r3, #31
 800553c:	d519      	bpl.n	8005572 <__swbuf_r+0x92>
 800553e:	2e0a      	cmp	r6, #10
 8005540:	d117      	bne.n	8005572 <__swbuf_r+0x92>
 8005542:	4621      	mov	r1, r4
 8005544:	4628      	mov	r0, r5
 8005546:	f000 ff55 	bl	80063f4 <_fflush_r>
 800554a:	b190      	cbz	r0, 8005572 <__swbuf_r+0x92>
 800554c:	e00f      	b.n	800556e <__swbuf_r+0x8e>
 800554e:	4b0b      	ldr	r3, [pc, #44]	; (800557c <__swbuf_r+0x9c>)
 8005550:	429c      	cmp	r4, r3
 8005552:	d101      	bne.n	8005558 <__swbuf_r+0x78>
 8005554:	68ac      	ldr	r4, [r5, #8]
 8005556:	e7d0      	b.n	80054fa <__swbuf_r+0x1a>
 8005558:	4b09      	ldr	r3, [pc, #36]	; (8005580 <__swbuf_r+0xa0>)
 800555a:	429c      	cmp	r4, r3
 800555c:	bf08      	it	eq
 800555e:	68ec      	ldreq	r4, [r5, #12]
 8005560:	e7cb      	b.n	80054fa <__swbuf_r+0x1a>
 8005562:	4621      	mov	r1, r4
 8005564:	4628      	mov	r0, r5
 8005566:	f000 f80d 	bl	8005584 <__swsetup_r>
 800556a:	2800      	cmp	r0, #0
 800556c:	d0cc      	beq.n	8005508 <__swbuf_r+0x28>
 800556e:	f04f 37ff 	mov.w	r7, #4294967295
 8005572:	4638      	mov	r0, r7
 8005574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005576:	bf00      	nop
 8005578:	080073f0 	.word	0x080073f0
 800557c:	08007410 	.word	0x08007410
 8005580:	080073d0 	.word	0x080073d0

08005584 <__swsetup_r>:
 8005584:	4b32      	ldr	r3, [pc, #200]	; (8005650 <__swsetup_r+0xcc>)
 8005586:	b570      	push	{r4, r5, r6, lr}
 8005588:	681d      	ldr	r5, [r3, #0]
 800558a:	4606      	mov	r6, r0
 800558c:	460c      	mov	r4, r1
 800558e:	b125      	cbz	r5, 800559a <__swsetup_r+0x16>
 8005590:	69ab      	ldr	r3, [r5, #24]
 8005592:	b913      	cbnz	r3, 800559a <__swsetup_r+0x16>
 8005594:	4628      	mov	r0, r5
 8005596:	f000 ff97 	bl	80064c8 <__sinit>
 800559a:	4b2e      	ldr	r3, [pc, #184]	; (8005654 <__swsetup_r+0xd0>)
 800559c:	429c      	cmp	r4, r3
 800559e:	d10f      	bne.n	80055c0 <__swsetup_r+0x3c>
 80055a0:	686c      	ldr	r4, [r5, #4]
 80055a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055a6:	b29a      	uxth	r2, r3
 80055a8:	0715      	lsls	r5, r2, #28
 80055aa:	d42c      	bmi.n	8005606 <__swsetup_r+0x82>
 80055ac:	06d0      	lsls	r0, r2, #27
 80055ae:	d411      	bmi.n	80055d4 <__swsetup_r+0x50>
 80055b0:	2209      	movs	r2, #9
 80055b2:	6032      	str	r2, [r6, #0]
 80055b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055b8:	81a3      	strh	r3, [r4, #12]
 80055ba:	f04f 30ff 	mov.w	r0, #4294967295
 80055be:	e03e      	b.n	800563e <__swsetup_r+0xba>
 80055c0:	4b25      	ldr	r3, [pc, #148]	; (8005658 <__swsetup_r+0xd4>)
 80055c2:	429c      	cmp	r4, r3
 80055c4:	d101      	bne.n	80055ca <__swsetup_r+0x46>
 80055c6:	68ac      	ldr	r4, [r5, #8]
 80055c8:	e7eb      	b.n	80055a2 <__swsetup_r+0x1e>
 80055ca:	4b24      	ldr	r3, [pc, #144]	; (800565c <__swsetup_r+0xd8>)
 80055cc:	429c      	cmp	r4, r3
 80055ce:	bf08      	it	eq
 80055d0:	68ec      	ldreq	r4, [r5, #12]
 80055d2:	e7e6      	b.n	80055a2 <__swsetup_r+0x1e>
 80055d4:	0751      	lsls	r1, r2, #29
 80055d6:	d512      	bpl.n	80055fe <__swsetup_r+0x7a>
 80055d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80055da:	b141      	cbz	r1, 80055ee <__swsetup_r+0x6a>
 80055dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055e0:	4299      	cmp	r1, r3
 80055e2:	d002      	beq.n	80055ea <__swsetup_r+0x66>
 80055e4:	4630      	mov	r0, r6
 80055e6:	f001 fb67 	bl	8006cb8 <_free_r>
 80055ea:	2300      	movs	r3, #0
 80055ec:	6363      	str	r3, [r4, #52]	; 0x34
 80055ee:	89a3      	ldrh	r3, [r4, #12]
 80055f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80055f4:	81a3      	strh	r3, [r4, #12]
 80055f6:	2300      	movs	r3, #0
 80055f8:	6063      	str	r3, [r4, #4]
 80055fa:	6923      	ldr	r3, [r4, #16]
 80055fc:	6023      	str	r3, [r4, #0]
 80055fe:	89a3      	ldrh	r3, [r4, #12]
 8005600:	f043 0308 	orr.w	r3, r3, #8
 8005604:	81a3      	strh	r3, [r4, #12]
 8005606:	6923      	ldr	r3, [r4, #16]
 8005608:	b94b      	cbnz	r3, 800561e <__swsetup_r+0x9a>
 800560a:	89a3      	ldrh	r3, [r4, #12]
 800560c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005614:	d003      	beq.n	800561e <__swsetup_r+0x9a>
 8005616:	4621      	mov	r1, r4
 8005618:	4630      	mov	r0, r6
 800561a:	f001 f811 	bl	8006640 <__smakebuf_r>
 800561e:	89a2      	ldrh	r2, [r4, #12]
 8005620:	f012 0301 	ands.w	r3, r2, #1
 8005624:	d00c      	beq.n	8005640 <__swsetup_r+0xbc>
 8005626:	2300      	movs	r3, #0
 8005628:	60a3      	str	r3, [r4, #8]
 800562a:	6963      	ldr	r3, [r4, #20]
 800562c:	425b      	negs	r3, r3
 800562e:	61a3      	str	r3, [r4, #24]
 8005630:	6923      	ldr	r3, [r4, #16]
 8005632:	b953      	cbnz	r3, 800564a <__swsetup_r+0xc6>
 8005634:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005638:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800563c:	d1ba      	bne.n	80055b4 <__swsetup_r+0x30>
 800563e:	bd70      	pop	{r4, r5, r6, pc}
 8005640:	0792      	lsls	r2, r2, #30
 8005642:	bf58      	it	pl
 8005644:	6963      	ldrpl	r3, [r4, #20]
 8005646:	60a3      	str	r3, [r4, #8]
 8005648:	e7f2      	b.n	8005630 <__swsetup_r+0xac>
 800564a:	2000      	movs	r0, #0
 800564c:	e7f7      	b.n	800563e <__swsetup_r+0xba>
 800564e:	bf00      	nop
 8005650:	2000000c 	.word	0x2000000c
 8005654:	080073f0 	.word	0x080073f0
 8005658:	08007410 	.word	0x08007410
 800565c:	080073d0 	.word	0x080073d0

08005660 <quorem>:
 8005660:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005664:	6903      	ldr	r3, [r0, #16]
 8005666:	690c      	ldr	r4, [r1, #16]
 8005668:	42a3      	cmp	r3, r4
 800566a:	4680      	mov	r8, r0
 800566c:	f2c0 8082 	blt.w	8005774 <quorem+0x114>
 8005670:	3c01      	subs	r4, #1
 8005672:	f101 0714 	add.w	r7, r1, #20
 8005676:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800567a:	f100 0614 	add.w	r6, r0, #20
 800567e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005682:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005686:	eb06 030c 	add.w	r3, r6, ip
 800568a:	3501      	adds	r5, #1
 800568c:	eb07 090c 	add.w	r9, r7, ip
 8005690:	9301      	str	r3, [sp, #4]
 8005692:	fbb0 f5f5 	udiv	r5, r0, r5
 8005696:	b395      	cbz	r5, 80056fe <quorem+0x9e>
 8005698:	f04f 0a00 	mov.w	sl, #0
 800569c:	4638      	mov	r0, r7
 800569e:	46b6      	mov	lr, r6
 80056a0:	46d3      	mov	fp, sl
 80056a2:	f850 2b04 	ldr.w	r2, [r0], #4
 80056a6:	b293      	uxth	r3, r2
 80056a8:	fb05 a303 	mla	r3, r5, r3, sl
 80056ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	ebab 0303 	sub.w	r3, fp, r3
 80056b6:	0c12      	lsrs	r2, r2, #16
 80056b8:	f8de b000 	ldr.w	fp, [lr]
 80056bc:	fb05 a202 	mla	r2, r5, r2, sl
 80056c0:	fa13 f38b 	uxtah	r3, r3, fp
 80056c4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80056c8:	fa1f fb82 	uxth.w	fp, r2
 80056cc:	f8de 2000 	ldr.w	r2, [lr]
 80056d0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80056d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80056d8:	b29b      	uxth	r3, r3
 80056da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80056de:	4581      	cmp	r9, r0
 80056e0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80056e4:	f84e 3b04 	str.w	r3, [lr], #4
 80056e8:	d2db      	bcs.n	80056a2 <quorem+0x42>
 80056ea:	f856 300c 	ldr.w	r3, [r6, ip]
 80056ee:	b933      	cbnz	r3, 80056fe <quorem+0x9e>
 80056f0:	9b01      	ldr	r3, [sp, #4]
 80056f2:	3b04      	subs	r3, #4
 80056f4:	429e      	cmp	r6, r3
 80056f6:	461a      	mov	r2, r3
 80056f8:	d330      	bcc.n	800575c <quorem+0xfc>
 80056fa:	f8c8 4010 	str.w	r4, [r8, #16]
 80056fe:	4640      	mov	r0, r8
 8005700:	f001 fa06 	bl	8006b10 <__mcmp>
 8005704:	2800      	cmp	r0, #0
 8005706:	db25      	blt.n	8005754 <quorem+0xf4>
 8005708:	3501      	adds	r5, #1
 800570a:	4630      	mov	r0, r6
 800570c:	f04f 0c00 	mov.w	ip, #0
 8005710:	f857 2b04 	ldr.w	r2, [r7], #4
 8005714:	f8d0 e000 	ldr.w	lr, [r0]
 8005718:	b293      	uxth	r3, r2
 800571a:	ebac 0303 	sub.w	r3, ip, r3
 800571e:	0c12      	lsrs	r2, r2, #16
 8005720:	fa13 f38e 	uxtah	r3, r3, lr
 8005724:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005728:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800572c:	b29b      	uxth	r3, r3
 800572e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005732:	45b9      	cmp	r9, r7
 8005734:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005738:	f840 3b04 	str.w	r3, [r0], #4
 800573c:	d2e8      	bcs.n	8005710 <quorem+0xb0>
 800573e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005742:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005746:	b92a      	cbnz	r2, 8005754 <quorem+0xf4>
 8005748:	3b04      	subs	r3, #4
 800574a:	429e      	cmp	r6, r3
 800574c:	461a      	mov	r2, r3
 800574e:	d30b      	bcc.n	8005768 <quorem+0x108>
 8005750:	f8c8 4010 	str.w	r4, [r8, #16]
 8005754:	4628      	mov	r0, r5
 8005756:	b003      	add	sp, #12
 8005758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800575c:	6812      	ldr	r2, [r2, #0]
 800575e:	3b04      	subs	r3, #4
 8005760:	2a00      	cmp	r2, #0
 8005762:	d1ca      	bne.n	80056fa <quorem+0x9a>
 8005764:	3c01      	subs	r4, #1
 8005766:	e7c5      	b.n	80056f4 <quorem+0x94>
 8005768:	6812      	ldr	r2, [r2, #0]
 800576a:	3b04      	subs	r3, #4
 800576c:	2a00      	cmp	r2, #0
 800576e:	d1ef      	bne.n	8005750 <quorem+0xf0>
 8005770:	3c01      	subs	r4, #1
 8005772:	e7ea      	b.n	800574a <quorem+0xea>
 8005774:	2000      	movs	r0, #0
 8005776:	e7ee      	b.n	8005756 <quorem+0xf6>

08005778 <_dtoa_r>:
 8005778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800577c:	ec57 6b10 	vmov	r6, r7, d0
 8005780:	b097      	sub	sp, #92	; 0x5c
 8005782:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005784:	9106      	str	r1, [sp, #24]
 8005786:	4604      	mov	r4, r0
 8005788:	920b      	str	r2, [sp, #44]	; 0x2c
 800578a:	9312      	str	r3, [sp, #72]	; 0x48
 800578c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005790:	e9cd 6700 	strd	r6, r7, [sp]
 8005794:	b93d      	cbnz	r5, 80057a6 <_dtoa_r+0x2e>
 8005796:	2010      	movs	r0, #16
 8005798:	f000 ff92 	bl	80066c0 <malloc>
 800579c:	6260      	str	r0, [r4, #36]	; 0x24
 800579e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80057a2:	6005      	str	r5, [r0, #0]
 80057a4:	60c5      	str	r5, [r0, #12]
 80057a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057a8:	6819      	ldr	r1, [r3, #0]
 80057aa:	b151      	cbz	r1, 80057c2 <_dtoa_r+0x4a>
 80057ac:	685a      	ldr	r2, [r3, #4]
 80057ae:	604a      	str	r2, [r1, #4]
 80057b0:	2301      	movs	r3, #1
 80057b2:	4093      	lsls	r3, r2
 80057b4:	608b      	str	r3, [r1, #8]
 80057b6:	4620      	mov	r0, r4
 80057b8:	f000 ffc9 	bl	800674e <_Bfree>
 80057bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057be:	2200      	movs	r2, #0
 80057c0:	601a      	str	r2, [r3, #0]
 80057c2:	1e3b      	subs	r3, r7, #0
 80057c4:	bfbb      	ittet	lt
 80057c6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80057ca:	9301      	strlt	r3, [sp, #4]
 80057cc:	2300      	movge	r3, #0
 80057ce:	2201      	movlt	r2, #1
 80057d0:	bfac      	ite	ge
 80057d2:	f8c8 3000 	strge.w	r3, [r8]
 80057d6:	f8c8 2000 	strlt.w	r2, [r8]
 80057da:	4baf      	ldr	r3, [pc, #700]	; (8005a98 <_dtoa_r+0x320>)
 80057dc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80057e0:	ea33 0308 	bics.w	r3, r3, r8
 80057e4:	d114      	bne.n	8005810 <_dtoa_r+0x98>
 80057e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80057e8:	f242 730f 	movw	r3, #9999	; 0x270f
 80057ec:	6013      	str	r3, [r2, #0]
 80057ee:	9b00      	ldr	r3, [sp, #0]
 80057f0:	b923      	cbnz	r3, 80057fc <_dtoa_r+0x84>
 80057f2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80057f6:	2800      	cmp	r0, #0
 80057f8:	f000 8542 	beq.w	8006280 <_dtoa_r+0xb08>
 80057fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80057fe:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8005aac <_dtoa_r+0x334>
 8005802:	2b00      	cmp	r3, #0
 8005804:	f000 8544 	beq.w	8006290 <_dtoa_r+0xb18>
 8005808:	f10b 0303 	add.w	r3, fp, #3
 800580c:	f000 bd3e 	b.w	800628c <_dtoa_r+0xb14>
 8005810:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005814:	2200      	movs	r2, #0
 8005816:	2300      	movs	r3, #0
 8005818:	4630      	mov	r0, r6
 800581a:	4639      	mov	r1, r7
 800581c:	f7fb f954 	bl	8000ac8 <__aeabi_dcmpeq>
 8005820:	4681      	mov	r9, r0
 8005822:	b168      	cbz	r0, 8005840 <_dtoa_r+0xc8>
 8005824:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005826:	2301      	movs	r3, #1
 8005828:	6013      	str	r3, [r2, #0]
 800582a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800582c:	2b00      	cmp	r3, #0
 800582e:	f000 8524 	beq.w	800627a <_dtoa_r+0xb02>
 8005832:	4b9a      	ldr	r3, [pc, #616]	; (8005a9c <_dtoa_r+0x324>)
 8005834:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005836:	f103 3bff 	add.w	fp, r3, #4294967295
 800583a:	6013      	str	r3, [r2, #0]
 800583c:	f000 bd28 	b.w	8006290 <_dtoa_r+0xb18>
 8005840:	aa14      	add	r2, sp, #80	; 0x50
 8005842:	a915      	add	r1, sp, #84	; 0x54
 8005844:	ec47 6b10 	vmov	d0, r6, r7
 8005848:	4620      	mov	r0, r4
 800584a:	f001 f9d8 	bl	8006bfe <__d2b>
 800584e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005852:	9004      	str	r0, [sp, #16]
 8005854:	2d00      	cmp	r5, #0
 8005856:	d07c      	beq.n	8005952 <_dtoa_r+0x1da>
 8005858:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800585c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005860:	46b2      	mov	sl, r6
 8005862:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8005866:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800586a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800586e:	2200      	movs	r2, #0
 8005870:	4b8b      	ldr	r3, [pc, #556]	; (8005aa0 <_dtoa_r+0x328>)
 8005872:	4650      	mov	r0, sl
 8005874:	4659      	mov	r1, fp
 8005876:	f7fa fd07 	bl	8000288 <__aeabi_dsub>
 800587a:	a381      	add	r3, pc, #516	; (adr r3, 8005a80 <_dtoa_r+0x308>)
 800587c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005880:	f7fa feba 	bl	80005f8 <__aeabi_dmul>
 8005884:	a380      	add	r3, pc, #512	; (adr r3, 8005a88 <_dtoa_r+0x310>)
 8005886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800588a:	f7fa fcff 	bl	800028c <__adddf3>
 800588e:	4606      	mov	r6, r0
 8005890:	4628      	mov	r0, r5
 8005892:	460f      	mov	r7, r1
 8005894:	f7fa fe46 	bl	8000524 <__aeabi_i2d>
 8005898:	a37d      	add	r3, pc, #500	; (adr r3, 8005a90 <_dtoa_r+0x318>)
 800589a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589e:	f7fa feab 	bl	80005f8 <__aeabi_dmul>
 80058a2:	4602      	mov	r2, r0
 80058a4:	460b      	mov	r3, r1
 80058a6:	4630      	mov	r0, r6
 80058a8:	4639      	mov	r1, r7
 80058aa:	f7fa fcef 	bl	800028c <__adddf3>
 80058ae:	4606      	mov	r6, r0
 80058b0:	460f      	mov	r7, r1
 80058b2:	f7fb f951 	bl	8000b58 <__aeabi_d2iz>
 80058b6:	2200      	movs	r2, #0
 80058b8:	4682      	mov	sl, r0
 80058ba:	2300      	movs	r3, #0
 80058bc:	4630      	mov	r0, r6
 80058be:	4639      	mov	r1, r7
 80058c0:	f7fb f90c 	bl	8000adc <__aeabi_dcmplt>
 80058c4:	b148      	cbz	r0, 80058da <_dtoa_r+0x162>
 80058c6:	4650      	mov	r0, sl
 80058c8:	f7fa fe2c 	bl	8000524 <__aeabi_i2d>
 80058cc:	4632      	mov	r2, r6
 80058ce:	463b      	mov	r3, r7
 80058d0:	f7fb f8fa 	bl	8000ac8 <__aeabi_dcmpeq>
 80058d4:	b908      	cbnz	r0, 80058da <_dtoa_r+0x162>
 80058d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80058da:	f1ba 0f16 	cmp.w	sl, #22
 80058de:	d859      	bhi.n	8005994 <_dtoa_r+0x21c>
 80058e0:	4970      	ldr	r1, [pc, #448]	; (8005aa4 <_dtoa_r+0x32c>)
 80058e2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80058e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80058ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80058ee:	f7fb f913 	bl	8000b18 <__aeabi_dcmpgt>
 80058f2:	2800      	cmp	r0, #0
 80058f4:	d050      	beq.n	8005998 <_dtoa_r+0x220>
 80058f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80058fa:	2300      	movs	r3, #0
 80058fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80058fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005900:	1b5d      	subs	r5, r3, r5
 8005902:	f1b5 0801 	subs.w	r8, r5, #1
 8005906:	bf49      	itett	mi
 8005908:	f1c5 0301 	rsbmi	r3, r5, #1
 800590c:	2300      	movpl	r3, #0
 800590e:	9305      	strmi	r3, [sp, #20]
 8005910:	f04f 0800 	movmi.w	r8, #0
 8005914:	bf58      	it	pl
 8005916:	9305      	strpl	r3, [sp, #20]
 8005918:	f1ba 0f00 	cmp.w	sl, #0
 800591c:	db3e      	blt.n	800599c <_dtoa_r+0x224>
 800591e:	2300      	movs	r3, #0
 8005920:	44d0      	add	r8, sl
 8005922:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005926:	9307      	str	r3, [sp, #28]
 8005928:	9b06      	ldr	r3, [sp, #24]
 800592a:	2b09      	cmp	r3, #9
 800592c:	f200 8090 	bhi.w	8005a50 <_dtoa_r+0x2d8>
 8005930:	2b05      	cmp	r3, #5
 8005932:	bfc4      	itt	gt
 8005934:	3b04      	subgt	r3, #4
 8005936:	9306      	strgt	r3, [sp, #24]
 8005938:	9b06      	ldr	r3, [sp, #24]
 800593a:	f1a3 0302 	sub.w	r3, r3, #2
 800593e:	bfcc      	ite	gt
 8005940:	2500      	movgt	r5, #0
 8005942:	2501      	movle	r5, #1
 8005944:	2b03      	cmp	r3, #3
 8005946:	f200 808f 	bhi.w	8005a68 <_dtoa_r+0x2f0>
 800594a:	e8df f003 	tbb	[pc, r3]
 800594e:	7f7d      	.short	0x7f7d
 8005950:	7131      	.short	0x7131
 8005952:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8005956:	441d      	add	r5, r3
 8005958:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800595c:	2820      	cmp	r0, #32
 800595e:	dd13      	ble.n	8005988 <_dtoa_r+0x210>
 8005960:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005964:	9b00      	ldr	r3, [sp, #0]
 8005966:	fa08 f800 	lsl.w	r8, r8, r0
 800596a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800596e:	fa23 f000 	lsr.w	r0, r3, r0
 8005972:	ea48 0000 	orr.w	r0, r8, r0
 8005976:	f7fa fdc5 	bl	8000504 <__aeabi_ui2d>
 800597a:	2301      	movs	r3, #1
 800597c:	4682      	mov	sl, r0
 800597e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8005982:	3d01      	subs	r5, #1
 8005984:	9313      	str	r3, [sp, #76]	; 0x4c
 8005986:	e772      	b.n	800586e <_dtoa_r+0xf6>
 8005988:	9b00      	ldr	r3, [sp, #0]
 800598a:	f1c0 0020 	rsb	r0, r0, #32
 800598e:	fa03 f000 	lsl.w	r0, r3, r0
 8005992:	e7f0      	b.n	8005976 <_dtoa_r+0x1fe>
 8005994:	2301      	movs	r3, #1
 8005996:	e7b1      	b.n	80058fc <_dtoa_r+0x184>
 8005998:	900f      	str	r0, [sp, #60]	; 0x3c
 800599a:	e7b0      	b.n	80058fe <_dtoa_r+0x186>
 800599c:	9b05      	ldr	r3, [sp, #20]
 800599e:	eba3 030a 	sub.w	r3, r3, sl
 80059a2:	9305      	str	r3, [sp, #20]
 80059a4:	f1ca 0300 	rsb	r3, sl, #0
 80059a8:	9307      	str	r3, [sp, #28]
 80059aa:	2300      	movs	r3, #0
 80059ac:	930e      	str	r3, [sp, #56]	; 0x38
 80059ae:	e7bb      	b.n	8005928 <_dtoa_r+0x1b0>
 80059b0:	2301      	movs	r3, #1
 80059b2:	930a      	str	r3, [sp, #40]	; 0x28
 80059b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	dd59      	ble.n	8005a6e <_dtoa_r+0x2f6>
 80059ba:	9302      	str	r3, [sp, #8]
 80059bc:	4699      	mov	r9, r3
 80059be:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80059c0:	2200      	movs	r2, #0
 80059c2:	6072      	str	r2, [r6, #4]
 80059c4:	2204      	movs	r2, #4
 80059c6:	f102 0014 	add.w	r0, r2, #20
 80059ca:	4298      	cmp	r0, r3
 80059cc:	6871      	ldr	r1, [r6, #4]
 80059ce:	d953      	bls.n	8005a78 <_dtoa_r+0x300>
 80059d0:	4620      	mov	r0, r4
 80059d2:	f000 fe88 	bl	80066e6 <_Balloc>
 80059d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059d8:	6030      	str	r0, [r6, #0]
 80059da:	f1b9 0f0e 	cmp.w	r9, #14
 80059de:	f8d3 b000 	ldr.w	fp, [r3]
 80059e2:	f200 80e6 	bhi.w	8005bb2 <_dtoa_r+0x43a>
 80059e6:	2d00      	cmp	r5, #0
 80059e8:	f000 80e3 	beq.w	8005bb2 <_dtoa_r+0x43a>
 80059ec:	ed9d 7b00 	vldr	d7, [sp]
 80059f0:	f1ba 0f00 	cmp.w	sl, #0
 80059f4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80059f8:	dd74      	ble.n	8005ae4 <_dtoa_r+0x36c>
 80059fa:	4a2a      	ldr	r2, [pc, #168]	; (8005aa4 <_dtoa_r+0x32c>)
 80059fc:	f00a 030f 	and.w	r3, sl, #15
 8005a00:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005a04:	ed93 7b00 	vldr	d7, [r3]
 8005a08:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005a0c:	06f0      	lsls	r0, r6, #27
 8005a0e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8005a12:	d565      	bpl.n	8005ae0 <_dtoa_r+0x368>
 8005a14:	4b24      	ldr	r3, [pc, #144]	; (8005aa8 <_dtoa_r+0x330>)
 8005a16:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005a1a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005a1e:	f7fa ff15 	bl	800084c <__aeabi_ddiv>
 8005a22:	e9cd 0100 	strd	r0, r1, [sp]
 8005a26:	f006 060f 	and.w	r6, r6, #15
 8005a2a:	2503      	movs	r5, #3
 8005a2c:	4f1e      	ldr	r7, [pc, #120]	; (8005aa8 <_dtoa_r+0x330>)
 8005a2e:	e04c      	b.n	8005aca <_dtoa_r+0x352>
 8005a30:	2301      	movs	r3, #1
 8005a32:	930a      	str	r3, [sp, #40]	; 0x28
 8005a34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a36:	4453      	add	r3, sl
 8005a38:	f103 0901 	add.w	r9, r3, #1
 8005a3c:	9302      	str	r3, [sp, #8]
 8005a3e:	464b      	mov	r3, r9
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	bfb8      	it	lt
 8005a44:	2301      	movlt	r3, #1
 8005a46:	e7ba      	b.n	80059be <_dtoa_r+0x246>
 8005a48:	2300      	movs	r3, #0
 8005a4a:	e7b2      	b.n	80059b2 <_dtoa_r+0x23a>
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	e7f0      	b.n	8005a32 <_dtoa_r+0x2ba>
 8005a50:	2501      	movs	r5, #1
 8005a52:	2300      	movs	r3, #0
 8005a54:	9306      	str	r3, [sp, #24]
 8005a56:	950a      	str	r5, [sp, #40]	; 0x28
 8005a58:	f04f 33ff 	mov.w	r3, #4294967295
 8005a5c:	9302      	str	r3, [sp, #8]
 8005a5e:	4699      	mov	r9, r3
 8005a60:	2200      	movs	r2, #0
 8005a62:	2312      	movs	r3, #18
 8005a64:	920b      	str	r2, [sp, #44]	; 0x2c
 8005a66:	e7aa      	b.n	80059be <_dtoa_r+0x246>
 8005a68:	2301      	movs	r3, #1
 8005a6a:	930a      	str	r3, [sp, #40]	; 0x28
 8005a6c:	e7f4      	b.n	8005a58 <_dtoa_r+0x2e0>
 8005a6e:	2301      	movs	r3, #1
 8005a70:	9302      	str	r3, [sp, #8]
 8005a72:	4699      	mov	r9, r3
 8005a74:	461a      	mov	r2, r3
 8005a76:	e7f5      	b.n	8005a64 <_dtoa_r+0x2ec>
 8005a78:	3101      	adds	r1, #1
 8005a7a:	6071      	str	r1, [r6, #4]
 8005a7c:	0052      	lsls	r2, r2, #1
 8005a7e:	e7a2      	b.n	80059c6 <_dtoa_r+0x24e>
 8005a80:	636f4361 	.word	0x636f4361
 8005a84:	3fd287a7 	.word	0x3fd287a7
 8005a88:	8b60c8b3 	.word	0x8b60c8b3
 8005a8c:	3fc68a28 	.word	0x3fc68a28
 8005a90:	509f79fb 	.word	0x509f79fb
 8005a94:	3fd34413 	.word	0x3fd34413
 8005a98:	7ff00000 	.word	0x7ff00000
 8005a9c:	0800739d 	.word	0x0800739d
 8005aa0:	3ff80000 	.word	0x3ff80000
 8005aa4:	08007458 	.word	0x08007458
 8005aa8:	08007430 	.word	0x08007430
 8005aac:	080073c9 	.word	0x080073c9
 8005ab0:	07f1      	lsls	r1, r6, #31
 8005ab2:	d508      	bpl.n	8005ac6 <_dtoa_r+0x34e>
 8005ab4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005ab8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005abc:	f7fa fd9c 	bl	80005f8 <__aeabi_dmul>
 8005ac0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005ac4:	3501      	adds	r5, #1
 8005ac6:	1076      	asrs	r6, r6, #1
 8005ac8:	3708      	adds	r7, #8
 8005aca:	2e00      	cmp	r6, #0
 8005acc:	d1f0      	bne.n	8005ab0 <_dtoa_r+0x338>
 8005ace:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005ad2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ad6:	f7fa feb9 	bl	800084c <__aeabi_ddiv>
 8005ada:	e9cd 0100 	strd	r0, r1, [sp]
 8005ade:	e01a      	b.n	8005b16 <_dtoa_r+0x39e>
 8005ae0:	2502      	movs	r5, #2
 8005ae2:	e7a3      	b.n	8005a2c <_dtoa_r+0x2b4>
 8005ae4:	f000 80a0 	beq.w	8005c28 <_dtoa_r+0x4b0>
 8005ae8:	f1ca 0600 	rsb	r6, sl, #0
 8005aec:	4b9f      	ldr	r3, [pc, #636]	; (8005d6c <_dtoa_r+0x5f4>)
 8005aee:	4fa0      	ldr	r7, [pc, #640]	; (8005d70 <_dtoa_r+0x5f8>)
 8005af0:	f006 020f 	and.w	r2, r6, #15
 8005af4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005afc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005b00:	f7fa fd7a 	bl	80005f8 <__aeabi_dmul>
 8005b04:	e9cd 0100 	strd	r0, r1, [sp]
 8005b08:	1136      	asrs	r6, r6, #4
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	2502      	movs	r5, #2
 8005b0e:	2e00      	cmp	r6, #0
 8005b10:	d17f      	bne.n	8005c12 <_dtoa_r+0x49a>
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1e1      	bne.n	8005ada <_dtoa_r+0x362>
 8005b16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	f000 8087 	beq.w	8005c2c <_dtoa_r+0x4b4>
 8005b1e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005b22:	2200      	movs	r2, #0
 8005b24:	4b93      	ldr	r3, [pc, #588]	; (8005d74 <_dtoa_r+0x5fc>)
 8005b26:	4630      	mov	r0, r6
 8005b28:	4639      	mov	r1, r7
 8005b2a:	f7fa ffd7 	bl	8000adc <__aeabi_dcmplt>
 8005b2e:	2800      	cmp	r0, #0
 8005b30:	d07c      	beq.n	8005c2c <_dtoa_r+0x4b4>
 8005b32:	f1b9 0f00 	cmp.w	r9, #0
 8005b36:	d079      	beq.n	8005c2c <_dtoa_r+0x4b4>
 8005b38:	9b02      	ldr	r3, [sp, #8]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	dd35      	ble.n	8005baa <_dtoa_r+0x432>
 8005b3e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005b42:	9308      	str	r3, [sp, #32]
 8005b44:	4639      	mov	r1, r7
 8005b46:	2200      	movs	r2, #0
 8005b48:	4b8b      	ldr	r3, [pc, #556]	; (8005d78 <_dtoa_r+0x600>)
 8005b4a:	4630      	mov	r0, r6
 8005b4c:	f7fa fd54 	bl	80005f8 <__aeabi_dmul>
 8005b50:	e9cd 0100 	strd	r0, r1, [sp]
 8005b54:	9f02      	ldr	r7, [sp, #8]
 8005b56:	3501      	adds	r5, #1
 8005b58:	4628      	mov	r0, r5
 8005b5a:	f7fa fce3 	bl	8000524 <__aeabi_i2d>
 8005b5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b62:	f7fa fd49 	bl	80005f8 <__aeabi_dmul>
 8005b66:	2200      	movs	r2, #0
 8005b68:	4b84      	ldr	r3, [pc, #528]	; (8005d7c <_dtoa_r+0x604>)
 8005b6a:	f7fa fb8f 	bl	800028c <__adddf3>
 8005b6e:	4605      	mov	r5, r0
 8005b70:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005b74:	2f00      	cmp	r7, #0
 8005b76:	d15d      	bne.n	8005c34 <_dtoa_r+0x4bc>
 8005b78:	2200      	movs	r2, #0
 8005b7a:	4b81      	ldr	r3, [pc, #516]	; (8005d80 <_dtoa_r+0x608>)
 8005b7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b80:	f7fa fb82 	bl	8000288 <__aeabi_dsub>
 8005b84:	462a      	mov	r2, r5
 8005b86:	4633      	mov	r3, r6
 8005b88:	e9cd 0100 	strd	r0, r1, [sp]
 8005b8c:	f7fa ffc4 	bl	8000b18 <__aeabi_dcmpgt>
 8005b90:	2800      	cmp	r0, #0
 8005b92:	f040 8288 	bne.w	80060a6 <_dtoa_r+0x92e>
 8005b96:	462a      	mov	r2, r5
 8005b98:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005b9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ba0:	f7fa ff9c 	bl	8000adc <__aeabi_dcmplt>
 8005ba4:	2800      	cmp	r0, #0
 8005ba6:	f040 827c 	bne.w	80060a2 <_dtoa_r+0x92a>
 8005baa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005bae:	e9cd 2300 	strd	r2, r3, [sp]
 8005bb2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f2c0 8150 	blt.w	8005e5a <_dtoa_r+0x6e2>
 8005bba:	f1ba 0f0e 	cmp.w	sl, #14
 8005bbe:	f300 814c 	bgt.w	8005e5a <_dtoa_r+0x6e2>
 8005bc2:	4b6a      	ldr	r3, [pc, #424]	; (8005d6c <_dtoa_r+0x5f4>)
 8005bc4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005bc8:	ed93 7b00 	vldr	d7, [r3]
 8005bcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005bd4:	f280 80d8 	bge.w	8005d88 <_dtoa_r+0x610>
 8005bd8:	f1b9 0f00 	cmp.w	r9, #0
 8005bdc:	f300 80d4 	bgt.w	8005d88 <_dtoa_r+0x610>
 8005be0:	f040 825e 	bne.w	80060a0 <_dtoa_r+0x928>
 8005be4:	2200      	movs	r2, #0
 8005be6:	4b66      	ldr	r3, [pc, #408]	; (8005d80 <_dtoa_r+0x608>)
 8005be8:	ec51 0b17 	vmov	r0, r1, d7
 8005bec:	f7fa fd04 	bl	80005f8 <__aeabi_dmul>
 8005bf0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005bf4:	f7fa ff86 	bl	8000b04 <__aeabi_dcmpge>
 8005bf8:	464f      	mov	r7, r9
 8005bfa:	464e      	mov	r6, r9
 8005bfc:	2800      	cmp	r0, #0
 8005bfe:	f040 8234 	bne.w	800606a <_dtoa_r+0x8f2>
 8005c02:	2331      	movs	r3, #49	; 0x31
 8005c04:	f10b 0501 	add.w	r5, fp, #1
 8005c08:	f88b 3000 	strb.w	r3, [fp]
 8005c0c:	f10a 0a01 	add.w	sl, sl, #1
 8005c10:	e22f      	b.n	8006072 <_dtoa_r+0x8fa>
 8005c12:	07f2      	lsls	r2, r6, #31
 8005c14:	d505      	bpl.n	8005c22 <_dtoa_r+0x4aa>
 8005c16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c1a:	f7fa fced 	bl	80005f8 <__aeabi_dmul>
 8005c1e:	3501      	adds	r5, #1
 8005c20:	2301      	movs	r3, #1
 8005c22:	1076      	asrs	r6, r6, #1
 8005c24:	3708      	adds	r7, #8
 8005c26:	e772      	b.n	8005b0e <_dtoa_r+0x396>
 8005c28:	2502      	movs	r5, #2
 8005c2a:	e774      	b.n	8005b16 <_dtoa_r+0x39e>
 8005c2c:	f8cd a020 	str.w	sl, [sp, #32]
 8005c30:	464f      	mov	r7, r9
 8005c32:	e791      	b.n	8005b58 <_dtoa_r+0x3e0>
 8005c34:	4b4d      	ldr	r3, [pc, #308]	; (8005d6c <_dtoa_r+0x5f4>)
 8005c36:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005c3a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005c3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d047      	beq.n	8005cd4 <_dtoa_r+0x55c>
 8005c44:	4602      	mov	r2, r0
 8005c46:	460b      	mov	r3, r1
 8005c48:	2000      	movs	r0, #0
 8005c4a:	494e      	ldr	r1, [pc, #312]	; (8005d84 <_dtoa_r+0x60c>)
 8005c4c:	f7fa fdfe 	bl	800084c <__aeabi_ddiv>
 8005c50:	462a      	mov	r2, r5
 8005c52:	4633      	mov	r3, r6
 8005c54:	f7fa fb18 	bl	8000288 <__aeabi_dsub>
 8005c58:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005c5c:	465d      	mov	r5, fp
 8005c5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c62:	f7fa ff79 	bl	8000b58 <__aeabi_d2iz>
 8005c66:	4606      	mov	r6, r0
 8005c68:	f7fa fc5c 	bl	8000524 <__aeabi_i2d>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	460b      	mov	r3, r1
 8005c70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c74:	f7fa fb08 	bl	8000288 <__aeabi_dsub>
 8005c78:	3630      	adds	r6, #48	; 0x30
 8005c7a:	f805 6b01 	strb.w	r6, [r5], #1
 8005c7e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005c82:	e9cd 0100 	strd	r0, r1, [sp]
 8005c86:	f7fa ff29 	bl	8000adc <__aeabi_dcmplt>
 8005c8a:	2800      	cmp	r0, #0
 8005c8c:	d163      	bne.n	8005d56 <_dtoa_r+0x5de>
 8005c8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c92:	2000      	movs	r0, #0
 8005c94:	4937      	ldr	r1, [pc, #220]	; (8005d74 <_dtoa_r+0x5fc>)
 8005c96:	f7fa faf7 	bl	8000288 <__aeabi_dsub>
 8005c9a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005c9e:	f7fa ff1d 	bl	8000adc <__aeabi_dcmplt>
 8005ca2:	2800      	cmp	r0, #0
 8005ca4:	f040 80b7 	bne.w	8005e16 <_dtoa_r+0x69e>
 8005ca8:	eba5 030b 	sub.w	r3, r5, fp
 8005cac:	429f      	cmp	r7, r3
 8005cae:	f77f af7c 	ble.w	8005baa <_dtoa_r+0x432>
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	4b30      	ldr	r3, [pc, #192]	; (8005d78 <_dtoa_r+0x600>)
 8005cb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005cba:	f7fa fc9d 	bl	80005f8 <__aeabi_dmul>
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005cc4:	4b2c      	ldr	r3, [pc, #176]	; (8005d78 <_dtoa_r+0x600>)
 8005cc6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005cca:	f7fa fc95 	bl	80005f8 <__aeabi_dmul>
 8005cce:	e9cd 0100 	strd	r0, r1, [sp]
 8005cd2:	e7c4      	b.n	8005c5e <_dtoa_r+0x4e6>
 8005cd4:	462a      	mov	r2, r5
 8005cd6:	4633      	mov	r3, r6
 8005cd8:	f7fa fc8e 	bl	80005f8 <__aeabi_dmul>
 8005cdc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005ce0:	eb0b 0507 	add.w	r5, fp, r7
 8005ce4:	465e      	mov	r6, fp
 8005ce6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005cea:	f7fa ff35 	bl	8000b58 <__aeabi_d2iz>
 8005cee:	4607      	mov	r7, r0
 8005cf0:	f7fa fc18 	bl	8000524 <__aeabi_i2d>
 8005cf4:	3730      	adds	r7, #48	; 0x30
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005cfe:	f7fa fac3 	bl	8000288 <__aeabi_dsub>
 8005d02:	f806 7b01 	strb.w	r7, [r6], #1
 8005d06:	42ae      	cmp	r6, r5
 8005d08:	e9cd 0100 	strd	r0, r1, [sp]
 8005d0c:	f04f 0200 	mov.w	r2, #0
 8005d10:	d126      	bne.n	8005d60 <_dtoa_r+0x5e8>
 8005d12:	4b1c      	ldr	r3, [pc, #112]	; (8005d84 <_dtoa_r+0x60c>)
 8005d14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005d18:	f7fa fab8 	bl	800028c <__adddf3>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	460b      	mov	r3, r1
 8005d20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d24:	f7fa fef8 	bl	8000b18 <__aeabi_dcmpgt>
 8005d28:	2800      	cmp	r0, #0
 8005d2a:	d174      	bne.n	8005e16 <_dtoa_r+0x69e>
 8005d2c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005d30:	2000      	movs	r0, #0
 8005d32:	4914      	ldr	r1, [pc, #80]	; (8005d84 <_dtoa_r+0x60c>)
 8005d34:	f7fa faa8 	bl	8000288 <__aeabi_dsub>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	460b      	mov	r3, r1
 8005d3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d40:	f7fa fecc 	bl	8000adc <__aeabi_dcmplt>
 8005d44:	2800      	cmp	r0, #0
 8005d46:	f43f af30 	beq.w	8005baa <_dtoa_r+0x432>
 8005d4a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005d4e:	2b30      	cmp	r3, #48	; 0x30
 8005d50:	f105 32ff 	add.w	r2, r5, #4294967295
 8005d54:	d002      	beq.n	8005d5c <_dtoa_r+0x5e4>
 8005d56:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005d5a:	e04a      	b.n	8005df2 <_dtoa_r+0x67a>
 8005d5c:	4615      	mov	r5, r2
 8005d5e:	e7f4      	b.n	8005d4a <_dtoa_r+0x5d2>
 8005d60:	4b05      	ldr	r3, [pc, #20]	; (8005d78 <_dtoa_r+0x600>)
 8005d62:	f7fa fc49 	bl	80005f8 <__aeabi_dmul>
 8005d66:	e9cd 0100 	strd	r0, r1, [sp]
 8005d6a:	e7bc      	b.n	8005ce6 <_dtoa_r+0x56e>
 8005d6c:	08007458 	.word	0x08007458
 8005d70:	08007430 	.word	0x08007430
 8005d74:	3ff00000 	.word	0x3ff00000
 8005d78:	40240000 	.word	0x40240000
 8005d7c:	401c0000 	.word	0x401c0000
 8005d80:	40140000 	.word	0x40140000
 8005d84:	3fe00000 	.word	0x3fe00000
 8005d88:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005d8c:	465d      	mov	r5, fp
 8005d8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d92:	4630      	mov	r0, r6
 8005d94:	4639      	mov	r1, r7
 8005d96:	f7fa fd59 	bl	800084c <__aeabi_ddiv>
 8005d9a:	f7fa fedd 	bl	8000b58 <__aeabi_d2iz>
 8005d9e:	4680      	mov	r8, r0
 8005da0:	f7fa fbc0 	bl	8000524 <__aeabi_i2d>
 8005da4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005da8:	f7fa fc26 	bl	80005f8 <__aeabi_dmul>
 8005dac:	4602      	mov	r2, r0
 8005dae:	460b      	mov	r3, r1
 8005db0:	4630      	mov	r0, r6
 8005db2:	4639      	mov	r1, r7
 8005db4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005db8:	f7fa fa66 	bl	8000288 <__aeabi_dsub>
 8005dbc:	f805 6b01 	strb.w	r6, [r5], #1
 8005dc0:	eba5 060b 	sub.w	r6, r5, fp
 8005dc4:	45b1      	cmp	r9, r6
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	460b      	mov	r3, r1
 8005dca:	d139      	bne.n	8005e40 <_dtoa_r+0x6c8>
 8005dcc:	f7fa fa5e 	bl	800028c <__adddf3>
 8005dd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005dd4:	4606      	mov	r6, r0
 8005dd6:	460f      	mov	r7, r1
 8005dd8:	f7fa fe9e 	bl	8000b18 <__aeabi_dcmpgt>
 8005ddc:	b9c8      	cbnz	r0, 8005e12 <_dtoa_r+0x69a>
 8005dde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005de2:	4630      	mov	r0, r6
 8005de4:	4639      	mov	r1, r7
 8005de6:	f7fa fe6f 	bl	8000ac8 <__aeabi_dcmpeq>
 8005dea:	b110      	cbz	r0, 8005df2 <_dtoa_r+0x67a>
 8005dec:	f018 0f01 	tst.w	r8, #1
 8005df0:	d10f      	bne.n	8005e12 <_dtoa_r+0x69a>
 8005df2:	9904      	ldr	r1, [sp, #16]
 8005df4:	4620      	mov	r0, r4
 8005df6:	f000 fcaa 	bl	800674e <_Bfree>
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005dfe:	702b      	strb	r3, [r5, #0]
 8005e00:	f10a 0301 	add.w	r3, sl, #1
 8005e04:	6013      	str	r3, [r2, #0]
 8005e06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	f000 8241 	beq.w	8006290 <_dtoa_r+0xb18>
 8005e0e:	601d      	str	r5, [r3, #0]
 8005e10:	e23e      	b.n	8006290 <_dtoa_r+0xb18>
 8005e12:	f8cd a020 	str.w	sl, [sp, #32]
 8005e16:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005e1a:	2a39      	cmp	r2, #57	; 0x39
 8005e1c:	f105 33ff 	add.w	r3, r5, #4294967295
 8005e20:	d108      	bne.n	8005e34 <_dtoa_r+0x6bc>
 8005e22:	459b      	cmp	fp, r3
 8005e24:	d10a      	bne.n	8005e3c <_dtoa_r+0x6c4>
 8005e26:	9b08      	ldr	r3, [sp, #32]
 8005e28:	3301      	adds	r3, #1
 8005e2a:	9308      	str	r3, [sp, #32]
 8005e2c:	2330      	movs	r3, #48	; 0x30
 8005e2e:	f88b 3000 	strb.w	r3, [fp]
 8005e32:	465b      	mov	r3, fp
 8005e34:	781a      	ldrb	r2, [r3, #0]
 8005e36:	3201      	adds	r2, #1
 8005e38:	701a      	strb	r2, [r3, #0]
 8005e3a:	e78c      	b.n	8005d56 <_dtoa_r+0x5de>
 8005e3c:	461d      	mov	r5, r3
 8005e3e:	e7ea      	b.n	8005e16 <_dtoa_r+0x69e>
 8005e40:	2200      	movs	r2, #0
 8005e42:	4b9b      	ldr	r3, [pc, #620]	; (80060b0 <_dtoa_r+0x938>)
 8005e44:	f7fa fbd8 	bl	80005f8 <__aeabi_dmul>
 8005e48:	2200      	movs	r2, #0
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	4606      	mov	r6, r0
 8005e4e:	460f      	mov	r7, r1
 8005e50:	f7fa fe3a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e54:	2800      	cmp	r0, #0
 8005e56:	d09a      	beq.n	8005d8e <_dtoa_r+0x616>
 8005e58:	e7cb      	b.n	8005df2 <_dtoa_r+0x67a>
 8005e5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e5c:	2a00      	cmp	r2, #0
 8005e5e:	f000 808b 	beq.w	8005f78 <_dtoa_r+0x800>
 8005e62:	9a06      	ldr	r2, [sp, #24]
 8005e64:	2a01      	cmp	r2, #1
 8005e66:	dc6e      	bgt.n	8005f46 <_dtoa_r+0x7ce>
 8005e68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005e6a:	2a00      	cmp	r2, #0
 8005e6c:	d067      	beq.n	8005f3e <_dtoa_r+0x7c6>
 8005e6e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005e72:	9f07      	ldr	r7, [sp, #28]
 8005e74:	9d05      	ldr	r5, [sp, #20]
 8005e76:	9a05      	ldr	r2, [sp, #20]
 8005e78:	2101      	movs	r1, #1
 8005e7a:	441a      	add	r2, r3
 8005e7c:	4620      	mov	r0, r4
 8005e7e:	9205      	str	r2, [sp, #20]
 8005e80:	4498      	add	r8, r3
 8005e82:	f000 fd04 	bl	800688e <__i2b>
 8005e86:	4606      	mov	r6, r0
 8005e88:	2d00      	cmp	r5, #0
 8005e8a:	dd0c      	ble.n	8005ea6 <_dtoa_r+0x72e>
 8005e8c:	f1b8 0f00 	cmp.w	r8, #0
 8005e90:	dd09      	ble.n	8005ea6 <_dtoa_r+0x72e>
 8005e92:	4545      	cmp	r5, r8
 8005e94:	9a05      	ldr	r2, [sp, #20]
 8005e96:	462b      	mov	r3, r5
 8005e98:	bfa8      	it	ge
 8005e9a:	4643      	movge	r3, r8
 8005e9c:	1ad2      	subs	r2, r2, r3
 8005e9e:	9205      	str	r2, [sp, #20]
 8005ea0:	1aed      	subs	r5, r5, r3
 8005ea2:	eba8 0803 	sub.w	r8, r8, r3
 8005ea6:	9b07      	ldr	r3, [sp, #28]
 8005ea8:	b1eb      	cbz	r3, 8005ee6 <_dtoa_r+0x76e>
 8005eaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d067      	beq.n	8005f80 <_dtoa_r+0x808>
 8005eb0:	b18f      	cbz	r7, 8005ed6 <_dtoa_r+0x75e>
 8005eb2:	4631      	mov	r1, r6
 8005eb4:	463a      	mov	r2, r7
 8005eb6:	4620      	mov	r0, r4
 8005eb8:	f000 fd88 	bl	80069cc <__pow5mult>
 8005ebc:	9a04      	ldr	r2, [sp, #16]
 8005ebe:	4601      	mov	r1, r0
 8005ec0:	4606      	mov	r6, r0
 8005ec2:	4620      	mov	r0, r4
 8005ec4:	f000 fcec 	bl	80068a0 <__multiply>
 8005ec8:	9904      	ldr	r1, [sp, #16]
 8005eca:	9008      	str	r0, [sp, #32]
 8005ecc:	4620      	mov	r0, r4
 8005ece:	f000 fc3e 	bl	800674e <_Bfree>
 8005ed2:	9b08      	ldr	r3, [sp, #32]
 8005ed4:	9304      	str	r3, [sp, #16]
 8005ed6:	9b07      	ldr	r3, [sp, #28]
 8005ed8:	1bda      	subs	r2, r3, r7
 8005eda:	d004      	beq.n	8005ee6 <_dtoa_r+0x76e>
 8005edc:	9904      	ldr	r1, [sp, #16]
 8005ede:	4620      	mov	r0, r4
 8005ee0:	f000 fd74 	bl	80069cc <__pow5mult>
 8005ee4:	9004      	str	r0, [sp, #16]
 8005ee6:	2101      	movs	r1, #1
 8005ee8:	4620      	mov	r0, r4
 8005eea:	f000 fcd0 	bl	800688e <__i2b>
 8005eee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ef0:	4607      	mov	r7, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	f000 81d0 	beq.w	8006298 <_dtoa_r+0xb20>
 8005ef8:	461a      	mov	r2, r3
 8005efa:	4601      	mov	r1, r0
 8005efc:	4620      	mov	r0, r4
 8005efe:	f000 fd65 	bl	80069cc <__pow5mult>
 8005f02:	9b06      	ldr	r3, [sp, #24]
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	4607      	mov	r7, r0
 8005f08:	dc40      	bgt.n	8005f8c <_dtoa_r+0x814>
 8005f0a:	9b00      	ldr	r3, [sp, #0]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d139      	bne.n	8005f84 <_dtoa_r+0x80c>
 8005f10:	9b01      	ldr	r3, [sp, #4]
 8005f12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d136      	bne.n	8005f88 <_dtoa_r+0x810>
 8005f1a:	9b01      	ldr	r3, [sp, #4]
 8005f1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f20:	0d1b      	lsrs	r3, r3, #20
 8005f22:	051b      	lsls	r3, r3, #20
 8005f24:	b12b      	cbz	r3, 8005f32 <_dtoa_r+0x7ba>
 8005f26:	9b05      	ldr	r3, [sp, #20]
 8005f28:	3301      	adds	r3, #1
 8005f2a:	9305      	str	r3, [sp, #20]
 8005f2c:	f108 0801 	add.w	r8, r8, #1
 8005f30:	2301      	movs	r3, #1
 8005f32:	9307      	str	r3, [sp, #28]
 8005f34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d12a      	bne.n	8005f90 <_dtoa_r+0x818>
 8005f3a:	2001      	movs	r0, #1
 8005f3c:	e030      	b.n	8005fa0 <_dtoa_r+0x828>
 8005f3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005f40:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005f44:	e795      	b.n	8005e72 <_dtoa_r+0x6fa>
 8005f46:	9b07      	ldr	r3, [sp, #28]
 8005f48:	f109 37ff 	add.w	r7, r9, #4294967295
 8005f4c:	42bb      	cmp	r3, r7
 8005f4e:	bfbf      	itttt	lt
 8005f50:	9b07      	ldrlt	r3, [sp, #28]
 8005f52:	9707      	strlt	r7, [sp, #28]
 8005f54:	1afa      	sublt	r2, r7, r3
 8005f56:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005f58:	bfbb      	ittet	lt
 8005f5a:	189b      	addlt	r3, r3, r2
 8005f5c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005f5e:	1bdf      	subge	r7, r3, r7
 8005f60:	2700      	movlt	r7, #0
 8005f62:	f1b9 0f00 	cmp.w	r9, #0
 8005f66:	bfb5      	itete	lt
 8005f68:	9b05      	ldrlt	r3, [sp, #20]
 8005f6a:	9d05      	ldrge	r5, [sp, #20]
 8005f6c:	eba3 0509 	sublt.w	r5, r3, r9
 8005f70:	464b      	movge	r3, r9
 8005f72:	bfb8      	it	lt
 8005f74:	2300      	movlt	r3, #0
 8005f76:	e77e      	b.n	8005e76 <_dtoa_r+0x6fe>
 8005f78:	9f07      	ldr	r7, [sp, #28]
 8005f7a:	9d05      	ldr	r5, [sp, #20]
 8005f7c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005f7e:	e783      	b.n	8005e88 <_dtoa_r+0x710>
 8005f80:	9a07      	ldr	r2, [sp, #28]
 8005f82:	e7ab      	b.n	8005edc <_dtoa_r+0x764>
 8005f84:	2300      	movs	r3, #0
 8005f86:	e7d4      	b.n	8005f32 <_dtoa_r+0x7ba>
 8005f88:	9b00      	ldr	r3, [sp, #0]
 8005f8a:	e7d2      	b.n	8005f32 <_dtoa_r+0x7ba>
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	9307      	str	r3, [sp, #28]
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8005f96:	6918      	ldr	r0, [r3, #16]
 8005f98:	f000 fc2b 	bl	80067f2 <__hi0bits>
 8005f9c:	f1c0 0020 	rsb	r0, r0, #32
 8005fa0:	4440      	add	r0, r8
 8005fa2:	f010 001f 	ands.w	r0, r0, #31
 8005fa6:	d047      	beq.n	8006038 <_dtoa_r+0x8c0>
 8005fa8:	f1c0 0320 	rsb	r3, r0, #32
 8005fac:	2b04      	cmp	r3, #4
 8005fae:	dd3b      	ble.n	8006028 <_dtoa_r+0x8b0>
 8005fb0:	9b05      	ldr	r3, [sp, #20]
 8005fb2:	f1c0 001c 	rsb	r0, r0, #28
 8005fb6:	4403      	add	r3, r0
 8005fb8:	9305      	str	r3, [sp, #20]
 8005fba:	4405      	add	r5, r0
 8005fbc:	4480      	add	r8, r0
 8005fbe:	9b05      	ldr	r3, [sp, #20]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	dd05      	ble.n	8005fd0 <_dtoa_r+0x858>
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	9904      	ldr	r1, [sp, #16]
 8005fc8:	4620      	mov	r0, r4
 8005fca:	f000 fd4d 	bl	8006a68 <__lshift>
 8005fce:	9004      	str	r0, [sp, #16]
 8005fd0:	f1b8 0f00 	cmp.w	r8, #0
 8005fd4:	dd05      	ble.n	8005fe2 <_dtoa_r+0x86a>
 8005fd6:	4639      	mov	r1, r7
 8005fd8:	4642      	mov	r2, r8
 8005fda:	4620      	mov	r0, r4
 8005fdc:	f000 fd44 	bl	8006a68 <__lshift>
 8005fe0:	4607      	mov	r7, r0
 8005fe2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005fe4:	b353      	cbz	r3, 800603c <_dtoa_r+0x8c4>
 8005fe6:	4639      	mov	r1, r7
 8005fe8:	9804      	ldr	r0, [sp, #16]
 8005fea:	f000 fd91 	bl	8006b10 <__mcmp>
 8005fee:	2800      	cmp	r0, #0
 8005ff0:	da24      	bge.n	800603c <_dtoa_r+0x8c4>
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	220a      	movs	r2, #10
 8005ff6:	9904      	ldr	r1, [sp, #16]
 8005ff8:	4620      	mov	r0, r4
 8005ffa:	f000 fbbf 	bl	800677c <__multadd>
 8005ffe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006000:	9004      	str	r0, [sp, #16]
 8006002:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006006:	2b00      	cmp	r3, #0
 8006008:	f000 814d 	beq.w	80062a6 <_dtoa_r+0xb2e>
 800600c:	2300      	movs	r3, #0
 800600e:	4631      	mov	r1, r6
 8006010:	220a      	movs	r2, #10
 8006012:	4620      	mov	r0, r4
 8006014:	f000 fbb2 	bl	800677c <__multadd>
 8006018:	9b02      	ldr	r3, [sp, #8]
 800601a:	2b00      	cmp	r3, #0
 800601c:	4606      	mov	r6, r0
 800601e:	dc4f      	bgt.n	80060c0 <_dtoa_r+0x948>
 8006020:	9b06      	ldr	r3, [sp, #24]
 8006022:	2b02      	cmp	r3, #2
 8006024:	dd4c      	ble.n	80060c0 <_dtoa_r+0x948>
 8006026:	e011      	b.n	800604c <_dtoa_r+0x8d4>
 8006028:	d0c9      	beq.n	8005fbe <_dtoa_r+0x846>
 800602a:	9a05      	ldr	r2, [sp, #20]
 800602c:	331c      	adds	r3, #28
 800602e:	441a      	add	r2, r3
 8006030:	9205      	str	r2, [sp, #20]
 8006032:	441d      	add	r5, r3
 8006034:	4498      	add	r8, r3
 8006036:	e7c2      	b.n	8005fbe <_dtoa_r+0x846>
 8006038:	4603      	mov	r3, r0
 800603a:	e7f6      	b.n	800602a <_dtoa_r+0x8b2>
 800603c:	f1b9 0f00 	cmp.w	r9, #0
 8006040:	dc38      	bgt.n	80060b4 <_dtoa_r+0x93c>
 8006042:	9b06      	ldr	r3, [sp, #24]
 8006044:	2b02      	cmp	r3, #2
 8006046:	dd35      	ble.n	80060b4 <_dtoa_r+0x93c>
 8006048:	f8cd 9008 	str.w	r9, [sp, #8]
 800604c:	9b02      	ldr	r3, [sp, #8]
 800604e:	b963      	cbnz	r3, 800606a <_dtoa_r+0x8f2>
 8006050:	4639      	mov	r1, r7
 8006052:	2205      	movs	r2, #5
 8006054:	4620      	mov	r0, r4
 8006056:	f000 fb91 	bl	800677c <__multadd>
 800605a:	4601      	mov	r1, r0
 800605c:	4607      	mov	r7, r0
 800605e:	9804      	ldr	r0, [sp, #16]
 8006060:	f000 fd56 	bl	8006b10 <__mcmp>
 8006064:	2800      	cmp	r0, #0
 8006066:	f73f adcc 	bgt.w	8005c02 <_dtoa_r+0x48a>
 800606a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800606c:	465d      	mov	r5, fp
 800606e:	ea6f 0a03 	mvn.w	sl, r3
 8006072:	f04f 0900 	mov.w	r9, #0
 8006076:	4639      	mov	r1, r7
 8006078:	4620      	mov	r0, r4
 800607a:	f000 fb68 	bl	800674e <_Bfree>
 800607e:	2e00      	cmp	r6, #0
 8006080:	f43f aeb7 	beq.w	8005df2 <_dtoa_r+0x67a>
 8006084:	f1b9 0f00 	cmp.w	r9, #0
 8006088:	d005      	beq.n	8006096 <_dtoa_r+0x91e>
 800608a:	45b1      	cmp	r9, r6
 800608c:	d003      	beq.n	8006096 <_dtoa_r+0x91e>
 800608e:	4649      	mov	r1, r9
 8006090:	4620      	mov	r0, r4
 8006092:	f000 fb5c 	bl	800674e <_Bfree>
 8006096:	4631      	mov	r1, r6
 8006098:	4620      	mov	r0, r4
 800609a:	f000 fb58 	bl	800674e <_Bfree>
 800609e:	e6a8      	b.n	8005df2 <_dtoa_r+0x67a>
 80060a0:	2700      	movs	r7, #0
 80060a2:	463e      	mov	r6, r7
 80060a4:	e7e1      	b.n	800606a <_dtoa_r+0x8f2>
 80060a6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80060aa:	463e      	mov	r6, r7
 80060ac:	e5a9      	b.n	8005c02 <_dtoa_r+0x48a>
 80060ae:	bf00      	nop
 80060b0:	40240000 	.word	0x40240000
 80060b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060b6:	f8cd 9008 	str.w	r9, [sp, #8]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	f000 80fa 	beq.w	80062b4 <_dtoa_r+0xb3c>
 80060c0:	2d00      	cmp	r5, #0
 80060c2:	dd05      	ble.n	80060d0 <_dtoa_r+0x958>
 80060c4:	4631      	mov	r1, r6
 80060c6:	462a      	mov	r2, r5
 80060c8:	4620      	mov	r0, r4
 80060ca:	f000 fccd 	bl	8006a68 <__lshift>
 80060ce:	4606      	mov	r6, r0
 80060d0:	9b07      	ldr	r3, [sp, #28]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d04c      	beq.n	8006170 <_dtoa_r+0x9f8>
 80060d6:	6871      	ldr	r1, [r6, #4]
 80060d8:	4620      	mov	r0, r4
 80060da:	f000 fb04 	bl	80066e6 <_Balloc>
 80060de:	6932      	ldr	r2, [r6, #16]
 80060e0:	3202      	adds	r2, #2
 80060e2:	4605      	mov	r5, r0
 80060e4:	0092      	lsls	r2, r2, #2
 80060e6:	f106 010c 	add.w	r1, r6, #12
 80060ea:	300c      	adds	r0, #12
 80060ec:	f000 faf0 	bl	80066d0 <memcpy>
 80060f0:	2201      	movs	r2, #1
 80060f2:	4629      	mov	r1, r5
 80060f4:	4620      	mov	r0, r4
 80060f6:	f000 fcb7 	bl	8006a68 <__lshift>
 80060fa:	9b00      	ldr	r3, [sp, #0]
 80060fc:	f8cd b014 	str.w	fp, [sp, #20]
 8006100:	f003 0301 	and.w	r3, r3, #1
 8006104:	46b1      	mov	r9, r6
 8006106:	9307      	str	r3, [sp, #28]
 8006108:	4606      	mov	r6, r0
 800610a:	4639      	mov	r1, r7
 800610c:	9804      	ldr	r0, [sp, #16]
 800610e:	f7ff faa7 	bl	8005660 <quorem>
 8006112:	4649      	mov	r1, r9
 8006114:	4605      	mov	r5, r0
 8006116:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800611a:	9804      	ldr	r0, [sp, #16]
 800611c:	f000 fcf8 	bl	8006b10 <__mcmp>
 8006120:	4632      	mov	r2, r6
 8006122:	9000      	str	r0, [sp, #0]
 8006124:	4639      	mov	r1, r7
 8006126:	4620      	mov	r0, r4
 8006128:	f000 fd0c 	bl	8006b44 <__mdiff>
 800612c:	68c3      	ldr	r3, [r0, #12]
 800612e:	4602      	mov	r2, r0
 8006130:	bb03      	cbnz	r3, 8006174 <_dtoa_r+0x9fc>
 8006132:	4601      	mov	r1, r0
 8006134:	9008      	str	r0, [sp, #32]
 8006136:	9804      	ldr	r0, [sp, #16]
 8006138:	f000 fcea 	bl	8006b10 <__mcmp>
 800613c:	9a08      	ldr	r2, [sp, #32]
 800613e:	4603      	mov	r3, r0
 8006140:	4611      	mov	r1, r2
 8006142:	4620      	mov	r0, r4
 8006144:	9308      	str	r3, [sp, #32]
 8006146:	f000 fb02 	bl	800674e <_Bfree>
 800614a:	9b08      	ldr	r3, [sp, #32]
 800614c:	b9a3      	cbnz	r3, 8006178 <_dtoa_r+0xa00>
 800614e:	9a06      	ldr	r2, [sp, #24]
 8006150:	b992      	cbnz	r2, 8006178 <_dtoa_r+0xa00>
 8006152:	9a07      	ldr	r2, [sp, #28]
 8006154:	b982      	cbnz	r2, 8006178 <_dtoa_r+0xa00>
 8006156:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800615a:	d029      	beq.n	80061b0 <_dtoa_r+0xa38>
 800615c:	9b00      	ldr	r3, [sp, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	dd01      	ble.n	8006166 <_dtoa_r+0x9ee>
 8006162:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006166:	9b05      	ldr	r3, [sp, #20]
 8006168:	1c5d      	adds	r5, r3, #1
 800616a:	f883 8000 	strb.w	r8, [r3]
 800616e:	e782      	b.n	8006076 <_dtoa_r+0x8fe>
 8006170:	4630      	mov	r0, r6
 8006172:	e7c2      	b.n	80060fa <_dtoa_r+0x982>
 8006174:	2301      	movs	r3, #1
 8006176:	e7e3      	b.n	8006140 <_dtoa_r+0x9c8>
 8006178:	9a00      	ldr	r2, [sp, #0]
 800617a:	2a00      	cmp	r2, #0
 800617c:	db04      	blt.n	8006188 <_dtoa_r+0xa10>
 800617e:	d125      	bne.n	80061cc <_dtoa_r+0xa54>
 8006180:	9a06      	ldr	r2, [sp, #24]
 8006182:	bb1a      	cbnz	r2, 80061cc <_dtoa_r+0xa54>
 8006184:	9a07      	ldr	r2, [sp, #28]
 8006186:	bb0a      	cbnz	r2, 80061cc <_dtoa_r+0xa54>
 8006188:	2b00      	cmp	r3, #0
 800618a:	ddec      	ble.n	8006166 <_dtoa_r+0x9ee>
 800618c:	2201      	movs	r2, #1
 800618e:	9904      	ldr	r1, [sp, #16]
 8006190:	4620      	mov	r0, r4
 8006192:	f000 fc69 	bl	8006a68 <__lshift>
 8006196:	4639      	mov	r1, r7
 8006198:	9004      	str	r0, [sp, #16]
 800619a:	f000 fcb9 	bl	8006b10 <__mcmp>
 800619e:	2800      	cmp	r0, #0
 80061a0:	dc03      	bgt.n	80061aa <_dtoa_r+0xa32>
 80061a2:	d1e0      	bne.n	8006166 <_dtoa_r+0x9ee>
 80061a4:	f018 0f01 	tst.w	r8, #1
 80061a8:	d0dd      	beq.n	8006166 <_dtoa_r+0x9ee>
 80061aa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80061ae:	d1d8      	bne.n	8006162 <_dtoa_r+0x9ea>
 80061b0:	9b05      	ldr	r3, [sp, #20]
 80061b2:	9a05      	ldr	r2, [sp, #20]
 80061b4:	1c5d      	adds	r5, r3, #1
 80061b6:	2339      	movs	r3, #57	; 0x39
 80061b8:	7013      	strb	r3, [r2, #0]
 80061ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80061be:	2b39      	cmp	r3, #57	; 0x39
 80061c0:	f105 32ff 	add.w	r2, r5, #4294967295
 80061c4:	d04f      	beq.n	8006266 <_dtoa_r+0xaee>
 80061c6:	3301      	adds	r3, #1
 80061c8:	7013      	strb	r3, [r2, #0]
 80061ca:	e754      	b.n	8006076 <_dtoa_r+0x8fe>
 80061cc:	9a05      	ldr	r2, [sp, #20]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	f102 0501 	add.w	r5, r2, #1
 80061d4:	dd06      	ble.n	80061e4 <_dtoa_r+0xa6c>
 80061d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80061da:	d0e9      	beq.n	80061b0 <_dtoa_r+0xa38>
 80061dc:	f108 0801 	add.w	r8, r8, #1
 80061e0:	9b05      	ldr	r3, [sp, #20]
 80061e2:	e7c2      	b.n	800616a <_dtoa_r+0x9f2>
 80061e4:	9a02      	ldr	r2, [sp, #8]
 80061e6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80061ea:	eba5 030b 	sub.w	r3, r5, fp
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d021      	beq.n	8006236 <_dtoa_r+0xabe>
 80061f2:	2300      	movs	r3, #0
 80061f4:	220a      	movs	r2, #10
 80061f6:	9904      	ldr	r1, [sp, #16]
 80061f8:	4620      	mov	r0, r4
 80061fa:	f000 fabf 	bl	800677c <__multadd>
 80061fe:	45b1      	cmp	r9, r6
 8006200:	9004      	str	r0, [sp, #16]
 8006202:	f04f 0300 	mov.w	r3, #0
 8006206:	f04f 020a 	mov.w	r2, #10
 800620a:	4649      	mov	r1, r9
 800620c:	4620      	mov	r0, r4
 800620e:	d105      	bne.n	800621c <_dtoa_r+0xaa4>
 8006210:	f000 fab4 	bl	800677c <__multadd>
 8006214:	4681      	mov	r9, r0
 8006216:	4606      	mov	r6, r0
 8006218:	9505      	str	r5, [sp, #20]
 800621a:	e776      	b.n	800610a <_dtoa_r+0x992>
 800621c:	f000 faae 	bl	800677c <__multadd>
 8006220:	4631      	mov	r1, r6
 8006222:	4681      	mov	r9, r0
 8006224:	2300      	movs	r3, #0
 8006226:	220a      	movs	r2, #10
 8006228:	4620      	mov	r0, r4
 800622a:	f000 faa7 	bl	800677c <__multadd>
 800622e:	4606      	mov	r6, r0
 8006230:	e7f2      	b.n	8006218 <_dtoa_r+0xaa0>
 8006232:	f04f 0900 	mov.w	r9, #0
 8006236:	2201      	movs	r2, #1
 8006238:	9904      	ldr	r1, [sp, #16]
 800623a:	4620      	mov	r0, r4
 800623c:	f000 fc14 	bl	8006a68 <__lshift>
 8006240:	4639      	mov	r1, r7
 8006242:	9004      	str	r0, [sp, #16]
 8006244:	f000 fc64 	bl	8006b10 <__mcmp>
 8006248:	2800      	cmp	r0, #0
 800624a:	dcb6      	bgt.n	80061ba <_dtoa_r+0xa42>
 800624c:	d102      	bne.n	8006254 <_dtoa_r+0xadc>
 800624e:	f018 0f01 	tst.w	r8, #1
 8006252:	d1b2      	bne.n	80061ba <_dtoa_r+0xa42>
 8006254:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006258:	2b30      	cmp	r3, #48	; 0x30
 800625a:	f105 32ff 	add.w	r2, r5, #4294967295
 800625e:	f47f af0a 	bne.w	8006076 <_dtoa_r+0x8fe>
 8006262:	4615      	mov	r5, r2
 8006264:	e7f6      	b.n	8006254 <_dtoa_r+0xadc>
 8006266:	4593      	cmp	fp, r2
 8006268:	d105      	bne.n	8006276 <_dtoa_r+0xafe>
 800626a:	2331      	movs	r3, #49	; 0x31
 800626c:	f10a 0a01 	add.w	sl, sl, #1
 8006270:	f88b 3000 	strb.w	r3, [fp]
 8006274:	e6ff      	b.n	8006076 <_dtoa_r+0x8fe>
 8006276:	4615      	mov	r5, r2
 8006278:	e79f      	b.n	80061ba <_dtoa_r+0xa42>
 800627a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80062e0 <_dtoa_r+0xb68>
 800627e:	e007      	b.n	8006290 <_dtoa_r+0xb18>
 8006280:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006282:	f8df b060 	ldr.w	fp, [pc, #96]	; 80062e4 <_dtoa_r+0xb6c>
 8006286:	b11b      	cbz	r3, 8006290 <_dtoa_r+0xb18>
 8006288:	f10b 0308 	add.w	r3, fp, #8
 800628c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800628e:	6013      	str	r3, [r2, #0]
 8006290:	4658      	mov	r0, fp
 8006292:	b017      	add	sp, #92	; 0x5c
 8006294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006298:	9b06      	ldr	r3, [sp, #24]
 800629a:	2b01      	cmp	r3, #1
 800629c:	f77f ae35 	ble.w	8005f0a <_dtoa_r+0x792>
 80062a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062a2:	9307      	str	r3, [sp, #28]
 80062a4:	e649      	b.n	8005f3a <_dtoa_r+0x7c2>
 80062a6:	9b02      	ldr	r3, [sp, #8]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	dc03      	bgt.n	80062b4 <_dtoa_r+0xb3c>
 80062ac:	9b06      	ldr	r3, [sp, #24]
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	f73f aecc 	bgt.w	800604c <_dtoa_r+0x8d4>
 80062b4:	465d      	mov	r5, fp
 80062b6:	4639      	mov	r1, r7
 80062b8:	9804      	ldr	r0, [sp, #16]
 80062ba:	f7ff f9d1 	bl	8005660 <quorem>
 80062be:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80062c2:	f805 8b01 	strb.w	r8, [r5], #1
 80062c6:	9a02      	ldr	r2, [sp, #8]
 80062c8:	eba5 030b 	sub.w	r3, r5, fp
 80062cc:	429a      	cmp	r2, r3
 80062ce:	ddb0      	ble.n	8006232 <_dtoa_r+0xaba>
 80062d0:	2300      	movs	r3, #0
 80062d2:	220a      	movs	r2, #10
 80062d4:	9904      	ldr	r1, [sp, #16]
 80062d6:	4620      	mov	r0, r4
 80062d8:	f000 fa50 	bl	800677c <__multadd>
 80062dc:	9004      	str	r0, [sp, #16]
 80062de:	e7ea      	b.n	80062b6 <_dtoa_r+0xb3e>
 80062e0:	0800739c 	.word	0x0800739c
 80062e4:	080073c0 	.word	0x080073c0

080062e8 <__sflush_r>:
 80062e8:	898a      	ldrh	r2, [r1, #12]
 80062ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062ee:	4605      	mov	r5, r0
 80062f0:	0710      	lsls	r0, r2, #28
 80062f2:	460c      	mov	r4, r1
 80062f4:	d458      	bmi.n	80063a8 <__sflush_r+0xc0>
 80062f6:	684b      	ldr	r3, [r1, #4]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	dc05      	bgt.n	8006308 <__sflush_r+0x20>
 80062fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80062fe:	2b00      	cmp	r3, #0
 8006300:	dc02      	bgt.n	8006308 <__sflush_r+0x20>
 8006302:	2000      	movs	r0, #0
 8006304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006308:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800630a:	2e00      	cmp	r6, #0
 800630c:	d0f9      	beq.n	8006302 <__sflush_r+0x1a>
 800630e:	2300      	movs	r3, #0
 8006310:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006314:	682f      	ldr	r7, [r5, #0]
 8006316:	6a21      	ldr	r1, [r4, #32]
 8006318:	602b      	str	r3, [r5, #0]
 800631a:	d032      	beq.n	8006382 <__sflush_r+0x9a>
 800631c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800631e:	89a3      	ldrh	r3, [r4, #12]
 8006320:	075a      	lsls	r2, r3, #29
 8006322:	d505      	bpl.n	8006330 <__sflush_r+0x48>
 8006324:	6863      	ldr	r3, [r4, #4]
 8006326:	1ac0      	subs	r0, r0, r3
 8006328:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800632a:	b10b      	cbz	r3, 8006330 <__sflush_r+0x48>
 800632c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800632e:	1ac0      	subs	r0, r0, r3
 8006330:	2300      	movs	r3, #0
 8006332:	4602      	mov	r2, r0
 8006334:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006336:	6a21      	ldr	r1, [r4, #32]
 8006338:	4628      	mov	r0, r5
 800633a:	47b0      	blx	r6
 800633c:	1c43      	adds	r3, r0, #1
 800633e:	89a3      	ldrh	r3, [r4, #12]
 8006340:	d106      	bne.n	8006350 <__sflush_r+0x68>
 8006342:	6829      	ldr	r1, [r5, #0]
 8006344:	291d      	cmp	r1, #29
 8006346:	d848      	bhi.n	80063da <__sflush_r+0xf2>
 8006348:	4a29      	ldr	r2, [pc, #164]	; (80063f0 <__sflush_r+0x108>)
 800634a:	40ca      	lsrs	r2, r1
 800634c:	07d6      	lsls	r6, r2, #31
 800634e:	d544      	bpl.n	80063da <__sflush_r+0xf2>
 8006350:	2200      	movs	r2, #0
 8006352:	6062      	str	r2, [r4, #4]
 8006354:	04d9      	lsls	r1, r3, #19
 8006356:	6922      	ldr	r2, [r4, #16]
 8006358:	6022      	str	r2, [r4, #0]
 800635a:	d504      	bpl.n	8006366 <__sflush_r+0x7e>
 800635c:	1c42      	adds	r2, r0, #1
 800635e:	d101      	bne.n	8006364 <__sflush_r+0x7c>
 8006360:	682b      	ldr	r3, [r5, #0]
 8006362:	b903      	cbnz	r3, 8006366 <__sflush_r+0x7e>
 8006364:	6560      	str	r0, [r4, #84]	; 0x54
 8006366:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006368:	602f      	str	r7, [r5, #0]
 800636a:	2900      	cmp	r1, #0
 800636c:	d0c9      	beq.n	8006302 <__sflush_r+0x1a>
 800636e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006372:	4299      	cmp	r1, r3
 8006374:	d002      	beq.n	800637c <__sflush_r+0x94>
 8006376:	4628      	mov	r0, r5
 8006378:	f000 fc9e 	bl	8006cb8 <_free_r>
 800637c:	2000      	movs	r0, #0
 800637e:	6360      	str	r0, [r4, #52]	; 0x34
 8006380:	e7c0      	b.n	8006304 <__sflush_r+0x1c>
 8006382:	2301      	movs	r3, #1
 8006384:	4628      	mov	r0, r5
 8006386:	47b0      	blx	r6
 8006388:	1c41      	adds	r1, r0, #1
 800638a:	d1c8      	bne.n	800631e <__sflush_r+0x36>
 800638c:	682b      	ldr	r3, [r5, #0]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d0c5      	beq.n	800631e <__sflush_r+0x36>
 8006392:	2b1d      	cmp	r3, #29
 8006394:	d001      	beq.n	800639a <__sflush_r+0xb2>
 8006396:	2b16      	cmp	r3, #22
 8006398:	d101      	bne.n	800639e <__sflush_r+0xb6>
 800639a:	602f      	str	r7, [r5, #0]
 800639c:	e7b1      	b.n	8006302 <__sflush_r+0x1a>
 800639e:	89a3      	ldrh	r3, [r4, #12]
 80063a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063a4:	81a3      	strh	r3, [r4, #12]
 80063a6:	e7ad      	b.n	8006304 <__sflush_r+0x1c>
 80063a8:	690f      	ldr	r7, [r1, #16]
 80063aa:	2f00      	cmp	r7, #0
 80063ac:	d0a9      	beq.n	8006302 <__sflush_r+0x1a>
 80063ae:	0793      	lsls	r3, r2, #30
 80063b0:	680e      	ldr	r6, [r1, #0]
 80063b2:	bf08      	it	eq
 80063b4:	694b      	ldreq	r3, [r1, #20]
 80063b6:	600f      	str	r7, [r1, #0]
 80063b8:	bf18      	it	ne
 80063ba:	2300      	movne	r3, #0
 80063bc:	eba6 0807 	sub.w	r8, r6, r7
 80063c0:	608b      	str	r3, [r1, #8]
 80063c2:	f1b8 0f00 	cmp.w	r8, #0
 80063c6:	dd9c      	ble.n	8006302 <__sflush_r+0x1a>
 80063c8:	4643      	mov	r3, r8
 80063ca:	463a      	mov	r2, r7
 80063cc:	6a21      	ldr	r1, [r4, #32]
 80063ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80063d0:	4628      	mov	r0, r5
 80063d2:	47b0      	blx	r6
 80063d4:	2800      	cmp	r0, #0
 80063d6:	dc06      	bgt.n	80063e6 <__sflush_r+0xfe>
 80063d8:	89a3      	ldrh	r3, [r4, #12]
 80063da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063de:	81a3      	strh	r3, [r4, #12]
 80063e0:	f04f 30ff 	mov.w	r0, #4294967295
 80063e4:	e78e      	b.n	8006304 <__sflush_r+0x1c>
 80063e6:	4407      	add	r7, r0
 80063e8:	eba8 0800 	sub.w	r8, r8, r0
 80063ec:	e7e9      	b.n	80063c2 <__sflush_r+0xda>
 80063ee:	bf00      	nop
 80063f0:	20400001 	.word	0x20400001

080063f4 <_fflush_r>:
 80063f4:	b538      	push	{r3, r4, r5, lr}
 80063f6:	690b      	ldr	r3, [r1, #16]
 80063f8:	4605      	mov	r5, r0
 80063fa:	460c      	mov	r4, r1
 80063fc:	b1db      	cbz	r3, 8006436 <_fflush_r+0x42>
 80063fe:	b118      	cbz	r0, 8006408 <_fflush_r+0x14>
 8006400:	6983      	ldr	r3, [r0, #24]
 8006402:	b90b      	cbnz	r3, 8006408 <_fflush_r+0x14>
 8006404:	f000 f860 	bl	80064c8 <__sinit>
 8006408:	4b0c      	ldr	r3, [pc, #48]	; (800643c <_fflush_r+0x48>)
 800640a:	429c      	cmp	r4, r3
 800640c:	d109      	bne.n	8006422 <_fflush_r+0x2e>
 800640e:	686c      	ldr	r4, [r5, #4]
 8006410:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006414:	b17b      	cbz	r3, 8006436 <_fflush_r+0x42>
 8006416:	4621      	mov	r1, r4
 8006418:	4628      	mov	r0, r5
 800641a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800641e:	f7ff bf63 	b.w	80062e8 <__sflush_r>
 8006422:	4b07      	ldr	r3, [pc, #28]	; (8006440 <_fflush_r+0x4c>)
 8006424:	429c      	cmp	r4, r3
 8006426:	d101      	bne.n	800642c <_fflush_r+0x38>
 8006428:	68ac      	ldr	r4, [r5, #8]
 800642a:	e7f1      	b.n	8006410 <_fflush_r+0x1c>
 800642c:	4b05      	ldr	r3, [pc, #20]	; (8006444 <_fflush_r+0x50>)
 800642e:	429c      	cmp	r4, r3
 8006430:	bf08      	it	eq
 8006432:	68ec      	ldreq	r4, [r5, #12]
 8006434:	e7ec      	b.n	8006410 <_fflush_r+0x1c>
 8006436:	2000      	movs	r0, #0
 8006438:	bd38      	pop	{r3, r4, r5, pc}
 800643a:	bf00      	nop
 800643c:	080073f0 	.word	0x080073f0
 8006440:	08007410 	.word	0x08007410
 8006444:	080073d0 	.word	0x080073d0

08006448 <std>:
 8006448:	2300      	movs	r3, #0
 800644a:	b510      	push	{r4, lr}
 800644c:	4604      	mov	r4, r0
 800644e:	e9c0 3300 	strd	r3, r3, [r0]
 8006452:	6083      	str	r3, [r0, #8]
 8006454:	8181      	strh	r1, [r0, #12]
 8006456:	6643      	str	r3, [r0, #100]	; 0x64
 8006458:	81c2      	strh	r2, [r0, #14]
 800645a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800645e:	6183      	str	r3, [r0, #24]
 8006460:	4619      	mov	r1, r3
 8006462:	2208      	movs	r2, #8
 8006464:	305c      	adds	r0, #92	; 0x5c
 8006466:	f7fe fb5b 	bl	8004b20 <memset>
 800646a:	4b05      	ldr	r3, [pc, #20]	; (8006480 <std+0x38>)
 800646c:	6263      	str	r3, [r4, #36]	; 0x24
 800646e:	4b05      	ldr	r3, [pc, #20]	; (8006484 <std+0x3c>)
 8006470:	62a3      	str	r3, [r4, #40]	; 0x28
 8006472:	4b05      	ldr	r3, [pc, #20]	; (8006488 <std+0x40>)
 8006474:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006476:	4b05      	ldr	r3, [pc, #20]	; (800648c <std+0x44>)
 8006478:	6224      	str	r4, [r4, #32]
 800647a:	6323      	str	r3, [r4, #48]	; 0x30
 800647c:	bd10      	pop	{r4, pc}
 800647e:	bf00      	nop
 8006480:	080070a9 	.word	0x080070a9
 8006484:	080070cb 	.word	0x080070cb
 8006488:	08007103 	.word	0x08007103
 800648c:	08007127 	.word	0x08007127

08006490 <_cleanup_r>:
 8006490:	4901      	ldr	r1, [pc, #4]	; (8006498 <_cleanup_r+0x8>)
 8006492:	f000 b885 	b.w	80065a0 <_fwalk_reent>
 8006496:	bf00      	nop
 8006498:	080063f5 	.word	0x080063f5

0800649c <__sfmoreglue>:
 800649c:	b570      	push	{r4, r5, r6, lr}
 800649e:	1e4a      	subs	r2, r1, #1
 80064a0:	2568      	movs	r5, #104	; 0x68
 80064a2:	4355      	muls	r5, r2
 80064a4:	460e      	mov	r6, r1
 80064a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80064aa:	f000 fc53 	bl	8006d54 <_malloc_r>
 80064ae:	4604      	mov	r4, r0
 80064b0:	b140      	cbz	r0, 80064c4 <__sfmoreglue+0x28>
 80064b2:	2100      	movs	r1, #0
 80064b4:	e9c0 1600 	strd	r1, r6, [r0]
 80064b8:	300c      	adds	r0, #12
 80064ba:	60a0      	str	r0, [r4, #8]
 80064bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80064c0:	f7fe fb2e 	bl	8004b20 <memset>
 80064c4:	4620      	mov	r0, r4
 80064c6:	bd70      	pop	{r4, r5, r6, pc}

080064c8 <__sinit>:
 80064c8:	6983      	ldr	r3, [r0, #24]
 80064ca:	b510      	push	{r4, lr}
 80064cc:	4604      	mov	r4, r0
 80064ce:	bb33      	cbnz	r3, 800651e <__sinit+0x56>
 80064d0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80064d4:	6503      	str	r3, [r0, #80]	; 0x50
 80064d6:	4b12      	ldr	r3, [pc, #72]	; (8006520 <__sinit+0x58>)
 80064d8:	4a12      	ldr	r2, [pc, #72]	; (8006524 <__sinit+0x5c>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	6282      	str	r2, [r0, #40]	; 0x28
 80064de:	4298      	cmp	r0, r3
 80064e0:	bf04      	itt	eq
 80064e2:	2301      	moveq	r3, #1
 80064e4:	6183      	streq	r3, [r0, #24]
 80064e6:	f000 f81f 	bl	8006528 <__sfp>
 80064ea:	6060      	str	r0, [r4, #4]
 80064ec:	4620      	mov	r0, r4
 80064ee:	f000 f81b 	bl	8006528 <__sfp>
 80064f2:	60a0      	str	r0, [r4, #8]
 80064f4:	4620      	mov	r0, r4
 80064f6:	f000 f817 	bl	8006528 <__sfp>
 80064fa:	2200      	movs	r2, #0
 80064fc:	60e0      	str	r0, [r4, #12]
 80064fe:	2104      	movs	r1, #4
 8006500:	6860      	ldr	r0, [r4, #4]
 8006502:	f7ff ffa1 	bl	8006448 <std>
 8006506:	2201      	movs	r2, #1
 8006508:	2109      	movs	r1, #9
 800650a:	68a0      	ldr	r0, [r4, #8]
 800650c:	f7ff ff9c 	bl	8006448 <std>
 8006510:	2202      	movs	r2, #2
 8006512:	2112      	movs	r1, #18
 8006514:	68e0      	ldr	r0, [r4, #12]
 8006516:	f7ff ff97 	bl	8006448 <std>
 800651a:	2301      	movs	r3, #1
 800651c:	61a3      	str	r3, [r4, #24]
 800651e:	bd10      	pop	{r4, pc}
 8006520:	08007388 	.word	0x08007388
 8006524:	08006491 	.word	0x08006491

08006528 <__sfp>:
 8006528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800652a:	4b1b      	ldr	r3, [pc, #108]	; (8006598 <__sfp+0x70>)
 800652c:	681e      	ldr	r6, [r3, #0]
 800652e:	69b3      	ldr	r3, [r6, #24]
 8006530:	4607      	mov	r7, r0
 8006532:	b913      	cbnz	r3, 800653a <__sfp+0x12>
 8006534:	4630      	mov	r0, r6
 8006536:	f7ff ffc7 	bl	80064c8 <__sinit>
 800653a:	3648      	adds	r6, #72	; 0x48
 800653c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006540:	3b01      	subs	r3, #1
 8006542:	d503      	bpl.n	800654c <__sfp+0x24>
 8006544:	6833      	ldr	r3, [r6, #0]
 8006546:	b133      	cbz	r3, 8006556 <__sfp+0x2e>
 8006548:	6836      	ldr	r6, [r6, #0]
 800654a:	e7f7      	b.n	800653c <__sfp+0x14>
 800654c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006550:	b16d      	cbz	r5, 800656e <__sfp+0x46>
 8006552:	3468      	adds	r4, #104	; 0x68
 8006554:	e7f4      	b.n	8006540 <__sfp+0x18>
 8006556:	2104      	movs	r1, #4
 8006558:	4638      	mov	r0, r7
 800655a:	f7ff ff9f 	bl	800649c <__sfmoreglue>
 800655e:	6030      	str	r0, [r6, #0]
 8006560:	2800      	cmp	r0, #0
 8006562:	d1f1      	bne.n	8006548 <__sfp+0x20>
 8006564:	230c      	movs	r3, #12
 8006566:	603b      	str	r3, [r7, #0]
 8006568:	4604      	mov	r4, r0
 800656a:	4620      	mov	r0, r4
 800656c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800656e:	4b0b      	ldr	r3, [pc, #44]	; (800659c <__sfp+0x74>)
 8006570:	6665      	str	r5, [r4, #100]	; 0x64
 8006572:	e9c4 5500 	strd	r5, r5, [r4]
 8006576:	60a5      	str	r5, [r4, #8]
 8006578:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800657c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006580:	2208      	movs	r2, #8
 8006582:	4629      	mov	r1, r5
 8006584:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006588:	f7fe faca 	bl	8004b20 <memset>
 800658c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006590:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006594:	e7e9      	b.n	800656a <__sfp+0x42>
 8006596:	bf00      	nop
 8006598:	08007388 	.word	0x08007388
 800659c:	ffff0001 	.word	0xffff0001

080065a0 <_fwalk_reent>:
 80065a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065a4:	4680      	mov	r8, r0
 80065a6:	4689      	mov	r9, r1
 80065a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80065ac:	2600      	movs	r6, #0
 80065ae:	b914      	cbnz	r4, 80065b6 <_fwalk_reent+0x16>
 80065b0:	4630      	mov	r0, r6
 80065b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065b6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80065ba:	3f01      	subs	r7, #1
 80065bc:	d501      	bpl.n	80065c2 <_fwalk_reent+0x22>
 80065be:	6824      	ldr	r4, [r4, #0]
 80065c0:	e7f5      	b.n	80065ae <_fwalk_reent+0xe>
 80065c2:	89ab      	ldrh	r3, [r5, #12]
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d907      	bls.n	80065d8 <_fwalk_reent+0x38>
 80065c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80065cc:	3301      	adds	r3, #1
 80065ce:	d003      	beq.n	80065d8 <_fwalk_reent+0x38>
 80065d0:	4629      	mov	r1, r5
 80065d2:	4640      	mov	r0, r8
 80065d4:	47c8      	blx	r9
 80065d6:	4306      	orrs	r6, r0
 80065d8:	3568      	adds	r5, #104	; 0x68
 80065da:	e7ee      	b.n	80065ba <_fwalk_reent+0x1a>

080065dc <_localeconv_r>:
 80065dc:	4b04      	ldr	r3, [pc, #16]	; (80065f0 <_localeconv_r+0x14>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	6a18      	ldr	r0, [r3, #32]
 80065e2:	4b04      	ldr	r3, [pc, #16]	; (80065f4 <_localeconv_r+0x18>)
 80065e4:	2800      	cmp	r0, #0
 80065e6:	bf08      	it	eq
 80065e8:	4618      	moveq	r0, r3
 80065ea:	30f0      	adds	r0, #240	; 0xf0
 80065ec:	4770      	bx	lr
 80065ee:	bf00      	nop
 80065f0:	2000000c 	.word	0x2000000c
 80065f4:	20000070 	.word	0x20000070

080065f8 <__swhatbuf_r>:
 80065f8:	b570      	push	{r4, r5, r6, lr}
 80065fa:	460e      	mov	r6, r1
 80065fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006600:	2900      	cmp	r1, #0
 8006602:	b096      	sub	sp, #88	; 0x58
 8006604:	4614      	mov	r4, r2
 8006606:	461d      	mov	r5, r3
 8006608:	da07      	bge.n	800661a <__swhatbuf_r+0x22>
 800660a:	2300      	movs	r3, #0
 800660c:	602b      	str	r3, [r5, #0]
 800660e:	89b3      	ldrh	r3, [r6, #12]
 8006610:	061a      	lsls	r2, r3, #24
 8006612:	d410      	bmi.n	8006636 <__swhatbuf_r+0x3e>
 8006614:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006618:	e00e      	b.n	8006638 <__swhatbuf_r+0x40>
 800661a:	466a      	mov	r2, sp
 800661c:	f000 fdaa 	bl	8007174 <_fstat_r>
 8006620:	2800      	cmp	r0, #0
 8006622:	dbf2      	blt.n	800660a <__swhatbuf_r+0x12>
 8006624:	9a01      	ldr	r2, [sp, #4]
 8006626:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800662a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800662e:	425a      	negs	r2, r3
 8006630:	415a      	adcs	r2, r3
 8006632:	602a      	str	r2, [r5, #0]
 8006634:	e7ee      	b.n	8006614 <__swhatbuf_r+0x1c>
 8006636:	2340      	movs	r3, #64	; 0x40
 8006638:	2000      	movs	r0, #0
 800663a:	6023      	str	r3, [r4, #0]
 800663c:	b016      	add	sp, #88	; 0x58
 800663e:	bd70      	pop	{r4, r5, r6, pc}

08006640 <__smakebuf_r>:
 8006640:	898b      	ldrh	r3, [r1, #12]
 8006642:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006644:	079d      	lsls	r5, r3, #30
 8006646:	4606      	mov	r6, r0
 8006648:	460c      	mov	r4, r1
 800664a:	d507      	bpl.n	800665c <__smakebuf_r+0x1c>
 800664c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006650:	6023      	str	r3, [r4, #0]
 8006652:	6123      	str	r3, [r4, #16]
 8006654:	2301      	movs	r3, #1
 8006656:	6163      	str	r3, [r4, #20]
 8006658:	b002      	add	sp, #8
 800665a:	bd70      	pop	{r4, r5, r6, pc}
 800665c:	ab01      	add	r3, sp, #4
 800665e:	466a      	mov	r2, sp
 8006660:	f7ff ffca 	bl	80065f8 <__swhatbuf_r>
 8006664:	9900      	ldr	r1, [sp, #0]
 8006666:	4605      	mov	r5, r0
 8006668:	4630      	mov	r0, r6
 800666a:	f000 fb73 	bl	8006d54 <_malloc_r>
 800666e:	b948      	cbnz	r0, 8006684 <__smakebuf_r+0x44>
 8006670:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006674:	059a      	lsls	r2, r3, #22
 8006676:	d4ef      	bmi.n	8006658 <__smakebuf_r+0x18>
 8006678:	f023 0303 	bic.w	r3, r3, #3
 800667c:	f043 0302 	orr.w	r3, r3, #2
 8006680:	81a3      	strh	r3, [r4, #12]
 8006682:	e7e3      	b.n	800664c <__smakebuf_r+0xc>
 8006684:	4b0d      	ldr	r3, [pc, #52]	; (80066bc <__smakebuf_r+0x7c>)
 8006686:	62b3      	str	r3, [r6, #40]	; 0x28
 8006688:	89a3      	ldrh	r3, [r4, #12]
 800668a:	6020      	str	r0, [r4, #0]
 800668c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006690:	81a3      	strh	r3, [r4, #12]
 8006692:	9b00      	ldr	r3, [sp, #0]
 8006694:	6163      	str	r3, [r4, #20]
 8006696:	9b01      	ldr	r3, [sp, #4]
 8006698:	6120      	str	r0, [r4, #16]
 800669a:	b15b      	cbz	r3, 80066b4 <__smakebuf_r+0x74>
 800669c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066a0:	4630      	mov	r0, r6
 80066a2:	f000 fd79 	bl	8007198 <_isatty_r>
 80066a6:	b128      	cbz	r0, 80066b4 <__smakebuf_r+0x74>
 80066a8:	89a3      	ldrh	r3, [r4, #12]
 80066aa:	f023 0303 	bic.w	r3, r3, #3
 80066ae:	f043 0301 	orr.w	r3, r3, #1
 80066b2:	81a3      	strh	r3, [r4, #12]
 80066b4:	89a3      	ldrh	r3, [r4, #12]
 80066b6:	431d      	orrs	r5, r3
 80066b8:	81a5      	strh	r5, [r4, #12]
 80066ba:	e7cd      	b.n	8006658 <__smakebuf_r+0x18>
 80066bc:	08006491 	.word	0x08006491

080066c0 <malloc>:
 80066c0:	4b02      	ldr	r3, [pc, #8]	; (80066cc <malloc+0xc>)
 80066c2:	4601      	mov	r1, r0
 80066c4:	6818      	ldr	r0, [r3, #0]
 80066c6:	f000 bb45 	b.w	8006d54 <_malloc_r>
 80066ca:	bf00      	nop
 80066cc:	2000000c 	.word	0x2000000c

080066d0 <memcpy>:
 80066d0:	b510      	push	{r4, lr}
 80066d2:	1e43      	subs	r3, r0, #1
 80066d4:	440a      	add	r2, r1
 80066d6:	4291      	cmp	r1, r2
 80066d8:	d100      	bne.n	80066dc <memcpy+0xc>
 80066da:	bd10      	pop	{r4, pc}
 80066dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066e4:	e7f7      	b.n	80066d6 <memcpy+0x6>

080066e6 <_Balloc>:
 80066e6:	b570      	push	{r4, r5, r6, lr}
 80066e8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80066ea:	4604      	mov	r4, r0
 80066ec:	460e      	mov	r6, r1
 80066ee:	b93d      	cbnz	r5, 8006700 <_Balloc+0x1a>
 80066f0:	2010      	movs	r0, #16
 80066f2:	f7ff ffe5 	bl	80066c0 <malloc>
 80066f6:	6260      	str	r0, [r4, #36]	; 0x24
 80066f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80066fc:	6005      	str	r5, [r0, #0]
 80066fe:	60c5      	str	r5, [r0, #12]
 8006700:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006702:	68eb      	ldr	r3, [r5, #12]
 8006704:	b183      	cbz	r3, 8006728 <_Balloc+0x42>
 8006706:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800670e:	b9b8      	cbnz	r0, 8006740 <_Balloc+0x5a>
 8006710:	2101      	movs	r1, #1
 8006712:	fa01 f506 	lsl.w	r5, r1, r6
 8006716:	1d6a      	adds	r2, r5, #5
 8006718:	0092      	lsls	r2, r2, #2
 800671a:	4620      	mov	r0, r4
 800671c:	f000 fabe 	bl	8006c9c <_calloc_r>
 8006720:	b160      	cbz	r0, 800673c <_Balloc+0x56>
 8006722:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006726:	e00e      	b.n	8006746 <_Balloc+0x60>
 8006728:	2221      	movs	r2, #33	; 0x21
 800672a:	2104      	movs	r1, #4
 800672c:	4620      	mov	r0, r4
 800672e:	f000 fab5 	bl	8006c9c <_calloc_r>
 8006732:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006734:	60e8      	str	r0, [r5, #12]
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d1e4      	bne.n	8006706 <_Balloc+0x20>
 800673c:	2000      	movs	r0, #0
 800673e:	bd70      	pop	{r4, r5, r6, pc}
 8006740:	6802      	ldr	r2, [r0, #0]
 8006742:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006746:	2300      	movs	r3, #0
 8006748:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800674c:	e7f7      	b.n	800673e <_Balloc+0x58>

0800674e <_Bfree>:
 800674e:	b570      	push	{r4, r5, r6, lr}
 8006750:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006752:	4606      	mov	r6, r0
 8006754:	460d      	mov	r5, r1
 8006756:	b93c      	cbnz	r4, 8006768 <_Bfree+0x1a>
 8006758:	2010      	movs	r0, #16
 800675a:	f7ff ffb1 	bl	80066c0 <malloc>
 800675e:	6270      	str	r0, [r6, #36]	; 0x24
 8006760:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006764:	6004      	str	r4, [r0, #0]
 8006766:	60c4      	str	r4, [r0, #12]
 8006768:	b13d      	cbz	r5, 800677a <_Bfree+0x2c>
 800676a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800676c:	686a      	ldr	r2, [r5, #4]
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006774:	6029      	str	r1, [r5, #0]
 8006776:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800677a:	bd70      	pop	{r4, r5, r6, pc}

0800677c <__multadd>:
 800677c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006780:	690d      	ldr	r5, [r1, #16]
 8006782:	461f      	mov	r7, r3
 8006784:	4606      	mov	r6, r0
 8006786:	460c      	mov	r4, r1
 8006788:	f101 0c14 	add.w	ip, r1, #20
 800678c:	2300      	movs	r3, #0
 800678e:	f8dc 0000 	ldr.w	r0, [ip]
 8006792:	b281      	uxth	r1, r0
 8006794:	fb02 7101 	mla	r1, r2, r1, r7
 8006798:	0c0f      	lsrs	r7, r1, #16
 800679a:	0c00      	lsrs	r0, r0, #16
 800679c:	fb02 7000 	mla	r0, r2, r0, r7
 80067a0:	b289      	uxth	r1, r1
 80067a2:	3301      	adds	r3, #1
 80067a4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80067a8:	429d      	cmp	r5, r3
 80067aa:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80067ae:	f84c 1b04 	str.w	r1, [ip], #4
 80067b2:	dcec      	bgt.n	800678e <__multadd+0x12>
 80067b4:	b1d7      	cbz	r7, 80067ec <__multadd+0x70>
 80067b6:	68a3      	ldr	r3, [r4, #8]
 80067b8:	42ab      	cmp	r3, r5
 80067ba:	dc12      	bgt.n	80067e2 <__multadd+0x66>
 80067bc:	6861      	ldr	r1, [r4, #4]
 80067be:	4630      	mov	r0, r6
 80067c0:	3101      	adds	r1, #1
 80067c2:	f7ff ff90 	bl	80066e6 <_Balloc>
 80067c6:	6922      	ldr	r2, [r4, #16]
 80067c8:	3202      	adds	r2, #2
 80067ca:	f104 010c 	add.w	r1, r4, #12
 80067ce:	4680      	mov	r8, r0
 80067d0:	0092      	lsls	r2, r2, #2
 80067d2:	300c      	adds	r0, #12
 80067d4:	f7ff ff7c 	bl	80066d0 <memcpy>
 80067d8:	4621      	mov	r1, r4
 80067da:	4630      	mov	r0, r6
 80067dc:	f7ff ffb7 	bl	800674e <_Bfree>
 80067e0:	4644      	mov	r4, r8
 80067e2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80067e6:	3501      	adds	r5, #1
 80067e8:	615f      	str	r7, [r3, #20]
 80067ea:	6125      	str	r5, [r4, #16]
 80067ec:	4620      	mov	r0, r4
 80067ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080067f2 <__hi0bits>:
 80067f2:	0c02      	lsrs	r2, r0, #16
 80067f4:	0412      	lsls	r2, r2, #16
 80067f6:	4603      	mov	r3, r0
 80067f8:	b9b2      	cbnz	r2, 8006828 <__hi0bits+0x36>
 80067fa:	0403      	lsls	r3, r0, #16
 80067fc:	2010      	movs	r0, #16
 80067fe:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006802:	bf04      	itt	eq
 8006804:	021b      	lsleq	r3, r3, #8
 8006806:	3008      	addeq	r0, #8
 8006808:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800680c:	bf04      	itt	eq
 800680e:	011b      	lsleq	r3, r3, #4
 8006810:	3004      	addeq	r0, #4
 8006812:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006816:	bf04      	itt	eq
 8006818:	009b      	lsleq	r3, r3, #2
 800681a:	3002      	addeq	r0, #2
 800681c:	2b00      	cmp	r3, #0
 800681e:	db06      	blt.n	800682e <__hi0bits+0x3c>
 8006820:	005b      	lsls	r3, r3, #1
 8006822:	d503      	bpl.n	800682c <__hi0bits+0x3a>
 8006824:	3001      	adds	r0, #1
 8006826:	4770      	bx	lr
 8006828:	2000      	movs	r0, #0
 800682a:	e7e8      	b.n	80067fe <__hi0bits+0xc>
 800682c:	2020      	movs	r0, #32
 800682e:	4770      	bx	lr

08006830 <__lo0bits>:
 8006830:	6803      	ldr	r3, [r0, #0]
 8006832:	f013 0207 	ands.w	r2, r3, #7
 8006836:	4601      	mov	r1, r0
 8006838:	d00b      	beq.n	8006852 <__lo0bits+0x22>
 800683a:	07da      	lsls	r2, r3, #31
 800683c:	d423      	bmi.n	8006886 <__lo0bits+0x56>
 800683e:	0798      	lsls	r0, r3, #30
 8006840:	bf49      	itett	mi
 8006842:	085b      	lsrmi	r3, r3, #1
 8006844:	089b      	lsrpl	r3, r3, #2
 8006846:	2001      	movmi	r0, #1
 8006848:	600b      	strmi	r3, [r1, #0]
 800684a:	bf5c      	itt	pl
 800684c:	600b      	strpl	r3, [r1, #0]
 800684e:	2002      	movpl	r0, #2
 8006850:	4770      	bx	lr
 8006852:	b298      	uxth	r0, r3
 8006854:	b9a8      	cbnz	r0, 8006882 <__lo0bits+0x52>
 8006856:	0c1b      	lsrs	r3, r3, #16
 8006858:	2010      	movs	r0, #16
 800685a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800685e:	bf04      	itt	eq
 8006860:	0a1b      	lsreq	r3, r3, #8
 8006862:	3008      	addeq	r0, #8
 8006864:	071a      	lsls	r2, r3, #28
 8006866:	bf04      	itt	eq
 8006868:	091b      	lsreq	r3, r3, #4
 800686a:	3004      	addeq	r0, #4
 800686c:	079a      	lsls	r2, r3, #30
 800686e:	bf04      	itt	eq
 8006870:	089b      	lsreq	r3, r3, #2
 8006872:	3002      	addeq	r0, #2
 8006874:	07da      	lsls	r2, r3, #31
 8006876:	d402      	bmi.n	800687e <__lo0bits+0x4e>
 8006878:	085b      	lsrs	r3, r3, #1
 800687a:	d006      	beq.n	800688a <__lo0bits+0x5a>
 800687c:	3001      	adds	r0, #1
 800687e:	600b      	str	r3, [r1, #0]
 8006880:	4770      	bx	lr
 8006882:	4610      	mov	r0, r2
 8006884:	e7e9      	b.n	800685a <__lo0bits+0x2a>
 8006886:	2000      	movs	r0, #0
 8006888:	4770      	bx	lr
 800688a:	2020      	movs	r0, #32
 800688c:	4770      	bx	lr

0800688e <__i2b>:
 800688e:	b510      	push	{r4, lr}
 8006890:	460c      	mov	r4, r1
 8006892:	2101      	movs	r1, #1
 8006894:	f7ff ff27 	bl	80066e6 <_Balloc>
 8006898:	2201      	movs	r2, #1
 800689a:	6144      	str	r4, [r0, #20]
 800689c:	6102      	str	r2, [r0, #16]
 800689e:	bd10      	pop	{r4, pc}

080068a0 <__multiply>:
 80068a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068a4:	4614      	mov	r4, r2
 80068a6:	690a      	ldr	r2, [r1, #16]
 80068a8:	6923      	ldr	r3, [r4, #16]
 80068aa:	429a      	cmp	r2, r3
 80068ac:	bfb8      	it	lt
 80068ae:	460b      	movlt	r3, r1
 80068b0:	4688      	mov	r8, r1
 80068b2:	bfbc      	itt	lt
 80068b4:	46a0      	movlt	r8, r4
 80068b6:	461c      	movlt	r4, r3
 80068b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80068bc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80068c0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80068c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80068c8:	eb07 0609 	add.w	r6, r7, r9
 80068cc:	42b3      	cmp	r3, r6
 80068ce:	bfb8      	it	lt
 80068d0:	3101      	addlt	r1, #1
 80068d2:	f7ff ff08 	bl	80066e6 <_Balloc>
 80068d6:	f100 0514 	add.w	r5, r0, #20
 80068da:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80068de:	462b      	mov	r3, r5
 80068e0:	2200      	movs	r2, #0
 80068e2:	4573      	cmp	r3, lr
 80068e4:	d316      	bcc.n	8006914 <__multiply+0x74>
 80068e6:	f104 0214 	add.w	r2, r4, #20
 80068ea:	f108 0114 	add.w	r1, r8, #20
 80068ee:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80068f2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80068f6:	9300      	str	r3, [sp, #0]
 80068f8:	9b00      	ldr	r3, [sp, #0]
 80068fa:	9201      	str	r2, [sp, #4]
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d80c      	bhi.n	800691a <__multiply+0x7a>
 8006900:	2e00      	cmp	r6, #0
 8006902:	dd03      	ble.n	800690c <__multiply+0x6c>
 8006904:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006908:	2b00      	cmp	r3, #0
 800690a:	d05d      	beq.n	80069c8 <__multiply+0x128>
 800690c:	6106      	str	r6, [r0, #16]
 800690e:	b003      	add	sp, #12
 8006910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006914:	f843 2b04 	str.w	r2, [r3], #4
 8006918:	e7e3      	b.n	80068e2 <__multiply+0x42>
 800691a:	f8b2 b000 	ldrh.w	fp, [r2]
 800691e:	f1bb 0f00 	cmp.w	fp, #0
 8006922:	d023      	beq.n	800696c <__multiply+0xcc>
 8006924:	4689      	mov	r9, r1
 8006926:	46ac      	mov	ip, r5
 8006928:	f04f 0800 	mov.w	r8, #0
 800692c:	f859 4b04 	ldr.w	r4, [r9], #4
 8006930:	f8dc a000 	ldr.w	sl, [ip]
 8006934:	b2a3      	uxth	r3, r4
 8006936:	fa1f fa8a 	uxth.w	sl, sl
 800693a:	fb0b a303 	mla	r3, fp, r3, sl
 800693e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006942:	f8dc 4000 	ldr.w	r4, [ip]
 8006946:	4443      	add	r3, r8
 8006948:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800694c:	fb0b 840a 	mla	r4, fp, sl, r8
 8006950:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006954:	46e2      	mov	sl, ip
 8006956:	b29b      	uxth	r3, r3
 8006958:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800695c:	454f      	cmp	r7, r9
 800695e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006962:	f84a 3b04 	str.w	r3, [sl], #4
 8006966:	d82b      	bhi.n	80069c0 <__multiply+0x120>
 8006968:	f8cc 8004 	str.w	r8, [ip, #4]
 800696c:	9b01      	ldr	r3, [sp, #4]
 800696e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006972:	3204      	adds	r2, #4
 8006974:	f1ba 0f00 	cmp.w	sl, #0
 8006978:	d020      	beq.n	80069bc <__multiply+0x11c>
 800697a:	682b      	ldr	r3, [r5, #0]
 800697c:	4689      	mov	r9, r1
 800697e:	46a8      	mov	r8, r5
 8006980:	f04f 0b00 	mov.w	fp, #0
 8006984:	f8b9 c000 	ldrh.w	ip, [r9]
 8006988:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800698c:	fb0a 440c 	mla	r4, sl, ip, r4
 8006990:	445c      	add	r4, fp
 8006992:	46c4      	mov	ip, r8
 8006994:	b29b      	uxth	r3, r3
 8006996:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800699a:	f84c 3b04 	str.w	r3, [ip], #4
 800699e:	f859 3b04 	ldr.w	r3, [r9], #4
 80069a2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80069a6:	0c1b      	lsrs	r3, r3, #16
 80069a8:	fb0a b303 	mla	r3, sl, r3, fp
 80069ac:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80069b0:	454f      	cmp	r7, r9
 80069b2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80069b6:	d805      	bhi.n	80069c4 <__multiply+0x124>
 80069b8:	f8c8 3004 	str.w	r3, [r8, #4]
 80069bc:	3504      	adds	r5, #4
 80069be:	e79b      	b.n	80068f8 <__multiply+0x58>
 80069c0:	46d4      	mov	ip, sl
 80069c2:	e7b3      	b.n	800692c <__multiply+0x8c>
 80069c4:	46e0      	mov	r8, ip
 80069c6:	e7dd      	b.n	8006984 <__multiply+0xe4>
 80069c8:	3e01      	subs	r6, #1
 80069ca:	e799      	b.n	8006900 <__multiply+0x60>

080069cc <__pow5mult>:
 80069cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069d0:	4615      	mov	r5, r2
 80069d2:	f012 0203 	ands.w	r2, r2, #3
 80069d6:	4606      	mov	r6, r0
 80069d8:	460f      	mov	r7, r1
 80069da:	d007      	beq.n	80069ec <__pow5mult+0x20>
 80069dc:	3a01      	subs	r2, #1
 80069de:	4c21      	ldr	r4, [pc, #132]	; (8006a64 <__pow5mult+0x98>)
 80069e0:	2300      	movs	r3, #0
 80069e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80069e6:	f7ff fec9 	bl	800677c <__multadd>
 80069ea:	4607      	mov	r7, r0
 80069ec:	10ad      	asrs	r5, r5, #2
 80069ee:	d035      	beq.n	8006a5c <__pow5mult+0x90>
 80069f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80069f2:	b93c      	cbnz	r4, 8006a04 <__pow5mult+0x38>
 80069f4:	2010      	movs	r0, #16
 80069f6:	f7ff fe63 	bl	80066c0 <malloc>
 80069fa:	6270      	str	r0, [r6, #36]	; 0x24
 80069fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006a00:	6004      	str	r4, [r0, #0]
 8006a02:	60c4      	str	r4, [r0, #12]
 8006a04:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006a08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006a0c:	b94c      	cbnz	r4, 8006a22 <__pow5mult+0x56>
 8006a0e:	f240 2171 	movw	r1, #625	; 0x271
 8006a12:	4630      	mov	r0, r6
 8006a14:	f7ff ff3b 	bl	800688e <__i2b>
 8006a18:	2300      	movs	r3, #0
 8006a1a:	f8c8 0008 	str.w	r0, [r8, #8]
 8006a1e:	4604      	mov	r4, r0
 8006a20:	6003      	str	r3, [r0, #0]
 8006a22:	f04f 0800 	mov.w	r8, #0
 8006a26:	07eb      	lsls	r3, r5, #31
 8006a28:	d50a      	bpl.n	8006a40 <__pow5mult+0x74>
 8006a2a:	4639      	mov	r1, r7
 8006a2c:	4622      	mov	r2, r4
 8006a2e:	4630      	mov	r0, r6
 8006a30:	f7ff ff36 	bl	80068a0 <__multiply>
 8006a34:	4639      	mov	r1, r7
 8006a36:	4681      	mov	r9, r0
 8006a38:	4630      	mov	r0, r6
 8006a3a:	f7ff fe88 	bl	800674e <_Bfree>
 8006a3e:	464f      	mov	r7, r9
 8006a40:	106d      	asrs	r5, r5, #1
 8006a42:	d00b      	beq.n	8006a5c <__pow5mult+0x90>
 8006a44:	6820      	ldr	r0, [r4, #0]
 8006a46:	b938      	cbnz	r0, 8006a58 <__pow5mult+0x8c>
 8006a48:	4622      	mov	r2, r4
 8006a4a:	4621      	mov	r1, r4
 8006a4c:	4630      	mov	r0, r6
 8006a4e:	f7ff ff27 	bl	80068a0 <__multiply>
 8006a52:	6020      	str	r0, [r4, #0]
 8006a54:	f8c0 8000 	str.w	r8, [r0]
 8006a58:	4604      	mov	r4, r0
 8006a5a:	e7e4      	b.n	8006a26 <__pow5mult+0x5a>
 8006a5c:	4638      	mov	r0, r7
 8006a5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a62:	bf00      	nop
 8006a64:	08007520 	.word	0x08007520

08006a68 <__lshift>:
 8006a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a6c:	460c      	mov	r4, r1
 8006a6e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006a72:	6923      	ldr	r3, [r4, #16]
 8006a74:	6849      	ldr	r1, [r1, #4]
 8006a76:	eb0a 0903 	add.w	r9, sl, r3
 8006a7a:	68a3      	ldr	r3, [r4, #8]
 8006a7c:	4607      	mov	r7, r0
 8006a7e:	4616      	mov	r6, r2
 8006a80:	f109 0501 	add.w	r5, r9, #1
 8006a84:	42ab      	cmp	r3, r5
 8006a86:	db32      	blt.n	8006aee <__lshift+0x86>
 8006a88:	4638      	mov	r0, r7
 8006a8a:	f7ff fe2c 	bl	80066e6 <_Balloc>
 8006a8e:	2300      	movs	r3, #0
 8006a90:	4680      	mov	r8, r0
 8006a92:	f100 0114 	add.w	r1, r0, #20
 8006a96:	461a      	mov	r2, r3
 8006a98:	4553      	cmp	r3, sl
 8006a9a:	db2b      	blt.n	8006af4 <__lshift+0x8c>
 8006a9c:	6920      	ldr	r0, [r4, #16]
 8006a9e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006aa2:	f104 0314 	add.w	r3, r4, #20
 8006aa6:	f016 021f 	ands.w	r2, r6, #31
 8006aaa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006aae:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006ab2:	d025      	beq.n	8006b00 <__lshift+0x98>
 8006ab4:	f1c2 0e20 	rsb	lr, r2, #32
 8006ab8:	2000      	movs	r0, #0
 8006aba:	681e      	ldr	r6, [r3, #0]
 8006abc:	468a      	mov	sl, r1
 8006abe:	4096      	lsls	r6, r2
 8006ac0:	4330      	orrs	r0, r6
 8006ac2:	f84a 0b04 	str.w	r0, [sl], #4
 8006ac6:	f853 0b04 	ldr.w	r0, [r3], #4
 8006aca:	459c      	cmp	ip, r3
 8006acc:	fa20 f00e 	lsr.w	r0, r0, lr
 8006ad0:	d814      	bhi.n	8006afc <__lshift+0x94>
 8006ad2:	6048      	str	r0, [r1, #4]
 8006ad4:	b108      	cbz	r0, 8006ada <__lshift+0x72>
 8006ad6:	f109 0502 	add.w	r5, r9, #2
 8006ada:	3d01      	subs	r5, #1
 8006adc:	4638      	mov	r0, r7
 8006ade:	f8c8 5010 	str.w	r5, [r8, #16]
 8006ae2:	4621      	mov	r1, r4
 8006ae4:	f7ff fe33 	bl	800674e <_Bfree>
 8006ae8:	4640      	mov	r0, r8
 8006aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aee:	3101      	adds	r1, #1
 8006af0:	005b      	lsls	r3, r3, #1
 8006af2:	e7c7      	b.n	8006a84 <__lshift+0x1c>
 8006af4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006af8:	3301      	adds	r3, #1
 8006afa:	e7cd      	b.n	8006a98 <__lshift+0x30>
 8006afc:	4651      	mov	r1, sl
 8006afe:	e7dc      	b.n	8006aba <__lshift+0x52>
 8006b00:	3904      	subs	r1, #4
 8006b02:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b06:	f841 2f04 	str.w	r2, [r1, #4]!
 8006b0a:	459c      	cmp	ip, r3
 8006b0c:	d8f9      	bhi.n	8006b02 <__lshift+0x9a>
 8006b0e:	e7e4      	b.n	8006ada <__lshift+0x72>

08006b10 <__mcmp>:
 8006b10:	6903      	ldr	r3, [r0, #16]
 8006b12:	690a      	ldr	r2, [r1, #16]
 8006b14:	1a9b      	subs	r3, r3, r2
 8006b16:	b530      	push	{r4, r5, lr}
 8006b18:	d10c      	bne.n	8006b34 <__mcmp+0x24>
 8006b1a:	0092      	lsls	r2, r2, #2
 8006b1c:	3014      	adds	r0, #20
 8006b1e:	3114      	adds	r1, #20
 8006b20:	1884      	adds	r4, r0, r2
 8006b22:	4411      	add	r1, r2
 8006b24:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006b28:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006b2c:	4295      	cmp	r5, r2
 8006b2e:	d003      	beq.n	8006b38 <__mcmp+0x28>
 8006b30:	d305      	bcc.n	8006b3e <__mcmp+0x2e>
 8006b32:	2301      	movs	r3, #1
 8006b34:	4618      	mov	r0, r3
 8006b36:	bd30      	pop	{r4, r5, pc}
 8006b38:	42a0      	cmp	r0, r4
 8006b3a:	d3f3      	bcc.n	8006b24 <__mcmp+0x14>
 8006b3c:	e7fa      	b.n	8006b34 <__mcmp+0x24>
 8006b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b42:	e7f7      	b.n	8006b34 <__mcmp+0x24>

08006b44 <__mdiff>:
 8006b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b48:	460d      	mov	r5, r1
 8006b4a:	4607      	mov	r7, r0
 8006b4c:	4611      	mov	r1, r2
 8006b4e:	4628      	mov	r0, r5
 8006b50:	4614      	mov	r4, r2
 8006b52:	f7ff ffdd 	bl	8006b10 <__mcmp>
 8006b56:	1e06      	subs	r6, r0, #0
 8006b58:	d108      	bne.n	8006b6c <__mdiff+0x28>
 8006b5a:	4631      	mov	r1, r6
 8006b5c:	4638      	mov	r0, r7
 8006b5e:	f7ff fdc2 	bl	80066e6 <_Balloc>
 8006b62:	2301      	movs	r3, #1
 8006b64:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b6c:	bfa4      	itt	ge
 8006b6e:	4623      	movge	r3, r4
 8006b70:	462c      	movge	r4, r5
 8006b72:	4638      	mov	r0, r7
 8006b74:	6861      	ldr	r1, [r4, #4]
 8006b76:	bfa6      	itte	ge
 8006b78:	461d      	movge	r5, r3
 8006b7a:	2600      	movge	r6, #0
 8006b7c:	2601      	movlt	r6, #1
 8006b7e:	f7ff fdb2 	bl	80066e6 <_Balloc>
 8006b82:	692b      	ldr	r3, [r5, #16]
 8006b84:	60c6      	str	r6, [r0, #12]
 8006b86:	6926      	ldr	r6, [r4, #16]
 8006b88:	f105 0914 	add.w	r9, r5, #20
 8006b8c:	f104 0214 	add.w	r2, r4, #20
 8006b90:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006b94:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006b98:	f100 0514 	add.w	r5, r0, #20
 8006b9c:	f04f 0e00 	mov.w	lr, #0
 8006ba0:	f852 ab04 	ldr.w	sl, [r2], #4
 8006ba4:	f859 4b04 	ldr.w	r4, [r9], #4
 8006ba8:	fa1e f18a 	uxtah	r1, lr, sl
 8006bac:	b2a3      	uxth	r3, r4
 8006bae:	1ac9      	subs	r1, r1, r3
 8006bb0:	0c23      	lsrs	r3, r4, #16
 8006bb2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8006bb6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006bba:	b289      	uxth	r1, r1
 8006bbc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006bc0:	45c8      	cmp	r8, r9
 8006bc2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006bc6:	4694      	mov	ip, r2
 8006bc8:	f845 3b04 	str.w	r3, [r5], #4
 8006bcc:	d8e8      	bhi.n	8006ba0 <__mdiff+0x5c>
 8006bce:	45bc      	cmp	ip, r7
 8006bd0:	d304      	bcc.n	8006bdc <__mdiff+0x98>
 8006bd2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006bd6:	b183      	cbz	r3, 8006bfa <__mdiff+0xb6>
 8006bd8:	6106      	str	r6, [r0, #16]
 8006bda:	e7c5      	b.n	8006b68 <__mdiff+0x24>
 8006bdc:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006be0:	fa1e f381 	uxtah	r3, lr, r1
 8006be4:	141a      	asrs	r2, r3, #16
 8006be6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006bf0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006bf4:	f845 3b04 	str.w	r3, [r5], #4
 8006bf8:	e7e9      	b.n	8006bce <__mdiff+0x8a>
 8006bfa:	3e01      	subs	r6, #1
 8006bfc:	e7e9      	b.n	8006bd2 <__mdiff+0x8e>

08006bfe <__d2b>:
 8006bfe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006c02:	460e      	mov	r6, r1
 8006c04:	2101      	movs	r1, #1
 8006c06:	ec59 8b10 	vmov	r8, r9, d0
 8006c0a:	4615      	mov	r5, r2
 8006c0c:	f7ff fd6b 	bl	80066e6 <_Balloc>
 8006c10:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006c14:	4607      	mov	r7, r0
 8006c16:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006c1a:	bb34      	cbnz	r4, 8006c6a <__d2b+0x6c>
 8006c1c:	9301      	str	r3, [sp, #4]
 8006c1e:	f1b8 0300 	subs.w	r3, r8, #0
 8006c22:	d027      	beq.n	8006c74 <__d2b+0x76>
 8006c24:	a802      	add	r0, sp, #8
 8006c26:	f840 3d08 	str.w	r3, [r0, #-8]!
 8006c2a:	f7ff fe01 	bl	8006830 <__lo0bits>
 8006c2e:	9900      	ldr	r1, [sp, #0]
 8006c30:	b1f0      	cbz	r0, 8006c70 <__d2b+0x72>
 8006c32:	9a01      	ldr	r2, [sp, #4]
 8006c34:	f1c0 0320 	rsb	r3, r0, #32
 8006c38:	fa02 f303 	lsl.w	r3, r2, r3
 8006c3c:	430b      	orrs	r3, r1
 8006c3e:	40c2      	lsrs	r2, r0
 8006c40:	617b      	str	r3, [r7, #20]
 8006c42:	9201      	str	r2, [sp, #4]
 8006c44:	9b01      	ldr	r3, [sp, #4]
 8006c46:	61bb      	str	r3, [r7, #24]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	bf14      	ite	ne
 8006c4c:	2102      	movne	r1, #2
 8006c4e:	2101      	moveq	r1, #1
 8006c50:	6139      	str	r1, [r7, #16]
 8006c52:	b1c4      	cbz	r4, 8006c86 <__d2b+0x88>
 8006c54:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006c58:	4404      	add	r4, r0
 8006c5a:	6034      	str	r4, [r6, #0]
 8006c5c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006c60:	6028      	str	r0, [r5, #0]
 8006c62:	4638      	mov	r0, r7
 8006c64:	b003      	add	sp, #12
 8006c66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c6e:	e7d5      	b.n	8006c1c <__d2b+0x1e>
 8006c70:	6179      	str	r1, [r7, #20]
 8006c72:	e7e7      	b.n	8006c44 <__d2b+0x46>
 8006c74:	a801      	add	r0, sp, #4
 8006c76:	f7ff fddb 	bl	8006830 <__lo0bits>
 8006c7a:	9b01      	ldr	r3, [sp, #4]
 8006c7c:	617b      	str	r3, [r7, #20]
 8006c7e:	2101      	movs	r1, #1
 8006c80:	6139      	str	r1, [r7, #16]
 8006c82:	3020      	adds	r0, #32
 8006c84:	e7e5      	b.n	8006c52 <__d2b+0x54>
 8006c86:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006c8a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006c8e:	6030      	str	r0, [r6, #0]
 8006c90:	6918      	ldr	r0, [r3, #16]
 8006c92:	f7ff fdae 	bl	80067f2 <__hi0bits>
 8006c96:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006c9a:	e7e1      	b.n	8006c60 <__d2b+0x62>

08006c9c <_calloc_r>:
 8006c9c:	b538      	push	{r3, r4, r5, lr}
 8006c9e:	fb02 f401 	mul.w	r4, r2, r1
 8006ca2:	4621      	mov	r1, r4
 8006ca4:	f000 f856 	bl	8006d54 <_malloc_r>
 8006ca8:	4605      	mov	r5, r0
 8006caa:	b118      	cbz	r0, 8006cb4 <_calloc_r+0x18>
 8006cac:	4622      	mov	r2, r4
 8006cae:	2100      	movs	r1, #0
 8006cb0:	f7fd ff36 	bl	8004b20 <memset>
 8006cb4:	4628      	mov	r0, r5
 8006cb6:	bd38      	pop	{r3, r4, r5, pc}

08006cb8 <_free_r>:
 8006cb8:	b538      	push	{r3, r4, r5, lr}
 8006cba:	4605      	mov	r5, r0
 8006cbc:	2900      	cmp	r1, #0
 8006cbe:	d045      	beq.n	8006d4c <_free_r+0x94>
 8006cc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cc4:	1f0c      	subs	r4, r1, #4
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	bfb8      	it	lt
 8006cca:	18e4      	addlt	r4, r4, r3
 8006ccc:	f000 fa98 	bl	8007200 <__malloc_lock>
 8006cd0:	4a1f      	ldr	r2, [pc, #124]	; (8006d50 <_free_r+0x98>)
 8006cd2:	6813      	ldr	r3, [r2, #0]
 8006cd4:	4610      	mov	r0, r2
 8006cd6:	b933      	cbnz	r3, 8006ce6 <_free_r+0x2e>
 8006cd8:	6063      	str	r3, [r4, #4]
 8006cda:	6014      	str	r4, [r2, #0]
 8006cdc:	4628      	mov	r0, r5
 8006cde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ce2:	f000 ba8e 	b.w	8007202 <__malloc_unlock>
 8006ce6:	42a3      	cmp	r3, r4
 8006ce8:	d90c      	bls.n	8006d04 <_free_r+0x4c>
 8006cea:	6821      	ldr	r1, [r4, #0]
 8006cec:	1862      	adds	r2, r4, r1
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	bf04      	itt	eq
 8006cf2:	681a      	ldreq	r2, [r3, #0]
 8006cf4:	685b      	ldreq	r3, [r3, #4]
 8006cf6:	6063      	str	r3, [r4, #4]
 8006cf8:	bf04      	itt	eq
 8006cfa:	1852      	addeq	r2, r2, r1
 8006cfc:	6022      	streq	r2, [r4, #0]
 8006cfe:	6004      	str	r4, [r0, #0]
 8006d00:	e7ec      	b.n	8006cdc <_free_r+0x24>
 8006d02:	4613      	mov	r3, r2
 8006d04:	685a      	ldr	r2, [r3, #4]
 8006d06:	b10a      	cbz	r2, 8006d0c <_free_r+0x54>
 8006d08:	42a2      	cmp	r2, r4
 8006d0a:	d9fa      	bls.n	8006d02 <_free_r+0x4a>
 8006d0c:	6819      	ldr	r1, [r3, #0]
 8006d0e:	1858      	adds	r0, r3, r1
 8006d10:	42a0      	cmp	r0, r4
 8006d12:	d10b      	bne.n	8006d2c <_free_r+0x74>
 8006d14:	6820      	ldr	r0, [r4, #0]
 8006d16:	4401      	add	r1, r0
 8006d18:	1858      	adds	r0, r3, r1
 8006d1a:	4282      	cmp	r2, r0
 8006d1c:	6019      	str	r1, [r3, #0]
 8006d1e:	d1dd      	bne.n	8006cdc <_free_r+0x24>
 8006d20:	6810      	ldr	r0, [r2, #0]
 8006d22:	6852      	ldr	r2, [r2, #4]
 8006d24:	605a      	str	r2, [r3, #4]
 8006d26:	4401      	add	r1, r0
 8006d28:	6019      	str	r1, [r3, #0]
 8006d2a:	e7d7      	b.n	8006cdc <_free_r+0x24>
 8006d2c:	d902      	bls.n	8006d34 <_free_r+0x7c>
 8006d2e:	230c      	movs	r3, #12
 8006d30:	602b      	str	r3, [r5, #0]
 8006d32:	e7d3      	b.n	8006cdc <_free_r+0x24>
 8006d34:	6820      	ldr	r0, [r4, #0]
 8006d36:	1821      	adds	r1, r4, r0
 8006d38:	428a      	cmp	r2, r1
 8006d3a:	bf04      	itt	eq
 8006d3c:	6811      	ldreq	r1, [r2, #0]
 8006d3e:	6852      	ldreq	r2, [r2, #4]
 8006d40:	6062      	str	r2, [r4, #4]
 8006d42:	bf04      	itt	eq
 8006d44:	1809      	addeq	r1, r1, r0
 8006d46:	6021      	streq	r1, [r4, #0]
 8006d48:	605c      	str	r4, [r3, #4]
 8006d4a:	e7c7      	b.n	8006cdc <_free_r+0x24>
 8006d4c:	bd38      	pop	{r3, r4, r5, pc}
 8006d4e:	bf00      	nop
 8006d50:	200001fc 	.word	0x200001fc

08006d54 <_malloc_r>:
 8006d54:	b570      	push	{r4, r5, r6, lr}
 8006d56:	1ccd      	adds	r5, r1, #3
 8006d58:	f025 0503 	bic.w	r5, r5, #3
 8006d5c:	3508      	adds	r5, #8
 8006d5e:	2d0c      	cmp	r5, #12
 8006d60:	bf38      	it	cc
 8006d62:	250c      	movcc	r5, #12
 8006d64:	2d00      	cmp	r5, #0
 8006d66:	4606      	mov	r6, r0
 8006d68:	db01      	blt.n	8006d6e <_malloc_r+0x1a>
 8006d6a:	42a9      	cmp	r1, r5
 8006d6c:	d903      	bls.n	8006d76 <_malloc_r+0x22>
 8006d6e:	230c      	movs	r3, #12
 8006d70:	6033      	str	r3, [r6, #0]
 8006d72:	2000      	movs	r0, #0
 8006d74:	bd70      	pop	{r4, r5, r6, pc}
 8006d76:	f000 fa43 	bl	8007200 <__malloc_lock>
 8006d7a:	4a21      	ldr	r2, [pc, #132]	; (8006e00 <_malloc_r+0xac>)
 8006d7c:	6814      	ldr	r4, [r2, #0]
 8006d7e:	4621      	mov	r1, r4
 8006d80:	b991      	cbnz	r1, 8006da8 <_malloc_r+0x54>
 8006d82:	4c20      	ldr	r4, [pc, #128]	; (8006e04 <_malloc_r+0xb0>)
 8006d84:	6823      	ldr	r3, [r4, #0]
 8006d86:	b91b      	cbnz	r3, 8006d90 <_malloc_r+0x3c>
 8006d88:	4630      	mov	r0, r6
 8006d8a:	f000 f97d 	bl	8007088 <_sbrk_r>
 8006d8e:	6020      	str	r0, [r4, #0]
 8006d90:	4629      	mov	r1, r5
 8006d92:	4630      	mov	r0, r6
 8006d94:	f000 f978 	bl	8007088 <_sbrk_r>
 8006d98:	1c43      	adds	r3, r0, #1
 8006d9a:	d124      	bne.n	8006de6 <_malloc_r+0x92>
 8006d9c:	230c      	movs	r3, #12
 8006d9e:	6033      	str	r3, [r6, #0]
 8006da0:	4630      	mov	r0, r6
 8006da2:	f000 fa2e 	bl	8007202 <__malloc_unlock>
 8006da6:	e7e4      	b.n	8006d72 <_malloc_r+0x1e>
 8006da8:	680b      	ldr	r3, [r1, #0]
 8006daa:	1b5b      	subs	r3, r3, r5
 8006dac:	d418      	bmi.n	8006de0 <_malloc_r+0x8c>
 8006dae:	2b0b      	cmp	r3, #11
 8006db0:	d90f      	bls.n	8006dd2 <_malloc_r+0x7e>
 8006db2:	600b      	str	r3, [r1, #0]
 8006db4:	50cd      	str	r5, [r1, r3]
 8006db6:	18cc      	adds	r4, r1, r3
 8006db8:	4630      	mov	r0, r6
 8006dba:	f000 fa22 	bl	8007202 <__malloc_unlock>
 8006dbe:	f104 000b 	add.w	r0, r4, #11
 8006dc2:	1d23      	adds	r3, r4, #4
 8006dc4:	f020 0007 	bic.w	r0, r0, #7
 8006dc8:	1ac3      	subs	r3, r0, r3
 8006dca:	d0d3      	beq.n	8006d74 <_malloc_r+0x20>
 8006dcc:	425a      	negs	r2, r3
 8006dce:	50e2      	str	r2, [r4, r3]
 8006dd0:	e7d0      	b.n	8006d74 <_malloc_r+0x20>
 8006dd2:	428c      	cmp	r4, r1
 8006dd4:	684b      	ldr	r3, [r1, #4]
 8006dd6:	bf16      	itet	ne
 8006dd8:	6063      	strne	r3, [r4, #4]
 8006dda:	6013      	streq	r3, [r2, #0]
 8006ddc:	460c      	movne	r4, r1
 8006dde:	e7eb      	b.n	8006db8 <_malloc_r+0x64>
 8006de0:	460c      	mov	r4, r1
 8006de2:	6849      	ldr	r1, [r1, #4]
 8006de4:	e7cc      	b.n	8006d80 <_malloc_r+0x2c>
 8006de6:	1cc4      	adds	r4, r0, #3
 8006de8:	f024 0403 	bic.w	r4, r4, #3
 8006dec:	42a0      	cmp	r0, r4
 8006dee:	d005      	beq.n	8006dfc <_malloc_r+0xa8>
 8006df0:	1a21      	subs	r1, r4, r0
 8006df2:	4630      	mov	r0, r6
 8006df4:	f000 f948 	bl	8007088 <_sbrk_r>
 8006df8:	3001      	adds	r0, #1
 8006dfa:	d0cf      	beq.n	8006d9c <_malloc_r+0x48>
 8006dfc:	6025      	str	r5, [r4, #0]
 8006dfe:	e7db      	b.n	8006db8 <_malloc_r+0x64>
 8006e00:	200001fc 	.word	0x200001fc
 8006e04:	20000200 	.word	0x20000200

08006e08 <__sfputc_r>:
 8006e08:	6893      	ldr	r3, [r2, #8]
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	b410      	push	{r4}
 8006e10:	6093      	str	r3, [r2, #8]
 8006e12:	da08      	bge.n	8006e26 <__sfputc_r+0x1e>
 8006e14:	6994      	ldr	r4, [r2, #24]
 8006e16:	42a3      	cmp	r3, r4
 8006e18:	db01      	blt.n	8006e1e <__sfputc_r+0x16>
 8006e1a:	290a      	cmp	r1, #10
 8006e1c:	d103      	bne.n	8006e26 <__sfputc_r+0x1e>
 8006e1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e22:	f7fe bb5d 	b.w	80054e0 <__swbuf_r>
 8006e26:	6813      	ldr	r3, [r2, #0]
 8006e28:	1c58      	adds	r0, r3, #1
 8006e2a:	6010      	str	r0, [r2, #0]
 8006e2c:	7019      	strb	r1, [r3, #0]
 8006e2e:	4608      	mov	r0, r1
 8006e30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e34:	4770      	bx	lr

08006e36 <__sfputs_r>:
 8006e36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e38:	4606      	mov	r6, r0
 8006e3a:	460f      	mov	r7, r1
 8006e3c:	4614      	mov	r4, r2
 8006e3e:	18d5      	adds	r5, r2, r3
 8006e40:	42ac      	cmp	r4, r5
 8006e42:	d101      	bne.n	8006e48 <__sfputs_r+0x12>
 8006e44:	2000      	movs	r0, #0
 8006e46:	e007      	b.n	8006e58 <__sfputs_r+0x22>
 8006e48:	463a      	mov	r2, r7
 8006e4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e4e:	4630      	mov	r0, r6
 8006e50:	f7ff ffda 	bl	8006e08 <__sfputc_r>
 8006e54:	1c43      	adds	r3, r0, #1
 8006e56:	d1f3      	bne.n	8006e40 <__sfputs_r+0xa>
 8006e58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006e5c <_vfiprintf_r>:
 8006e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e60:	460c      	mov	r4, r1
 8006e62:	b09d      	sub	sp, #116	; 0x74
 8006e64:	4617      	mov	r7, r2
 8006e66:	461d      	mov	r5, r3
 8006e68:	4606      	mov	r6, r0
 8006e6a:	b118      	cbz	r0, 8006e74 <_vfiprintf_r+0x18>
 8006e6c:	6983      	ldr	r3, [r0, #24]
 8006e6e:	b90b      	cbnz	r3, 8006e74 <_vfiprintf_r+0x18>
 8006e70:	f7ff fb2a 	bl	80064c8 <__sinit>
 8006e74:	4b7c      	ldr	r3, [pc, #496]	; (8007068 <_vfiprintf_r+0x20c>)
 8006e76:	429c      	cmp	r4, r3
 8006e78:	d158      	bne.n	8006f2c <_vfiprintf_r+0xd0>
 8006e7a:	6874      	ldr	r4, [r6, #4]
 8006e7c:	89a3      	ldrh	r3, [r4, #12]
 8006e7e:	0718      	lsls	r0, r3, #28
 8006e80:	d55e      	bpl.n	8006f40 <_vfiprintf_r+0xe4>
 8006e82:	6923      	ldr	r3, [r4, #16]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d05b      	beq.n	8006f40 <_vfiprintf_r+0xe4>
 8006e88:	2300      	movs	r3, #0
 8006e8a:	9309      	str	r3, [sp, #36]	; 0x24
 8006e8c:	2320      	movs	r3, #32
 8006e8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e92:	2330      	movs	r3, #48	; 0x30
 8006e94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e98:	9503      	str	r5, [sp, #12]
 8006e9a:	f04f 0b01 	mov.w	fp, #1
 8006e9e:	46b8      	mov	r8, r7
 8006ea0:	4645      	mov	r5, r8
 8006ea2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006ea6:	b10b      	cbz	r3, 8006eac <_vfiprintf_r+0x50>
 8006ea8:	2b25      	cmp	r3, #37	; 0x25
 8006eaa:	d154      	bne.n	8006f56 <_vfiprintf_r+0xfa>
 8006eac:	ebb8 0a07 	subs.w	sl, r8, r7
 8006eb0:	d00b      	beq.n	8006eca <_vfiprintf_r+0x6e>
 8006eb2:	4653      	mov	r3, sl
 8006eb4:	463a      	mov	r2, r7
 8006eb6:	4621      	mov	r1, r4
 8006eb8:	4630      	mov	r0, r6
 8006eba:	f7ff ffbc 	bl	8006e36 <__sfputs_r>
 8006ebe:	3001      	adds	r0, #1
 8006ec0:	f000 80c2 	beq.w	8007048 <_vfiprintf_r+0x1ec>
 8006ec4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ec6:	4453      	add	r3, sl
 8006ec8:	9309      	str	r3, [sp, #36]	; 0x24
 8006eca:	f898 3000 	ldrb.w	r3, [r8]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	f000 80ba 	beq.w	8007048 <_vfiprintf_r+0x1ec>
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8006eda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ede:	9304      	str	r3, [sp, #16]
 8006ee0:	9307      	str	r3, [sp, #28]
 8006ee2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ee6:	931a      	str	r3, [sp, #104]	; 0x68
 8006ee8:	46a8      	mov	r8, r5
 8006eea:	2205      	movs	r2, #5
 8006eec:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006ef0:	485e      	ldr	r0, [pc, #376]	; (800706c <_vfiprintf_r+0x210>)
 8006ef2:	f7f9 f975 	bl	80001e0 <memchr>
 8006ef6:	9b04      	ldr	r3, [sp, #16]
 8006ef8:	bb78      	cbnz	r0, 8006f5a <_vfiprintf_r+0xfe>
 8006efa:	06d9      	lsls	r1, r3, #27
 8006efc:	bf44      	itt	mi
 8006efe:	2220      	movmi	r2, #32
 8006f00:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006f04:	071a      	lsls	r2, r3, #28
 8006f06:	bf44      	itt	mi
 8006f08:	222b      	movmi	r2, #43	; 0x2b
 8006f0a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006f0e:	782a      	ldrb	r2, [r5, #0]
 8006f10:	2a2a      	cmp	r2, #42	; 0x2a
 8006f12:	d02a      	beq.n	8006f6a <_vfiprintf_r+0x10e>
 8006f14:	9a07      	ldr	r2, [sp, #28]
 8006f16:	46a8      	mov	r8, r5
 8006f18:	2000      	movs	r0, #0
 8006f1a:	250a      	movs	r5, #10
 8006f1c:	4641      	mov	r1, r8
 8006f1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f22:	3b30      	subs	r3, #48	; 0x30
 8006f24:	2b09      	cmp	r3, #9
 8006f26:	d969      	bls.n	8006ffc <_vfiprintf_r+0x1a0>
 8006f28:	b360      	cbz	r0, 8006f84 <_vfiprintf_r+0x128>
 8006f2a:	e024      	b.n	8006f76 <_vfiprintf_r+0x11a>
 8006f2c:	4b50      	ldr	r3, [pc, #320]	; (8007070 <_vfiprintf_r+0x214>)
 8006f2e:	429c      	cmp	r4, r3
 8006f30:	d101      	bne.n	8006f36 <_vfiprintf_r+0xda>
 8006f32:	68b4      	ldr	r4, [r6, #8]
 8006f34:	e7a2      	b.n	8006e7c <_vfiprintf_r+0x20>
 8006f36:	4b4f      	ldr	r3, [pc, #316]	; (8007074 <_vfiprintf_r+0x218>)
 8006f38:	429c      	cmp	r4, r3
 8006f3a:	bf08      	it	eq
 8006f3c:	68f4      	ldreq	r4, [r6, #12]
 8006f3e:	e79d      	b.n	8006e7c <_vfiprintf_r+0x20>
 8006f40:	4621      	mov	r1, r4
 8006f42:	4630      	mov	r0, r6
 8006f44:	f7fe fb1e 	bl	8005584 <__swsetup_r>
 8006f48:	2800      	cmp	r0, #0
 8006f4a:	d09d      	beq.n	8006e88 <_vfiprintf_r+0x2c>
 8006f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f50:	b01d      	add	sp, #116	; 0x74
 8006f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f56:	46a8      	mov	r8, r5
 8006f58:	e7a2      	b.n	8006ea0 <_vfiprintf_r+0x44>
 8006f5a:	4a44      	ldr	r2, [pc, #272]	; (800706c <_vfiprintf_r+0x210>)
 8006f5c:	1a80      	subs	r0, r0, r2
 8006f5e:	fa0b f000 	lsl.w	r0, fp, r0
 8006f62:	4318      	orrs	r0, r3
 8006f64:	9004      	str	r0, [sp, #16]
 8006f66:	4645      	mov	r5, r8
 8006f68:	e7be      	b.n	8006ee8 <_vfiprintf_r+0x8c>
 8006f6a:	9a03      	ldr	r2, [sp, #12]
 8006f6c:	1d11      	adds	r1, r2, #4
 8006f6e:	6812      	ldr	r2, [r2, #0]
 8006f70:	9103      	str	r1, [sp, #12]
 8006f72:	2a00      	cmp	r2, #0
 8006f74:	db01      	blt.n	8006f7a <_vfiprintf_r+0x11e>
 8006f76:	9207      	str	r2, [sp, #28]
 8006f78:	e004      	b.n	8006f84 <_vfiprintf_r+0x128>
 8006f7a:	4252      	negs	r2, r2
 8006f7c:	f043 0302 	orr.w	r3, r3, #2
 8006f80:	9207      	str	r2, [sp, #28]
 8006f82:	9304      	str	r3, [sp, #16]
 8006f84:	f898 3000 	ldrb.w	r3, [r8]
 8006f88:	2b2e      	cmp	r3, #46	; 0x2e
 8006f8a:	d10e      	bne.n	8006faa <_vfiprintf_r+0x14e>
 8006f8c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006f90:	2b2a      	cmp	r3, #42	; 0x2a
 8006f92:	d138      	bne.n	8007006 <_vfiprintf_r+0x1aa>
 8006f94:	9b03      	ldr	r3, [sp, #12]
 8006f96:	1d1a      	adds	r2, r3, #4
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	9203      	str	r2, [sp, #12]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	bfb8      	it	lt
 8006fa0:	f04f 33ff 	movlt.w	r3, #4294967295
 8006fa4:	f108 0802 	add.w	r8, r8, #2
 8006fa8:	9305      	str	r3, [sp, #20]
 8006faa:	4d33      	ldr	r5, [pc, #204]	; (8007078 <_vfiprintf_r+0x21c>)
 8006fac:	f898 1000 	ldrb.w	r1, [r8]
 8006fb0:	2203      	movs	r2, #3
 8006fb2:	4628      	mov	r0, r5
 8006fb4:	f7f9 f914 	bl	80001e0 <memchr>
 8006fb8:	b140      	cbz	r0, 8006fcc <_vfiprintf_r+0x170>
 8006fba:	2340      	movs	r3, #64	; 0x40
 8006fbc:	1b40      	subs	r0, r0, r5
 8006fbe:	fa03 f000 	lsl.w	r0, r3, r0
 8006fc2:	9b04      	ldr	r3, [sp, #16]
 8006fc4:	4303      	orrs	r3, r0
 8006fc6:	f108 0801 	add.w	r8, r8, #1
 8006fca:	9304      	str	r3, [sp, #16]
 8006fcc:	f898 1000 	ldrb.w	r1, [r8]
 8006fd0:	482a      	ldr	r0, [pc, #168]	; (800707c <_vfiprintf_r+0x220>)
 8006fd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006fd6:	2206      	movs	r2, #6
 8006fd8:	f108 0701 	add.w	r7, r8, #1
 8006fdc:	f7f9 f900 	bl	80001e0 <memchr>
 8006fe0:	2800      	cmp	r0, #0
 8006fe2:	d037      	beq.n	8007054 <_vfiprintf_r+0x1f8>
 8006fe4:	4b26      	ldr	r3, [pc, #152]	; (8007080 <_vfiprintf_r+0x224>)
 8006fe6:	bb1b      	cbnz	r3, 8007030 <_vfiprintf_r+0x1d4>
 8006fe8:	9b03      	ldr	r3, [sp, #12]
 8006fea:	3307      	adds	r3, #7
 8006fec:	f023 0307 	bic.w	r3, r3, #7
 8006ff0:	3308      	adds	r3, #8
 8006ff2:	9303      	str	r3, [sp, #12]
 8006ff4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ff6:	444b      	add	r3, r9
 8006ff8:	9309      	str	r3, [sp, #36]	; 0x24
 8006ffa:	e750      	b.n	8006e9e <_vfiprintf_r+0x42>
 8006ffc:	fb05 3202 	mla	r2, r5, r2, r3
 8007000:	2001      	movs	r0, #1
 8007002:	4688      	mov	r8, r1
 8007004:	e78a      	b.n	8006f1c <_vfiprintf_r+0xc0>
 8007006:	2300      	movs	r3, #0
 8007008:	f108 0801 	add.w	r8, r8, #1
 800700c:	9305      	str	r3, [sp, #20]
 800700e:	4619      	mov	r1, r3
 8007010:	250a      	movs	r5, #10
 8007012:	4640      	mov	r0, r8
 8007014:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007018:	3a30      	subs	r2, #48	; 0x30
 800701a:	2a09      	cmp	r2, #9
 800701c:	d903      	bls.n	8007026 <_vfiprintf_r+0x1ca>
 800701e:	2b00      	cmp	r3, #0
 8007020:	d0c3      	beq.n	8006faa <_vfiprintf_r+0x14e>
 8007022:	9105      	str	r1, [sp, #20]
 8007024:	e7c1      	b.n	8006faa <_vfiprintf_r+0x14e>
 8007026:	fb05 2101 	mla	r1, r5, r1, r2
 800702a:	2301      	movs	r3, #1
 800702c:	4680      	mov	r8, r0
 800702e:	e7f0      	b.n	8007012 <_vfiprintf_r+0x1b6>
 8007030:	ab03      	add	r3, sp, #12
 8007032:	9300      	str	r3, [sp, #0]
 8007034:	4622      	mov	r2, r4
 8007036:	4b13      	ldr	r3, [pc, #76]	; (8007084 <_vfiprintf_r+0x228>)
 8007038:	a904      	add	r1, sp, #16
 800703a:	4630      	mov	r0, r6
 800703c:	f7fd fe0c 	bl	8004c58 <_printf_float>
 8007040:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007044:	4681      	mov	r9, r0
 8007046:	d1d5      	bne.n	8006ff4 <_vfiprintf_r+0x198>
 8007048:	89a3      	ldrh	r3, [r4, #12]
 800704a:	065b      	lsls	r3, r3, #25
 800704c:	f53f af7e 	bmi.w	8006f4c <_vfiprintf_r+0xf0>
 8007050:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007052:	e77d      	b.n	8006f50 <_vfiprintf_r+0xf4>
 8007054:	ab03      	add	r3, sp, #12
 8007056:	9300      	str	r3, [sp, #0]
 8007058:	4622      	mov	r2, r4
 800705a:	4b0a      	ldr	r3, [pc, #40]	; (8007084 <_vfiprintf_r+0x228>)
 800705c:	a904      	add	r1, sp, #16
 800705e:	4630      	mov	r0, r6
 8007060:	f7fe f8b0 	bl	80051c4 <_printf_i>
 8007064:	e7ec      	b.n	8007040 <_vfiprintf_r+0x1e4>
 8007066:	bf00      	nop
 8007068:	080073f0 	.word	0x080073f0
 800706c:	0800752c 	.word	0x0800752c
 8007070:	08007410 	.word	0x08007410
 8007074:	080073d0 	.word	0x080073d0
 8007078:	08007532 	.word	0x08007532
 800707c:	08007536 	.word	0x08007536
 8007080:	08004c59 	.word	0x08004c59
 8007084:	08006e37 	.word	0x08006e37

08007088 <_sbrk_r>:
 8007088:	b538      	push	{r3, r4, r5, lr}
 800708a:	4c06      	ldr	r4, [pc, #24]	; (80070a4 <_sbrk_r+0x1c>)
 800708c:	2300      	movs	r3, #0
 800708e:	4605      	mov	r5, r0
 8007090:	4608      	mov	r0, r1
 8007092:	6023      	str	r3, [r4, #0]
 8007094:	f7fa fdae 	bl	8001bf4 <_sbrk>
 8007098:	1c43      	adds	r3, r0, #1
 800709a:	d102      	bne.n	80070a2 <_sbrk_r+0x1a>
 800709c:	6823      	ldr	r3, [r4, #0]
 800709e:	b103      	cbz	r3, 80070a2 <_sbrk_r+0x1a>
 80070a0:	602b      	str	r3, [r5, #0]
 80070a2:	bd38      	pop	{r3, r4, r5, pc}
 80070a4:	2000040c 	.word	0x2000040c

080070a8 <__sread>:
 80070a8:	b510      	push	{r4, lr}
 80070aa:	460c      	mov	r4, r1
 80070ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070b0:	f000 f8a8 	bl	8007204 <_read_r>
 80070b4:	2800      	cmp	r0, #0
 80070b6:	bfab      	itete	ge
 80070b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80070ba:	89a3      	ldrhlt	r3, [r4, #12]
 80070bc:	181b      	addge	r3, r3, r0
 80070be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80070c2:	bfac      	ite	ge
 80070c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80070c6:	81a3      	strhlt	r3, [r4, #12]
 80070c8:	bd10      	pop	{r4, pc}

080070ca <__swrite>:
 80070ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070ce:	461f      	mov	r7, r3
 80070d0:	898b      	ldrh	r3, [r1, #12]
 80070d2:	05db      	lsls	r3, r3, #23
 80070d4:	4605      	mov	r5, r0
 80070d6:	460c      	mov	r4, r1
 80070d8:	4616      	mov	r6, r2
 80070da:	d505      	bpl.n	80070e8 <__swrite+0x1e>
 80070dc:	2302      	movs	r3, #2
 80070de:	2200      	movs	r2, #0
 80070e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070e4:	f000 f868 	bl	80071b8 <_lseek_r>
 80070e8:	89a3      	ldrh	r3, [r4, #12]
 80070ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070f2:	81a3      	strh	r3, [r4, #12]
 80070f4:	4632      	mov	r2, r6
 80070f6:	463b      	mov	r3, r7
 80070f8:	4628      	mov	r0, r5
 80070fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070fe:	f000 b817 	b.w	8007130 <_write_r>

08007102 <__sseek>:
 8007102:	b510      	push	{r4, lr}
 8007104:	460c      	mov	r4, r1
 8007106:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800710a:	f000 f855 	bl	80071b8 <_lseek_r>
 800710e:	1c43      	adds	r3, r0, #1
 8007110:	89a3      	ldrh	r3, [r4, #12]
 8007112:	bf15      	itete	ne
 8007114:	6560      	strne	r0, [r4, #84]	; 0x54
 8007116:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800711a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800711e:	81a3      	strheq	r3, [r4, #12]
 8007120:	bf18      	it	ne
 8007122:	81a3      	strhne	r3, [r4, #12]
 8007124:	bd10      	pop	{r4, pc}

08007126 <__sclose>:
 8007126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800712a:	f000 b813 	b.w	8007154 <_close_r>
	...

08007130 <_write_r>:
 8007130:	b538      	push	{r3, r4, r5, lr}
 8007132:	4c07      	ldr	r4, [pc, #28]	; (8007150 <_write_r+0x20>)
 8007134:	4605      	mov	r5, r0
 8007136:	4608      	mov	r0, r1
 8007138:	4611      	mov	r1, r2
 800713a:	2200      	movs	r2, #0
 800713c:	6022      	str	r2, [r4, #0]
 800713e:	461a      	mov	r2, r3
 8007140:	f7fa fb94 	bl	800186c <_write>
 8007144:	1c43      	adds	r3, r0, #1
 8007146:	d102      	bne.n	800714e <_write_r+0x1e>
 8007148:	6823      	ldr	r3, [r4, #0]
 800714a:	b103      	cbz	r3, 800714e <_write_r+0x1e>
 800714c:	602b      	str	r3, [r5, #0]
 800714e:	bd38      	pop	{r3, r4, r5, pc}
 8007150:	2000040c 	.word	0x2000040c

08007154 <_close_r>:
 8007154:	b538      	push	{r3, r4, r5, lr}
 8007156:	4c06      	ldr	r4, [pc, #24]	; (8007170 <_close_r+0x1c>)
 8007158:	2300      	movs	r3, #0
 800715a:	4605      	mov	r5, r0
 800715c:	4608      	mov	r0, r1
 800715e:	6023      	str	r3, [r4, #0]
 8007160:	f7fa fd3c 	bl	8001bdc <_close>
 8007164:	1c43      	adds	r3, r0, #1
 8007166:	d102      	bne.n	800716e <_close_r+0x1a>
 8007168:	6823      	ldr	r3, [r4, #0]
 800716a:	b103      	cbz	r3, 800716e <_close_r+0x1a>
 800716c:	602b      	str	r3, [r5, #0]
 800716e:	bd38      	pop	{r3, r4, r5, pc}
 8007170:	2000040c 	.word	0x2000040c

08007174 <_fstat_r>:
 8007174:	b538      	push	{r3, r4, r5, lr}
 8007176:	4c07      	ldr	r4, [pc, #28]	; (8007194 <_fstat_r+0x20>)
 8007178:	2300      	movs	r3, #0
 800717a:	4605      	mov	r5, r0
 800717c:	4608      	mov	r0, r1
 800717e:	4611      	mov	r1, r2
 8007180:	6023      	str	r3, [r4, #0]
 8007182:	f7fa fd2e 	bl	8001be2 <_fstat>
 8007186:	1c43      	adds	r3, r0, #1
 8007188:	d102      	bne.n	8007190 <_fstat_r+0x1c>
 800718a:	6823      	ldr	r3, [r4, #0]
 800718c:	b103      	cbz	r3, 8007190 <_fstat_r+0x1c>
 800718e:	602b      	str	r3, [r5, #0]
 8007190:	bd38      	pop	{r3, r4, r5, pc}
 8007192:	bf00      	nop
 8007194:	2000040c 	.word	0x2000040c

08007198 <_isatty_r>:
 8007198:	b538      	push	{r3, r4, r5, lr}
 800719a:	4c06      	ldr	r4, [pc, #24]	; (80071b4 <_isatty_r+0x1c>)
 800719c:	2300      	movs	r3, #0
 800719e:	4605      	mov	r5, r0
 80071a0:	4608      	mov	r0, r1
 80071a2:	6023      	str	r3, [r4, #0]
 80071a4:	f7fa fd22 	bl	8001bec <_isatty>
 80071a8:	1c43      	adds	r3, r0, #1
 80071aa:	d102      	bne.n	80071b2 <_isatty_r+0x1a>
 80071ac:	6823      	ldr	r3, [r4, #0]
 80071ae:	b103      	cbz	r3, 80071b2 <_isatty_r+0x1a>
 80071b0:	602b      	str	r3, [r5, #0]
 80071b2:	bd38      	pop	{r3, r4, r5, pc}
 80071b4:	2000040c 	.word	0x2000040c

080071b8 <_lseek_r>:
 80071b8:	b538      	push	{r3, r4, r5, lr}
 80071ba:	4c07      	ldr	r4, [pc, #28]	; (80071d8 <_lseek_r+0x20>)
 80071bc:	4605      	mov	r5, r0
 80071be:	4608      	mov	r0, r1
 80071c0:	4611      	mov	r1, r2
 80071c2:	2200      	movs	r2, #0
 80071c4:	6022      	str	r2, [r4, #0]
 80071c6:	461a      	mov	r2, r3
 80071c8:	f7fa fd12 	bl	8001bf0 <_lseek>
 80071cc:	1c43      	adds	r3, r0, #1
 80071ce:	d102      	bne.n	80071d6 <_lseek_r+0x1e>
 80071d0:	6823      	ldr	r3, [r4, #0]
 80071d2:	b103      	cbz	r3, 80071d6 <_lseek_r+0x1e>
 80071d4:	602b      	str	r3, [r5, #0]
 80071d6:	bd38      	pop	{r3, r4, r5, pc}
 80071d8:	2000040c 	.word	0x2000040c

080071dc <__ascii_mbtowc>:
 80071dc:	b082      	sub	sp, #8
 80071de:	b901      	cbnz	r1, 80071e2 <__ascii_mbtowc+0x6>
 80071e0:	a901      	add	r1, sp, #4
 80071e2:	b142      	cbz	r2, 80071f6 <__ascii_mbtowc+0x1a>
 80071e4:	b14b      	cbz	r3, 80071fa <__ascii_mbtowc+0x1e>
 80071e6:	7813      	ldrb	r3, [r2, #0]
 80071e8:	600b      	str	r3, [r1, #0]
 80071ea:	7812      	ldrb	r2, [r2, #0]
 80071ec:	1c10      	adds	r0, r2, #0
 80071ee:	bf18      	it	ne
 80071f0:	2001      	movne	r0, #1
 80071f2:	b002      	add	sp, #8
 80071f4:	4770      	bx	lr
 80071f6:	4610      	mov	r0, r2
 80071f8:	e7fb      	b.n	80071f2 <__ascii_mbtowc+0x16>
 80071fa:	f06f 0001 	mvn.w	r0, #1
 80071fe:	e7f8      	b.n	80071f2 <__ascii_mbtowc+0x16>

08007200 <__malloc_lock>:
 8007200:	4770      	bx	lr

08007202 <__malloc_unlock>:
 8007202:	4770      	bx	lr

08007204 <_read_r>:
 8007204:	b538      	push	{r3, r4, r5, lr}
 8007206:	4c07      	ldr	r4, [pc, #28]	; (8007224 <_read_r+0x20>)
 8007208:	4605      	mov	r5, r0
 800720a:	4608      	mov	r0, r1
 800720c:	4611      	mov	r1, r2
 800720e:	2200      	movs	r2, #0
 8007210:	6022      	str	r2, [r4, #0]
 8007212:	461a      	mov	r2, r3
 8007214:	f7fa fcd4 	bl	8001bc0 <_read>
 8007218:	1c43      	adds	r3, r0, #1
 800721a:	d102      	bne.n	8007222 <_read_r+0x1e>
 800721c:	6823      	ldr	r3, [r4, #0]
 800721e:	b103      	cbz	r3, 8007222 <_read_r+0x1e>
 8007220:	602b      	str	r3, [r5, #0]
 8007222:	bd38      	pop	{r3, r4, r5, pc}
 8007224:	2000040c 	.word	0x2000040c

08007228 <__ascii_wctomb>:
 8007228:	b149      	cbz	r1, 800723e <__ascii_wctomb+0x16>
 800722a:	2aff      	cmp	r2, #255	; 0xff
 800722c:	bf85      	ittet	hi
 800722e:	238a      	movhi	r3, #138	; 0x8a
 8007230:	6003      	strhi	r3, [r0, #0]
 8007232:	700a      	strbls	r2, [r1, #0]
 8007234:	f04f 30ff 	movhi.w	r0, #4294967295
 8007238:	bf98      	it	ls
 800723a:	2001      	movls	r0, #1
 800723c:	4770      	bx	lr
 800723e:	4608      	mov	r0, r1
 8007240:	4770      	bx	lr
	...

08007244 <_init>:
 8007244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007246:	bf00      	nop
 8007248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800724a:	bc08      	pop	{r3}
 800724c:	469e      	mov	lr, r3
 800724e:	4770      	bx	lr

08007250 <_fini>:
 8007250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007252:	bf00      	nop
 8007254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007256:	bc08      	pop	{r3}
 8007258:	469e      	mov	lr, r3
 800725a:	4770      	bx	lr
