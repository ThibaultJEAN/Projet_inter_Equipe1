
Projet_inter_Buck_Equipe1_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006704  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800688c  0800688c  0001688c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068d4  080068d4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080068d4  080068d4  000168d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068dc  080068dc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068dc  080068dc  000168dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068e0  080068e0  000168e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080068e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  2000000c  080068f0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  080068f0  0002025c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ffe  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002127  00000000  00000000  0003303a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012b8  00000000  00000000  00035168  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011b0  00000000  00000000  00036420  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028073  00000000  00000000  000375d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e1c6  00000000  00000000  0005f643  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001030c3  00000000  00000000  0006d809  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001708cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050bc  00000000  00000000  00170948  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006874 	.word	0x08006874

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08006874 	.word	0x08006874

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fde8 	bl	80010a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f822 	bl	8000518 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 fae6 	bl	8000aa4 <MX_GPIO_Init>
  MX_DMA_Init();
 80004d8:	f000 fac6 	bl	8000a68 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004dc:	f000 fa94 	bl	8000a08 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80004e0:	f000 f8a2 	bl	8000628 <MX_ADC1_Init>
  MX_TIM1_Init();
 80004e4:	f000 f93a 	bl	800075c <MX_TIM1_Init>
  MX_TIM2_Init();
 80004e8:	f000 f9ea 	bl	80008c0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80004ec:	f000 fa3a 	bl	8000964 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  /*HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED);
  HAL_ADC_Start_DMA(&hadc1, ADC_buffer, ADC_BUFFER_SIZE);*/
  HAL_TIM_Base_Start(&htim2);
 80004f0:	4806      	ldr	r0, [pc, #24]	; (800050c <main+0x44>)
 80004f2:	f004 fab3 	bl	8004a5c <HAL_TIM_Base_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80004f6:	2100      	movs	r1, #0
 80004f8:	4805      	ldr	r0, [pc, #20]	; (8000510 <main+0x48>)
 80004fa:	f004 fbe9 	bl	8004cd0 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 80004fe:	4805      	ldr	r0, [pc, #20]	; (8000514 <main+0x4c>)
 8000500:	f004 fb14 	bl	8004b2c <HAL_TIM_Base_Start_IT>
  RegulateCV();
 8000504:	f000 fb92 	bl	8000c2c <RegulateCV>
  //Set_Duty_Cycle(0.25*htim1.Init.Period);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000508:	e7fe      	b.n	8000508 <main+0x40>
 800050a:	bf00      	nop
 800050c:	20000180 	.word	0x20000180
 8000510:	20000134 	.word	0x20000134
 8000514:	2000003c 	.word	0x2000003c

08000518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b0b8      	sub	sp, #224	; 0xe0
 800051c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000522:	2244      	movs	r2, #68	; 0x44
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f006 f99c 	bl	8006864 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
 800053a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800053c:	463b      	mov	r3, r7
 800053e:	2288      	movs	r2, #136	; 0x88
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f006 f98e 	bl	8006864 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000548:	2302      	movs	r3, #2
 800054a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800054e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000552:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000556:	2310      	movs	r3, #16
 8000558:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055c:	2302      	movs	r3, #2
 800055e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000562:	2302      	movs	r3, #2
 8000564:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000568:	2301      	movs	r3, #1
 800056a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800056e:	230a      	movs	r3, #10
 8000570:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000574:	2307      	movs	r3, #7
 8000576:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800057a:	2302      	movs	r3, #2
 800057c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000580:	2302      	movs	r3, #2
 8000582:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000586:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800058a:	4618      	mov	r0, r3
 800058c:	f002 ff74 	bl	8003478 <HAL_RCC_OscConfig>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000596:	f000 fb6f 	bl	8000c78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059a:	230f      	movs	r3, #15
 800059c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a0:	2303      	movs	r3, #3
 80005a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b2:	2300      	movs	r3, #0
 80005b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005b8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005bc:	2104      	movs	r1, #4
 80005be:	4618      	mov	r0, r3
 80005c0:	f003 fb40 	bl	8003c44 <HAL_RCC_ClockConfig>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80005ca:	f000 fb55 	bl	8000c78 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 80005ce:	f244 0302 	movw	r3, #16386	; 0x4002
 80005d2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80005d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80005dc:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80005de:	2302      	movs	r3, #2
 80005e0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80005e2:	2301      	movs	r3, #1
 80005e4:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80005e6:	2308      	movs	r3, #8
 80005e8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80005ea:	2307      	movs	r3, #7
 80005ec:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80005ee:	2302      	movs	r3, #2
 80005f0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80005f2:	2302      	movs	r3, #2
 80005f4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80005f6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80005fa:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005fc:	463b      	mov	r3, r7
 80005fe:	4618      	mov	r0, r3
 8000600:	f003 fd24 	bl	800404c <HAL_RCCEx_PeriphCLKConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800060a:	f000 fb35 	bl	8000c78 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800060e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000612:	f002 fedb 	bl	80033cc <HAL_PWREx_ControlVoltageScaling>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0x108>
  {
    Error_Handler();
 800061c:	f000 fb2c 	bl	8000c78 <Error_Handler>
  }
}
 8000620:	bf00      	nop
 8000622:	37e0      	adds	r7, #224	; 0xe0
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b08a      	sub	sp, #40	; 0x28
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800062e:	f107 031c 	add.w	r3, r7, #28
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]
 8000648:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800064a:	4b3f      	ldr	r3, [pc, #252]	; (8000748 <MX_ADC1_Init+0x120>)
 800064c:	4a3f      	ldr	r2, [pc, #252]	; (800074c <MX_ADC1_Init+0x124>)
 800064e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8000650:	4b3d      	ldr	r3, [pc, #244]	; (8000748 <MX_ADC1_Init+0x120>)
 8000652:	f44f 12a0 	mov.w	r2, #1310720	; 0x140000
 8000656:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000658:	4b3b      	ldr	r3, [pc, #236]	; (8000748 <MX_ADC1_Init+0x120>)
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800065e:	4b3a      	ldr	r3, [pc, #232]	; (8000748 <MX_ADC1_Init+0x120>)
 8000660:	2200      	movs	r2, #0
 8000662:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000664:	4b38      	ldr	r3, [pc, #224]	; (8000748 <MX_ADC1_Init+0x120>)
 8000666:	2201      	movs	r2, #1
 8000668:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800066a:	4b37      	ldr	r3, [pc, #220]	; (8000748 <MX_ADC1_Init+0x120>)
 800066c:	2204      	movs	r2, #4
 800066e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000670:	4b35      	ldr	r3, [pc, #212]	; (8000748 <MX_ADC1_Init+0x120>)
 8000672:	2200      	movs	r2, #0
 8000674:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000676:	4b34      	ldr	r3, [pc, #208]	; (8000748 <MX_ADC1_Init+0x120>)
 8000678:	2200      	movs	r2, #0
 800067a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 800067c:	4b32      	ldr	r3, [pc, #200]	; (8000748 <MX_ADC1_Init+0x120>)
 800067e:	2203      	movs	r2, #3
 8000680:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000682:	4b31      	ldr	r3, [pc, #196]	; (8000748 <MX_ADC1_Init+0x120>)
 8000684:	2200      	movs	r2, #0
 8000686:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_CC2;
 800068a:	4b2f      	ldr	r3, [pc, #188]	; (8000748 <MX_ADC1_Init+0x120>)
 800068c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8000690:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000692:	4b2d      	ldr	r3, [pc, #180]	; (8000748 <MX_ADC1_Init+0x120>)
 8000694:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000698:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800069a:	4b2b      	ldr	r3, [pc, #172]	; (8000748 <MX_ADC1_Init+0x120>)
 800069c:	2200      	movs	r2, #0
 800069e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006a2:	4b29      	ldr	r3, [pc, #164]	; (8000748 <MX_ADC1_Init+0x120>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006a8:	4b27      	ldr	r3, [pc, #156]	; (8000748 <MX_ADC1_Init+0x120>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006b0:	4825      	ldr	r0, [pc, #148]	; (8000748 <MX_ADC1_Init+0x120>)
 80006b2:	f000 ff95 	bl	80015e0 <HAL_ADC_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80006bc:	f000 fadc 	bl	8000c78 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006c4:	f107 031c 	add.w	r3, r7, #28
 80006c8:	4619      	mov	r1, r3
 80006ca:	481f      	ldr	r0, [pc, #124]	; (8000748 <MX_ADC1_Init+0x120>)
 80006cc:	f002 f8a2 	bl	8002814 <HAL_ADCEx_MultiModeConfigChannel>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80006d6:	f000 facf 	bl	8000c78 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006da:	4b1d      	ldr	r3, [pc, #116]	; (8000750 <MX_ADC1_Init+0x128>)
 80006dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006de:	2306      	movs	r3, #6
 80006e0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80006e2:	2305      	movs	r3, #5
 80006e4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006e6:	237f      	movs	r3, #127	; 0x7f
 80006e8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006ea:	2304      	movs	r3, #4
 80006ec:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006ee:	2300      	movs	r3, #0
 80006f0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	4619      	mov	r1, r3
 80006f6:	4814      	ldr	r0, [pc, #80]	; (8000748 <MX_ADC1_Init+0x120>)
 80006f8:	f001 f9f0 	bl	8001adc <HAL_ADC_ConfigChannel>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000702:	f000 fab9 	bl	8000c78 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000706:	4b13      	ldr	r3, [pc, #76]	; (8000754 <MX_ADC1_Init+0x12c>)
 8000708:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800070a:	230c      	movs	r3, #12
 800070c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	4619      	mov	r1, r3
 8000712:	480d      	ldr	r0, [pc, #52]	; (8000748 <MX_ADC1_Init+0x120>)
 8000714:	f001 f9e2 	bl	8001adc <HAL_ADC_ConfigChannel>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800071e:	f000 faab 	bl	8000c78 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000722:	4b0d      	ldr	r3, [pc, #52]	; (8000758 <MX_ADC1_Init+0x130>)
 8000724:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000726:	2312      	movs	r3, #18
 8000728:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	4619      	mov	r1, r3
 800072e:	4806      	ldr	r0, [pc, #24]	; (8000748 <MX_ADC1_Init+0x120>)
 8000730:	f001 f9d4 	bl	8001adc <HAL_ADC_ConfigChannel>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 800073a:	f000 fa9d 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	3728      	adds	r7, #40	; 0x28
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000088 	.word	0x20000088
 800074c:	50040000 	.word	0x50040000
 8000750:	04300002 	.word	0x04300002
 8000754:	08600004 	.word	0x08600004
 8000758:	0c900008 	.word	0x0c900008

0800075c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b09a      	sub	sp, #104	; 0x68
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000762:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000770:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800077c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]
 800078c:	615a      	str	r2, [r3, #20]
 800078e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	222c      	movs	r2, #44	; 0x2c
 8000794:	2100      	movs	r1, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f006 f864 	bl	8006864 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */
  htim1.Init.Period = 80000000UL/F_PWM;
 800079c:	4b46      	ldr	r3, [pc, #280]	; (80008b8 <MX_TIM1_Init+0x15c>)
 800079e:	f240 2215 	movw	r2, #533	; 0x215
 80007a2:	60da      	str	r2, [r3, #12]

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007a4:	4b44      	ldr	r3, [pc, #272]	; (80008b8 <MX_TIM1_Init+0x15c>)
 80007a6:	4a45      	ldr	r2, [pc, #276]	; (80008bc <MX_TIM1_Init+0x160>)
 80007a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007aa:	4b43      	ldr	r3, [pc, #268]	; (80008b8 <MX_TIM1_Init+0x15c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b0:	4b41      	ldr	r3, [pc, #260]	; (80008b8 <MX_TIM1_Init+0x15c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80007b6:	4b40      	ldr	r3, [pc, #256]	; (80008b8 <MX_TIM1_Init+0x15c>)
 80007b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007be:	4b3e      	ldr	r3, [pc, #248]	; (80008b8 <MX_TIM1_Init+0x15c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007c4:	4b3c      	ldr	r3, [pc, #240]	; (80008b8 <MX_TIM1_Init+0x15c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ca:	4b3b      	ldr	r3, [pc, #236]	; (80008b8 <MX_TIM1_Init+0x15c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007d0:	4839      	ldr	r0, [pc, #228]	; (80008b8 <MX_TIM1_Init+0x15c>)
 80007d2:	f004 f8eb 	bl	80049ac <HAL_TIM_Base_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80007dc:	f000 fa4c 	bl	8000c78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80007ea:	4619      	mov	r1, r3
 80007ec:	4832      	ldr	r0, [pc, #200]	; (80008b8 <MX_TIM1_Init+0x15c>)
 80007ee:	f004 fda5 	bl	800533c <HAL_TIM_ConfigClockSource>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 80007f8:	f000 fa3e 	bl	8000c78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007fc:	482e      	ldr	r0, [pc, #184]	; (80008b8 <MX_TIM1_Init+0x15c>)
 80007fe:	f004 fa05 	bl	8004c0c <HAL_TIM_PWM_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8000808:	f000 fa36 	bl	8000c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800080c:	2300      	movs	r3, #0
 800080e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000810:	2300      	movs	r3, #0
 8000812:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000814:	2300      	movs	r3, #0
 8000816:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000818:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800081c:	4619      	mov	r1, r3
 800081e:	4826      	ldr	r0, [pc, #152]	; (80008b8 <MX_TIM1_Init+0x15c>)
 8000820:	f005 fa9e 	bl	8005d60 <HAL_TIMEx_MasterConfigSynchronization>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 800082a:	f000 fa25 	bl	8000c78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800082e:	2360      	movs	r3, #96	; 0x60
 8000830:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 32000;
 8000832:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8000836:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000838:	2300      	movs	r3, #0
 800083a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800083c:	2300      	movs	r3, #0
 800083e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000840:	2300      	movs	r3, #0
 8000842:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000844:	2300      	movs	r3, #0
 8000846:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000848:	2300      	movs	r3, #0
 800084a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800084c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000850:	2200      	movs	r2, #0
 8000852:	4619      	mov	r1, r3
 8000854:	4818      	ldr	r0, [pc, #96]	; (80008b8 <MX_TIM1_Init+0x15c>)
 8000856:	f004 fc61 	bl	800511c <HAL_TIM_PWM_ConfigChannel>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000860:	f000 fa0a 	bl	8000c78 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000864:	2300      	movs	r3, #0
 8000866:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000868:	2300      	movs	r3, #0
 800086a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800086c:	2300      	movs	r3, #0
 800086e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000878:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800087c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000882:	2300      	movs	r3, #0
 8000884:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000886:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800088a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000890:	2300      	movs	r3, #0
 8000892:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	4619      	mov	r1, r3
 8000898:	4807      	ldr	r0, [pc, #28]	; (80008b8 <MX_TIM1_Init+0x15c>)
 800089a:	f005 fae9 	bl	8005e70 <HAL_TIMEx_ConfigBreakDeadTime>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 80008a4:	f000 f9e8 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008a8:	4803      	ldr	r0, [pc, #12]	; (80008b8 <MX_TIM1_Init+0x15c>)
 80008aa:	f000 fad3 	bl	8000e54 <HAL_TIM_MspPostInit>

}
 80008ae:	bf00      	nop
 80008b0:	3768      	adds	r7, #104	; 0x68
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20000134 	.word	0x20000134
 80008bc:	40012c00 	.word	0x40012c00

080008c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b088      	sub	sp, #32
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008c6:	f107 0310 	add.w	r3, r7, #16
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */
  htim2.Init.Period = 80000000UL/(F_ACQ*65536);
 80008de:	4b20      	ldr	r3, [pc, #128]	; (8000960 <MX_TIM2_Init+0xa0>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	60da      	str	r2, [r3, #12]
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008e4:	4b1e      	ldr	r3, [pc, #120]	; (8000960 <MX_TIM2_Init+0xa0>)
 80008e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15999;
 80008ec:	4b1c      	ldr	r3, [pc, #112]	; (8000960 <MX_TIM2_Init+0xa0>)
 80008ee:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80008f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f4:	4b1a      	ldr	r3, [pc, #104]	; (8000960 <MX_TIM2_Init+0xa0>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80008fa:	4b19      	ldr	r3, [pc, #100]	; (8000960 <MX_TIM2_Init+0xa0>)
 80008fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000900:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000902:	4b17      	ldr	r3, [pc, #92]	; (8000960 <MX_TIM2_Init+0xa0>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000908:	4b15      	ldr	r3, [pc, #84]	; (8000960 <MX_TIM2_Init+0xa0>)
 800090a:	2200      	movs	r2, #0
 800090c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800090e:	4814      	ldr	r0, [pc, #80]	; (8000960 <MX_TIM2_Init+0xa0>)
 8000910:	f004 f84c 	bl	80049ac <HAL_TIM_Base_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 800091a:	f000 f9ad 	bl	8000c78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800091e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000922:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000924:	f107 0310 	add.w	r3, r7, #16
 8000928:	4619      	mov	r1, r3
 800092a:	480d      	ldr	r0, [pc, #52]	; (8000960 <MX_TIM2_Init+0xa0>)
 800092c:	f004 fd06 	bl	800533c <HAL_TIM_ConfigClockSource>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000936:	f000 f99f 	bl	8000c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800093a:	2320      	movs	r3, #32
 800093c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800093e:	2380      	movs	r3, #128	; 0x80
 8000940:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	4619      	mov	r1, r3
 8000946:	4806      	ldr	r0, [pc, #24]	; (8000960 <MX_TIM2_Init+0xa0>)
 8000948:	f005 fa0a 	bl	8005d60 <HAL_TIMEx_MasterConfigSynchronization>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000952:	f000 f991 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000956:	bf00      	nop
 8000958:	3720      	adds	r7, #32
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000180 	.word	0x20000180

08000964 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b088      	sub	sp, #32
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800096a:	f107 0310 	add.w	r3, r7, #16
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */
  htim3.Init.Period = 80000000UL/(F_ACQ);
 8000982:	4b1f      	ldr	r3, [pc, #124]	; (8000a00 <MX_TIM3_Init+0x9c>)
 8000984:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000988:	60da      	str	r2, [r3, #12]
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800098a:	4b1d      	ldr	r3, [pc, #116]	; (8000a00 <MX_TIM3_Init+0x9c>)
 800098c:	4a1d      	ldr	r2, [pc, #116]	; (8000a04 <MX_TIM3_Init+0xa0>)
 800098e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000990:	4b1b      	ldr	r3, [pc, #108]	; (8000a00 <MX_TIM3_Init+0x9c>)
 8000992:	2200      	movs	r2, #0
 8000994:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000996:	4b1a      	ldr	r3, [pc, #104]	; (8000a00 <MX_TIM3_Init+0x9c>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800099c:	4b18      	ldr	r3, [pc, #96]	; (8000a00 <MX_TIM3_Init+0x9c>)
 800099e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a4:	4b16      	ldr	r3, [pc, #88]	; (8000a00 <MX_TIM3_Init+0x9c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009aa:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <MX_TIM3_Init+0x9c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009b0:	4813      	ldr	r0, [pc, #76]	; (8000a00 <MX_TIM3_Init+0x9c>)
 80009b2:	f003 fffb 	bl	80049ac <HAL_TIM_Base_Init>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 80009bc:	f000 f95c 	bl	8000c78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009c6:	f107 0310 	add.w	r3, r7, #16
 80009ca:	4619      	mov	r1, r3
 80009cc:	480c      	ldr	r0, [pc, #48]	; (8000a00 <MX_TIM3_Init+0x9c>)
 80009ce:	f004 fcb5 	bl	800533c <HAL_TIM_ConfigClockSource>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80009d8:	f000 f94e 	bl	8000c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009dc:	2300      	movs	r3, #0
 80009de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e0:	2300      	movs	r3, #0
 80009e2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009e4:	1d3b      	adds	r3, r7, #4
 80009e6:	4619      	mov	r1, r3
 80009e8:	4805      	ldr	r0, [pc, #20]	; (8000a00 <MX_TIM3_Init+0x9c>)
 80009ea:	f005 f9b9 	bl	8005d60 <HAL_TIMEx_MasterConfigSynchronization>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80009f4:	f000 f940 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80009f8:	bf00      	nop
 80009fa:	3720      	adds	r7, #32
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	2000003c 	.word	0x2000003c
 8000a04:	40000400 	.word	0x40000400

08000a08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a0c:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <MX_USART2_UART_Init+0x58>)
 8000a0e:	4a15      	ldr	r2, [pc, #84]	; (8000a64 <MX_USART2_UART_Init+0x5c>)
 8000a10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a12:	4b13      	ldr	r3, [pc, #76]	; (8000a60 <MX_USART2_UART_Init+0x58>)
 8000a14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1a:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <MX_USART2_UART_Init+0x58>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a20:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <MX_USART2_UART_Init+0x58>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a26:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <MX_USART2_UART_Init+0x58>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <MX_USART2_UART_Init+0x58>)
 8000a2e:	220c      	movs	r2, #12
 8000a30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a32:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <MX_USART2_UART_Init+0x58>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a38:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <MX_USART2_UART_Init+0x58>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a3e:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <MX_USART2_UART_Init+0x58>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a44:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <MX_USART2_UART_Init+0x58>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a4a:	4805      	ldr	r0, [pc, #20]	; (8000a60 <MX_USART2_UART_Init+0x58>)
 8000a4c:	f005 faac 	bl	8005fa8 <HAL_UART_Init>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a56:	f000 f90f 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	200001cc 	.word	0x200001cc
 8000a64:	40004400 	.word	0x40004400

08000a68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a6e:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <MX_DMA_Init+0x38>)
 8000a70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a72:	4a0b      	ldr	r2, [pc, #44]	; (8000aa0 <MX_DMA_Init+0x38>)
 8000a74:	f043 0301 	orr.w	r3, r3, #1
 8000a78:	6493      	str	r3, [r2, #72]	; 0x48
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <MX_DMA_Init+0x38>)
 8000a7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2100      	movs	r1, #0
 8000a8a:	200b      	movs	r0, #11
 8000a8c:	f002 f849 	bl	8002b22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a90:	200b      	movs	r0, #11
 8000a92:	f002 f862 	bl	8002b5a <HAL_NVIC_EnableIRQ>

}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40021000 	.word	0x40021000

08000aa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08a      	sub	sp, #40	; 0x28
 8000aa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aaa:	f107 0314 	add.w	r3, r7, #20
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
 8000ab6:	60da      	str	r2, [r3, #12]
 8000ab8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b2b      	ldr	r3, [pc, #172]	; (8000b68 <MX_GPIO_Init+0xc4>)
 8000abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000abe:	4a2a      	ldr	r2, [pc, #168]	; (8000b68 <MX_GPIO_Init+0xc4>)
 8000ac0:	f043 0304 	orr.w	r3, r3, #4
 8000ac4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac6:	4b28      	ldr	r3, [pc, #160]	; (8000b68 <MX_GPIO_Init+0xc4>)
 8000ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aca:	f003 0304 	and.w	r3, r3, #4
 8000ace:	613b      	str	r3, [r7, #16]
 8000ad0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ad2:	4b25      	ldr	r3, [pc, #148]	; (8000b68 <MX_GPIO_Init+0xc4>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad6:	4a24      	ldr	r2, [pc, #144]	; (8000b68 <MX_GPIO_Init+0xc4>)
 8000ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000adc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ade:	4b22      	ldr	r3, [pc, #136]	; (8000b68 <MX_GPIO_Init+0xc4>)
 8000ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aea:	4b1f      	ldr	r3, [pc, #124]	; (8000b68 <MX_GPIO_Init+0xc4>)
 8000aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aee:	4a1e      	ldr	r2, [pc, #120]	; (8000b68 <MX_GPIO_Init+0xc4>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af6:	4b1c      	ldr	r3, [pc, #112]	; (8000b68 <MX_GPIO_Init+0xc4>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b02:	4b19      	ldr	r3, [pc, #100]	; (8000b68 <MX_GPIO_Init+0xc4>)
 8000b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b06:	4a18      	ldr	r2, [pc, #96]	; (8000b68 <MX_GPIO_Init+0xc4>)
 8000b08:	f043 0302 	orr.w	r3, r3, #2
 8000b0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b0e:	4b16      	ldr	r3, [pc, #88]	; (8000b68 <MX_GPIO_Init+0xc4>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b12:	f003 0302 	and.w	r3, r3, #2
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2120      	movs	r1, #32
 8000b1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b22:	f002 fc13 	bl	800334c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	; (8000b6c <MX_GPIO_Init+0xc8>)
 8000b2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	4619      	mov	r1, r3
 8000b3a:	480d      	ldr	r0, [pc, #52]	; (8000b70 <MX_GPIO_Init+0xcc>)
 8000b3c:	f002 fa5e 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b40:	2320      	movs	r3, #32
 8000b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b44:	2301      	movs	r3, #1
 8000b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4619      	mov	r1, r3
 8000b56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b5a:	f002 fa4f 	bl	8002ffc <HAL_GPIO_Init>

}
 8000b5e:	bf00      	nop
 8000b60:	3728      	adds	r7, #40	; 0x28
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	10210000 	.word	0x10210000
 8000b70:	48000800 	.word	0x48000800

08000b74 <Set_Duty_Cycle>:

/* USER CODE BEGIN 4 */
void Set_Duty_Cycle(int Duty_Cycle)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b083      	sub	sp, #12
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
	//&htim1.Init.Period
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,Duty_Cycle);
 8000b7c:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <Set_Duty_Cycle+0x38>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	687a      	ldr	r2, [r7, #4]
 8000b82:	635a      	str	r2, [r3, #52]	; 0x34
	if (Duty_Cycle>F_TIM1-1)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f5b3 7f05 	cmp.w	r3, #532	; 0x214
 8000b8a:	d903      	bls.n	8000b94 <Set_Duty_Cycle+0x20>
	{
		Duty_Cycle= F_TIM1 -1;
 8000b8c:	f44f 7305 	mov.w	r3, #532	; 0x214
 8000b90:	607b      	str	r3, [r7, #4]
	} else if (Duty_Cycle<1)
	{
		Duty_Cycle=1;
	}
}
 8000b92:	e004      	b.n	8000b9e <Set_Duty_Cycle+0x2a>
	} else if (Duty_Cycle<1)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	dc01      	bgt.n	8000b9e <Set_Duty_Cycle+0x2a>
		Duty_Cycle=1;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	607b      	str	r3, [r7, #4]
}
 8000b9e:	bf00      	nop
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	20000134 	.word	0x20000134

08000bb0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]

	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000bb8:	2120      	movs	r1, #32
 8000bba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bbe:	f002 fbdd 	bl	800337c <HAL_GPIO_TogglePin>
	//HAL_ADC_ConfigChannel(&hadc1, );
	//HAL_ADC_Start(&hadc1);
	//HAL_ADC_PollForConversion(&hadc1, 1000);
	HAL_ADCEx_Calibration_Start(&hadc1,ADC_SINGLE_ENDED);
 8000bc2:	217f      	movs	r1, #127	; 0x7f
 8000bc4:	480d      	ldr	r0, [pc, #52]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000bc6:	f001 fdc4 	bl	8002752 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, ADC_buffer, ADC_BUFFER_SIZE);
 8000bca:	2203      	movs	r2, #3
 8000bcc:	490c      	ldr	r1, [pc, #48]	; (8000c00 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000bce:	480b      	ldr	r0, [pc, #44]	; (8000bfc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000bd0:	f000 fe5a 	bl	8001888 <HAL_ADC_Start_DMA>
	//Vout_mon = HAL_ADC_GetValue(&hadc1);
	Vout_mon = ADC_buffer[0];
 8000bd4:	4b0a      	ldr	r3, [pc, #40]	; (8000c00 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000bdc:	601a      	str	r2, [r3, #0]
	Vin_mon = ADC_buffer[1];
 8000bde:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	461a      	mov	r2, r3
 8000be4:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000be6:	601a      	str	r2, [r3, #0]
	I_mon = ADC_buffer[2];
 8000be8:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	461a      	mov	r2, r3
 8000bee:	4b07      	ldr	r3, [pc, #28]	; (8000c0c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000bf0:	601a      	str	r2, [r3, #0]
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000088 	.word	0x20000088
 8000c00:	2000024c 	.word	0x2000024c
 8000c04:	2000002c 	.word	0x2000002c
 8000c08:	20000030 	.word	0x20000030
 8000c0c:	20000034 	.word	0x20000034

08000c10 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(&hadc1);
 8000c18:	4803      	ldr	r0, [pc, #12]	; (8000c28 <HAL_ADC_ConvCpltCallback+0x18>)
 8000c1a:	f000 fee9 	bl	80019f0 <HAL_ADC_Stop_DMA>
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20000088 	.word	0x20000088

08000c2c <RegulateCV>:
{
	Duty_Cycle=(target)*F_TIM1;
}

void RegulateCV(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
	if (Vout_mon<Vout_Ordered)
 8000c30:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <RegulateCV+0x40>)
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <RegulateCV+0x44>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	da05      	bge.n	8000c48 <RegulateCV+0x1c>
	{
		Duty_Cycle++;
 8000c3c:	4b0d      	ldr	r3, [pc, #52]	; (8000c74 <RegulateCV+0x48>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	3301      	adds	r3, #1
 8000c42:	4a0c      	ldr	r2, [pc, #48]	; (8000c74 <RegulateCV+0x48>)
 8000c44:	6013      	str	r3, [r2, #0]
 8000c46:	e00a      	b.n	8000c5e <RegulateCV+0x32>
	} else if(Vout_mon>Vout_Ordered)
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <RegulateCV+0x40>)
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <RegulateCV+0x44>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	dd04      	ble.n	8000c5e <RegulateCV+0x32>
	{
		Duty_Cycle--;
 8000c54:	4b07      	ldr	r3, [pc, #28]	; (8000c74 <RegulateCV+0x48>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	3b01      	subs	r3, #1
 8000c5a:	4a06      	ldr	r2, [pc, #24]	; (8000c74 <RegulateCV+0x48>)
 8000c5c:	6013      	str	r3, [r2, #0]
	}
	Set_Duty_Cycle(Duty_Cycle);
 8000c5e:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <RegulateCV+0x48>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff ff86 	bl	8000b74 <Set_Duty_Cycle>
}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	2000002c 	.word	0x2000002c
 8000c70:	20000038 	.word	0x20000038
 8000c74:	20000028 	.word	0x20000028

08000c78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
	...

08000c88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8e:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <HAL_MspInit+0x44>)
 8000c90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c92:	4a0e      	ldr	r2, [pc, #56]	; (8000ccc <HAL_MspInit+0x44>)
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	6613      	str	r3, [r2, #96]	; 0x60
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <HAL_MspInit+0x44>)
 8000c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	607b      	str	r3, [r7, #4]
 8000ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca6:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <HAL_MspInit+0x44>)
 8000ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000caa:	4a08      	ldr	r2, [pc, #32]	; (8000ccc <HAL_MspInit+0x44>)
 8000cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb0:	6593      	str	r3, [r2, #88]	; 0x58
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_MspInit+0x44>)
 8000cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cba:	603b      	str	r3, [r7, #0]
 8000cbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	40021000 	.word	0x40021000

08000cd0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08a      	sub	sp, #40	; 0x28
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a2a      	ldr	r2, [pc, #168]	; (8000d98 <HAL_ADC_MspInit+0xc8>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d14e      	bne.n	8000d90 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000cf2:	4b2a      	ldr	r3, [pc, #168]	; (8000d9c <HAL_ADC_MspInit+0xcc>)
 8000cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf6:	4a29      	ldr	r2, [pc, #164]	; (8000d9c <HAL_ADC_MspInit+0xcc>)
 8000cf8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000cfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cfe:	4b27      	ldr	r3, [pc, #156]	; (8000d9c <HAL_ADC_MspInit+0xcc>)
 8000d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d06:	613b      	str	r3, [r7, #16]
 8000d08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0a:	4b24      	ldr	r3, [pc, #144]	; (8000d9c <HAL_ADC_MspInit+0xcc>)
 8000d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0e:	4a23      	ldr	r2, [pc, #140]	; (8000d9c <HAL_ADC_MspInit+0xcc>)
 8000d10:	f043 0304 	orr.w	r3, r3, #4
 8000d14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d16:	4b21      	ldr	r3, [pc, #132]	; (8000d9c <HAL_ADC_MspInit+0xcc>)
 8000d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1a:	f003 0304 	and.w	r3, r3, #4
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000d22:	2307      	movs	r3, #7
 8000d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d26:	230b      	movs	r3, #11
 8000d28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d2e:	f107 0314 	add.w	r3, r7, #20
 8000d32:	4619      	mov	r1, r3
 8000d34:	481a      	ldr	r0, [pc, #104]	; (8000da0 <HAL_ADC_MspInit+0xd0>)
 8000d36:	f002 f961 	bl	8002ffc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000d3a:	4b1a      	ldr	r3, [pc, #104]	; (8000da4 <HAL_ADC_MspInit+0xd4>)
 8000d3c:	4a1a      	ldr	r2, [pc, #104]	; (8000da8 <HAL_ADC_MspInit+0xd8>)
 8000d3e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000d40:	4b18      	ldr	r3, [pc, #96]	; (8000da4 <HAL_ADC_MspInit+0xd4>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d46:	4b17      	ldr	r3, [pc, #92]	; (8000da4 <HAL_ADC_MspInit+0xd4>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d4c:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <HAL_ADC_MspInit+0xd4>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d52:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <HAL_ADC_MspInit+0xd4>)
 8000d54:	2280      	movs	r2, #128	; 0x80
 8000d56:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d58:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <HAL_ADC_MspInit+0xd4>)
 8000d5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d5e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d60:	4b10      	ldr	r3, [pc, #64]	; (8000da4 <HAL_ADC_MspInit+0xd4>)
 8000d62:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d66:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000d68:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <HAL_ADC_MspInit+0xd4>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d6e:	4b0d      	ldr	r3, [pc, #52]	; (8000da4 <HAL_ADC_MspInit+0xd4>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d74:	480b      	ldr	r0, [pc, #44]	; (8000da4 <HAL_ADC_MspInit+0xd4>)
 8000d76:	f001 ff0b 	bl	8002b90 <HAL_DMA_Init>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <HAL_ADC_MspInit+0xb4>
    {
      Error_Handler();
 8000d80:	f7ff ff7a 	bl	8000c78 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4a07      	ldr	r2, [pc, #28]	; (8000da4 <HAL_ADC_MspInit+0xd4>)
 8000d88:	64da      	str	r2, [r3, #76]	; 0x4c
 8000d8a:	4a06      	ldr	r2, [pc, #24]	; (8000da4 <HAL_ADC_MspInit+0xd4>)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d90:	bf00      	nop
 8000d92:	3728      	adds	r7, #40	; 0x28
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	50040000 	.word	0x50040000
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	48000800 	.word	0x48000800
 8000da4:	200000ec 	.word	0x200000ec
 8000da8:	40020008 	.word	0x40020008

08000dac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a23      	ldr	r2, [pc, #140]	; (8000e48 <HAL_TIM_Base_MspInit+0x9c>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d10c      	bne.n	8000dd8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dbe:	4b23      	ldr	r3, [pc, #140]	; (8000e4c <HAL_TIM_Base_MspInit+0xa0>)
 8000dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dc2:	4a22      	ldr	r2, [pc, #136]	; (8000e4c <HAL_TIM_Base_MspInit+0xa0>)
 8000dc4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000dc8:	6613      	str	r3, [r2, #96]	; 0x60
 8000dca:	4b20      	ldr	r3, [pc, #128]	; (8000e4c <HAL_TIM_Base_MspInit+0xa0>)
 8000dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000dd2:	617b      	str	r3, [r7, #20]
 8000dd4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000dd6:	e032      	b.n	8000e3e <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM2)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000de0:	d114      	bne.n	8000e0c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000de2:	4b1a      	ldr	r3, [pc, #104]	; (8000e4c <HAL_TIM_Base_MspInit+0xa0>)
 8000de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de6:	4a19      	ldr	r2, [pc, #100]	; (8000e4c <HAL_TIM_Base_MspInit+0xa0>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	6593      	str	r3, [r2, #88]	; 0x58
 8000dee:	4b17      	ldr	r3, [pc, #92]	; (8000e4c <HAL_TIM_Base_MspInit+0xa0>)
 8000df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	613b      	str	r3, [r7, #16]
 8000df8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2102      	movs	r1, #2
 8000dfe:	201c      	movs	r0, #28
 8000e00:	f001 fe8f 	bl	8002b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e04:	201c      	movs	r0, #28
 8000e06:	f001 fea8 	bl	8002b5a <HAL_NVIC_EnableIRQ>
}
 8000e0a:	e018      	b.n	8000e3e <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM3)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a0f      	ldr	r2, [pc, #60]	; (8000e50 <HAL_TIM_Base_MspInit+0xa4>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d113      	bne.n	8000e3e <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e16:	4b0d      	ldr	r3, [pc, #52]	; (8000e4c <HAL_TIM_Base_MspInit+0xa0>)
 8000e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e1a:	4a0c      	ldr	r2, [pc, #48]	; (8000e4c <HAL_TIM_Base_MspInit+0xa0>)
 8000e1c:	f043 0302 	orr.w	r3, r3, #2
 8000e20:	6593      	str	r3, [r2, #88]	; 0x58
 8000e22:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <HAL_TIM_Base_MspInit+0xa0>)
 8000e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2100      	movs	r1, #0
 8000e32:	201d      	movs	r0, #29
 8000e34:	f001 fe75 	bl	8002b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e38:	201d      	movs	r0, #29
 8000e3a:	f001 fe8e 	bl	8002b5a <HAL_NVIC_EnableIRQ>
}
 8000e3e:	bf00      	nop
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40012c00 	.word	0x40012c00
 8000e4c:	40021000 	.word	0x40021000
 8000e50:	40000400 	.word	0x40000400

08000e54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b088      	sub	sp, #32
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5c:	f107 030c 	add.w	r3, r7, #12
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a12      	ldr	r2, [pc, #72]	; (8000ebc <HAL_TIM_MspPostInit+0x68>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d11d      	bne.n	8000eb2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e76:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <HAL_TIM_MspPostInit+0x6c>)
 8000e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7a:	4a11      	ldr	r2, [pc, #68]	; (8000ec0 <HAL_TIM_MspPostInit+0x6c>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e82:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <HAL_TIM_MspPostInit+0x6c>)
 8000e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	60bb      	str	r3, [r7, #8]
 8000e8c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000e8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e92:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e94:	2302      	movs	r3, #2
 8000e96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea4:	f107 030c 	add.w	r3, r7, #12
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eae:	f002 f8a5 	bl	8002ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000eb2:	bf00      	nop
 8000eb4:	3720      	adds	r7, #32
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40012c00 	.word	0x40012c00
 8000ec0:	40021000 	.word	0x40021000

08000ec4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08a      	sub	sp, #40	; 0x28
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a17      	ldr	r2, [pc, #92]	; (8000f40 <HAL_UART_MspInit+0x7c>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d128      	bne.n	8000f38 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ee6:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <HAL_UART_MspInit+0x80>)
 8000ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eea:	4a16      	ldr	r2, [pc, #88]	; (8000f44 <HAL_UART_MspInit+0x80>)
 8000eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ef2:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <HAL_UART_MspInit+0x80>)
 8000ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efe:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <HAL_UART_MspInit+0x80>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	4a10      	ldr	r2, [pc, #64]	; (8000f44 <HAL_UART_MspInit+0x80>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <HAL_UART_MspInit+0x80>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f16:	230c      	movs	r3, #12
 8000f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f22:	2303      	movs	r3, #3
 8000f24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f26:	2307      	movs	r3, #7
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2a:	f107 0314 	add.w	r3, r7, #20
 8000f2e:	4619      	mov	r1, r3
 8000f30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f34:	f002 f862 	bl	8002ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f38:	bf00      	nop
 8000f3a:	3728      	adds	r7, #40	; 0x28
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40004400 	.word	0x40004400
 8000f44:	40021000 	.word	0x40021000

08000f48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f5a:	e7fe      	b.n	8000f5a <HardFault_Handler+0x4>

08000f5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <MemManage_Handler+0x4>

08000f62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f66:	e7fe      	b.n	8000f66 <BusFault_Handler+0x4>

08000f68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <UsageFault_Handler+0x4>

08000f6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f9c:	f000 f8dc 	bl	8001158 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000fa8:	4802      	ldr	r0, [pc, #8]	; (8000fb4 <DMA1_Channel1_IRQHandler+0x10>)
 8000faa:	f001 ff47 	bl	8002e3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	200000ec 	.word	0x200000ec

08000fb8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fbc:	4802      	ldr	r0, [pc, #8]	; (8000fc8 <TIM2_IRQHandler+0x10>)
 8000fbe:	f003 ff8d 	bl	8004edc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000180 	.word	0x20000180

08000fcc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000fd0:	4802      	ldr	r0, [pc, #8]	; (8000fdc <TIM3_IRQHandler+0x10>)
 8000fd2:	f003 ff83 	bl	8004edc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	2000003c 	.word	0x2000003c

08000fe0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fe4:	4b17      	ldr	r3, [pc, #92]	; (8001044 <SystemInit+0x64>)
 8000fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fea:	4a16      	ldr	r2, [pc, #88]	; (8001044 <SystemInit+0x64>)
 8000fec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ff0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ff4:	4b14      	ldr	r3, [pc, #80]	; (8001048 <SystemInit+0x68>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a13      	ldr	r2, [pc, #76]	; (8001048 <SystemInit+0x68>)
 8000ffa:	f043 0301 	orr.w	r3, r3, #1
 8000ffe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001000:	4b11      	ldr	r3, [pc, #68]	; (8001048 <SystemInit+0x68>)
 8001002:	2200      	movs	r2, #0
 8001004:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001006:	4b10      	ldr	r3, [pc, #64]	; (8001048 <SystemInit+0x68>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a0f      	ldr	r2, [pc, #60]	; (8001048 <SystemInit+0x68>)
 800100c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001010:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001014:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001016:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <SystemInit+0x68>)
 8001018:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800101c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800101e:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <SystemInit+0x68>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a09      	ldr	r2, [pc, #36]	; (8001048 <SystemInit+0x68>)
 8001024:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001028:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800102a:	4b07      	ldr	r3, [pc, #28]	; (8001048 <SystemInit+0x68>)
 800102c:	2200      	movs	r2, #0
 800102e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001030:	4b04      	ldr	r3, [pc, #16]	; (8001044 <SystemInit+0x64>)
 8001032:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001036:	609a      	str	r2, [r3, #8]
#endif
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	e000ed00 	.word	0xe000ed00
 8001048:	40021000 	.word	0x40021000

0800104c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800104c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001084 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001050:	f7ff ffc6 	bl	8000fe0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001054:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001056:	e003      	b.n	8001060 <LoopCopyDataInit>

08001058 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001058:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800105a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800105c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800105e:	3104      	adds	r1, #4

08001060 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001060:	480a      	ldr	r0, [pc, #40]	; (800108c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001062:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001064:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001066:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001068:	d3f6      	bcc.n	8001058 <CopyDataInit>
	ldr	r2, =_sbss
 800106a:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <LoopForever+0x12>)
	b	LoopFillZerobss
 800106c:	e002      	b.n	8001074 <LoopFillZerobss>

0800106e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800106e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001070:	f842 3b04 	str.w	r3, [r2], #4

08001074 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001074:	4b08      	ldr	r3, [pc, #32]	; (8001098 <LoopForever+0x16>)
	cmp	r2, r3
 8001076:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001078:	d3f9      	bcc.n	800106e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800107a:	f005 fbcf 	bl	800681c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800107e:	f7ff fa23 	bl	80004c8 <main>

08001082 <LoopForever>:

LoopForever:
    b LoopForever
 8001082:	e7fe      	b.n	8001082 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001084:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001088:	080068e4 	.word	0x080068e4
	ldr	r0, =_sdata
 800108c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001090:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001094:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001098:	2000025c 	.word	0x2000025c

0800109c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800109c:	e7fe      	b.n	800109c <ADC1_2_IRQHandler>
	...

080010a0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010a6:	2300      	movs	r3, #0
 80010a8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010aa:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <HAL_Init+0x3c>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a0b      	ldr	r2, [pc, #44]	; (80010dc <HAL_Init+0x3c>)
 80010b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010b4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010b6:	2003      	movs	r0, #3
 80010b8:	f001 fd28 	bl	8002b0c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010bc:	2000      	movs	r0, #0
 80010be:	f000 f80f 	bl	80010e0 <HAL_InitTick>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d002      	beq.n	80010ce <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	71fb      	strb	r3, [r7, #7]
 80010cc:	e001      	b.n	80010d2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010ce:	f7ff fddb 	bl	8000c88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010d2:	79fb      	ldrb	r3, [r7, #7]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40022000 	.word	0x40022000

080010e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010e8:	2300      	movs	r3, #0
 80010ea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80010ec:	4b17      	ldr	r3, [pc, #92]	; (800114c <HAL_InitTick+0x6c>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d023      	beq.n	800113c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010f4:	4b16      	ldr	r3, [pc, #88]	; (8001150 <HAL_InitTick+0x70>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4b14      	ldr	r3, [pc, #80]	; (800114c <HAL_InitTick+0x6c>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	4619      	mov	r1, r3
 80010fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001102:	fbb3 f3f1 	udiv	r3, r3, r1
 8001106:	fbb2 f3f3 	udiv	r3, r2, r3
 800110a:	4618      	mov	r0, r3
 800110c:	f001 fd33 	bl	8002b76 <HAL_SYSTICK_Config>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d10f      	bne.n	8001136 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2b0f      	cmp	r3, #15
 800111a:	d809      	bhi.n	8001130 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800111c:	2200      	movs	r2, #0
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	f04f 30ff 	mov.w	r0, #4294967295
 8001124:	f001 fcfd 	bl	8002b22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001128:	4a0a      	ldr	r2, [pc, #40]	; (8001154 <HAL_InitTick+0x74>)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6013      	str	r3, [r2, #0]
 800112e:	e007      	b.n	8001140 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	73fb      	strb	r3, [r7, #15]
 8001134:	e004      	b.n	8001140 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	73fb      	strb	r3, [r7, #15]
 800113a:	e001      	b.n	8001140 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001140:	7bfb      	ldrb	r3, [r7, #15]
}
 8001142:	4618      	mov	r0, r3
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000008 	.word	0x20000008
 8001150:	20000000 	.word	0x20000000
 8001154:	20000004 	.word	0x20000004

08001158 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <HAL_IncTick+0x20>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	461a      	mov	r2, r3
 8001162:	4b06      	ldr	r3, [pc, #24]	; (800117c <HAL_IncTick+0x24>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4413      	add	r3, r2
 8001168:	4a04      	ldr	r2, [pc, #16]	; (800117c <HAL_IncTick+0x24>)
 800116a:	6013      	str	r3, [r2, #0]
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	20000008 	.word	0x20000008
 800117c:	20000258 	.word	0x20000258

08001180 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  return uwTick;
 8001184:	4b03      	ldr	r3, [pc, #12]	; (8001194 <HAL_GetTick+0x14>)
 8001186:	681b      	ldr	r3, [r3, #0]
}
 8001188:	4618      	mov	r0, r3
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	20000258 	.word	0x20000258

08001198 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	431a      	orrs	r2, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	609a      	str	r2, [r3, #8]
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80011be:	b480      	push	{r7}
 80011c0:	b083      	sub	sp, #12
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
 80011c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	431a      	orrs	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	609a      	str	r2, [r3, #8]
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001200:	b480      	push	{r7}
 8001202:	b087      	sub	sp, #28
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	60b9      	str	r1, [r7, #8]
 800120a:	607a      	str	r2, [r7, #4]
 800120c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	3360      	adds	r3, #96	; 0x60
 8001212:	461a      	mov	r2, r3
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	4413      	add	r3, r2
 800121a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4b08      	ldr	r3, [pc, #32]	; (8001244 <LL_ADC_SetOffset+0x44>)
 8001222:	4013      	ands	r3, r2
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800122a:	683a      	ldr	r2, [r7, #0]
 800122c:	430a      	orrs	r2, r1
 800122e:	4313      	orrs	r3, r2
 8001230:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001238:	bf00      	nop
 800123a:	371c      	adds	r7, #28
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	03fff000 	.word	0x03fff000

08001248 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	3360      	adds	r3, #96	; 0x60
 8001256:	461a      	mov	r2, r3
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	4413      	add	r3, r2
 800125e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001268:	4618      	mov	r0, r3
 800126a:	3714      	adds	r7, #20
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001274:	b480      	push	{r7}
 8001276:	b087      	sub	sp, #28
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	3360      	adds	r3, #96	; 0x60
 8001284:	461a      	mov	r2, r3
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	4413      	add	r3, r2
 800128c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	431a      	orrs	r2, r3
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800129e:	bf00      	nop
 80012a0:	371c      	adds	r7, #28
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr

080012aa <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80012aa:	b480      	push	{r7}
 80012ac:	b083      	sub	sp, #12
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d101      	bne.n	80012c2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80012be:	2301      	movs	r3, #1
 80012c0:	e000      	b.n	80012c4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b087      	sub	sp, #28
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	3330      	adds	r3, #48	; 0x30
 80012e0:	461a      	mov	r2, r3
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	0a1b      	lsrs	r3, r3, #8
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	f003 030c 	and.w	r3, r3, #12
 80012ec:	4413      	add	r3, r2
 80012ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	f003 031f 	and.w	r3, r3, #31
 80012fa:	211f      	movs	r1, #31
 80012fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001300:	43db      	mvns	r3, r3
 8001302:	401a      	ands	r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	0e9b      	lsrs	r3, r3, #26
 8001308:	f003 011f 	and.w	r1, r3, #31
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	f003 031f 	and.w	r3, r3, #31
 8001312:	fa01 f303 	lsl.w	r3, r1, r3
 8001316:	431a      	orrs	r2, r3
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800131c:	bf00      	nop
 800131e:	371c      	adds	r7, #28
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001328:	b480      	push	{r7}
 800132a:	b087      	sub	sp, #28
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	3314      	adds	r3, #20
 8001338:	461a      	mov	r2, r3
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	0e5b      	lsrs	r3, r3, #25
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	f003 0304 	and.w	r3, r3, #4
 8001344:	4413      	add	r3, r2
 8001346:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	0d1b      	lsrs	r3, r3, #20
 8001350:	f003 031f 	and.w	r3, r3, #31
 8001354:	2107      	movs	r1, #7
 8001356:	fa01 f303 	lsl.w	r3, r1, r3
 800135a:	43db      	mvns	r3, r3
 800135c:	401a      	ands	r2, r3
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	0d1b      	lsrs	r3, r3, #20
 8001362:	f003 031f 	and.w	r3, r3, #31
 8001366:	6879      	ldr	r1, [r7, #4]
 8001368:	fa01 f303 	lsl.w	r3, r1, r3
 800136c:	431a      	orrs	r2, r3
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001372:	bf00      	nop
 8001374:	371c      	adds	r7, #28
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
	...

08001380 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001398:	43db      	mvns	r3, r3
 800139a:	401a      	ands	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f003 0318 	and.w	r3, r3, #24
 80013a2:	4908      	ldr	r1, [pc, #32]	; (80013c4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80013a4:	40d9      	lsrs	r1, r3
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	400b      	ands	r3, r1
 80013aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013ae:	431a      	orrs	r2, r3
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80013b6:	bf00      	nop
 80013b8:	3714      	adds	r7, #20
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	0007ffff 	.word	0x0007ffff

080013c8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	f003 031f 	and.w	r3, r3, #31
}
 80013d8:	4618      	mov	r0, r3
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80013f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	6093      	str	r3, [r2, #8]
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001418:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800141c:	d101      	bne.n	8001422 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800141e:	2301      	movs	r3, #1
 8001420:	e000      	b.n	8001424 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001422:	2300      	movs	r3, #0
}
 8001424:	4618      	mov	r0, r3
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001440:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001444:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001468:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800146c:	d101      	bne.n	8001472 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800146e:	2301      	movs	r3, #1
 8001470:	e000      	b.n	8001474 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001472:	2300      	movs	r3, #0
}
 8001474:	4618      	mov	r0, r3
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001490:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001494:	f043 0201 	orr.w	r2, r3, #1
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80014b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014bc:	f043 0202 	orr.w	r2, r3, #2
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d101      	bne.n	80014e8 <LL_ADC_IsEnabled+0x18>
 80014e4:	2301      	movs	r3, #1
 80014e6:	e000      	b.n	80014ea <LL_ADC_IsEnabled+0x1a>
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b083      	sub	sp, #12
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b02      	cmp	r3, #2
 8001508:	d101      	bne.n	800150e <LL_ADC_IsDisableOngoing+0x18>
 800150a:	2301      	movs	r3, #1
 800150c:	e000      	b.n	8001510 <LL_ADC_IsDisableOngoing+0x1a>
 800150e:	2300      	movs	r3, #0
}
 8001510:	4618      	mov	r0, r3
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800152c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001530:	f043 0204 	orr.w	r2, r3, #4
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001554:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001558:	f043 0210 	orr.w	r2, r3, #16
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	f003 0304 	and.w	r3, r3, #4
 800157c:	2b04      	cmp	r3, #4
 800157e:	d101      	bne.n	8001584 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001580:	2301      	movs	r3, #1
 8001582:	e000      	b.n	8001586 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001592:	b480      	push	{r7}
 8001594:	b083      	sub	sp, #12
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015a2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015a6:	f043 0220 	orr.w	r2, r3, #32
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr

080015ba <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80015ba:	b480      	push	{r7}
 80015bc:	b083      	sub	sp, #12
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f003 0308 	and.w	r3, r3, #8
 80015ca:	2b08      	cmp	r3, #8
 80015cc:	d101      	bne.n	80015d2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80015ce:	2301      	movs	r3, #1
 80015d0:	e000      	b.n	80015d4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80015d2:	2300      	movs	r3, #0
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015e0:	b590      	push	{r4, r7, lr}
 80015e2:	b089      	sub	sp, #36	; 0x24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015e8:	2300      	movs	r3, #0
 80015ea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e134      	b.n	8001864 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001604:	2b00      	cmp	r3, #0
 8001606:	d109      	bne.n	800161c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f7ff fb61 	bl	8000cd0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff fef1 	bl	8001408 <LL_ADC_IsDeepPowerDownEnabled>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d004      	beq.n	8001636 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff fed7 	bl	80013e4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff ff0c 	bl	8001458 <LL_ADC_IsInternalRegulatorEnabled>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d113      	bne.n	800166e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff fef0 	bl	8001430 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001650:	4b86      	ldr	r3, [pc, #536]	; (800186c <HAL_ADC_Init+0x28c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	099b      	lsrs	r3, r3, #6
 8001656:	4a86      	ldr	r2, [pc, #536]	; (8001870 <HAL_ADC_Init+0x290>)
 8001658:	fba2 2303 	umull	r2, r3, r2, r3
 800165c:	099b      	lsrs	r3, r3, #6
 800165e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001660:	e002      	b.n	8001668 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	3b01      	subs	r3, #1
 8001666:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1f9      	bne.n	8001662 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff fef0 	bl	8001458 <LL_ADC_IsInternalRegulatorEnabled>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d10d      	bne.n	800169a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001682:	f043 0210 	orr.w	r2, r3, #16
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168e:	f043 0201 	orr.w	r2, r3, #1
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff ff64 	bl	800156c <LL_ADC_REG_IsConversionOngoing>
 80016a4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016aa:	f003 0310 	and.w	r3, r3, #16
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	f040 80cf 	bne.w	8001852 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f040 80cb 	bne.w	8001852 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016c0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80016c4:	f043 0202 	orr.w	r2, r3, #2
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fefd 	bl	80014d0 <LL_ADC_IsEnabled>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d115      	bne.n	8001708 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80016dc:	4865      	ldr	r0, [pc, #404]	; (8001874 <HAL_ADC_Init+0x294>)
 80016de:	f7ff fef7 	bl	80014d0 <LL_ADC_IsEnabled>
 80016e2:	4604      	mov	r4, r0
 80016e4:	4864      	ldr	r0, [pc, #400]	; (8001878 <HAL_ADC_Init+0x298>)
 80016e6:	f7ff fef3 	bl	80014d0 <LL_ADC_IsEnabled>
 80016ea:	4603      	mov	r3, r0
 80016ec:	431c      	orrs	r4, r3
 80016ee:	4863      	ldr	r0, [pc, #396]	; (800187c <HAL_ADC_Init+0x29c>)
 80016f0:	f7ff feee 	bl	80014d0 <LL_ADC_IsEnabled>
 80016f4:	4603      	mov	r3, r0
 80016f6:	4323      	orrs	r3, r4
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d105      	bne.n	8001708 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	4619      	mov	r1, r3
 8001702:	485f      	ldr	r0, [pc, #380]	; (8001880 <HAL_ADC_Init+0x2a0>)
 8001704:	f7ff fd48 	bl	8001198 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	7e5b      	ldrb	r3, [r3, #25]
 800170c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001712:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001718:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800171e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001726:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001728:	4313      	orrs	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d106      	bne.n	8001744 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173a:	3b01      	subs	r3, #1
 800173c:	045b      	lsls	r3, r3, #17
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4313      	orrs	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001748:	2b00      	cmp	r3, #0
 800174a:	d009      	beq.n	8001760 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001750:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001758:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4313      	orrs	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	68da      	ldr	r2, [r3, #12]
 8001766:	4b47      	ldr	r3, [pc, #284]	; (8001884 <HAL_ADC_Init+0x2a4>)
 8001768:	4013      	ands	r3, r2
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	6812      	ldr	r2, [r2, #0]
 800176e:	69b9      	ldr	r1, [r7, #24]
 8001770:	430b      	orrs	r3, r1
 8001772:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff fef7 	bl	800156c <LL_ADC_REG_IsConversionOngoing>
 800177e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff ff18 	bl	80015ba <LL_ADC_INJ_IsConversionOngoing>
 800178a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d13d      	bne.n	800180e <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d13a      	bne.n	800180e <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800179c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017a4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80017a6:	4313      	orrs	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017b4:	f023 0302 	bic.w	r3, r3, #2
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	6812      	ldr	r2, [r2, #0]
 80017bc:	69b9      	ldr	r1, [r7, #24]
 80017be:	430b      	orrs	r3, r1
 80017c0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d118      	bne.n	80017fe <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	691b      	ldr	r3, [r3, #16]
 80017d2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80017d6:	f023 0304 	bic.w	r3, r3, #4
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80017e2:	4311      	orrs	r1, r2
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80017e8:	4311      	orrs	r1, r2
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80017ee:	430a      	orrs	r2, r1
 80017f0:	431a      	orrs	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f042 0201 	orr.w	r2, r2, #1
 80017fa:	611a      	str	r2, [r3, #16]
 80017fc:	e007      	b.n	800180e <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	691a      	ldr	r2, [r3, #16]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f022 0201 	bic.w	r2, r2, #1
 800180c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d10c      	bne.n	8001830 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181c:	f023 010f 	bic.w	r1, r3, #15
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	69db      	ldr	r3, [r3, #28]
 8001824:	1e5a      	subs	r2, r3, #1
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	430a      	orrs	r2, r1
 800182c:	631a      	str	r2, [r3, #48]	; 0x30
 800182e:	e007      	b.n	8001840 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f022 020f 	bic.w	r2, r2, #15
 800183e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001844:	f023 0303 	bic.w	r3, r3, #3
 8001848:	f043 0201 	orr.w	r2, r3, #1
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	655a      	str	r2, [r3, #84]	; 0x54
 8001850:	e007      	b.n	8001862 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001856:	f043 0210 	orr.w	r2, r3, #16
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001862:	7ffb      	ldrb	r3, [r7, #31]
}
 8001864:	4618      	mov	r0, r3
 8001866:	3724      	adds	r7, #36	; 0x24
 8001868:	46bd      	mov	sp, r7
 800186a:	bd90      	pop	{r4, r7, pc}
 800186c:	20000000 	.word	0x20000000
 8001870:	053e2d63 	.word	0x053e2d63
 8001874:	50040000 	.word	0x50040000
 8001878:	50040100 	.word	0x50040100
 800187c:	50040200 	.word	0x50040200
 8001880:	50040300 	.word	0x50040300
 8001884:	fff0c007 	.word	0xfff0c007

08001888 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001894:	4850      	ldr	r0, [pc, #320]	; (80019d8 <HAL_ADC_Start_DMA+0x150>)
 8001896:	f7ff fd97 	bl	80013c8 <LL_ADC_GetMultimode>
 800189a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff fe63 	bl	800156c <LL_ADC_REG_IsConversionOngoing>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f040 808e 	bne.w	80019ca <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d101      	bne.n	80018bc <HAL_ADC_Start_DMA+0x34>
 80018b8:	2302      	movs	r3, #2
 80018ba:	e089      	b.n	80019d0 <HAL_ADC_Start_DMA+0x148>
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2201      	movs	r2, #1
 80018c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d005      	beq.n	80018d6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	2b05      	cmp	r3, #5
 80018ce:	d002      	beq.n	80018d6 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	2b09      	cmp	r3, #9
 80018d4:	d172      	bne.n	80019bc <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80018d6:	68f8      	ldr	r0, [r7, #12]
 80018d8:	f000 fda2 	bl	8002420 <ADC_Enable>
 80018dc:	4603      	mov	r3, r0
 80018de:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80018e0:	7dfb      	ldrb	r3, [r7, #23]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d165      	bne.n	80019b2 <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ea:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80018ee:	f023 0301 	bic.w	r3, r3, #1
 80018f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a37      	ldr	r2, [pc, #220]	; (80019dc <HAL_ADC_Start_DMA+0x154>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d002      	beq.n	800190a <HAL_ADC_Start_DMA+0x82>
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	e000      	b.n	800190c <HAL_ADC_Start_DMA+0x84>
 800190a:	4b35      	ldr	r3, [pc, #212]	; (80019e0 <HAL_ADC_Start_DMA+0x158>)
 800190c:	68fa      	ldr	r2, [r7, #12]
 800190e:	6812      	ldr	r2, [r2, #0]
 8001910:	4293      	cmp	r3, r2
 8001912:	d002      	beq.n	800191a <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d105      	bne.n	8001926 <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800191e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800192a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d006      	beq.n	8001940 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001936:	f023 0206 	bic.w	r2, r3, #6
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	659a      	str	r2, [r3, #88]	; 0x58
 800193e:	e002      	b.n	8001946 <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2200      	movs	r2, #0
 8001944:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194a:	4a26      	ldr	r2, [pc, #152]	; (80019e4 <HAL_ADC_Start_DMA+0x15c>)
 800194c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001952:	4a25      	ldr	r2, [pc, #148]	; (80019e8 <HAL_ADC_Start_DMA+0x160>)
 8001954:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195a:	4a24      	ldr	r2, [pc, #144]	; (80019ec <HAL_ADC_Start_DMA+0x164>)
 800195c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	221c      	movs	r2, #28
 8001964:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2200      	movs	r2, #0
 800196a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	685a      	ldr	r2, [r3, #4]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f042 0210 	orr.w	r2, r2, #16
 800197c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	68da      	ldr	r2, [r3, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f042 0201 	orr.w	r2, r2, #1
 800198c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	3340      	adds	r3, #64	; 0x40
 8001998:	4619      	mov	r1, r3
 800199a:	68ba      	ldr	r2, [r7, #8]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f001 f9af 	bl	8002d00 <HAL_DMA_Start_IT>
 80019a2:	4603      	mov	r3, r0
 80019a4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff fdb6 	bl	800151c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80019b0:	e00d      	b.n	80019ce <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80019ba:	e008      	b.n	80019ce <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80019c8:	e001      	b.n	80019ce <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80019ca:	2302      	movs	r3, #2
 80019cc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80019ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3718      	adds	r7, #24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	50040300 	.word	0x50040300
 80019dc:	50040100 	.word	0x50040100
 80019e0:	50040000 	.word	0x50040000
 80019e4:	08002585 	.word	0x08002585
 80019e8:	0800265d 	.word	0x0800265d
 80019ec:	08002679 	.word	0x08002679

080019f0 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d101      	bne.n	8001a06 <HAL_ADC_Stop_DMA+0x16>
 8001a02:	2302      	movs	r3, #2
 8001a04:	e051      	b.n	8001aaa <HAL_ADC_Stop_DMA+0xba>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001a0e:	2103      	movs	r1, #3
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f000 fc51 	bl	80022b8 <ADC_ConversionStop>
 8001a16:	4603      	mov	r3, r0
 8001a18:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001a1a:	7bfb      	ldrb	r3, [r7, #15]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d13f      	bne.n	8001aa0 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	68da      	ldr	r2, [r3, #12]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f022 0201 	bic.w	r2, r2, #1
 8001a2e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a34:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d10f      	bne.n	8001a5e <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a42:	4618      	mov	r0, r3
 8001a44:	f001 f9bc 	bl	8002dc0 <HAL_DMA_Abort>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001a4c:	7bfb      	ldrb	r3, [r7, #15]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d005      	beq.n	8001a5e <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	685a      	ldr	r2, [r3, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f022 0210 	bic.w	r2, r2, #16
 8001a6c:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8001a6e:	7bfb      	ldrb	r3, [r7, #15]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d105      	bne.n	8001a80 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f000 fd2d 	bl	80024d4 <ADC_Disable>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	73fb      	strb	r3, [r7, #15]
 8001a7e:	e002      	b.n	8001a86 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f000 fd27 	bl	80024d4 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d109      	bne.n	8001aa0 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a90:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a94:	f023 0301 	bic.w	r3, r3, #1
 8001a98:	f043 0201 	orr.w	r2, r3, #1
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	655a      	str	r2, [r3, #84]	; 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b083      	sub	sp, #12
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	b083      	sub	sp, #12
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
	...

08001adc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b0b6      	sub	sp, #216	; 0xd8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d101      	bne.n	8001afe <HAL_ADC_ConfigChannel+0x22>
 8001afa:	2302      	movs	r3, #2
 8001afc:	e3c6      	b.n	800228c <HAL_ADC_ConfigChannel+0x7b0>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2201      	movs	r2, #1
 8001b02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff fd2e 	bl	800156c <LL_ADC_REG_IsConversionOngoing>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f040 83a7 	bne.w	8002266 <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2b05      	cmp	r3, #5
 8001b1e:	d824      	bhi.n	8001b6a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	3b02      	subs	r3, #2
 8001b26:	2b03      	cmp	r3, #3
 8001b28:	d81b      	bhi.n	8001b62 <HAL_ADC_ConfigChannel+0x86>
 8001b2a:	a201      	add	r2, pc, #4	; (adr r2, 8001b30 <HAL_ADC_ConfigChannel+0x54>)
 8001b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b30:	08001b41 	.word	0x08001b41
 8001b34:	08001b49 	.word	0x08001b49
 8001b38:	08001b51 	.word	0x08001b51
 8001b3c:	08001b59 	.word	0x08001b59
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	220c      	movs	r2, #12
 8001b44:	605a      	str	r2, [r3, #4]
          break;
 8001b46:	e011      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	2212      	movs	r2, #18
 8001b4c:	605a      	str	r2, [r3, #4]
          break;
 8001b4e:	e00d      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	2218      	movs	r2, #24
 8001b54:	605a      	str	r2, [r3, #4]
          break;
 8001b56:	e009      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b5e:	605a      	str	r2, [r3, #4]
          break;
 8001b60:	e004      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	2206      	movs	r2, #6
 8001b66:	605a      	str	r2, [r3, #4]
          break;
 8001b68:	e000      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001b6a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6818      	ldr	r0, [r3, #0]
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	6859      	ldr	r1, [r3, #4]
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	f7ff fba9 	bl	80012d0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff fcf2 	bl	800156c <LL_ADC_REG_IsConversionOngoing>
 8001b88:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff fd12 	bl	80015ba <LL_ADC_INJ_IsConversionOngoing>
 8001b96:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b9a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f040 81a6 	bne.w	8001ef0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ba4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f040 81a1 	bne.w	8001ef0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6818      	ldr	r0, [r3, #0]
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	6819      	ldr	r1, [r3, #0]
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	f7ff fbb4 	bl	8001328 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	695a      	ldr	r2, [r3, #20]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	08db      	lsrs	r3, r3, #3
 8001bcc:	f003 0303 	and.w	r3, r3, #3
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	2b04      	cmp	r3, #4
 8001be0:	d00a      	beq.n	8001bf8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6818      	ldr	r0, [r3, #0]
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	6919      	ldr	r1, [r3, #16]
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001bf2:	f7ff fb05 	bl	8001200 <LL_ADC_SetOffset>
 8001bf6:	e17b      	b.n	8001ef0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff fb22 	bl	8001248 <LL_ADC_GetOffsetChannel>
 8001c04:	4603      	mov	r3, r0
 8001c06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d10a      	bne.n	8001c24 <HAL_ADC_ConfigChannel+0x148>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2100      	movs	r1, #0
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff fb17 	bl	8001248 <LL_ADC_GetOffsetChannel>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	0e9b      	lsrs	r3, r3, #26
 8001c1e:	f003 021f 	and.w	r2, r3, #31
 8001c22:	e01e      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x186>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2100      	movs	r1, #0
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff fb0c 	bl	8001248 <LL_ADC_GetOffsetChannel>
 8001c30:	4603      	mov	r3, r0
 8001c32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c36:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001c3a:	fa93 f3a3 	rbit	r3, r3
 8001c3e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001c46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c4a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001c52:	2320      	movs	r3, #32
 8001c54:	e004      	b.n	8001c60 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001c56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c5a:	fab3 f383 	clz	r3, r3
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d105      	bne.n	8001c7a <HAL_ADC_ConfigChannel+0x19e>
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	0e9b      	lsrs	r3, r3, #26
 8001c74:	f003 031f 	and.w	r3, r3, #31
 8001c78:	e018      	b.n	8001cac <HAL_ADC_ConfigChannel+0x1d0>
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c82:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001c86:	fa93 f3a3 	rbit	r3, r3
 8001c8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001c8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001c96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d101      	bne.n	8001ca2 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001c9e:	2320      	movs	r3, #32
 8001ca0:	e004      	b.n	8001cac <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001ca2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ca6:	fab3 f383 	clz	r3, r3
 8001caa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d106      	bne.n	8001cbe <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff fadb 	bl	8001274 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff fabf 	bl	8001248 <LL_ADC_GetOffsetChannel>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d10a      	bne.n	8001cea <HAL_ADC_ConfigChannel+0x20e>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2101      	movs	r1, #1
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff fab4 	bl	8001248 <LL_ADC_GetOffsetChannel>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	0e9b      	lsrs	r3, r3, #26
 8001ce4:	f003 021f 	and.w	r2, r3, #31
 8001ce8:	e01e      	b.n	8001d28 <HAL_ADC_ConfigChannel+0x24c>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2101      	movs	r1, #1
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff faa9 	bl	8001248 <LL_ADC_GetOffsetChannel>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d00:	fa93 f3a3 	rbit	r3, r3
 8001d04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001d08:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001d0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001d10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d101      	bne.n	8001d1c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001d18:	2320      	movs	r3, #32
 8001d1a:	e004      	b.n	8001d26 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001d1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d20:	fab3 f383 	clz	r3, r3
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d105      	bne.n	8001d40 <HAL_ADC_ConfigChannel+0x264>
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	0e9b      	lsrs	r3, r3, #26
 8001d3a:	f003 031f 	and.w	r3, r3, #31
 8001d3e:	e018      	b.n	8001d72 <HAL_ADC_ConfigChannel+0x296>
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d4c:	fa93 f3a3 	rbit	r3, r3
 8001d50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001d54:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001d58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001d5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d101      	bne.n	8001d68 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001d64:	2320      	movs	r3, #32
 8001d66:	e004      	b.n	8001d72 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001d68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d6c:	fab3 f383 	clz	r3, r3
 8001d70:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d106      	bne.n	8001d84 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff fa78 	bl	8001274 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2102      	movs	r1, #2
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff fa5c 	bl	8001248 <LL_ADC_GetOffsetChannel>
 8001d90:	4603      	mov	r3, r0
 8001d92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d10a      	bne.n	8001db0 <HAL_ADC_ConfigChannel+0x2d4>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2102      	movs	r1, #2
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff fa51 	bl	8001248 <LL_ADC_GetOffsetChannel>
 8001da6:	4603      	mov	r3, r0
 8001da8:	0e9b      	lsrs	r3, r3, #26
 8001daa:	f003 021f 	and.w	r2, r3, #31
 8001dae:	e01e      	b.n	8001dee <HAL_ADC_ConfigChannel+0x312>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2102      	movs	r1, #2
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff fa46 	bl	8001248 <LL_ADC_GetOffsetChannel>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001dc6:	fa93 f3a3 	rbit	r3, r3
 8001dca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001dce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001dd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001dd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001dde:	2320      	movs	r3, #32
 8001de0:	e004      	b.n	8001dec <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001de2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001de6:	fab3 f383 	clz	r3, r3
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d105      	bne.n	8001e06 <HAL_ADC_ConfigChannel+0x32a>
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	0e9b      	lsrs	r3, r3, #26
 8001e00:	f003 031f 	and.w	r3, r3, #31
 8001e04:	e016      	b.n	8001e34 <HAL_ADC_ConfigChannel+0x358>
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e12:	fa93 f3a3 	rbit	r3, r3
 8001e16:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001e18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001e1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001e26:	2320      	movs	r3, #32
 8001e28:	e004      	b.n	8001e34 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001e2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e2e:	fab3 f383 	clz	r3, r3
 8001e32:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d106      	bne.n	8001e46 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	2102      	movs	r1, #2
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff fa17 	bl	8001274 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2103      	movs	r1, #3
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff f9fb 	bl	8001248 <LL_ADC_GetOffsetChannel>
 8001e52:	4603      	mov	r3, r0
 8001e54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d10a      	bne.n	8001e72 <HAL_ADC_ConfigChannel+0x396>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2103      	movs	r1, #3
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff f9f0 	bl	8001248 <LL_ADC_GetOffsetChannel>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	0e9b      	lsrs	r3, r3, #26
 8001e6c:	f003 021f 	and.w	r2, r3, #31
 8001e70:	e017      	b.n	8001ea2 <HAL_ADC_ConfigChannel+0x3c6>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2103      	movs	r1, #3
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff f9e5 	bl	8001248 <LL_ADC_GetOffsetChannel>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e84:	fa93 f3a3 	rbit	r3, r3
 8001e88:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001e8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e8c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001e8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001e94:	2320      	movs	r3, #32
 8001e96:	e003      	b.n	8001ea0 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001e98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e9a:	fab3 f383 	clz	r3, r3
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d105      	bne.n	8001eba <HAL_ADC_ConfigChannel+0x3de>
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	0e9b      	lsrs	r3, r3, #26
 8001eb4:	f003 031f 	and.w	r3, r3, #31
 8001eb8:	e011      	b.n	8001ede <HAL_ADC_ConfigChannel+0x402>
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ec2:	fa93 f3a3 	rbit	r3, r3
 8001ec6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001ec8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001eca:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001ecc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001ed2:	2320      	movs	r3, #32
 8001ed4:	e003      	b.n	8001ede <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001ed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ed8:	fab3 f383 	clz	r3, r3
 8001edc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d106      	bne.n	8001ef0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2103      	movs	r1, #3
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff f9c2 	bl	8001274 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff faeb 	bl	80014d0 <LL_ADC_IsEnabled>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f040 813f 	bne.w	8002180 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6818      	ldr	r0, [r3, #0]
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	6819      	ldr	r1, [r3, #0]
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	461a      	mov	r2, r3
 8001f10:	f7ff fa36 	bl	8001380 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	4a8e      	ldr	r2, [pc, #568]	; (8002154 <HAL_ADC_ConfigChannel+0x678>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	f040 8130 	bne.w	8002180 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d10b      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x46c>
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	0e9b      	lsrs	r3, r3, #26
 8001f36:	3301      	adds	r3, #1
 8001f38:	f003 031f 	and.w	r3, r3, #31
 8001f3c:	2b09      	cmp	r3, #9
 8001f3e:	bf94      	ite	ls
 8001f40:	2301      	movls	r3, #1
 8001f42:	2300      	movhi	r3, #0
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	e019      	b.n	8001f7c <HAL_ADC_ConfigChannel+0x4a0>
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f50:	fa93 f3a3 	rbit	r3, r3
 8001f54:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001f56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f58:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001f5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001f60:	2320      	movs	r3, #32
 8001f62:	e003      	b.n	8001f6c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001f64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f66:	fab3 f383 	clz	r3, r3
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	f003 031f 	and.w	r3, r3, #31
 8001f72:	2b09      	cmp	r3, #9
 8001f74:	bf94      	ite	ls
 8001f76:	2301      	movls	r3, #1
 8001f78:	2300      	movhi	r3, #0
 8001f7a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d079      	beq.n	8002074 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d107      	bne.n	8001f9c <HAL_ADC_ConfigChannel+0x4c0>
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	0e9b      	lsrs	r3, r3, #26
 8001f92:	3301      	adds	r3, #1
 8001f94:	069b      	lsls	r3, r3, #26
 8001f96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f9a:	e015      	b.n	8001fc8 <HAL_ADC_ConfigChannel+0x4ec>
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fa4:	fa93 f3a3 	rbit	r3, r3
 8001fa8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001faa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fac:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001fae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d101      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001fb4:	2320      	movs	r3, #32
 8001fb6:	e003      	b.n	8001fc0 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001fb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fba:	fab3 f383 	clz	r3, r3
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	069b      	lsls	r3, r3, #26
 8001fc4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d109      	bne.n	8001fe8 <HAL_ADC_ConfigChannel+0x50c>
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	0e9b      	lsrs	r3, r3, #26
 8001fda:	3301      	adds	r3, #1
 8001fdc:	f003 031f 	and.w	r3, r3, #31
 8001fe0:	2101      	movs	r1, #1
 8001fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe6:	e017      	b.n	8002018 <HAL_ADC_ConfigChannel+0x53c>
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ff0:	fa93 f3a3 	rbit	r3, r3
 8001ff4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001ff6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ff8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001ffa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d101      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002000:	2320      	movs	r3, #32
 8002002:	e003      	b.n	800200c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002006:	fab3 f383 	clz	r3, r3
 800200a:	b2db      	uxtb	r3, r3
 800200c:	3301      	adds	r3, #1
 800200e:	f003 031f 	and.w	r3, r3, #31
 8002012:	2101      	movs	r1, #1
 8002014:	fa01 f303 	lsl.w	r3, r1, r3
 8002018:	ea42 0103 	orr.w	r1, r2, r3
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002024:	2b00      	cmp	r3, #0
 8002026:	d10a      	bne.n	800203e <HAL_ADC_ConfigChannel+0x562>
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	0e9b      	lsrs	r3, r3, #26
 800202e:	3301      	adds	r3, #1
 8002030:	f003 021f 	and.w	r2, r3, #31
 8002034:	4613      	mov	r3, r2
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	4413      	add	r3, r2
 800203a:	051b      	lsls	r3, r3, #20
 800203c:	e018      	b.n	8002070 <HAL_ADC_ConfigChannel+0x594>
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002046:	fa93 f3a3 	rbit	r3, r3
 800204a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800204c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800204e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002056:	2320      	movs	r3, #32
 8002058:	e003      	b.n	8002062 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800205a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800205c:	fab3 f383 	clz	r3, r3
 8002060:	b2db      	uxtb	r3, r3
 8002062:	3301      	adds	r3, #1
 8002064:	f003 021f 	and.w	r2, r3, #31
 8002068:	4613      	mov	r3, r2
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	4413      	add	r3, r2
 800206e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002070:	430b      	orrs	r3, r1
 8002072:	e080      	b.n	8002176 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800207c:	2b00      	cmp	r3, #0
 800207e:	d107      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x5b4>
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	0e9b      	lsrs	r3, r3, #26
 8002086:	3301      	adds	r3, #1
 8002088:	069b      	lsls	r3, r3, #26
 800208a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800208e:	e015      	b.n	80020bc <HAL_ADC_ConfigChannel+0x5e0>
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002098:	fa93 f3a3 	rbit	r3, r3
 800209c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800209e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80020a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d101      	bne.n	80020ac <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80020a8:	2320      	movs	r3, #32
 80020aa:	e003      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80020ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ae:	fab3 f383 	clz	r3, r3
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	3301      	adds	r3, #1
 80020b6:	069b      	lsls	r3, r3, #26
 80020b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d109      	bne.n	80020dc <HAL_ADC_ConfigChannel+0x600>
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	0e9b      	lsrs	r3, r3, #26
 80020ce:	3301      	adds	r3, #1
 80020d0:	f003 031f 	and.w	r3, r3, #31
 80020d4:	2101      	movs	r1, #1
 80020d6:	fa01 f303 	lsl.w	r3, r1, r3
 80020da:	e017      	b.n	800210c <HAL_ADC_ConfigChannel+0x630>
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e2:	6a3b      	ldr	r3, [r7, #32]
 80020e4:	fa93 f3a3 	rbit	r3, r3
 80020e8:	61fb      	str	r3, [r7, #28]
  return result;
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d101      	bne.n	80020f8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80020f4:	2320      	movs	r3, #32
 80020f6:	e003      	b.n	8002100 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80020f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fa:	fab3 f383 	clz	r3, r3
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	3301      	adds	r3, #1
 8002102:	f003 031f 	and.w	r3, r3, #31
 8002106:	2101      	movs	r1, #1
 8002108:	fa01 f303 	lsl.w	r3, r1, r3
 800210c:	ea42 0103 	orr.w	r1, r2, r3
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002118:	2b00      	cmp	r3, #0
 800211a:	d10d      	bne.n	8002138 <HAL_ADC_ConfigChannel+0x65c>
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	0e9b      	lsrs	r3, r3, #26
 8002122:	3301      	adds	r3, #1
 8002124:	f003 021f 	and.w	r2, r3, #31
 8002128:	4613      	mov	r3, r2
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	4413      	add	r3, r2
 800212e:	3b1e      	subs	r3, #30
 8002130:	051b      	lsls	r3, r3, #20
 8002132:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002136:	e01d      	b.n	8002174 <HAL_ADC_ConfigChannel+0x698>
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	fa93 f3a3 	rbit	r3, r3
 8002144:	613b      	str	r3, [r7, #16]
  return result;
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d103      	bne.n	8002158 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002150:	2320      	movs	r3, #32
 8002152:	e005      	b.n	8002160 <HAL_ADC_ConfigChannel+0x684>
 8002154:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	fab3 f383 	clz	r3, r3
 800215e:	b2db      	uxtb	r3, r3
 8002160:	3301      	adds	r3, #1
 8002162:	f003 021f 	and.w	r2, r3, #31
 8002166:	4613      	mov	r3, r2
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	4413      	add	r3, r2
 800216c:	3b1e      	subs	r3, #30
 800216e:	051b      	lsls	r3, r3, #20
 8002170:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002174:	430b      	orrs	r3, r1
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	6892      	ldr	r2, [r2, #8]
 800217a:	4619      	mov	r1, r3
 800217c:	f7ff f8d4 	bl	8001328 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	4b43      	ldr	r3, [pc, #268]	; (8002294 <HAL_ADC_ConfigChannel+0x7b8>)
 8002186:	4013      	ands	r3, r2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d079      	beq.n	8002280 <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800218c:	4842      	ldr	r0, [pc, #264]	; (8002298 <HAL_ADC_ConfigChannel+0x7bc>)
 800218e:	f7ff f829 	bl	80011e4 <LL_ADC_GetCommonPathInternalCh>
 8002192:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a40      	ldr	r2, [pc, #256]	; (800229c <HAL_ADC_ConfigChannel+0x7c0>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d12b      	bne.n	80021f8 <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80021a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d125      	bne.n	80021f8 <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a3b      	ldr	r2, [pc, #236]	; (80022a0 <HAL_ADC_ConfigChannel+0x7c4>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d004      	beq.n	80021c0 <HAL_ADC_ConfigChannel+0x6e4>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a3a      	ldr	r2, [pc, #232]	; (80022a4 <HAL_ADC_ConfigChannel+0x7c8>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d15c      	bne.n	800227a <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021c8:	4619      	mov	r1, r3
 80021ca:	4833      	ldr	r0, [pc, #204]	; (8002298 <HAL_ADC_ConfigChannel+0x7bc>)
 80021cc:	f7fe fff7 	bl	80011be <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80021d0:	4b35      	ldr	r3, [pc, #212]	; (80022a8 <HAL_ADC_ConfigChannel+0x7cc>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	099b      	lsrs	r3, r3, #6
 80021d6:	4a35      	ldr	r2, [pc, #212]	; (80022ac <HAL_ADC_ConfigChannel+0x7d0>)
 80021d8:	fba2 2303 	umull	r2, r3, r2, r3
 80021dc:	099a      	lsrs	r2, r3, #6
 80021de:	4613      	mov	r3, r2
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	4413      	add	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80021e8:	e002      	b.n	80021f0 <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	3b01      	subs	r3, #1
 80021ee:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1f9      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021f6:	e040      	b.n	800227a <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a2c      	ldr	r2, [pc, #176]	; (80022b0 <HAL_ADC_ConfigChannel+0x7d4>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d118      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x758>
 8002202:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002206:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d112      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a23      	ldr	r2, [pc, #140]	; (80022a0 <HAL_ADC_ConfigChannel+0x7c4>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d004      	beq.n	8002222 <HAL_ADC_ConfigChannel+0x746>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a21      	ldr	r2, [pc, #132]	; (80022a4 <HAL_ADC_ConfigChannel+0x7c8>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d12d      	bne.n	800227e <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002222:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002226:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800222a:	4619      	mov	r1, r3
 800222c:	481a      	ldr	r0, [pc, #104]	; (8002298 <HAL_ADC_ConfigChannel+0x7bc>)
 800222e:	f7fe ffc6 	bl	80011be <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002232:	e024      	b.n	800227e <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a1e      	ldr	r2, [pc, #120]	; (80022b4 <HAL_ADC_ConfigChannel+0x7d8>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d120      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800223e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d11a      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a14      	ldr	r2, [pc, #80]	; (80022a0 <HAL_ADC_ConfigChannel+0x7c4>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d115      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002254:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002258:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800225c:	4619      	mov	r1, r3
 800225e:	480e      	ldr	r0, [pc, #56]	; (8002298 <HAL_ADC_ConfigChannel+0x7bc>)
 8002260:	f7fe ffad 	bl	80011be <LL_ADC_SetCommonPathInternalCh>
 8002264:	e00c      	b.n	8002280 <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800226a:	f043 0220 	orr.w	r2, r3, #32
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002278:	e002      	b.n	8002280 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800227a:	bf00      	nop
 800227c:	e000      	b.n	8002280 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800227e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002288:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800228c:	4618      	mov	r0, r3
 800228e:	37d8      	adds	r7, #216	; 0xd8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	80080000 	.word	0x80080000
 8002298:	50040300 	.word	0x50040300
 800229c:	c7520000 	.word	0xc7520000
 80022a0:	50040000 	.word	0x50040000
 80022a4:	50040200 	.word	0x50040200
 80022a8:	20000000 	.word	0x20000000
 80022ac:	053e2d63 	.word	0x053e2d63
 80022b0:	cb840000 	.word	0xcb840000
 80022b4:	80000001 	.word	0x80000001

080022b8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b088      	sub	sp, #32
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80022c2:	2300      	movs	r3, #0
 80022c4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff f94c 	bl	800156c <LL_ADC_REG_IsConversionOngoing>
 80022d4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff f96d 	bl	80015ba <LL_ADC_INJ_IsConversionOngoing>
 80022e0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d103      	bne.n	80022f0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f000 8090 	beq.w	8002410 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d02a      	beq.n	8002354 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	7e5b      	ldrb	r3, [r3, #25]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d126      	bne.n	8002354 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	7e1b      	ldrb	r3, [r3, #24]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d122      	bne.n	8002354 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800230e:	2301      	movs	r3, #1
 8002310:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002312:	e014      	b.n	800233e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	4a41      	ldr	r2, [pc, #260]	; (800241c <ADC_ConversionStop+0x164>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d90d      	bls.n	8002338 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002320:	f043 0210 	orr.w	r2, r3, #16
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800232c:	f043 0201 	orr.w	r2, r3, #1
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e06c      	b.n	8002412 <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	3301      	adds	r3, #1
 800233c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002348:	2b40      	cmp	r3, #64	; 0x40
 800234a:	d1e3      	bne.n	8002314 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2240      	movs	r2, #64	; 0x40
 8002352:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	2b02      	cmp	r3, #2
 8002358:	d014      	beq.n	8002384 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff f904 	bl	800156c <LL_ADC_REG_IsConversionOngoing>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00c      	beq.n	8002384 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff f8c1 	bl	80014f6 <LL_ADC_IsDisableOngoing>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d104      	bne.n	8002384 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff f8e0 	bl	8001544 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d014      	beq.n	80023b4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff f913 	bl	80015ba <LL_ADC_INJ_IsConversionOngoing>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00c      	beq.n	80023b4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff f8a9 	bl	80014f6 <LL_ADC_IsDisableOngoing>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d104      	bne.n	80023b4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f7ff f8ef 	bl	8001592 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d004      	beq.n	80023c4 <ADC_ConversionStop+0x10c>
 80023ba:	2b03      	cmp	r3, #3
 80023bc:	d105      	bne.n	80023ca <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80023be:	230c      	movs	r3, #12
 80023c0:	617b      	str	r3, [r7, #20]
        break;
 80023c2:	e005      	b.n	80023d0 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80023c4:	2308      	movs	r3, #8
 80023c6:	617b      	str	r3, [r7, #20]
        break;
 80023c8:	e002      	b.n	80023d0 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80023ca:	2304      	movs	r3, #4
 80023cc:	617b      	str	r3, [r7, #20]
        break;
 80023ce:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80023d0:	f7fe fed6 	bl	8001180 <HAL_GetTick>
 80023d4:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80023d6:	e014      	b.n	8002402 <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80023d8:	f7fe fed2 	bl	8001180 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b05      	cmp	r3, #5
 80023e4:	d90d      	bls.n	8002402 <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ea:	f043 0210 	orr.w	r2, r3, #16
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f6:	f043 0201 	orr.w	r2, r3, #1
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e007      	b.n	8002412 <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	4013      	ands	r3, r2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d1e3      	bne.n	80023d8 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3720      	adds	r7, #32
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	a33fffff 	.word	0xa33fffff

08002420 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff f84f 	bl	80014d0 <LL_ADC_IsEnabled>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d146      	bne.n	80024c6 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	689a      	ldr	r2, [r3, #8]
 800243e:	4b24      	ldr	r3, [pc, #144]	; (80024d0 <ADC_Enable+0xb0>)
 8002440:	4013      	ands	r3, r2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00d      	beq.n	8002462 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800244a:	f043 0210 	orr.w	r2, r3, #16
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002456:	f043 0201 	orr.w	r2, r3, #1
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e032      	b.n	80024c8 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff f80a 	bl	8001480 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800246c:	f7fe fe88 	bl	8001180 <HAL_GetTick>
 8002470:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002472:	e021      	b.n	80024b8 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4618      	mov	r0, r3
 800247a:	f7ff f829 	bl	80014d0 <LL_ADC_IsEnabled>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d104      	bne.n	800248e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4618      	mov	r0, r3
 800248a:	f7fe fff9 	bl	8001480 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800248e:	f7fe fe77 	bl	8001180 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	2b02      	cmp	r3, #2
 800249a:	d90d      	bls.n	80024b8 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a0:	f043 0210 	orr.w	r2, r3, #16
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ac:	f043 0201 	orr.w	r2, r3, #1
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e007      	b.n	80024c8 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d1d6      	bne.n	8002474 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	8000003f 	.word	0x8000003f

080024d4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7ff f808 	bl	80014f6 <LL_ADC_IsDisableOngoing>
 80024e6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7fe ffef 	bl	80014d0 <LL_ADC_IsEnabled>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d040      	beq.n	800257a <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d13d      	bne.n	800257a <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 030d 	and.w	r3, r3, #13
 8002508:	2b01      	cmp	r3, #1
 800250a:	d10c      	bne.n	8002526 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4618      	mov	r0, r3
 8002512:	f7fe ffc9 	bl	80014a8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2203      	movs	r2, #3
 800251c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800251e:	f7fe fe2f 	bl	8001180 <HAL_GetTick>
 8002522:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002524:	e022      	b.n	800256c <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800252a:	f043 0210 	orr.w	r2, r3, #16
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002536:	f043 0201 	orr.w	r2, r3, #1
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e01c      	b.n	800257c <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002542:	f7fe fe1d 	bl	8001180 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d90d      	bls.n	800256c <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002554:	f043 0210 	orr.w	r2, r3, #16
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002560:	f043 0201 	orr.w	r2, r3, #1
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e007      	b.n	800257c <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1e3      	bne.n	8002542 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	3710      	adds	r7, #16
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002590:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002596:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800259a:	2b00      	cmp	r3, #0
 800259c:	d14b      	bne.n	8002636 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0308 	and.w	r3, r3, #8
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d021      	beq.n	80025fc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4618      	mov	r0, r3
 80025be:	f7fe fe74 	bl	80012aa <LL_ADC_REG_IsTriggerSourceSWStart>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d032      	beq.n	800262e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d12b      	bne.n	800262e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d11f      	bne.n	800262e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f2:	f043 0201 	orr.w	r2, r3, #1
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	655a      	str	r2, [r3, #84]	; 0x54
 80025fa:	e018      	b.n	800262e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d111      	bne.n	800262e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800260e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800261a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d105      	bne.n	800262e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002626:	f043 0201 	orr.w	r2, r3, #1
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f7fe faee 	bl	8000c10 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002634:	e00e      	b.n	8002654 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263a:	f003 0310 	and.w	r3, r3, #16
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f7ff fa3f 	bl	8001ac6 <HAL_ADC_ErrorCallback>
}
 8002648:	e004      	b.n	8002654 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800264e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	4798      	blx	r3
}
 8002654:	bf00      	nop
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002668:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f7ff fa21 	bl	8001ab2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002670:	bf00      	nop
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002684:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800268a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002696:	f043 0204 	orr.w	r2, r3, #4
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f7ff fa11 	bl	8001ac6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026a4:	bf00      	nop
 80026a6:	3710      	adds	r7, #16
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <LL_ADC_IsEnabled>:
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d101      	bne.n	80026c4 <LL_ADC_IsEnabled+0x18>
 80026c0:	2301      	movs	r3, #1
 80026c2:	e000      	b.n	80026c6 <LL_ADC_IsEnabled+0x1a>
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr

080026d2 <LL_ADC_StartCalibration>:
{
 80026d2:	b480      	push	{r7}
 80026d4:	b083      	sub	sp, #12
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
 80026da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80026e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80026ee:	4313      	orrs	r3, r2
 80026f0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	609a      	str	r2, [r3, #8]
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <LL_ADC_IsCalibrationOnGoing>:
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002714:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002718:	d101      	bne.n	800271e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800271a:	2301      	movs	r3, #1
 800271c:	e000      	b.n	8002720 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <LL_ADC_REG_IsConversionOngoing>:
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f003 0304 	and.w	r3, r3, #4
 800273c:	2b04      	cmp	r3, #4
 800273e:	d101      	bne.n	8002744 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002740:	2301      	movs	r3, #1
 8002742:	e000      	b.n	8002746 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b084      	sub	sp, #16
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
 800275a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800275c:	2300      	movs	r3, #0
 800275e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002766:	2b01      	cmp	r3, #1
 8002768:	d101      	bne.n	800276e <HAL_ADCEx_Calibration_Start+0x1c>
 800276a:	2302      	movs	r3, #2
 800276c:	e04d      	b.n	800280a <HAL_ADCEx_Calibration_Start+0xb8>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2201      	movs	r2, #1
 8002772:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f7ff feac 	bl	80024d4 <ADC_Disable>
 800277c:	4603      	mov	r3, r0
 800277e:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002780:	7bfb      	ldrb	r3, [r7, #15]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d136      	bne.n	80027f4 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800278e:	f023 0302 	bic.w	r3, r3, #2
 8002792:	f043 0202 	orr.w	r2, r3, #2
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	6839      	ldr	r1, [r7, #0]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff ff96 	bl	80026d2 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80027a6:	e014      	b.n	80027d2 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	3301      	adds	r3, #1
 80027ac:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 80027b4:	d30d      	bcc.n	80027d2 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ba:	f023 0312 	bic.w	r3, r3, #18
 80027be:	f043 0210 	orr.w	r2, r3, #16
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e01b      	b.n	800280a <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7ff ff94 	bl	8002704 <LL_ADC_IsCalibrationOnGoing>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1e2      	bne.n	80027a8 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e6:	f023 0303 	bic.w	r3, r3, #3
 80027ea:	f043 0201 	orr.w	r2, r3, #1
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	655a      	str	r2, [r3, #84]	; 0x54
 80027f2:	e005      	b.n	8002800 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f8:	f043 0210 	orr.w	r2, r3, #16
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002808:	7bfb      	ldrb	r3, [r7, #15]
}
 800280a:	4618      	mov	r0, r3
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
	...

08002814 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002814:	b590      	push	{r4, r7, lr}
 8002816:	b09f      	sub	sp, #124	; 0x7c
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800281e:	2300      	movs	r3, #0
 8002820:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800282a:	2b01      	cmp	r3, #1
 800282c:	d101      	bne.n	8002832 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800282e:	2302      	movs	r3, #2
 8002830:	e08f      	b.n	8002952 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a47      	ldr	r2, [pc, #284]	; (800295c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d102      	bne.n	800284a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002844:	4b46      	ldr	r3, [pc, #280]	; (8002960 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002846:	60bb      	str	r3, [r7, #8]
 8002848:	e001      	b.n	800284e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800284a:	2300      	movs	r3, #0
 800284c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d10b      	bne.n	800286c <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002858:	f043 0220 	orr.w	r2, r3, #32
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e072      	b.n	8002952 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff ff5c 	bl	800272c <LL_ADC_REG_IsConversionOngoing>
 8002874:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4618      	mov	r0, r3
 800287c:	f7ff ff56 	bl	800272c <LL_ADC_REG_IsConversionOngoing>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d154      	bne.n	8002930 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002886:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002888:	2b00      	cmp	r3, #0
 800288a:	d151      	bne.n	8002930 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800288c:	4b35      	ldr	r3, [pc, #212]	; (8002964 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800288e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d02c      	beq.n	80028f2 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002898:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	6859      	ldr	r1, [r3, #4]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028aa:	035b      	lsls	r3, r3, #13
 80028ac:	430b      	orrs	r3, r1
 80028ae:	431a      	orrs	r2, r3
 80028b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028b2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028b4:	4829      	ldr	r0, [pc, #164]	; (800295c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80028b6:	f7ff fef9 	bl	80026ac <LL_ADC_IsEnabled>
 80028ba:	4604      	mov	r4, r0
 80028bc:	4828      	ldr	r0, [pc, #160]	; (8002960 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80028be:	f7ff fef5 	bl	80026ac <LL_ADC_IsEnabled>
 80028c2:	4603      	mov	r3, r0
 80028c4:	431c      	orrs	r4, r3
 80028c6:	4828      	ldr	r0, [pc, #160]	; (8002968 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80028c8:	f7ff fef0 	bl	80026ac <LL_ADC_IsEnabled>
 80028cc:	4603      	mov	r3, r0
 80028ce:	4323      	orrs	r3, r4
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d137      	bne.n	8002944 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80028d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80028dc:	f023 030f 	bic.w	r3, r3, #15
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	6811      	ldr	r1, [r2, #0]
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	6892      	ldr	r2, [r2, #8]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	431a      	orrs	r2, r3
 80028ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028ee:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80028f0:	e028      	b.n	8002944 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80028f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028fc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028fe:	4817      	ldr	r0, [pc, #92]	; (800295c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002900:	f7ff fed4 	bl	80026ac <LL_ADC_IsEnabled>
 8002904:	4604      	mov	r4, r0
 8002906:	4816      	ldr	r0, [pc, #88]	; (8002960 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002908:	f7ff fed0 	bl	80026ac <LL_ADC_IsEnabled>
 800290c:	4603      	mov	r3, r0
 800290e:	431c      	orrs	r4, r3
 8002910:	4815      	ldr	r0, [pc, #84]	; (8002968 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002912:	f7ff fecb 	bl	80026ac <LL_ADC_IsEnabled>
 8002916:	4603      	mov	r3, r0
 8002918:	4323      	orrs	r3, r4
 800291a:	2b00      	cmp	r3, #0
 800291c:	d112      	bne.n	8002944 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800291e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002926:	f023 030f 	bic.w	r3, r3, #15
 800292a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800292c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800292e:	e009      	b.n	8002944 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002934:	f043 0220 	orr.w	r2, r3, #32
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002942:	e000      	b.n	8002946 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002944:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800294e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002952:	4618      	mov	r0, r3
 8002954:	377c      	adds	r7, #124	; 0x7c
 8002956:	46bd      	mov	sp, r7
 8002958:	bd90      	pop	{r4, r7, pc}
 800295a:	bf00      	nop
 800295c:	50040000 	.word	0x50040000
 8002960:	50040100 	.word	0x50040100
 8002964:	50040300 	.word	0x50040300
 8002968:	50040200 	.word	0x50040200

0800296c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800297c:	4b0c      	ldr	r3, [pc, #48]	; (80029b0 <__NVIC_SetPriorityGrouping+0x44>)
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002982:	68ba      	ldr	r2, [r7, #8]
 8002984:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002988:	4013      	ands	r3, r2
 800298a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002994:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800299c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800299e:	4a04      	ldr	r2, [pc, #16]	; (80029b0 <__NVIC_SetPriorityGrouping+0x44>)
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	60d3      	str	r3, [r2, #12]
}
 80029a4:	bf00      	nop
 80029a6:	3714      	adds	r7, #20
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr
 80029b0:	e000ed00 	.word	0xe000ed00

080029b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029b8:	4b04      	ldr	r3, [pc, #16]	; (80029cc <__NVIC_GetPriorityGrouping+0x18>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	0a1b      	lsrs	r3, r3, #8
 80029be:	f003 0307 	and.w	r3, r3, #7
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr
 80029cc:	e000ed00 	.word	0xe000ed00

080029d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	4603      	mov	r3, r0
 80029d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	db0b      	blt.n	80029fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029e2:	79fb      	ldrb	r3, [r7, #7]
 80029e4:	f003 021f 	and.w	r2, r3, #31
 80029e8:	4907      	ldr	r1, [pc, #28]	; (8002a08 <__NVIC_EnableIRQ+0x38>)
 80029ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ee:	095b      	lsrs	r3, r3, #5
 80029f0:	2001      	movs	r0, #1
 80029f2:	fa00 f202 	lsl.w	r2, r0, r2
 80029f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029fa:	bf00      	nop
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	e000e100 	.word	0xe000e100

08002a0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	4603      	mov	r3, r0
 8002a14:	6039      	str	r1, [r7, #0]
 8002a16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	db0a      	blt.n	8002a36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	490c      	ldr	r1, [pc, #48]	; (8002a58 <__NVIC_SetPriority+0x4c>)
 8002a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a2a:	0112      	lsls	r2, r2, #4
 8002a2c:	b2d2      	uxtb	r2, r2
 8002a2e:	440b      	add	r3, r1
 8002a30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a34:	e00a      	b.n	8002a4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	4908      	ldr	r1, [pc, #32]	; (8002a5c <__NVIC_SetPriority+0x50>)
 8002a3c:	79fb      	ldrb	r3, [r7, #7]
 8002a3e:	f003 030f 	and.w	r3, r3, #15
 8002a42:	3b04      	subs	r3, #4
 8002a44:	0112      	lsls	r2, r2, #4
 8002a46:	b2d2      	uxtb	r2, r2
 8002a48:	440b      	add	r3, r1
 8002a4a:	761a      	strb	r2, [r3, #24]
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr
 8002a58:	e000e100 	.word	0xe000e100
 8002a5c:	e000ed00 	.word	0xe000ed00

08002a60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b089      	sub	sp, #36	; 0x24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f003 0307 	and.w	r3, r3, #7
 8002a72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	f1c3 0307 	rsb	r3, r3, #7
 8002a7a:	2b04      	cmp	r3, #4
 8002a7c:	bf28      	it	cs
 8002a7e:	2304      	movcs	r3, #4
 8002a80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	3304      	adds	r3, #4
 8002a86:	2b06      	cmp	r3, #6
 8002a88:	d902      	bls.n	8002a90 <NVIC_EncodePriority+0x30>
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	3b03      	subs	r3, #3
 8002a8e:	e000      	b.n	8002a92 <NVIC_EncodePriority+0x32>
 8002a90:	2300      	movs	r3, #0
 8002a92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a94:	f04f 32ff 	mov.w	r2, #4294967295
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	43da      	mvns	r2, r3
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	401a      	ands	r2, r3
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab2:	43d9      	mvns	r1, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ab8:	4313      	orrs	r3, r2
         );
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3724      	adds	r7, #36	; 0x24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
	...

08002ac8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ad8:	d301      	bcc.n	8002ade <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ada:	2301      	movs	r3, #1
 8002adc:	e00f      	b.n	8002afe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ade:	4a0a      	ldr	r2, [pc, #40]	; (8002b08 <SysTick_Config+0x40>)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ae6:	210f      	movs	r1, #15
 8002ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8002aec:	f7ff ff8e 	bl	8002a0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002af0:	4b05      	ldr	r3, [pc, #20]	; (8002b08 <SysTick_Config+0x40>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002af6:	4b04      	ldr	r3, [pc, #16]	; (8002b08 <SysTick_Config+0x40>)
 8002af8:	2207      	movs	r2, #7
 8002afa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	e000e010 	.word	0xe000e010

08002b0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f7ff ff29 	bl	800296c <__NVIC_SetPriorityGrouping>
}
 8002b1a:	bf00      	nop
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b086      	sub	sp, #24
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	4603      	mov	r3, r0
 8002b2a:	60b9      	str	r1, [r7, #8]
 8002b2c:	607a      	str	r2, [r7, #4]
 8002b2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b30:	2300      	movs	r3, #0
 8002b32:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b34:	f7ff ff3e 	bl	80029b4 <__NVIC_GetPriorityGrouping>
 8002b38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	68b9      	ldr	r1, [r7, #8]
 8002b3e:	6978      	ldr	r0, [r7, #20]
 8002b40:	f7ff ff8e 	bl	8002a60 <NVIC_EncodePriority>
 8002b44:	4602      	mov	r2, r0
 8002b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b4a:	4611      	mov	r1, r2
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff ff5d 	bl	8002a0c <__NVIC_SetPriority>
}
 8002b52:	bf00      	nop
 8002b54:	3718      	adds	r7, #24
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b082      	sub	sp, #8
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	4603      	mov	r3, r0
 8002b62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff ff31 	bl	80029d0 <__NVIC_EnableIRQ>
}
 8002b6e:	bf00      	nop
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b082      	sub	sp, #8
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f7ff ffa2 	bl	8002ac8 <SysTick_Config>
 8002b84:	4603      	mov	r3, r0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
	...

08002b90 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e098      	b.n	8002cd4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	4b4d      	ldr	r3, [pc, #308]	; (8002ce0 <HAL_DMA_Init+0x150>)
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d80f      	bhi.n	8002bce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	4b4b      	ldr	r3, [pc, #300]	; (8002ce4 <HAL_DMA_Init+0x154>)
 8002bb6:	4413      	add	r3, r2
 8002bb8:	4a4b      	ldr	r2, [pc, #300]	; (8002ce8 <HAL_DMA_Init+0x158>)
 8002bba:	fba2 2303 	umull	r2, r3, r2, r3
 8002bbe:	091b      	lsrs	r3, r3, #4
 8002bc0:	009a      	lsls	r2, r3, #2
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a48      	ldr	r2, [pc, #288]	; (8002cec <HAL_DMA_Init+0x15c>)
 8002bca:	641a      	str	r2, [r3, #64]	; 0x40
 8002bcc:	e00e      	b.n	8002bec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	4b46      	ldr	r3, [pc, #280]	; (8002cf0 <HAL_DMA_Init+0x160>)
 8002bd6:	4413      	add	r3, r2
 8002bd8:	4a43      	ldr	r2, [pc, #268]	; (8002ce8 <HAL_DMA_Init+0x158>)
 8002bda:	fba2 2303 	umull	r2, r3, r2, r3
 8002bde:	091b      	lsrs	r3, r3, #4
 8002be0:	009a      	lsls	r2, r3, #2
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a42      	ldr	r2, [pc, #264]	; (8002cf4 <HAL_DMA_Init+0x164>)
 8002bea:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2202      	movs	r2, #2
 8002bf0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c06:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002c10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c46:	d039      	beq.n	8002cbc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4c:	4a27      	ldr	r2, [pc, #156]	; (8002cec <HAL_DMA_Init+0x15c>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d11a      	bne.n	8002c88 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002c52:	4b29      	ldr	r3, [pc, #164]	; (8002cf8 <HAL_DMA_Init+0x168>)
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5a:	f003 031c 	and.w	r3, r3, #28
 8002c5e:	210f      	movs	r1, #15
 8002c60:	fa01 f303 	lsl.w	r3, r1, r3
 8002c64:	43db      	mvns	r3, r3
 8002c66:	4924      	ldr	r1, [pc, #144]	; (8002cf8 <HAL_DMA_Init+0x168>)
 8002c68:	4013      	ands	r3, r2
 8002c6a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002c6c:	4b22      	ldr	r3, [pc, #136]	; (8002cf8 <HAL_DMA_Init+0x168>)
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6859      	ldr	r1, [r3, #4]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c78:	f003 031c 	and.w	r3, r3, #28
 8002c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c80:	491d      	ldr	r1, [pc, #116]	; (8002cf8 <HAL_DMA_Init+0x168>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	600b      	str	r3, [r1, #0]
 8002c86:	e019      	b.n	8002cbc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002c88:	4b1c      	ldr	r3, [pc, #112]	; (8002cfc <HAL_DMA_Init+0x16c>)
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c90:	f003 031c 	and.w	r3, r3, #28
 8002c94:	210f      	movs	r1, #15
 8002c96:	fa01 f303 	lsl.w	r3, r1, r3
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	4917      	ldr	r1, [pc, #92]	; (8002cfc <HAL_DMA_Init+0x16c>)
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002ca2:	4b16      	ldr	r3, [pc, #88]	; (8002cfc <HAL_DMA_Init+0x16c>)
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6859      	ldr	r1, [r3, #4]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cae:	f003 031c 	and.w	r3, r3, #28
 8002cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb6:	4911      	ldr	r1, [pc, #68]	; (8002cfc <HAL_DMA_Init+0x16c>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3714      	adds	r7, #20
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	40020407 	.word	0x40020407
 8002ce4:	bffdfff8 	.word	0xbffdfff8
 8002ce8:	cccccccd 	.word	0xcccccccd
 8002cec:	40020000 	.word	0x40020000
 8002cf0:	bffdfbf8 	.word	0xbffdfbf8
 8002cf4:	40020400 	.word	0x40020400
 8002cf8:	400200a8 	.word	0x400200a8
 8002cfc:	400204a8 	.word	0x400204a8

08002d00 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
 8002d0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d101      	bne.n	8002d20 <HAL_DMA_Start_IT+0x20>
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	e04b      	b.n	8002db8 <HAL_DMA_Start_IT+0xb8>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d13a      	bne.n	8002daa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2202      	movs	r2, #2
 8002d38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 0201 	bic.w	r2, r2, #1
 8002d50:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	68b9      	ldr	r1, [r7, #8]
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f000 f91e 	bl	8002f9a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d008      	beq.n	8002d78 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f042 020e 	orr.w	r2, r2, #14
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	e00f      	b.n	8002d98 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f022 0204 	bic.w	r2, r2, #4
 8002d86:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f042 020a 	orr.w	r2, r2, #10
 8002d96:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f042 0201 	orr.w	r2, r2, #1
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	e005      	b.n	8002db6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002db2:	2302      	movs	r3, #2
 8002db4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3718      	adds	r7, #24
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d008      	beq.n	8002dea <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2204      	movs	r2, #4
 8002ddc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e022      	b.n	8002e30 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 020e 	bic.w	r2, r2, #14
 8002df8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f022 0201 	bic.w	r2, r2, #1
 8002e08:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0e:	f003 021c 	and.w	r2, r3, #28
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	2101      	movs	r1, #1
 8002e18:	fa01 f202 	lsl.w	r2, r1, r2
 8002e1c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002e2e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3714      	adds	r7, #20
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e58:	f003 031c 	and.w	r3, r3, #28
 8002e5c:	2204      	movs	r2, #4
 8002e5e:	409a      	lsls	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	4013      	ands	r3, r2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d026      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0x7a>
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	f003 0304 	and.w	r3, r3, #4
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d021      	beq.n	8002eb6 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0320 	and.w	r3, r3, #32
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d107      	bne.n	8002e90 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f022 0204 	bic.w	r2, r2, #4
 8002e8e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e94:	f003 021c 	and.w	r2, r3, #28
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9c:	2104      	movs	r1, #4
 8002e9e:	fa01 f202 	lsl.w	r2, r1, r2
 8002ea2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d071      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002eb4:	e06c      	b.n	8002f90 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eba:	f003 031c 	and.w	r3, r3, #28
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	409a      	lsls	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d02e      	beq.n	8002f28 <HAL_DMA_IRQHandler+0xec>
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d029      	beq.n	8002f28 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0320 	and.w	r3, r3, #32
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10b      	bne.n	8002efa <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 020a 	bic.w	r2, r2, #10
 8002ef0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efe:	f003 021c 	and.w	r2, r3, #28
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	2102      	movs	r1, #2
 8002f08:	fa01 f202 	lsl.w	r2, r1, r2
 8002f0c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d038      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002f26:	e033      	b.n	8002f90 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2c:	f003 031c 	and.w	r3, r3, #28
 8002f30:	2208      	movs	r2, #8
 8002f32:	409a      	lsls	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	4013      	ands	r3, r2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d02a      	beq.n	8002f92 <HAL_DMA_IRQHandler+0x156>
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	f003 0308 	and.w	r3, r3, #8
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d025      	beq.n	8002f92 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f022 020e 	bic.w	r2, r2, #14
 8002f54:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5a:	f003 021c 	and.w	r2, r3, #28
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	2101      	movs	r1, #1
 8002f64:	fa01 f202 	lsl.w	r2, r1, r2
 8002f68:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d004      	beq.n	8002f92 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002f90:	bf00      	nop
 8002f92:	bf00      	nop
}
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b085      	sub	sp, #20
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	60f8      	str	r0, [r7, #12]
 8002fa2:	60b9      	str	r1, [r7, #8]
 8002fa4:	607a      	str	r2, [r7, #4]
 8002fa6:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fac:	f003 021c 	and.w	r2, r3, #28
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	fa01 f202 	lsl.w	r2, r1, r2
 8002fba:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	2b10      	cmp	r3, #16
 8002fca:	d108      	bne.n	8002fde <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68ba      	ldr	r2, [r7, #8]
 8002fda:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002fdc:	e007      	b.n	8002fee <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68ba      	ldr	r2, [r7, #8]
 8002fe4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	60da      	str	r2, [r3, #12]
}
 8002fee:	bf00      	nop
 8002ff0:	3714      	adds	r7, #20
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
	...

08002ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b087      	sub	sp, #28
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003006:	2300      	movs	r3, #0
 8003008:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800300a:	e17f      	b.n	800330c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	2101      	movs	r1, #1
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	fa01 f303 	lsl.w	r3, r1, r3
 8003018:	4013      	ands	r3, r2
 800301a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2b00      	cmp	r3, #0
 8003020:	f000 8171 	beq.w	8003306 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	2b01      	cmp	r3, #1
 800302a:	d00b      	beq.n	8003044 <HAL_GPIO_Init+0x48>
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	2b02      	cmp	r3, #2
 8003032:	d007      	beq.n	8003044 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003038:	2b11      	cmp	r3, #17
 800303a:	d003      	beq.n	8003044 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	2b12      	cmp	r3, #18
 8003042:	d130      	bne.n	80030a6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	2203      	movs	r2, #3
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	43db      	mvns	r3, r3
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	4013      	ands	r3, r2
 800305a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	68da      	ldr	r2, [r3, #12]
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	4313      	orrs	r3, r2
 800306c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800307a:	2201      	movs	r2, #1
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	fa02 f303 	lsl.w	r3, r2, r3
 8003082:	43db      	mvns	r3, r3
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	4013      	ands	r3, r2
 8003088:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	091b      	lsrs	r3, r3, #4
 8003090:	f003 0201 	and.w	r2, r3, #1
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	fa02 f303 	lsl.w	r3, r2, r3
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	4313      	orrs	r3, r2
 800309e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f003 0303 	and.w	r3, r3, #3
 80030ae:	2b03      	cmp	r3, #3
 80030b0:	d118      	bne.n	80030e4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80030b8:	2201      	movs	r2, #1
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	43db      	mvns	r3, r3
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	4013      	ands	r3, r2
 80030c6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	08db      	lsrs	r3, r3, #3
 80030ce:	f003 0201 	and.w	r2, r3, #1
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	4313      	orrs	r3, r2
 80030dc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	2203      	movs	r2, #3
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	43db      	mvns	r3, r3
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	4013      	ands	r3, r2
 80030fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	4313      	orrs	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	2b02      	cmp	r3, #2
 800311a:	d003      	beq.n	8003124 <HAL_GPIO_Init+0x128>
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	2b12      	cmp	r3, #18
 8003122:	d123      	bne.n	800316c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	08da      	lsrs	r2, r3, #3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3208      	adds	r2, #8
 800312c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003130:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	f003 0307 	and.w	r3, r3, #7
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	220f      	movs	r2, #15
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	43db      	mvns	r3, r3
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	4013      	ands	r3, r2
 8003146:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	691a      	ldr	r2, [r3, #16]
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	f003 0307 	and.w	r3, r3, #7
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	4313      	orrs	r3, r2
 800315c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	08da      	lsrs	r2, r3, #3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	3208      	adds	r2, #8
 8003166:	6939      	ldr	r1, [r7, #16]
 8003168:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	2203      	movs	r2, #3
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	43db      	mvns	r3, r3
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	4013      	ands	r3, r2
 8003182:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f003 0203 	and.w	r2, r3, #3
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	693a      	ldr	r2, [r7, #16]
 8003196:	4313      	orrs	r3, r2
 8003198:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f000 80ac 	beq.w	8003306 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031ae:	4b5e      	ldr	r3, [pc, #376]	; (8003328 <HAL_GPIO_Init+0x32c>)
 80031b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031b2:	4a5d      	ldr	r2, [pc, #372]	; (8003328 <HAL_GPIO_Init+0x32c>)
 80031b4:	f043 0301 	orr.w	r3, r3, #1
 80031b8:	6613      	str	r3, [r2, #96]	; 0x60
 80031ba:	4b5b      	ldr	r3, [pc, #364]	; (8003328 <HAL_GPIO_Init+0x32c>)
 80031bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	60bb      	str	r3, [r7, #8]
 80031c4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80031c6:	4a59      	ldr	r2, [pc, #356]	; (800332c <HAL_GPIO_Init+0x330>)
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	089b      	lsrs	r3, r3, #2
 80031cc:	3302      	adds	r3, #2
 80031ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	f003 0303 	and.w	r3, r3, #3
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	220f      	movs	r2, #15
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	43db      	mvns	r3, r3
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	4013      	ands	r3, r2
 80031e8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80031f0:	d025      	beq.n	800323e <HAL_GPIO_Init+0x242>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a4e      	ldr	r2, [pc, #312]	; (8003330 <HAL_GPIO_Init+0x334>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d01f      	beq.n	800323a <HAL_GPIO_Init+0x23e>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a4d      	ldr	r2, [pc, #308]	; (8003334 <HAL_GPIO_Init+0x338>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d019      	beq.n	8003236 <HAL_GPIO_Init+0x23a>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a4c      	ldr	r2, [pc, #304]	; (8003338 <HAL_GPIO_Init+0x33c>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d013      	beq.n	8003232 <HAL_GPIO_Init+0x236>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a4b      	ldr	r2, [pc, #300]	; (800333c <HAL_GPIO_Init+0x340>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d00d      	beq.n	800322e <HAL_GPIO_Init+0x232>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a4a      	ldr	r2, [pc, #296]	; (8003340 <HAL_GPIO_Init+0x344>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d007      	beq.n	800322a <HAL_GPIO_Init+0x22e>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a49      	ldr	r2, [pc, #292]	; (8003344 <HAL_GPIO_Init+0x348>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d101      	bne.n	8003226 <HAL_GPIO_Init+0x22a>
 8003222:	2306      	movs	r3, #6
 8003224:	e00c      	b.n	8003240 <HAL_GPIO_Init+0x244>
 8003226:	2307      	movs	r3, #7
 8003228:	e00a      	b.n	8003240 <HAL_GPIO_Init+0x244>
 800322a:	2305      	movs	r3, #5
 800322c:	e008      	b.n	8003240 <HAL_GPIO_Init+0x244>
 800322e:	2304      	movs	r3, #4
 8003230:	e006      	b.n	8003240 <HAL_GPIO_Init+0x244>
 8003232:	2303      	movs	r3, #3
 8003234:	e004      	b.n	8003240 <HAL_GPIO_Init+0x244>
 8003236:	2302      	movs	r3, #2
 8003238:	e002      	b.n	8003240 <HAL_GPIO_Init+0x244>
 800323a:	2301      	movs	r3, #1
 800323c:	e000      	b.n	8003240 <HAL_GPIO_Init+0x244>
 800323e:	2300      	movs	r3, #0
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	f002 0203 	and.w	r2, r2, #3
 8003246:	0092      	lsls	r2, r2, #2
 8003248:	4093      	lsls	r3, r2
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	4313      	orrs	r3, r2
 800324e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003250:	4936      	ldr	r1, [pc, #216]	; (800332c <HAL_GPIO_Init+0x330>)
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	089b      	lsrs	r3, r3, #2
 8003256:	3302      	adds	r3, #2
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800325e:	4b3a      	ldr	r3, [pc, #232]	; (8003348 <HAL_GPIO_Init+0x34c>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	43db      	mvns	r3, r3
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	4013      	ands	r3, r2
 800326c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	4313      	orrs	r3, r2
 8003280:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003282:	4a31      	ldr	r2, [pc, #196]	; (8003348 <HAL_GPIO_Init+0x34c>)
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003288:	4b2f      	ldr	r3, [pc, #188]	; (8003348 <HAL_GPIO_Init+0x34c>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	43db      	mvns	r3, r3
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	4013      	ands	r3, r2
 8003296:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d003      	beq.n	80032ac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80032ac:	4a26      	ldr	r2, [pc, #152]	; (8003348 <HAL_GPIO_Init+0x34c>)
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80032b2:	4b25      	ldr	r3, [pc, #148]	; (8003348 <HAL_GPIO_Init+0x34c>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	43db      	mvns	r3, r3
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	4013      	ands	r3, r2
 80032c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80032d6:	4a1c      	ldr	r2, [pc, #112]	; (8003348 <HAL_GPIO_Init+0x34c>)
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80032dc:	4b1a      	ldr	r3, [pc, #104]	; (8003348 <HAL_GPIO_Init+0x34c>)
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	43db      	mvns	r3, r3
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	4013      	ands	r3, r2
 80032ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d003      	beq.n	8003300 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003300:	4a11      	ldr	r2, [pc, #68]	; (8003348 <HAL_GPIO_Init+0x34c>)
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	3301      	adds	r3, #1
 800330a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	fa22 f303 	lsr.w	r3, r2, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	f47f ae78 	bne.w	800300c <HAL_GPIO_Init+0x10>
  }
}
 800331c:	bf00      	nop
 800331e:	371c      	adds	r7, #28
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr
 8003328:	40021000 	.word	0x40021000
 800332c:	40010000 	.word	0x40010000
 8003330:	48000400 	.word	0x48000400
 8003334:	48000800 	.word	0x48000800
 8003338:	48000c00 	.word	0x48000c00
 800333c:	48001000 	.word	0x48001000
 8003340:	48001400 	.word	0x48001400
 8003344:	48001800 	.word	0x48001800
 8003348:	40010400 	.word	0x40010400

0800334c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	460b      	mov	r3, r1
 8003356:	807b      	strh	r3, [r7, #2]
 8003358:	4613      	mov	r3, r2
 800335a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800335c:	787b      	ldrb	r3, [r7, #1]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003362:	887a      	ldrh	r2, [r7, #2]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003368:	e002      	b.n	8003370 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800336a:	887a      	ldrh	r2, [r7, #2]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	460b      	mov	r3, r1
 8003386:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800338e:	887a      	ldrh	r2, [r7, #2]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	4013      	ands	r3, r2
 8003394:	041a      	lsls	r2, r3, #16
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	43d9      	mvns	r1, r3
 800339a:	887b      	ldrh	r3, [r7, #2]
 800339c:	400b      	ands	r3, r1
 800339e:	431a      	orrs	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	619a      	str	r2, [r3, #24]
}
 80033a4:	bf00      	nop
 80033a6:	3714      	adds	r7, #20
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80033b4:	4b04      	ldr	r3, [pc, #16]	; (80033c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80033bc:	4618      	mov	r0, r3
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	40007000 	.word	0x40007000

080033cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033da:	d130      	bne.n	800343e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80033dc:	4b23      	ldr	r3, [pc, #140]	; (800346c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033e8:	d038      	beq.n	800345c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033ea:	4b20      	ldr	r3, [pc, #128]	; (800346c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033f2:	4a1e      	ldr	r2, [pc, #120]	; (800346c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033f8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80033fa:	4b1d      	ldr	r3, [pc, #116]	; (8003470 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2232      	movs	r2, #50	; 0x32
 8003400:	fb02 f303 	mul.w	r3, r2, r3
 8003404:	4a1b      	ldr	r2, [pc, #108]	; (8003474 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003406:	fba2 2303 	umull	r2, r3, r2, r3
 800340a:	0c9b      	lsrs	r3, r3, #18
 800340c:	3301      	adds	r3, #1
 800340e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003410:	e002      	b.n	8003418 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	3b01      	subs	r3, #1
 8003416:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003418:	4b14      	ldr	r3, [pc, #80]	; (800346c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800341a:	695b      	ldr	r3, [r3, #20]
 800341c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003420:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003424:	d102      	bne.n	800342c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1f2      	bne.n	8003412 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800342c:	4b0f      	ldr	r3, [pc, #60]	; (800346c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003434:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003438:	d110      	bne.n	800345c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e00f      	b.n	800345e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800343e:	4b0b      	ldr	r3, [pc, #44]	; (800346c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003446:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800344a:	d007      	beq.n	800345c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800344c:	4b07      	ldr	r3, [pc, #28]	; (800346c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003454:	4a05      	ldr	r2, [pc, #20]	; (800346c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003456:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800345a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3714      	adds	r7, #20
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	40007000 	.word	0x40007000
 8003470:	20000000 	.word	0x20000000
 8003474:	431bde83 	.word	0x431bde83

08003478 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b088      	sub	sp, #32
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e3d4      	b.n	8003c34 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800348a:	4ba1      	ldr	r3, [pc, #644]	; (8003710 <HAL_RCC_OscConfig+0x298>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f003 030c 	and.w	r3, r3, #12
 8003492:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003494:	4b9e      	ldr	r3, [pc, #632]	; (8003710 <HAL_RCC_OscConfig+0x298>)
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	f003 0303 	and.w	r3, r3, #3
 800349c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0310 	and.w	r3, r3, #16
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f000 80e4 	beq.w	8003674 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d007      	beq.n	80034c2 <HAL_RCC_OscConfig+0x4a>
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	2b0c      	cmp	r3, #12
 80034b6:	f040 808b 	bne.w	80035d0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	f040 8087 	bne.w	80035d0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034c2:	4b93      	ldr	r3, [pc, #588]	; (8003710 <HAL_RCC_OscConfig+0x298>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d005      	beq.n	80034da <HAL_RCC_OscConfig+0x62>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e3ac      	b.n	8003c34 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a1a      	ldr	r2, [r3, #32]
 80034de:	4b8c      	ldr	r3, [pc, #560]	; (8003710 <HAL_RCC_OscConfig+0x298>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0308 	and.w	r3, r3, #8
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d004      	beq.n	80034f4 <HAL_RCC_OscConfig+0x7c>
 80034ea:	4b89      	ldr	r3, [pc, #548]	; (8003710 <HAL_RCC_OscConfig+0x298>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034f2:	e005      	b.n	8003500 <HAL_RCC_OscConfig+0x88>
 80034f4:	4b86      	ldr	r3, [pc, #536]	; (8003710 <HAL_RCC_OscConfig+0x298>)
 80034f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034fa:	091b      	lsrs	r3, r3, #4
 80034fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003500:	4293      	cmp	r3, r2
 8003502:	d223      	bcs.n	800354c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	4618      	mov	r0, r3
 800350a:	f000 fd3f 	bl	8003f8c <RCC_SetFlashLatencyFromMSIRange>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e38d      	b.n	8003c34 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003518:	4b7d      	ldr	r3, [pc, #500]	; (8003710 <HAL_RCC_OscConfig+0x298>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a7c      	ldr	r2, [pc, #496]	; (8003710 <HAL_RCC_OscConfig+0x298>)
 800351e:	f043 0308 	orr.w	r3, r3, #8
 8003522:	6013      	str	r3, [r2, #0]
 8003524:	4b7a      	ldr	r3, [pc, #488]	; (8003710 <HAL_RCC_OscConfig+0x298>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a1b      	ldr	r3, [r3, #32]
 8003530:	4977      	ldr	r1, [pc, #476]	; (8003710 <HAL_RCC_OscConfig+0x298>)
 8003532:	4313      	orrs	r3, r2
 8003534:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003536:	4b76      	ldr	r3, [pc, #472]	; (8003710 <HAL_RCC_OscConfig+0x298>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	69db      	ldr	r3, [r3, #28]
 8003542:	021b      	lsls	r3, r3, #8
 8003544:	4972      	ldr	r1, [pc, #456]	; (8003710 <HAL_RCC_OscConfig+0x298>)
 8003546:	4313      	orrs	r3, r2
 8003548:	604b      	str	r3, [r1, #4]
 800354a:	e025      	b.n	8003598 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800354c:	4b70      	ldr	r3, [pc, #448]	; (8003710 <HAL_RCC_OscConfig+0x298>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a6f      	ldr	r2, [pc, #444]	; (8003710 <HAL_RCC_OscConfig+0x298>)
 8003552:	f043 0308 	orr.w	r3, r3, #8
 8003556:	6013      	str	r3, [r2, #0]
 8003558:	4b6d      	ldr	r3, [pc, #436]	; (8003710 <HAL_RCC_OscConfig+0x298>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a1b      	ldr	r3, [r3, #32]
 8003564:	496a      	ldr	r1, [pc, #424]	; (8003710 <HAL_RCC_OscConfig+0x298>)
 8003566:	4313      	orrs	r3, r2
 8003568:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800356a:	4b69      	ldr	r3, [pc, #420]	; (8003710 <HAL_RCC_OscConfig+0x298>)
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	021b      	lsls	r3, r3, #8
 8003578:	4965      	ldr	r1, [pc, #404]	; (8003710 <HAL_RCC_OscConfig+0x298>)
 800357a:	4313      	orrs	r3, r2
 800357c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d109      	bne.n	8003598 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a1b      	ldr	r3, [r3, #32]
 8003588:	4618      	mov	r0, r3
 800358a:	f000 fcff 	bl	8003f8c <RCC_SetFlashLatencyFromMSIRange>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d001      	beq.n	8003598 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e34d      	b.n	8003c34 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003598:	f000 fc36 	bl	8003e08 <HAL_RCC_GetSysClockFreq>
 800359c:	4601      	mov	r1, r0
 800359e:	4b5c      	ldr	r3, [pc, #368]	; (8003710 <HAL_RCC_OscConfig+0x298>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	091b      	lsrs	r3, r3, #4
 80035a4:	f003 030f 	and.w	r3, r3, #15
 80035a8:	4a5a      	ldr	r2, [pc, #360]	; (8003714 <HAL_RCC_OscConfig+0x29c>)
 80035aa:	5cd3      	ldrb	r3, [r2, r3]
 80035ac:	f003 031f 	and.w	r3, r3, #31
 80035b0:	fa21 f303 	lsr.w	r3, r1, r3
 80035b4:	4a58      	ldr	r2, [pc, #352]	; (8003718 <HAL_RCC_OscConfig+0x2a0>)
 80035b6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80035b8:	4b58      	ldr	r3, [pc, #352]	; (800371c <HAL_RCC_OscConfig+0x2a4>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4618      	mov	r0, r3
 80035be:	f7fd fd8f 	bl	80010e0 <HAL_InitTick>
 80035c2:	4603      	mov	r3, r0
 80035c4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80035c6:	7bfb      	ldrb	r3, [r7, #15]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d052      	beq.n	8003672 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80035cc:	7bfb      	ldrb	r3, [r7, #15]
 80035ce:	e331      	b.n	8003c34 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d032      	beq.n	800363e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80035d8:	4b4d      	ldr	r3, [pc, #308]	; (8003710 <HAL_RCC_OscConfig+0x298>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a4c      	ldr	r2, [pc, #304]	; (8003710 <HAL_RCC_OscConfig+0x298>)
 80035de:	f043 0301 	orr.w	r3, r3, #1
 80035e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035e4:	f7fd fdcc 	bl	8001180 <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035ec:	f7fd fdc8 	bl	8001180 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e31a      	b.n	8003c34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035fe:	4b44      	ldr	r3, [pc, #272]	; (8003710 <HAL_RCC_OscConfig+0x298>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d0f0      	beq.n	80035ec <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800360a:	4b41      	ldr	r3, [pc, #260]	; (8003710 <HAL_RCC_OscConfig+0x298>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a40      	ldr	r2, [pc, #256]	; (8003710 <HAL_RCC_OscConfig+0x298>)
 8003610:	f043 0308 	orr.w	r3, r3, #8
 8003614:	6013      	str	r3, [r2, #0]
 8003616:	4b3e      	ldr	r3, [pc, #248]	; (8003710 <HAL_RCC_OscConfig+0x298>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	493b      	ldr	r1, [pc, #236]	; (8003710 <HAL_RCC_OscConfig+0x298>)
 8003624:	4313      	orrs	r3, r2
 8003626:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003628:	4b39      	ldr	r3, [pc, #228]	; (8003710 <HAL_RCC_OscConfig+0x298>)
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	69db      	ldr	r3, [r3, #28]
 8003634:	021b      	lsls	r3, r3, #8
 8003636:	4936      	ldr	r1, [pc, #216]	; (8003710 <HAL_RCC_OscConfig+0x298>)
 8003638:	4313      	orrs	r3, r2
 800363a:	604b      	str	r3, [r1, #4]
 800363c:	e01a      	b.n	8003674 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800363e:	4b34      	ldr	r3, [pc, #208]	; (8003710 <HAL_RCC_OscConfig+0x298>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a33      	ldr	r2, [pc, #204]	; (8003710 <HAL_RCC_OscConfig+0x298>)
 8003644:	f023 0301 	bic.w	r3, r3, #1
 8003648:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800364a:	f7fd fd99 	bl	8001180 <HAL_GetTick>
 800364e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003650:	e008      	b.n	8003664 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003652:	f7fd fd95 	bl	8001180 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	2b02      	cmp	r3, #2
 800365e:	d901      	bls.n	8003664 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e2e7      	b.n	8003c34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003664:	4b2a      	ldr	r3, [pc, #168]	; (8003710 <HAL_RCC_OscConfig+0x298>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1f0      	bne.n	8003652 <HAL_RCC_OscConfig+0x1da>
 8003670:	e000      	b.n	8003674 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003672:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0301 	and.w	r3, r3, #1
 800367c:	2b00      	cmp	r3, #0
 800367e:	d074      	beq.n	800376a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	2b08      	cmp	r3, #8
 8003684:	d005      	beq.n	8003692 <HAL_RCC_OscConfig+0x21a>
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	2b0c      	cmp	r3, #12
 800368a:	d10e      	bne.n	80036aa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	2b03      	cmp	r3, #3
 8003690:	d10b      	bne.n	80036aa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003692:	4b1f      	ldr	r3, [pc, #124]	; (8003710 <HAL_RCC_OscConfig+0x298>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d064      	beq.n	8003768 <HAL_RCC_OscConfig+0x2f0>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d160      	bne.n	8003768 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e2c4      	b.n	8003c34 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036b2:	d106      	bne.n	80036c2 <HAL_RCC_OscConfig+0x24a>
 80036b4:	4b16      	ldr	r3, [pc, #88]	; (8003710 <HAL_RCC_OscConfig+0x298>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a15      	ldr	r2, [pc, #84]	; (8003710 <HAL_RCC_OscConfig+0x298>)
 80036ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036be:	6013      	str	r3, [r2, #0]
 80036c0:	e01d      	b.n	80036fe <HAL_RCC_OscConfig+0x286>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036ca:	d10c      	bne.n	80036e6 <HAL_RCC_OscConfig+0x26e>
 80036cc:	4b10      	ldr	r3, [pc, #64]	; (8003710 <HAL_RCC_OscConfig+0x298>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a0f      	ldr	r2, [pc, #60]	; (8003710 <HAL_RCC_OscConfig+0x298>)
 80036d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036d6:	6013      	str	r3, [r2, #0]
 80036d8:	4b0d      	ldr	r3, [pc, #52]	; (8003710 <HAL_RCC_OscConfig+0x298>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a0c      	ldr	r2, [pc, #48]	; (8003710 <HAL_RCC_OscConfig+0x298>)
 80036de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036e2:	6013      	str	r3, [r2, #0]
 80036e4:	e00b      	b.n	80036fe <HAL_RCC_OscConfig+0x286>
 80036e6:	4b0a      	ldr	r3, [pc, #40]	; (8003710 <HAL_RCC_OscConfig+0x298>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a09      	ldr	r2, [pc, #36]	; (8003710 <HAL_RCC_OscConfig+0x298>)
 80036ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036f0:	6013      	str	r3, [r2, #0]
 80036f2:	4b07      	ldr	r3, [pc, #28]	; (8003710 <HAL_RCC_OscConfig+0x298>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a06      	ldr	r2, [pc, #24]	; (8003710 <HAL_RCC_OscConfig+0x298>)
 80036f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036fc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d01c      	beq.n	8003740 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003706:	f7fd fd3b 	bl	8001180 <HAL_GetTick>
 800370a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800370c:	e011      	b.n	8003732 <HAL_RCC_OscConfig+0x2ba>
 800370e:	bf00      	nop
 8003710:	40021000 	.word	0x40021000
 8003714:	0800688c 	.word	0x0800688c
 8003718:	20000000 	.word	0x20000000
 800371c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003720:	f7fd fd2e 	bl	8001180 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b64      	cmp	r3, #100	; 0x64
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e280      	b.n	8003c34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003732:	4baf      	ldr	r3, [pc, #700]	; (80039f0 <HAL_RCC_OscConfig+0x578>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d0f0      	beq.n	8003720 <HAL_RCC_OscConfig+0x2a8>
 800373e:	e014      	b.n	800376a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003740:	f7fd fd1e 	bl	8001180 <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003748:	f7fd fd1a 	bl	8001180 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b64      	cmp	r3, #100	; 0x64
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e26c      	b.n	8003c34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800375a:	4ba5      	ldr	r3, [pc, #660]	; (80039f0 <HAL_RCC_OscConfig+0x578>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1f0      	bne.n	8003748 <HAL_RCC_OscConfig+0x2d0>
 8003766:	e000      	b.n	800376a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003768:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d060      	beq.n	8003838 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	2b04      	cmp	r3, #4
 800377a:	d005      	beq.n	8003788 <HAL_RCC_OscConfig+0x310>
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	2b0c      	cmp	r3, #12
 8003780:	d119      	bne.n	80037b6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	2b02      	cmp	r3, #2
 8003786:	d116      	bne.n	80037b6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003788:	4b99      	ldr	r3, [pc, #612]	; (80039f0 <HAL_RCC_OscConfig+0x578>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003790:	2b00      	cmp	r3, #0
 8003792:	d005      	beq.n	80037a0 <HAL_RCC_OscConfig+0x328>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d101      	bne.n	80037a0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e249      	b.n	8003c34 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037a0:	4b93      	ldr	r3, [pc, #588]	; (80039f0 <HAL_RCC_OscConfig+0x578>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	061b      	lsls	r3, r3, #24
 80037ae:	4990      	ldr	r1, [pc, #576]	; (80039f0 <HAL_RCC_OscConfig+0x578>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037b4:	e040      	b.n	8003838 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d023      	beq.n	8003806 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037be:	4b8c      	ldr	r3, [pc, #560]	; (80039f0 <HAL_RCC_OscConfig+0x578>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a8b      	ldr	r2, [pc, #556]	; (80039f0 <HAL_RCC_OscConfig+0x578>)
 80037c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ca:	f7fd fcd9 	bl	8001180 <HAL_GetTick>
 80037ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037d0:	e008      	b.n	80037e4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037d2:	f7fd fcd5 	bl	8001180 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e227      	b.n	8003c34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037e4:	4b82      	ldr	r3, [pc, #520]	; (80039f0 <HAL_RCC_OscConfig+0x578>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d0f0      	beq.n	80037d2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037f0:	4b7f      	ldr	r3, [pc, #508]	; (80039f0 <HAL_RCC_OscConfig+0x578>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	061b      	lsls	r3, r3, #24
 80037fe:	497c      	ldr	r1, [pc, #496]	; (80039f0 <HAL_RCC_OscConfig+0x578>)
 8003800:	4313      	orrs	r3, r2
 8003802:	604b      	str	r3, [r1, #4]
 8003804:	e018      	b.n	8003838 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003806:	4b7a      	ldr	r3, [pc, #488]	; (80039f0 <HAL_RCC_OscConfig+0x578>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a79      	ldr	r2, [pc, #484]	; (80039f0 <HAL_RCC_OscConfig+0x578>)
 800380c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003810:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003812:	f7fd fcb5 	bl	8001180 <HAL_GetTick>
 8003816:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003818:	e008      	b.n	800382c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800381a:	f7fd fcb1 	bl	8001180 <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	2b02      	cmp	r3, #2
 8003826:	d901      	bls.n	800382c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e203      	b.n	8003c34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800382c:	4b70      	ldr	r3, [pc, #448]	; (80039f0 <HAL_RCC_OscConfig+0x578>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1f0      	bne.n	800381a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0308 	and.w	r3, r3, #8
 8003840:	2b00      	cmp	r3, #0
 8003842:	d03c      	beq.n	80038be <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	695b      	ldr	r3, [r3, #20]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d01c      	beq.n	8003886 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800384c:	4b68      	ldr	r3, [pc, #416]	; (80039f0 <HAL_RCC_OscConfig+0x578>)
 800384e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003852:	4a67      	ldr	r2, [pc, #412]	; (80039f0 <HAL_RCC_OscConfig+0x578>)
 8003854:	f043 0301 	orr.w	r3, r3, #1
 8003858:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800385c:	f7fd fc90 	bl	8001180 <HAL_GetTick>
 8003860:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003862:	e008      	b.n	8003876 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003864:	f7fd fc8c 	bl	8001180 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b02      	cmp	r3, #2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e1de      	b.n	8003c34 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003876:	4b5e      	ldr	r3, [pc, #376]	; (80039f0 <HAL_RCC_OscConfig+0x578>)
 8003878:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0ef      	beq.n	8003864 <HAL_RCC_OscConfig+0x3ec>
 8003884:	e01b      	b.n	80038be <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003886:	4b5a      	ldr	r3, [pc, #360]	; (80039f0 <HAL_RCC_OscConfig+0x578>)
 8003888:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800388c:	4a58      	ldr	r2, [pc, #352]	; (80039f0 <HAL_RCC_OscConfig+0x578>)
 800388e:	f023 0301 	bic.w	r3, r3, #1
 8003892:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003896:	f7fd fc73 	bl	8001180 <HAL_GetTick>
 800389a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800389c:	e008      	b.n	80038b0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800389e:	f7fd fc6f 	bl	8001180 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d901      	bls.n	80038b0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e1c1      	b.n	8003c34 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038b0:	4b4f      	ldr	r3, [pc, #316]	; (80039f0 <HAL_RCC_OscConfig+0x578>)
 80038b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1ef      	bne.n	800389e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0304 	and.w	r3, r3, #4
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f000 80a6 	beq.w	8003a18 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038cc:	2300      	movs	r3, #0
 80038ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80038d0:	4b47      	ldr	r3, [pc, #284]	; (80039f0 <HAL_RCC_OscConfig+0x578>)
 80038d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d10d      	bne.n	80038f8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038dc:	4b44      	ldr	r3, [pc, #272]	; (80039f0 <HAL_RCC_OscConfig+0x578>)
 80038de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038e0:	4a43      	ldr	r2, [pc, #268]	; (80039f0 <HAL_RCC_OscConfig+0x578>)
 80038e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038e6:	6593      	str	r3, [r2, #88]	; 0x58
 80038e8:	4b41      	ldr	r3, [pc, #260]	; (80039f0 <HAL_RCC_OscConfig+0x578>)
 80038ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038f0:	60bb      	str	r3, [r7, #8]
 80038f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038f4:	2301      	movs	r3, #1
 80038f6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038f8:	4b3e      	ldr	r3, [pc, #248]	; (80039f4 <HAL_RCC_OscConfig+0x57c>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003900:	2b00      	cmp	r3, #0
 8003902:	d118      	bne.n	8003936 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003904:	4b3b      	ldr	r3, [pc, #236]	; (80039f4 <HAL_RCC_OscConfig+0x57c>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a3a      	ldr	r2, [pc, #232]	; (80039f4 <HAL_RCC_OscConfig+0x57c>)
 800390a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800390e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003910:	f7fd fc36 	bl	8001180 <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003918:	f7fd fc32 	bl	8001180 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e184      	b.n	8003c34 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800392a:	4b32      	ldr	r3, [pc, #200]	; (80039f4 <HAL_RCC_OscConfig+0x57c>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003932:	2b00      	cmp	r3, #0
 8003934:	d0f0      	beq.n	8003918 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d108      	bne.n	8003950 <HAL_RCC_OscConfig+0x4d8>
 800393e:	4b2c      	ldr	r3, [pc, #176]	; (80039f0 <HAL_RCC_OscConfig+0x578>)
 8003940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003944:	4a2a      	ldr	r2, [pc, #168]	; (80039f0 <HAL_RCC_OscConfig+0x578>)
 8003946:	f043 0301 	orr.w	r3, r3, #1
 800394a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800394e:	e024      	b.n	800399a <HAL_RCC_OscConfig+0x522>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	2b05      	cmp	r3, #5
 8003956:	d110      	bne.n	800397a <HAL_RCC_OscConfig+0x502>
 8003958:	4b25      	ldr	r3, [pc, #148]	; (80039f0 <HAL_RCC_OscConfig+0x578>)
 800395a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395e:	4a24      	ldr	r2, [pc, #144]	; (80039f0 <HAL_RCC_OscConfig+0x578>)
 8003960:	f043 0304 	orr.w	r3, r3, #4
 8003964:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003968:	4b21      	ldr	r3, [pc, #132]	; (80039f0 <HAL_RCC_OscConfig+0x578>)
 800396a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800396e:	4a20      	ldr	r2, [pc, #128]	; (80039f0 <HAL_RCC_OscConfig+0x578>)
 8003970:	f043 0301 	orr.w	r3, r3, #1
 8003974:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003978:	e00f      	b.n	800399a <HAL_RCC_OscConfig+0x522>
 800397a:	4b1d      	ldr	r3, [pc, #116]	; (80039f0 <HAL_RCC_OscConfig+0x578>)
 800397c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003980:	4a1b      	ldr	r2, [pc, #108]	; (80039f0 <HAL_RCC_OscConfig+0x578>)
 8003982:	f023 0301 	bic.w	r3, r3, #1
 8003986:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800398a:	4b19      	ldr	r3, [pc, #100]	; (80039f0 <HAL_RCC_OscConfig+0x578>)
 800398c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003990:	4a17      	ldr	r2, [pc, #92]	; (80039f0 <HAL_RCC_OscConfig+0x578>)
 8003992:	f023 0304 	bic.w	r3, r3, #4
 8003996:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d016      	beq.n	80039d0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a2:	f7fd fbed 	bl	8001180 <HAL_GetTick>
 80039a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039a8:	e00a      	b.n	80039c0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039aa:	f7fd fbe9 	bl	8001180 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d901      	bls.n	80039c0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e139      	b.n	8003c34 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039c0:	4b0b      	ldr	r3, [pc, #44]	; (80039f0 <HAL_RCC_OscConfig+0x578>)
 80039c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d0ed      	beq.n	80039aa <HAL_RCC_OscConfig+0x532>
 80039ce:	e01a      	b.n	8003a06 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d0:	f7fd fbd6 	bl	8001180 <HAL_GetTick>
 80039d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039d6:	e00f      	b.n	80039f8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039d8:	f7fd fbd2 	bl	8001180 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d906      	bls.n	80039f8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e122      	b.n	8003c34 <HAL_RCC_OscConfig+0x7bc>
 80039ee:	bf00      	nop
 80039f0:	40021000 	.word	0x40021000
 80039f4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039f8:	4b90      	ldr	r3, [pc, #576]	; (8003c3c <HAL_RCC_OscConfig+0x7c4>)
 80039fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1e8      	bne.n	80039d8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a06:	7ffb      	ldrb	r3, [r7, #31]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d105      	bne.n	8003a18 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a0c:	4b8b      	ldr	r3, [pc, #556]	; (8003c3c <HAL_RCC_OscConfig+0x7c4>)
 8003a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a10:	4a8a      	ldr	r2, [pc, #552]	; (8003c3c <HAL_RCC_OscConfig+0x7c4>)
 8003a12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a16:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f000 8108 	beq.w	8003c32 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	f040 80d0 	bne.w	8003bcc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003a2c:	4b83      	ldr	r3, [pc, #524]	; (8003c3c <HAL_RCC_OscConfig+0x7c4>)
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	f003 0203 	and.w	r2, r3, #3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d130      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d127      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a5c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d11f      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a6c:	2a07      	cmp	r2, #7
 8003a6e:	bf14      	ite	ne
 8003a70:	2201      	movne	r2, #1
 8003a72:	2200      	moveq	r2, #0
 8003a74:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d113      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a84:	085b      	lsrs	r3, r3, #1
 8003a86:	3b01      	subs	r3, #1
 8003a88:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d109      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a98:	085b      	lsrs	r3, r3, #1
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d06e      	beq.n	8003b80 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	2b0c      	cmp	r3, #12
 8003aa6:	d069      	beq.n	8003b7c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003aa8:	4b64      	ldr	r3, [pc, #400]	; (8003c3c <HAL_RCC_OscConfig+0x7c4>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d105      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003ab4:	4b61      	ldr	r3, [pc, #388]	; (8003c3c <HAL_RCC_OscConfig+0x7c4>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e0b7      	b.n	8003c34 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003ac4:	4b5d      	ldr	r3, [pc, #372]	; (8003c3c <HAL_RCC_OscConfig+0x7c4>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a5c      	ldr	r2, [pc, #368]	; (8003c3c <HAL_RCC_OscConfig+0x7c4>)
 8003aca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ace:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ad0:	f7fd fb56 	bl	8001180 <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ad8:	f7fd fb52 	bl	8001180 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e0a4      	b.n	8003c34 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003aea:	4b54      	ldr	r3, [pc, #336]	; (8003c3c <HAL_RCC_OscConfig+0x7c4>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1f0      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003af6:	4b51      	ldr	r3, [pc, #324]	; (8003c3c <HAL_RCC_OscConfig+0x7c4>)
 8003af8:	68da      	ldr	r2, [r3, #12]
 8003afa:	4b51      	ldr	r3, [pc, #324]	; (8003c40 <HAL_RCC_OscConfig+0x7c8>)
 8003afc:	4013      	ands	r3, r2
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003b06:	3a01      	subs	r2, #1
 8003b08:	0112      	lsls	r2, r2, #4
 8003b0a:	4311      	orrs	r1, r2
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b10:	0212      	lsls	r2, r2, #8
 8003b12:	4311      	orrs	r1, r2
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b18:	0852      	lsrs	r2, r2, #1
 8003b1a:	3a01      	subs	r2, #1
 8003b1c:	0552      	lsls	r2, r2, #21
 8003b1e:	4311      	orrs	r1, r2
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003b24:	0852      	lsrs	r2, r2, #1
 8003b26:	3a01      	subs	r2, #1
 8003b28:	0652      	lsls	r2, r2, #25
 8003b2a:	4311      	orrs	r1, r2
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b30:	0912      	lsrs	r2, r2, #4
 8003b32:	0452      	lsls	r2, r2, #17
 8003b34:	430a      	orrs	r2, r1
 8003b36:	4941      	ldr	r1, [pc, #260]	; (8003c3c <HAL_RCC_OscConfig+0x7c4>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003b3c:	4b3f      	ldr	r3, [pc, #252]	; (8003c3c <HAL_RCC_OscConfig+0x7c4>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a3e      	ldr	r2, [pc, #248]	; (8003c3c <HAL_RCC_OscConfig+0x7c4>)
 8003b42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b46:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b48:	4b3c      	ldr	r3, [pc, #240]	; (8003c3c <HAL_RCC_OscConfig+0x7c4>)
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	4a3b      	ldr	r2, [pc, #236]	; (8003c3c <HAL_RCC_OscConfig+0x7c4>)
 8003b4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b52:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b54:	f7fd fb14 	bl	8001180 <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b5c:	f7fd fb10 	bl	8001180 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e062      	b.n	8003c34 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b6e:	4b33      	ldr	r3, [pc, #204]	; (8003c3c <HAL_RCC_OscConfig+0x7c4>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d0f0      	beq.n	8003b5c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b7a:	e05a      	b.n	8003c32 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e059      	b.n	8003c34 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b80:	4b2e      	ldr	r3, [pc, #184]	; (8003c3c <HAL_RCC_OscConfig+0x7c4>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d152      	bne.n	8003c32 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003b8c:	4b2b      	ldr	r3, [pc, #172]	; (8003c3c <HAL_RCC_OscConfig+0x7c4>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a2a      	ldr	r2, [pc, #168]	; (8003c3c <HAL_RCC_OscConfig+0x7c4>)
 8003b92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b96:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b98:	4b28      	ldr	r3, [pc, #160]	; (8003c3c <HAL_RCC_OscConfig+0x7c4>)
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	4a27      	ldr	r2, [pc, #156]	; (8003c3c <HAL_RCC_OscConfig+0x7c4>)
 8003b9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ba2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003ba4:	f7fd faec 	bl	8001180 <HAL_GetTick>
 8003ba8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003baa:	e008      	b.n	8003bbe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bac:	f7fd fae8 	bl	8001180 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e03a      	b.n	8003c34 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bbe:	4b1f      	ldr	r3, [pc, #124]	; (8003c3c <HAL_RCC_OscConfig+0x7c4>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d0f0      	beq.n	8003bac <HAL_RCC_OscConfig+0x734>
 8003bca:	e032      	b.n	8003c32 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	2b0c      	cmp	r3, #12
 8003bd0:	d02d      	beq.n	8003c2e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bd2:	4b1a      	ldr	r3, [pc, #104]	; (8003c3c <HAL_RCC_OscConfig+0x7c4>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a19      	ldr	r2, [pc, #100]	; (8003c3c <HAL_RCC_OscConfig+0x7c4>)
 8003bd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bdc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003bde:	4b17      	ldr	r3, [pc, #92]	; (8003c3c <HAL_RCC_OscConfig+0x7c4>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d105      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003bea:	4b14      	ldr	r3, [pc, #80]	; (8003c3c <HAL_RCC_OscConfig+0x7c4>)
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	4a13      	ldr	r2, [pc, #76]	; (8003c3c <HAL_RCC_OscConfig+0x7c4>)
 8003bf0:	f023 0303 	bic.w	r3, r3, #3
 8003bf4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003bf6:	4b11      	ldr	r3, [pc, #68]	; (8003c3c <HAL_RCC_OscConfig+0x7c4>)
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	4a10      	ldr	r2, [pc, #64]	; (8003c3c <HAL_RCC_OscConfig+0x7c4>)
 8003bfc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003c00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c04:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c06:	f7fd fabb 	bl	8001180 <HAL_GetTick>
 8003c0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c0c:	e008      	b.n	8003c20 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c0e:	f7fd fab7 	bl	8001180 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d901      	bls.n	8003c20 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e009      	b.n	8003c34 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c20:	4b06      	ldr	r3, [pc, #24]	; (8003c3c <HAL_RCC_OscConfig+0x7c4>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1f0      	bne.n	8003c0e <HAL_RCC_OscConfig+0x796>
 8003c2c:	e001      	b.n	8003c32 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e000      	b.n	8003c34 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3720      	adds	r7, #32
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	40021000 	.word	0x40021000
 8003c40:	f99d808c 	.word	0xf99d808c

08003c44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d101      	bne.n	8003c58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e0c8      	b.n	8003dea <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c58:	4b66      	ldr	r3, [pc, #408]	; (8003df4 <HAL_RCC_ClockConfig+0x1b0>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0307 	and.w	r3, r3, #7
 8003c60:	683a      	ldr	r2, [r7, #0]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d910      	bls.n	8003c88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c66:	4b63      	ldr	r3, [pc, #396]	; (8003df4 <HAL_RCC_ClockConfig+0x1b0>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f023 0207 	bic.w	r2, r3, #7
 8003c6e:	4961      	ldr	r1, [pc, #388]	; (8003df4 <HAL_RCC_ClockConfig+0x1b0>)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c76:	4b5f      	ldr	r3, [pc, #380]	; (8003df4 <HAL_RCC_ClockConfig+0x1b0>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0307 	and.w	r3, r3, #7
 8003c7e:	683a      	ldr	r2, [r7, #0]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d001      	beq.n	8003c88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e0b0      	b.n	8003dea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d04c      	beq.n	8003d2e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	2b03      	cmp	r3, #3
 8003c9a:	d107      	bne.n	8003cac <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c9c:	4b56      	ldr	r3, [pc, #344]	; (8003df8 <HAL_RCC_ClockConfig+0x1b4>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d121      	bne.n	8003cec <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e09e      	b.n	8003dea <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d107      	bne.n	8003cc4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cb4:	4b50      	ldr	r3, [pc, #320]	; (8003df8 <HAL_RCC_ClockConfig+0x1b4>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d115      	bne.n	8003cec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e092      	b.n	8003dea <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d107      	bne.n	8003cdc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ccc:	4b4a      	ldr	r3, [pc, #296]	; (8003df8 <HAL_RCC_ClockConfig+0x1b4>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d109      	bne.n	8003cec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e086      	b.n	8003dea <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cdc:	4b46      	ldr	r3, [pc, #280]	; (8003df8 <HAL_RCC_ClockConfig+0x1b4>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d101      	bne.n	8003cec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e07e      	b.n	8003dea <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003cec:	4b42      	ldr	r3, [pc, #264]	; (8003df8 <HAL_RCC_ClockConfig+0x1b4>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f023 0203 	bic.w	r2, r3, #3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	493f      	ldr	r1, [pc, #252]	; (8003df8 <HAL_RCC_ClockConfig+0x1b4>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cfe:	f7fd fa3f 	bl	8001180 <HAL_GetTick>
 8003d02:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d04:	e00a      	b.n	8003d1c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d06:	f7fd fa3b 	bl	8001180 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d901      	bls.n	8003d1c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e066      	b.n	8003dea <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d1c:	4b36      	ldr	r3, [pc, #216]	; (8003df8 <HAL_RCC_ClockConfig+0x1b4>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f003 020c 	and.w	r2, r3, #12
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d1eb      	bne.n	8003d06 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d008      	beq.n	8003d4c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d3a:	4b2f      	ldr	r3, [pc, #188]	; (8003df8 <HAL_RCC_ClockConfig+0x1b4>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	492c      	ldr	r1, [pc, #176]	; (8003df8 <HAL_RCC_ClockConfig+0x1b4>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d4c:	4b29      	ldr	r3, [pc, #164]	; (8003df4 <HAL_RCC_ClockConfig+0x1b0>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0307 	and.w	r3, r3, #7
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d210      	bcs.n	8003d7c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d5a:	4b26      	ldr	r3, [pc, #152]	; (8003df4 <HAL_RCC_ClockConfig+0x1b0>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f023 0207 	bic.w	r2, r3, #7
 8003d62:	4924      	ldr	r1, [pc, #144]	; (8003df4 <HAL_RCC_ClockConfig+0x1b0>)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d6a:	4b22      	ldr	r3, [pc, #136]	; (8003df4 <HAL_RCC_ClockConfig+0x1b0>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0307 	and.w	r3, r3, #7
 8003d72:	683a      	ldr	r2, [r7, #0]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d001      	beq.n	8003d7c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e036      	b.n	8003dea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0304 	and.w	r3, r3, #4
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d008      	beq.n	8003d9a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d88:	4b1b      	ldr	r3, [pc, #108]	; (8003df8 <HAL_RCC_ClockConfig+0x1b4>)
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	4918      	ldr	r1, [pc, #96]	; (8003df8 <HAL_RCC_ClockConfig+0x1b4>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0308 	and.w	r3, r3, #8
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d009      	beq.n	8003dba <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003da6:	4b14      	ldr	r3, [pc, #80]	; (8003df8 <HAL_RCC_ClockConfig+0x1b4>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	4910      	ldr	r1, [pc, #64]	; (8003df8 <HAL_RCC_ClockConfig+0x1b4>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003dba:	f000 f825 	bl	8003e08 <HAL_RCC_GetSysClockFreq>
 8003dbe:	4601      	mov	r1, r0
 8003dc0:	4b0d      	ldr	r3, [pc, #52]	; (8003df8 <HAL_RCC_ClockConfig+0x1b4>)
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	091b      	lsrs	r3, r3, #4
 8003dc6:	f003 030f 	and.w	r3, r3, #15
 8003dca:	4a0c      	ldr	r2, [pc, #48]	; (8003dfc <HAL_RCC_ClockConfig+0x1b8>)
 8003dcc:	5cd3      	ldrb	r3, [r2, r3]
 8003dce:	f003 031f 	and.w	r3, r3, #31
 8003dd2:	fa21 f303 	lsr.w	r3, r1, r3
 8003dd6:	4a0a      	ldr	r2, [pc, #40]	; (8003e00 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003dda:	4b0a      	ldr	r3, [pc, #40]	; (8003e04 <HAL_RCC_ClockConfig+0x1c0>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7fd f97e 	bl	80010e0 <HAL_InitTick>
 8003de4:	4603      	mov	r3, r0
 8003de6:	72fb      	strb	r3, [r7, #11]

  return status;
 8003de8:	7afb      	ldrb	r3, [r7, #11]
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	40022000 	.word	0x40022000
 8003df8:	40021000 	.word	0x40021000
 8003dfc:	0800688c 	.word	0x0800688c
 8003e00:	20000000 	.word	0x20000000
 8003e04:	20000004 	.word	0x20000004

08003e08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b089      	sub	sp, #36	; 0x24
 8003e0c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	61fb      	str	r3, [r7, #28]
 8003e12:	2300      	movs	r3, #0
 8003e14:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e16:	4b3d      	ldr	r3, [pc, #244]	; (8003f0c <HAL_RCC_GetSysClockFreq+0x104>)
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f003 030c 	and.w	r3, r3, #12
 8003e1e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e20:	4b3a      	ldr	r3, [pc, #232]	; (8003f0c <HAL_RCC_GetSysClockFreq+0x104>)
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	f003 0303 	and.w	r3, r3, #3
 8003e28:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d005      	beq.n	8003e3c <HAL_RCC_GetSysClockFreq+0x34>
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	2b0c      	cmp	r3, #12
 8003e34:	d121      	bne.n	8003e7a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d11e      	bne.n	8003e7a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e3c:	4b33      	ldr	r3, [pc, #204]	; (8003f0c <HAL_RCC_GetSysClockFreq+0x104>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0308 	and.w	r3, r3, #8
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d107      	bne.n	8003e58 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e48:	4b30      	ldr	r3, [pc, #192]	; (8003f0c <HAL_RCC_GetSysClockFreq+0x104>)
 8003e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e4e:	0a1b      	lsrs	r3, r3, #8
 8003e50:	f003 030f 	and.w	r3, r3, #15
 8003e54:	61fb      	str	r3, [r7, #28]
 8003e56:	e005      	b.n	8003e64 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e58:	4b2c      	ldr	r3, [pc, #176]	; (8003f0c <HAL_RCC_GetSysClockFreq+0x104>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	091b      	lsrs	r3, r3, #4
 8003e5e:	f003 030f 	and.w	r3, r3, #15
 8003e62:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e64:	4a2a      	ldr	r2, [pc, #168]	; (8003f10 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e6c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d10d      	bne.n	8003e90 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e78:	e00a      	b.n	8003e90 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	2b04      	cmp	r3, #4
 8003e7e:	d102      	bne.n	8003e86 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e80:	4b24      	ldr	r3, [pc, #144]	; (8003f14 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003e82:	61bb      	str	r3, [r7, #24]
 8003e84:	e004      	b.n	8003e90 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	2b08      	cmp	r3, #8
 8003e8a:	d101      	bne.n	8003e90 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e8c:	4b22      	ldr	r3, [pc, #136]	; (8003f18 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e8e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	2b0c      	cmp	r3, #12
 8003e94:	d133      	bne.n	8003efe <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e96:	4b1d      	ldr	r3, [pc, #116]	; (8003f0c <HAL_RCC_GetSysClockFreq+0x104>)
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	f003 0303 	and.w	r3, r3, #3
 8003e9e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d002      	beq.n	8003eac <HAL_RCC_GetSysClockFreq+0xa4>
 8003ea6:	2b03      	cmp	r3, #3
 8003ea8:	d003      	beq.n	8003eb2 <HAL_RCC_GetSysClockFreq+0xaa>
 8003eaa:	e005      	b.n	8003eb8 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003eac:	4b19      	ldr	r3, [pc, #100]	; (8003f14 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003eae:	617b      	str	r3, [r7, #20]
      break;
 8003eb0:	e005      	b.n	8003ebe <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003eb2:	4b19      	ldr	r3, [pc, #100]	; (8003f18 <HAL_RCC_GetSysClockFreq+0x110>)
 8003eb4:	617b      	str	r3, [r7, #20]
      break;
 8003eb6:	e002      	b.n	8003ebe <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	617b      	str	r3, [r7, #20]
      break;
 8003ebc:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ebe:	4b13      	ldr	r3, [pc, #76]	; (8003f0c <HAL_RCC_GetSysClockFreq+0x104>)
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	091b      	lsrs	r3, r3, #4
 8003ec4:	f003 0307 	and.w	r3, r3, #7
 8003ec8:	3301      	adds	r3, #1
 8003eca:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003ecc:	4b0f      	ldr	r3, [pc, #60]	; (8003f0c <HAL_RCC_GetSysClockFreq+0x104>)
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	0a1b      	lsrs	r3, r3, #8
 8003ed2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	fb02 f203 	mul.w	r2, r2, r3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee2:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ee4:	4b09      	ldr	r3, [pc, #36]	; (8003f0c <HAL_RCC_GetSysClockFreq+0x104>)
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	0e5b      	lsrs	r3, r3, #25
 8003eea:	f003 0303 	and.w	r3, r3, #3
 8003eee:	3301      	adds	r3, #1
 8003ef0:	005b      	lsls	r3, r3, #1
 8003ef2:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003efc:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003efe:	69bb      	ldr	r3, [r7, #24]
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3724      	adds	r7, #36	; 0x24
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr
 8003f0c:	40021000 	.word	0x40021000
 8003f10:	080068a4 	.word	0x080068a4
 8003f14:	00f42400 	.word	0x00f42400
 8003f18:	007a1200 	.word	0x007a1200

08003f1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f20:	4b03      	ldr	r3, [pc, #12]	; (8003f30 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f22:	681b      	ldr	r3, [r3, #0]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	20000000 	.word	0x20000000

08003f34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003f38:	f7ff fff0 	bl	8003f1c <HAL_RCC_GetHCLKFreq>
 8003f3c:	4601      	mov	r1, r0
 8003f3e:	4b06      	ldr	r3, [pc, #24]	; (8003f58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	0a1b      	lsrs	r3, r3, #8
 8003f44:	f003 0307 	and.w	r3, r3, #7
 8003f48:	4a04      	ldr	r2, [pc, #16]	; (8003f5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f4a:	5cd3      	ldrb	r3, [r2, r3]
 8003f4c:	f003 031f 	and.w	r3, r3, #31
 8003f50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	40021000 	.word	0x40021000
 8003f5c:	0800689c 	.word	0x0800689c

08003f60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f64:	f7ff ffda 	bl	8003f1c <HAL_RCC_GetHCLKFreq>
 8003f68:	4601      	mov	r1, r0
 8003f6a:	4b06      	ldr	r3, [pc, #24]	; (8003f84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	0adb      	lsrs	r3, r3, #11
 8003f70:	f003 0307 	and.w	r3, r3, #7
 8003f74:	4a04      	ldr	r2, [pc, #16]	; (8003f88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f76:	5cd3      	ldrb	r3, [r2, r3]
 8003f78:	f003 031f 	and.w	r3, r3, #31
 8003f7c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	40021000 	.word	0x40021000
 8003f88:	0800689c 	.word	0x0800689c

08003f8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003f94:	2300      	movs	r3, #0
 8003f96:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003f98:	4b2a      	ldr	r3, [pc, #168]	; (8004044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d003      	beq.n	8003fac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003fa4:	f7ff fa04 	bl	80033b0 <HAL_PWREx_GetVoltageRange>
 8003fa8:	6178      	str	r0, [r7, #20]
 8003faa:	e014      	b.n	8003fd6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fac:	4b25      	ldr	r3, [pc, #148]	; (8004044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fb0:	4a24      	ldr	r2, [pc, #144]	; (8004044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fb6:	6593      	str	r3, [r2, #88]	; 0x58
 8003fb8:	4b22      	ldr	r3, [pc, #136]	; (8004044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fc0:	60fb      	str	r3, [r7, #12]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003fc4:	f7ff f9f4 	bl	80033b0 <HAL_PWREx_GetVoltageRange>
 8003fc8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003fca:	4b1e      	ldr	r3, [pc, #120]	; (8004044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fce:	4a1d      	ldr	r2, [pc, #116]	; (8004044 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fd4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fdc:	d10b      	bne.n	8003ff6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b80      	cmp	r3, #128	; 0x80
 8003fe2:	d919      	bls.n	8004018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2ba0      	cmp	r3, #160	; 0xa0
 8003fe8:	d902      	bls.n	8003ff0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003fea:	2302      	movs	r3, #2
 8003fec:	613b      	str	r3, [r7, #16]
 8003fee:	e013      	b.n	8004018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	613b      	str	r3, [r7, #16]
 8003ff4:	e010      	b.n	8004018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2b80      	cmp	r3, #128	; 0x80
 8003ffa:	d902      	bls.n	8004002 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	613b      	str	r3, [r7, #16]
 8004000:	e00a      	b.n	8004018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2b80      	cmp	r3, #128	; 0x80
 8004006:	d102      	bne.n	800400e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004008:	2302      	movs	r3, #2
 800400a:	613b      	str	r3, [r7, #16]
 800400c:	e004      	b.n	8004018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2b70      	cmp	r3, #112	; 0x70
 8004012:	d101      	bne.n	8004018 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004014:	2301      	movs	r3, #1
 8004016:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004018:	4b0b      	ldr	r3, [pc, #44]	; (8004048 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f023 0207 	bic.w	r2, r3, #7
 8004020:	4909      	ldr	r1, [pc, #36]	; (8004048 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	4313      	orrs	r3, r2
 8004026:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004028:	4b07      	ldr	r3, [pc, #28]	; (8004048 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0307 	and.w	r3, r3, #7
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	429a      	cmp	r2, r3
 8004034:	d001      	beq.n	800403a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e000      	b.n	800403c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3718      	adds	r7, #24
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	40021000 	.word	0x40021000
 8004048:	40022000 	.word	0x40022000

0800404c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004054:	2300      	movs	r3, #0
 8004056:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004058:	2300      	movs	r3, #0
 800405a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004064:	2b00      	cmp	r3, #0
 8004066:	d03f      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800406c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004070:	d01c      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004072:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004076:	d802      	bhi.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00e      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800407c:	e01f      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x72>
 800407e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004082:	d003      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004084:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004088:	d01c      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800408a:	e018      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800408c:	4b85      	ldr	r3, [pc, #532]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	4a84      	ldr	r2, [pc, #528]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004092:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004096:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004098:	e015      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	3304      	adds	r3, #4
 800409e:	2100      	movs	r1, #0
 80040a0:	4618      	mov	r0, r3
 80040a2:	f000 fab9 	bl	8004618 <RCCEx_PLLSAI1_Config>
 80040a6:	4603      	mov	r3, r0
 80040a8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040aa:	e00c      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	3320      	adds	r3, #32
 80040b0:	2100      	movs	r1, #0
 80040b2:	4618      	mov	r0, r3
 80040b4:	f000 fba0 	bl	80047f8 <RCCEx_PLLSAI2_Config>
 80040b8:	4603      	mov	r3, r0
 80040ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040bc:	e003      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	74fb      	strb	r3, [r7, #19]
      break;
 80040c2:	e000      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80040c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040c6:	7cfb      	ldrb	r3, [r7, #19]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d10b      	bne.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040cc:	4b75      	ldr	r3, [pc, #468]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040da:	4972      	ldr	r1, [pc, #456]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80040e2:	e001      	b.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040e4:	7cfb      	ldrb	r3, [r7, #19]
 80040e6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d03f      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040fc:	d01c      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80040fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004102:	d802      	bhi.n	800410a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00e      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8004108:	e01f      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800410a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800410e:	d003      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8004110:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004114:	d01c      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8004116:	e018      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004118:	4b62      	ldr	r3, [pc, #392]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	4a61      	ldr	r2, [pc, #388]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800411e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004122:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004124:	e015      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	3304      	adds	r3, #4
 800412a:	2100      	movs	r1, #0
 800412c:	4618      	mov	r0, r3
 800412e:	f000 fa73 	bl	8004618 <RCCEx_PLLSAI1_Config>
 8004132:	4603      	mov	r3, r0
 8004134:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004136:	e00c      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	3320      	adds	r3, #32
 800413c:	2100      	movs	r1, #0
 800413e:	4618      	mov	r0, r3
 8004140:	f000 fb5a 	bl	80047f8 <RCCEx_PLLSAI2_Config>
 8004144:	4603      	mov	r3, r0
 8004146:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004148:	e003      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	74fb      	strb	r3, [r7, #19]
      break;
 800414e:	e000      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004150:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004152:	7cfb      	ldrb	r3, [r7, #19]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10b      	bne.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004158:	4b52      	ldr	r3, [pc, #328]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800415a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800415e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004166:	494f      	ldr	r1, [pc, #316]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004168:	4313      	orrs	r3, r2
 800416a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800416e:	e001      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004170:	7cfb      	ldrb	r3, [r7, #19]
 8004172:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417c:	2b00      	cmp	r3, #0
 800417e:	f000 80a0 	beq.w	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004182:	2300      	movs	r3, #0
 8004184:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004186:	4b47      	ldr	r3, [pc, #284]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800418a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8004192:	2301      	movs	r3, #1
 8004194:	e000      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004196:	2300      	movs	r3, #0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d00d      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800419c:	4b41      	ldr	r3, [pc, #260]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800419e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a0:	4a40      	ldr	r2, [pc, #256]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80041a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041a6:	6593      	str	r3, [r2, #88]	; 0x58
 80041a8:	4b3e      	ldr	r3, [pc, #248]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80041aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041b0:	60bb      	str	r3, [r7, #8]
 80041b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041b4:	2301      	movs	r3, #1
 80041b6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041b8:	4b3b      	ldr	r3, [pc, #236]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a3a      	ldr	r2, [pc, #232]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80041be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80041c4:	f7fc ffdc 	bl	8001180 <HAL_GetTick>
 80041c8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80041ca:	e009      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041cc:	f7fc ffd8 	bl	8001180 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d902      	bls.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	74fb      	strb	r3, [r7, #19]
        break;
 80041de:	e005      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80041e0:	4b31      	ldr	r3, [pc, #196]	; (80042a8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d0ef      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 80041ec:	7cfb      	ldrb	r3, [r7, #19]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d15c      	bne.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80041f2:	4b2c      	ldr	r3, [pc, #176]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80041f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041fc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d01f      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	429a      	cmp	r2, r3
 800420e:	d019      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004210:	4b24      	ldr	r3, [pc, #144]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004216:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800421a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800421c:	4b21      	ldr	r3, [pc, #132]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800421e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004222:	4a20      	ldr	r2, [pc, #128]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004228:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800422c:	4b1d      	ldr	r3, [pc, #116]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800422e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004232:	4a1c      	ldr	r2, [pc, #112]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004234:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004238:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800423c:	4a19      	ldr	r2, [pc, #100]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	d016      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800424e:	f7fc ff97 	bl	8001180 <HAL_GetTick>
 8004252:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004254:	e00b      	b.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004256:	f7fc ff93 	bl	8001180 <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	f241 3288 	movw	r2, #5000	; 0x1388
 8004264:	4293      	cmp	r3, r2
 8004266:	d902      	bls.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	74fb      	strb	r3, [r7, #19]
            break;
 800426c:	e006      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800426e:	4b0d      	ldr	r3, [pc, #52]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d0ec      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 800427c:	7cfb      	ldrb	r3, [r7, #19]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10c      	bne.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004282:	4b08      	ldr	r3, [pc, #32]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004288:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004292:	4904      	ldr	r1, [pc, #16]	; (80042a4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8004294:	4313      	orrs	r3, r2
 8004296:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800429a:	e009      	b.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800429c:	7cfb      	ldrb	r3, [r7, #19]
 800429e:	74bb      	strb	r3, [r7, #18]
 80042a0:	e006      	b.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80042a2:	bf00      	nop
 80042a4:	40021000 	.word	0x40021000
 80042a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ac:	7cfb      	ldrb	r3, [r7, #19]
 80042ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042b0:	7c7b      	ldrb	r3, [r7, #17]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d105      	bne.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042b6:	4b9e      	ldr	r3, [pc, #632]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80042b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ba:	4a9d      	ldr	r2, [pc, #628]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80042bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00a      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042ce:	4b98      	ldr	r3, [pc, #608]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80042d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d4:	f023 0203 	bic.w	r2, r3, #3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042dc:	4994      	ldr	r1, [pc, #592]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00a      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042f0:	4b8f      	ldr	r3, [pc, #572]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80042f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f6:	f023 020c 	bic.w	r2, r3, #12
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042fe:	498c      	ldr	r1, [pc, #560]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004300:	4313      	orrs	r3, r2
 8004302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0304 	and.w	r3, r3, #4
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00a      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004312:	4b87      	ldr	r3, [pc, #540]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004318:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004320:	4983      	ldr	r1, [pc, #524]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004322:	4313      	orrs	r3, r2
 8004324:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0308 	and.w	r3, r3, #8
 8004330:	2b00      	cmp	r3, #0
 8004332:	d00a      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004334:	4b7e      	ldr	r3, [pc, #504]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800433a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004342:	497b      	ldr	r1, [pc, #492]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004344:	4313      	orrs	r3, r2
 8004346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0310 	and.w	r3, r3, #16
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00a      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004356:	4b76      	ldr	r3, [pc, #472]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800435c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004364:	4972      	ldr	r1, [pc, #456]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004366:	4313      	orrs	r3, r2
 8004368:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0320 	and.w	r3, r3, #32
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00a      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004378:	4b6d      	ldr	r3, [pc, #436]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800437a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004386:	496a      	ldr	r1, [pc, #424]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004388:	4313      	orrs	r3, r2
 800438a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00a      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800439a:	4b65      	ldr	r3, [pc, #404]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800439c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043a8:	4961      	ldr	r1, [pc, #388]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00a      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043bc:	4b5c      	ldr	r3, [pc, #368]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80043be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043ca:	4959      	ldr	r1, [pc, #356]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00a      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043de:	4b54      	ldr	r3, [pc, #336]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80043e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ec:	4950      	ldr	r1, [pc, #320]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00a      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004400:	4b4b      	ldr	r3, [pc, #300]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004406:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800440e:	4948      	ldr	r1, [pc, #288]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004410:	4313      	orrs	r3, r2
 8004412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00a      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004422:	4b43      	ldr	r3, [pc, #268]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004428:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004430:	493f      	ldr	r1, [pc, #252]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004432:	4313      	orrs	r3, r2
 8004434:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d028      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004444:	4b3a      	ldr	r3, [pc, #232]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004452:	4937      	ldr	r1, [pc, #220]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004454:	4313      	orrs	r3, r2
 8004456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800445e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004462:	d106      	bne.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004464:	4b32      	ldr	r3, [pc, #200]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	4a31      	ldr	r2, [pc, #196]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800446a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800446e:	60d3      	str	r3, [r2, #12]
 8004470:	e011      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004476:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800447a:	d10c      	bne.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	3304      	adds	r3, #4
 8004480:	2101      	movs	r1, #1
 8004482:	4618      	mov	r0, r3
 8004484:	f000 f8c8 	bl	8004618 <RCCEx_PLLSAI1_Config>
 8004488:	4603      	mov	r3, r0
 800448a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800448c:	7cfb      	ldrb	r3, [r7, #19]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8004492:	7cfb      	ldrb	r3, [r7, #19]
 8004494:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d028      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80044a2:	4b23      	ldr	r3, [pc, #140]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b0:	491f      	ldr	r1, [pc, #124]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044c0:	d106      	bne.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044c2:	4b1b      	ldr	r3, [pc, #108]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	4a1a      	ldr	r2, [pc, #104]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80044c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044cc:	60d3      	str	r3, [r2, #12]
 80044ce:	e011      	b.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044d8:	d10c      	bne.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	3304      	adds	r3, #4
 80044de:	2101      	movs	r1, #1
 80044e0:	4618      	mov	r0, r3
 80044e2:	f000 f899 	bl	8004618 <RCCEx_PLLSAI1_Config>
 80044e6:	4603      	mov	r3, r0
 80044e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044ea:	7cfb      	ldrb	r3, [r7, #19]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d001      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 80044f0:	7cfb      	ldrb	r3, [r7, #19]
 80044f2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d02b      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004500:	4b0b      	ldr	r3, [pc, #44]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004506:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800450e:	4908      	ldr	r1, [pc, #32]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004510:	4313      	orrs	r3, r2
 8004512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800451a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800451e:	d109      	bne.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004520:	4b03      	ldr	r3, [pc, #12]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	4a02      	ldr	r2, [pc, #8]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004526:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800452a:	60d3      	str	r3, [r2, #12]
 800452c:	e014      	b.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800452e:	bf00      	nop
 8004530:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004538:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800453c:	d10c      	bne.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	3304      	adds	r3, #4
 8004542:	2101      	movs	r1, #1
 8004544:	4618      	mov	r0, r3
 8004546:	f000 f867 	bl	8004618 <RCCEx_PLLSAI1_Config>
 800454a:	4603      	mov	r3, r0
 800454c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800454e:	7cfb      	ldrb	r3, [r7, #19]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d001      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8004554:	7cfb      	ldrb	r3, [r7, #19]
 8004556:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d02f      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004564:	4b2b      	ldr	r3, [pc, #172]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800456a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004572:	4928      	ldr	r1, [pc, #160]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004574:	4313      	orrs	r3, r2
 8004576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800457e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004582:	d10d      	bne.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	3304      	adds	r3, #4
 8004588:	2102      	movs	r1, #2
 800458a:	4618      	mov	r0, r3
 800458c:	f000 f844 	bl	8004618 <RCCEx_PLLSAI1_Config>
 8004590:	4603      	mov	r3, r0
 8004592:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004594:	7cfb      	ldrb	r3, [r7, #19]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d014      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800459a:	7cfb      	ldrb	r3, [r7, #19]
 800459c:	74bb      	strb	r3, [r7, #18]
 800459e:	e011      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045a8:	d10c      	bne.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	3320      	adds	r3, #32
 80045ae:	2102      	movs	r1, #2
 80045b0:	4618      	mov	r0, r3
 80045b2:	f000 f921 	bl	80047f8 <RCCEx_PLLSAI2_Config>
 80045b6:	4603      	mov	r3, r0
 80045b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045ba:	7cfb      	ldrb	r3, [r7, #19]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d001      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80045c0:	7cfb      	ldrb	r3, [r7, #19]
 80045c2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00a      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80045d0:	4b10      	ldr	r3, [pc, #64]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80045d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045de:	490d      	ldr	r1, [pc, #52]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00b      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80045f2:	4b08      	ldr	r3, [pc, #32]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80045f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004602:	4904      	ldr	r1, [pc, #16]	; (8004614 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004604:	4313      	orrs	r3, r2
 8004606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800460a:	7cbb      	ldrb	r3, [r7, #18]
}
 800460c:	4618      	mov	r0, r3
 800460e:	3718      	adds	r7, #24
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	40021000 	.word	0x40021000

08004618 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004622:	2300      	movs	r3, #0
 8004624:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004626:	4b73      	ldr	r3, [pc, #460]	; (80047f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	f003 0303 	and.w	r3, r3, #3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d018      	beq.n	8004664 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004632:	4b70      	ldr	r3, [pc, #448]	; (80047f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	f003 0203 	and.w	r2, r3, #3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	429a      	cmp	r2, r3
 8004640:	d10d      	bne.n	800465e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
       ||
 8004646:	2b00      	cmp	r3, #0
 8004648:	d009      	beq.n	800465e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800464a:	4b6a      	ldr	r3, [pc, #424]	; (80047f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	091b      	lsrs	r3, r3, #4
 8004650:	f003 0307 	and.w	r3, r3, #7
 8004654:	1c5a      	adds	r2, r3, #1
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
       ||
 800465a:	429a      	cmp	r2, r3
 800465c:	d044      	beq.n	80046e8 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	73fb      	strb	r3, [r7, #15]
 8004662:	e041      	b.n	80046e8 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2b02      	cmp	r3, #2
 800466a:	d00c      	beq.n	8004686 <RCCEx_PLLSAI1_Config+0x6e>
 800466c:	2b03      	cmp	r3, #3
 800466e:	d013      	beq.n	8004698 <RCCEx_PLLSAI1_Config+0x80>
 8004670:	2b01      	cmp	r3, #1
 8004672:	d120      	bne.n	80046b6 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004674:	4b5f      	ldr	r3, [pc, #380]	; (80047f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0302 	and.w	r3, r3, #2
 800467c:	2b00      	cmp	r3, #0
 800467e:	d11d      	bne.n	80046bc <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004684:	e01a      	b.n	80046bc <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004686:	4b5b      	ldr	r3, [pc, #364]	; (80047f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800468e:	2b00      	cmp	r3, #0
 8004690:	d116      	bne.n	80046c0 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004696:	e013      	b.n	80046c0 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004698:	4b56      	ldr	r3, [pc, #344]	; (80047f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d10f      	bne.n	80046c4 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80046a4:	4b53      	ldr	r3, [pc, #332]	; (80047f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d109      	bne.n	80046c4 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80046b4:	e006      	b.n	80046c4 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	73fb      	strb	r3, [r7, #15]
      break;
 80046ba:	e004      	b.n	80046c6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80046bc:	bf00      	nop
 80046be:	e002      	b.n	80046c6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80046c0:	bf00      	nop
 80046c2:	e000      	b.n	80046c6 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80046c4:	bf00      	nop
    }

    if(status == HAL_OK)
 80046c6:	7bfb      	ldrb	r3, [r7, #15]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10d      	bne.n	80046e8 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80046cc:	4b49      	ldr	r3, [pc, #292]	; (80047f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6819      	ldr	r1, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	3b01      	subs	r3, #1
 80046de:	011b      	lsls	r3, r3, #4
 80046e0:	430b      	orrs	r3, r1
 80046e2:	4944      	ldr	r1, [pc, #272]	; (80047f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80046e8:	7bfb      	ldrb	r3, [r7, #15]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d17d      	bne.n	80047ea <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80046ee:	4b41      	ldr	r3, [pc, #260]	; (80047f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a40      	ldr	r2, [pc, #256]	; (80047f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80046f4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80046f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046fa:	f7fc fd41 	bl	8001180 <HAL_GetTick>
 80046fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004700:	e009      	b.n	8004716 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004702:	f7fc fd3d 	bl	8001180 <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	2b02      	cmp	r3, #2
 800470e:	d902      	bls.n	8004716 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	73fb      	strb	r3, [r7, #15]
        break;
 8004714:	e005      	b.n	8004722 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004716:	4b37      	ldr	r3, [pc, #220]	; (80047f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1ef      	bne.n	8004702 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004722:	7bfb      	ldrb	r3, [r7, #15]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d160      	bne.n	80047ea <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d111      	bne.n	8004752 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800472e:	4b31      	ldr	r3, [pc, #196]	; (80047f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004736:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	6892      	ldr	r2, [r2, #8]
 800473e:	0211      	lsls	r1, r2, #8
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	68d2      	ldr	r2, [r2, #12]
 8004744:	0912      	lsrs	r2, r2, #4
 8004746:	0452      	lsls	r2, r2, #17
 8004748:	430a      	orrs	r2, r1
 800474a:	492a      	ldr	r1, [pc, #168]	; (80047f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800474c:	4313      	orrs	r3, r2
 800474e:	610b      	str	r3, [r1, #16]
 8004750:	e027      	b.n	80047a2 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d112      	bne.n	800477e <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004758:	4b26      	ldr	r3, [pc, #152]	; (80047f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004760:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	6892      	ldr	r2, [r2, #8]
 8004768:	0211      	lsls	r1, r2, #8
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	6912      	ldr	r2, [r2, #16]
 800476e:	0852      	lsrs	r2, r2, #1
 8004770:	3a01      	subs	r2, #1
 8004772:	0552      	lsls	r2, r2, #21
 8004774:	430a      	orrs	r2, r1
 8004776:	491f      	ldr	r1, [pc, #124]	; (80047f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004778:	4313      	orrs	r3, r2
 800477a:	610b      	str	r3, [r1, #16]
 800477c:	e011      	b.n	80047a2 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800477e:	4b1d      	ldr	r3, [pc, #116]	; (80047f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004786:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	6892      	ldr	r2, [r2, #8]
 800478e:	0211      	lsls	r1, r2, #8
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	6952      	ldr	r2, [r2, #20]
 8004794:	0852      	lsrs	r2, r2, #1
 8004796:	3a01      	subs	r2, #1
 8004798:	0652      	lsls	r2, r2, #25
 800479a:	430a      	orrs	r2, r1
 800479c:	4915      	ldr	r1, [pc, #84]	; (80047f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80047a2:	4b14      	ldr	r3, [pc, #80]	; (80047f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a13      	ldr	r2, [pc, #76]	; (80047f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80047ac:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ae:	f7fc fce7 	bl	8001180 <HAL_GetTick>
 80047b2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047b4:	e009      	b.n	80047ca <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047b6:	f7fc fce3 	bl	8001180 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d902      	bls.n	80047ca <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	73fb      	strb	r3, [r7, #15]
          break;
 80047c8:	e005      	b.n	80047d6 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047ca:	4b0a      	ldr	r3, [pc, #40]	; (80047f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d0ef      	beq.n	80047b6 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80047d6:	7bfb      	ldrb	r3, [r7, #15]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d106      	bne.n	80047ea <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80047dc:	4b05      	ldr	r3, [pc, #20]	; (80047f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047de:	691a      	ldr	r2, [r3, #16]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	4903      	ldr	r1, [pc, #12]	; (80047f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80047ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3710      	adds	r7, #16
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	40021000 	.word	0x40021000

080047f8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004802:	2300      	movs	r3, #0
 8004804:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004806:	4b68      	ldr	r3, [pc, #416]	; (80049a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	f003 0303 	and.w	r3, r3, #3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d018      	beq.n	8004844 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004812:	4b65      	ldr	r3, [pc, #404]	; (80049a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	f003 0203 	and.w	r2, r3, #3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	429a      	cmp	r2, r3
 8004820:	d10d      	bne.n	800483e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
       ||
 8004826:	2b00      	cmp	r3, #0
 8004828:	d009      	beq.n	800483e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800482a:	4b5f      	ldr	r3, [pc, #380]	; (80049a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	091b      	lsrs	r3, r3, #4
 8004830:	f003 0307 	and.w	r3, r3, #7
 8004834:	1c5a      	adds	r2, r3, #1
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
       ||
 800483a:	429a      	cmp	r2, r3
 800483c:	d044      	beq.n	80048c8 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	73fb      	strb	r3, [r7, #15]
 8004842:	e041      	b.n	80048c8 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2b02      	cmp	r3, #2
 800484a:	d00c      	beq.n	8004866 <RCCEx_PLLSAI2_Config+0x6e>
 800484c:	2b03      	cmp	r3, #3
 800484e:	d013      	beq.n	8004878 <RCCEx_PLLSAI2_Config+0x80>
 8004850:	2b01      	cmp	r3, #1
 8004852:	d120      	bne.n	8004896 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004854:	4b54      	ldr	r3, [pc, #336]	; (80049a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0302 	and.w	r3, r3, #2
 800485c:	2b00      	cmp	r3, #0
 800485e:	d11d      	bne.n	800489c <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004864:	e01a      	b.n	800489c <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004866:	4b50      	ldr	r3, [pc, #320]	; (80049a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800486e:	2b00      	cmp	r3, #0
 8004870:	d116      	bne.n	80048a0 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004876:	e013      	b.n	80048a0 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004878:	4b4b      	ldr	r3, [pc, #300]	; (80049a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d10f      	bne.n	80048a4 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004884:	4b48      	ldr	r3, [pc, #288]	; (80049a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d109      	bne.n	80048a4 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004894:	e006      	b.n	80048a4 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	73fb      	strb	r3, [r7, #15]
      break;
 800489a:	e004      	b.n	80048a6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800489c:	bf00      	nop
 800489e:	e002      	b.n	80048a6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80048a0:	bf00      	nop
 80048a2:	e000      	b.n	80048a6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80048a4:	bf00      	nop
    }

    if(status == HAL_OK)
 80048a6:	7bfb      	ldrb	r3, [r7, #15]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d10d      	bne.n	80048c8 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80048ac:	4b3e      	ldr	r3, [pc, #248]	; (80049a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6819      	ldr	r1, [r3, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	3b01      	subs	r3, #1
 80048be:	011b      	lsls	r3, r3, #4
 80048c0:	430b      	orrs	r3, r1
 80048c2:	4939      	ldr	r1, [pc, #228]	; (80049a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80048c8:	7bfb      	ldrb	r3, [r7, #15]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d167      	bne.n	800499e <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80048ce:	4b36      	ldr	r3, [pc, #216]	; (80049a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a35      	ldr	r2, [pc, #212]	; (80049a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80048d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048da:	f7fc fc51 	bl	8001180 <HAL_GetTick>
 80048de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80048e0:	e009      	b.n	80048f6 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80048e2:	f7fc fc4d 	bl	8001180 <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d902      	bls.n	80048f6 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	73fb      	strb	r3, [r7, #15]
        break;
 80048f4:	e005      	b.n	8004902 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80048f6:	4b2c      	ldr	r3, [pc, #176]	; (80049a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1ef      	bne.n	80048e2 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004902:	7bfb      	ldrb	r3, [r7, #15]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d14a      	bne.n	800499e <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d111      	bne.n	8004932 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800490e:	4b26      	ldr	r3, [pc, #152]	; (80049a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004916:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	6892      	ldr	r2, [r2, #8]
 800491e:	0211      	lsls	r1, r2, #8
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	68d2      	ldr	r2, [r2, #12]
 8004924:	0912      	lsrs	r2, r2, #4
 8004926:	0452      	lsls	r2, r2, #17
 8004928:	430a      	orrs	r2, r1
 800492a:	491f      	ldr	r1, [pc, #124]	; (80049a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800492c:	4313      	orrs	r3, r2
 800492e:	614b      	str	r3, [r1, #20]
 8004930:	e011      	b.n	8004956 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004932:	4b1d      	ldr	r3, [pc, #116]	; (80049a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800493a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	6892      	ldr	r2, [r2, #8]
 8004942:	0211      	lsls	r1, r2, #8
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	6912      	ldr	r2, [r2, #16]
 8004948:	0852      	lsrs	r2, r2, #1
 800494a:	3a01      	subs	r2, #1
 800494c:	0652      	lsls	r2, r2, #25
 800494e:	430a      	orrs	r2, r1
 8004950:	4915      	ldr	r1, [pc, #84]	; (80049a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004952:	4313      	orrs	r3, r2
 8004954:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004956:	4b14      	ldr	r3, [pc, #80]	; (80049a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a13      	ldr	r2, [pc, #76]	; (80049a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800495c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004960:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004962:	f7fc fc0d 	bl	8001180 <HAL_GetTick>
 8004966:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004968:	e009      	b.n	800497e <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800496a:	f7fc fc09 	bl	8001180 <HAL_GetTick>
 800496e:	4602      	mov	r2, r0
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	2b02      	cmp	r3, #2
 8004976:	d902      	bls.n	800497e <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	73fb      	strb	r3, [r7, #15]
          break;
 800497c:	e005      	b.n	800498a <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800497e:	4b0a      	ldr	r3, [pc, #40]	; (80049a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d0ef      	beq.n	800496a <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800498a:	7bfb      	ldrb	r3, [r7, #15]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d106      	bne.n	800499e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004990:	4b05      	ldr	r3, [pc, #20]	; (80049a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004992:	695a      	ldr	r2, [r3, #20]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	695b      	ldr	r3, [r3, #20]
 8004998:	4903      	ldr	r1, [pc, #12]	; (80049a8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800499a:	4313      	orrs	r3, r2
 800499c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800499e:	7bfb      	ldrb	r3, [r7, #15]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3710      	adds	r7, #16
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	40021000 	.word	0x40021000

080049ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d101      	bne.n	80049be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e049      	b.n	8004a52 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d106      	bne.n	80049d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f7fc f9ea 	bl	8000dac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2202      	movs	r2, #2
 80049dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	3304      	adds	r3, #4
 80049e8:	4619      	mov	r1, r3
 80049ea:	4610      	mov	r0, r2
 80049ec:	f000 fd88 	bl	8005500 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3708      	adds	r7, #8
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
	...

08004a5c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b085      	sub	sp, #20
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d001      	beq.n	8004a74 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e047      	b.n	8004b04 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2202      	movs	r2, #2
 8004a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a23      	ldr	r2, [pc, #140]	; (8004b10 <HAL_TIM_Base_Start+0xb4>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d01d      	beq.n	8004ac2 <HAL_TIM_Base_Start+0x66>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a8e:	d018      	beq.n	8004ac2 <HAL_TIM_Base_Start+0x66>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a1f      	ldr	r2, [pc, #124]	; (8004b14 <HAL_TIM_Base_Start+0xb8>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d013      	beq.n	8004ac2 <HAL_TIM_Base_Start+0x66>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a1e      	ldr	r2, [pc, #120]	; (8004b18 <HAL_TIM_Base_Start+0xbc>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d00e      	beq.n	8004ac2 <HAL_TIM_Base_Start+0x66>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a1c      	ldr	r2, [pc, #112]	; (8004b1c <HAL_TIM_Base_Start+0xc0>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d009      	beq.n	8004ac2 <HAL_TIM_Base_Start+0x66>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a1b      	ldr	r2, [pc, #108]	; (8004b20 <HAL_TIM_Base_Start+0xc4>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d004      	beq.n	8004ac2 <HAL_TIM_Base_Start+0x66>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a19      	ldr	r2, [pc, #100]	; (8004b24 <HAL_TIM_Base_Start+0xc8>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d115      	bne.n	8004aee <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	689a      	ldr	r2, [r3, #8]
 8004ac8:	4b17      	ldr	r3, [pc, #92]	; (8004b28 <HAL_TIM_Base_Start+0xcc>)
 8004aca:	4013      	ands	r3, r2
 8004acc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2b06      	cmp	r3, #6
 8004ad2:	d015      	beq.n	8004b00 <HAL_TIM_Base_Start+0xa4>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ada:	d011      	beq.n	8004b00 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f042 0201 	orr.w	r2, r2, #1
 8004aea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aec:	e008      	b.n	8004b00 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f042 0201 	orr.w	r2, r2, #1
 8004afc:	601a      	str	r2, [r3, #0]
 8004afe:	e000      	b.n	8004b02 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b00:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3714      	adds	r7, #20
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr
 8004b10:	40012c00 	.word	0x40012c00
 8004b14:	40000400 	.word	0x40000400
 8004b18:	40000800 	.word	0x40000800
 8004b1c:	40000c00 	.word	0x40000c00
 8004b20:	40013400 	.word	0x40013400
 8004b24:	40014000 	.word	0x40014000
 8004b28:	00010007 	.word	0x00010007

08004b2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b085      	sub	sp, #20
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d001      	beq.n	8004b44 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e04f      	b.n	8004be4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2202      	movs	r2, #2
 8004b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68da      	ldr	r2, [r3, #12]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f042 0201 	orr.w	r2, r2, #1
 8004b5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a23      	ldr	r2, [pc, #140]	; (8004bf0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d01d      	beq.n	8004ba2 <HAL_TIM_Base_Start_IT+0x76>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b6e:	d018      	beq.n	8004ba2 <HAL_TIM_Base_Start_IT+0x76>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a1f      	ldr	r2, [pc, #124]	; (8004bf4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d013      	beq.n	8004ba2 <HAL_TIM_Base_Start_IT+0x76>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a1e      	ldr	r2, [pc, #120]	; (8004bf8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d00e      	beq.n	8004ba2 <HAL_TIM_Base_Start_IT+0x76>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a1c      	ldr	r2, [pc, #112]	; (8004bfc <HAL_TIM_Base_Start_IT+0xd0>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d009      	beq.n	8004ba2 <HAL_TIM_Base_Start_IT+0x76>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a1b      	ldr	r2, [pc, #108]	; (8004c00 <HAL_TIM_Base_Start_IT+0xd4>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d004      	beq.n	8004ba2 <HAL_TIM_Base_Start_IT+0x76>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a19      	ldr	r2, [pc, #100]	; (8004c04 <HAL_TIM_Base_Start_IT+0xd8>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d115      	bne.n	8004bce <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	689a      	ldr	r2, [r3, #8]
 8004ba8:	4b17      	ldr	r3, [pc, #92]	; (8004c08 <HAL_TIM_Base_Start_IT+0xdc>)
 8004baa:	4013      	ands	r3, r2
 8004bac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2b06      	cmp	r3, #6
 8004bb2:	d015      	beq.n	8004be0 <HAL_TIM_Base_Start_IT+0xb4>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bba:	d011      	beq.n	8004be0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f042 0201 	orr.w	r2, r2, #1
 8004bca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bcc:	e008      	b.n	8004be0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f042 0201 	orr.w	r2, r2, #1
 8004bdc:	601a      	str	r2, [r3, #0]
 8004bde:	e000      	b.n	8004be2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004be0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3714      	adds	r7, #20
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr
 8004bf0:	40012c00 	.word	0x40012c00
 8004bf4:	40000400 	.word	0x40000400
 8004bf8:	40000800 	.word	0x40000800
 8004bfc:	40000c00 	.word	0x40000c00
 8004c00:	40013400 	.word	0x40013400
 8004c04:	40014000 	.word	0x40014000
 8004c08:	00010007 	.word	0x00010007

08004c0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d101      	bne.n	8004c1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e049      	b.n	8004cb2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d106      	bne.n	8004c38 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 f841 	bl	8004cba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	3304      	adds	r3, #4
 8004c48:	4619      	mov	r1, r3
 8004c4a:	4610      	mov	r0, r2
 8004c4c:	f000 fc58 	bl	8005500 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3708      	adds	r7, #8
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004cba:	b480      	push	{r7}
 8004cbc:	b083      	sub	sp, #12
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004cc2:	bf00      	nop
 8004cc4:	370c      	adds	r7, #12
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
	...

08004cd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d109      	bne.n	8004cf4 <HAL_TIM_PWM_Start+0x24>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	bf14      	ite	ne
 8004cec:	2301      	movne	r3, #1
 8004cee:	2300      	moveq	r3, #0
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	e03c      	b.n	8004d6e <HAL_TIM_PWM_Start+0x9e>
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	2b04      	cmp	r3, #4
 8004cf8:	d109      	bne.n	8004d0e <HAL_TIM_PWM_Start+0x3e>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	bf14      	ite	ne
 8004d06:	2301      	movne	r3, #1
 8004d08:	2300      	moveq	r3, #0
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	e02f      	b.n	8004d6e <HAL_TIM_PWM_Start+0x9e>
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	2b08      	cmp	r3, #8
 8004d12:	d109      	bne.n	8004d28 <HAL_TIM_PWM_Start+0x58>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	bf14      	ite	ne
 8004d20:	2301      	movne	r3, #1
 8004d22:	2300      	moveq	r3, #0
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	e022      	b.n	8004d6e <HAL_TIM_PWM_Start+0x9e>
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	2b0c      	cmp	r3, #12
 8004d2c:	d109      	bne.n	8004d42 <HAL_TIM_PWM_Start+0x72>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	bf14      	ite	ne
 8004d3a:	2301      	movne	r3, #1
 8004d3c:	2300      	moveq	r3, #0
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	e015      	b.n	8004d6e <HAL_TIM_PWM_Start+0x9e>
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	2b10      	cmp	r3, #16
 8004d46:	d109      	bne.n	8004d5c <HAL_TIM_PWM_Start+0x8c>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	bf14      	ite	ne
 8004d54:	2301      	movne	r3, #1
 8004d56:	2300      	moveq	r3, #0
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	e008      	b.n	8004d6e <HAL_TIM_PWM_Start+0x9e>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	bf14      	ite	ne
 8004d68:	2301      	movne	r3, #1
 8004d6a:	2300      	moveq	r3, #0
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d001      	beq.n	8004d76 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e09c      	b.n	8004eb0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d104      	bne.n	8004d86 <HAL_TIM_PWM_Start+0xb6>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2202      	movs	r2, #2
 8004d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d84:	e023      	b.n	8004dce <HAL_TIM_PWM_Start+0xfe>
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	2b04      	cmp	r3, #4
 8004d8a:	d104      	bne.n	8004d96 <HAL_TIM_PWM_Start+0xc6>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2202      	movs	r2, #2
 8004d90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d94:	e01b      	b.n	8004dce <HAL_TIM_PWM_Start+0xfe>
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	2b08      	cmp	r3, #8
 8004d9a:	d104      	bne.n	8004da6 <HAL_TIM_PWM_Start+0xd6>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2202      	movs	r2, #2
 8004da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004da4:	e013      	b.n	8004dce <HAL_TIM_PWM_Start+0xfe>
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	2b0c      	cmp	r3, #12
 8004daa:	d104      	bne.n	8004db6 <HAL_TIM_PWM_Start+0xe6>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2202      	movs	r2, #2
 8004db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004db4:	e00b      	b.n	8004dce <HAL_TIM_PWM_Start+0xfe>
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	2b10      	cmp	r3, #16
 8004dba:	d104      	bne.n	8004dc6 <HAL_TIM_PWM_Start+0xf6>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dc4:	e003      	b.n	8004dce <HAL_TIM_PWM_Start+0xfe>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2202      	movs	r2, #2
 8004dca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	6839      	ldr	r1, [r7, #0]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f000 ff9c 	bl	8005d14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a35      	ldr	r2, [pc, #212]	; (8004eb8 <HAL_TIM_PWM_Start+0x1e8>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d013      	beq.n	8004e0e <HAL_TIM_PWM_Start+0x13e>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a34      	ldr	r2, [pc, #208]	; (8004ebc <HAL_TIM_PWM_Start+0x1ec>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d00e      	beq.n	8004e0e <HAL_TIM_PWM_Start+0x13e>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a32      	ldr	r2, [pc, #200]	; (8004ec0 <HAL_TIM_PWM_Start+0x1f0>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d009      	beq.n	8004e0e <HAL_TIM_PWM_Start+0x13e>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a31      	ldr	r2, [pc, #196]	; (8004ec4 <HAL_TIM_PWM_Start+0x1f4>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d004      	beq.n	8004e0e <HAL_TIM_PWM_Start+0x13e>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a2f      	ldr	r2, [pc, #188]	; (8004ec8 <HAL_TIM_PWM_Start+0x1f8>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d101      	bne.n	8004e12 <HAL_TIM_PWM_Start+0x142>
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e000      	b.n	8004e14 <HAL_TIM_PWM_Start+0x144>
 8004e12:	2300      	movs	r3, #0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d007      	beq.n	8004e28 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e26:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a22      	ldr	r2, [pc, #136]	; (8004eb8 <HAL_TIM_PWM_Start+0x1e8>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d01d      	beq.n	8004e6e <HAL_TIM_PWM_Start+0x19e>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e3a:	d018      	beq.n	8004e6e <HAL_TIM_PWM_Start+0x19e>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a22      	ldr	r2, [pc, #136]	; (8004ecc <HAL_TIM_PWM_Start+0x1fc>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d013      	beq.n	8004e6e <HAL_TIM_PWM_Start+0x19e>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a21      	ldr	r2, [pc, #132]	; (8004ed0 <HAL_TIM_PWM_Start+0x200>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d00e      	beq.n	8004e6e <HAL_TIM_PWM_Start+0x19e>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a1f      	ldr	r2, [pc, #124]	; (8004ed4 <HAL_TIM_PWM_Start+0x204>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d009      	beq.n	8004e6e <HAL_TIM_PWM_Start+0x19e>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a17      	ldr	r2, [pc, #92]	; (8004ebc <HAL_TIM_PWM_Start+0x1ec>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d004      	beq.n	8004e6e <HAL_TIM_PWM_Start+0x19e>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a15      	ldr	r2, [pc, #84]	; (8004ec0 <HAL_TIM_PWM_Start+0x1f0>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d115      	bne.n	8004e9a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	4b18      	ldr	r3, [pc, #96]	; (8004ed8 <HAL_TIM_PWM_Start+0x208>)
 8004e76:	4013      	ands	r3, r2
 8004e78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2b06      	cmp	r3, #6
 8004e7e:	d015      	beq.n	8004eac <HAL_TIM_PWM_Start+0x1dc>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e86:	d011      	beq.n	8004eac <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f042 0201 	orr.w	r2, r2, #1
 8004e96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e98:	e008      	b.n	8004eac <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f042 0201 	orr.w	r2, r2, #1
 8004ea8:	601a      	str	r2, [r3, #0]
 8004eaa:	e000      	b.n	8004eae <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3710      	adds	r7, #16
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	40012c00 	.word	0x40012c00
 8004ebc:	40013400 	.word	0x40013400
 8004ec0:	40014000 	.word	0x40014000
 8004ec4:	40014400 	.word	0x40014400
 8004ec8:	40014800 	.word	0x40014800
 8004ecc:	40000400 	.word	0x40000400
 8004ed0:	40000800 	.word	0x40000800
 8004ed4:	40000c00 	.word	0x40000c00
 8004ed8:	00010007 	.word	0x00010007

08004edc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d122      	bne.n	8004f38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	f003 0302 	and.w	r3, r3, #2
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d11b      	bne.n	8004f38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f06f 0202 	mvn.w	r2, #2
 8004f08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	f003 0303 	and.w	r3, r3, #3
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d003      	beq.n	8004f26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 facf 	bl	80054c2 <HAL_TIM_IC_CaptureCallback>
 8004f24:	e005      	b.n	8004f32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 fac1 	bl	80054ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 fad2 	bl	80054d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	f003 0304 	and.w	r3, r3, #4
 8004f42:	2b04      	cmp	r3, #4
 8004f44:	d122      	bne.n	8004f8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	f003 0304 	and.w	r3, r3, #4
 8004f50:	2b04      	cmp	r3, #4
 8004f52:	d11b      	bne.n	8004f8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f06f 0204 	mvn.w	r2, #4
 8004f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2202      	movs	r2, #2
 8004f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d003      	beq.n	8004f7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 faa5 	bl	80054c2 <HAL_TIM_IC_CaptureCallback>
 8004f78:	e005      	b.n	8004f86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 fa97 	bl	80054ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 faa8 	bl	80054d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	f003 0308 	and.w	r3, r3, #8
 8004f96:	2b08      	cmp	r3, #8
 8004f98:	d122      	bne.n	8004fe0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	f003 0308 	and.w	r3, r3, #8
 8004fa4:	2b08      	cmp	r3, #8
 8004fa6:	d11b      	bne.n	8004fe0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f06f 0208 	mvn.w	r2, #8
 8004fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2204      	movs	r2, #4
 8004fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	69db      	ldr	r3, [r3, #28]
 8004fbe:	f003 0303 	and.w	r3, r3, #3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d003      	beq.n	8004fce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 fa7b 	bl	80054c2 <HAL_TIM_IC_CaptureCallback>
 8004fcc:	e005      	b.n	8004fda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 fa6d 	bl	80054ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f000 fa7e 	bl	80054d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	f003 0310 	and.w	r3, r3, #16
 8004fea:	2b10      	cmp	r3, #16
 8004fec:	d122      	bne.n	8005034 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	f003 0310 	and.w	r3, r3, #16
 8004ff8:	2b10      	cmp	r3, #16
 8004ffa:	d11b      	bne.n	8005034 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f06f 0210 	mvn.w	r2, #16
 8005004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2208      	movs	r2, #8
 800500a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	69db      	ldr	r3, [r3, #28]
 8005012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005016:	2b00      	cmp	r3, #0
 8005018:	d003      	beq.n	8005022 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 fa51 	bl	80054c2 <HAL_TIM_IC_CaptureCallback>
 8005020:	e005      	b.n	800502e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 fa43 	bl	80054ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 fa54 	bl	80054d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b01      	cmp	r3, #1
 8005040:	d10e      	bne.n	8005060 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	f003 0301 	and.w	r3, r3, #1
 800504c:	2b01      	cmp	r3, #1
 800504e:	d107      	bne.n	8005060 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f06f 0201 	mvn.w	r2, #1
 8005058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f7fb fda8 	bl	8000bb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800506a:	2b80      	cmp	r3, #128	; 0x80
 800506c:	d10e      	bne.n	800508c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005078:	2b80      	cmp	r3, #128	; 0x80
 800507a:	d107      	bne.n	800508c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 ff7a 	bl	8005f80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005096:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800509a:	d10e      	bne.n	80050ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050a6:	2b80      	cmp	r3, #128	; 0x80
 80050a8:	d107      	bne.n	80050ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80050b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 ff6d 	bl	8005f94 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050c4:	2b40      	cmp	r3, #64	; 0x40
 80050c6:	d10e      	bne.n	80050e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d2:	2b40      	cmp	r3, #64	; 0x40
 80050d4:	d107      	bne.n	80050e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80050de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 fa02 	bl	80054ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	691b      	ldr	r3, [r3, #16]
 80050ec:	f003 0320 	and.w	r3, r3, #32
 80050f0:	2b20      	cmp	r3, #32
 80050f2:	d10e      	bne.n	8005112 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	f003 0320 	and.w	r3, r3, #32
 80050fe:	2b20      	cmp	r3, #32
 8005100:	d107      	bne.n	8005112 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f06f 0220 	mvn.w	r2, #32
 800510a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 ff2d 	bl	8005f6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005112:	bf00      	nop
 8005114:	3708      	adds	r7, #8
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
	...

0800511c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800512e:	2b01      	cmp	r3, #1
 8005130:	d101      	bne.n	8005136 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005132:	2302      	movs	r3, #2
 8005134:	e0fd      	b.n	8005332 <HAL_TIM_PWM_ConfigChannel+0x216>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2201      	movs	r2, #1
 800513a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2b14      	cmp	r3, #20
 8005142:	f200 80f0 	bhi.w	8005326 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8005146:	a201      	add	r2, pc, #4	; (adr r2, 800514c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800514c:	080051a1 	.word	0x080051a1
 8005150:	08005327 	.word	0x08005327
 8005154:	08005327 	.word	0x08005327
 8005158:	08005327 	.word	0x08005327
 800515c:	080051e1 	.word	0x080051e1
 8005160:	08005327 	.word	0x08005327
 8005164:	08005327 	.word	0x08005327
 8005168:	08005327 	.word	0x08005327
 800516c:	08005223 	.word	0x08005223
 8005170:	08005327 	.word	0x08005327
 8005174:	08005327 	.word	0x08005327
 8005178:	08005327 	.word	0x08005327
 800517c:	08005263 	.word	0x08005263
 8005180:	08005327 	.word	0x08005327
 8005184:	08005327 	.word	0x08005327
 8005188:	08005327 	.word	0x08005327
 800518c:	080052a5 	.word	0x080052a5
 8005190:	08005327 	.word	0x08005327
 8005194:	08005327 	.word	0x08005327
 8005198:	08005327 	.word	0x08005327
 800519c:	080052e5 	.word	0x080052e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68b9      	ldr	r1, [r7, #8]
 80051a6:	4618      	mov	r0, r3
 80051a8:	f000 fa44 	bl	8005634 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	699a      	ldr	r2, [r3, #24]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f042 0208 	orr.w	r2, r2, #8
 80051ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	699a      	ldr	r2, [r3, #24]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f022 0204 	bic.w	r2, r2, #4
 80051ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	6999      	ldr	r1, [r3, #24]
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	691a      	ldr	r2, [r3, #16]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	430a      	orrs	r2, r1
 80051dc:	619a      	str	r2, [r3, #24]
      break;
 80051de:	e0a3      	b.n	8005328 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68b9      	ldr	r1, [r7, #8]
 80051e6:	4618      	mov	r0, r3
 80051e8:	f000 fab4 	bl	8005754 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	699a      	ldr	r2, [r3, #24]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	699a      	ldr	r2, [r3, #24]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800520a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	6999      	ldr	r1, [r3, #24]
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	021a      	lsls	r2, r3, #8
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	430a      	orrs	r2, r1
 800521e:	619a      	str	r2, [r3, #24]
      break;
 8005220:	e082      	b.n	8005328 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68b9      	ldr	r1, [r7, #8]
 8005228:	4618      	mov	r0, r3
 800522a:	f000 fb1d 	bl	8005868 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	69da      	ldr	r2, [r3, #28]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f042 0208 	orr.w	r2, r2, #8
 800523c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	69da      	ldr	r2, [r3, #28]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f022 0204 	bic.w	r2, r2, #4
 800524c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	69d9      	ldr	r1, [r3, #28]
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	691a      	ldr	r2, [r3, #16]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	430a      	orrs	r2, r1
 800525e:	61da      	str	r2, [r3, #28]
      break;
 8005260:	e062      	b.n	8005328 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68b9      	ldr	r1, [r7, #8]
 8005268:	4618      	mov	r0, r3
 800526a:	f000 fb85 	bl	8005978 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	69da      	ldr	r2, [r3, #28]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800527c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	69da      	ldr	r2, [r3, #28]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800528c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	69d9      	ldr	r1, [r3, #28]
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	021a      	lsls	r2, r3, #8
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	430a      	orrs	r2, r1
 80052a0:	61da      	str	r2, [r3, #28]
      break;
 80052a2:	e041      	b.n	8005328 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68b9      	ldr	r1, [r7, #8]
 80052aa:	4618      	mov	r0, r3
 80052ac:	f000 fbce 	bl	8005a4c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f042 0208 	orr.w	r2, r2, #8
 80052be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f022 0204 	bic.w	r2, r2, #4
 80052ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	691a      	ldr	r2, [r3, #16]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	430a      	orrs	r2, r1
 80052e0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80052e2:	e021      	b.n	8005328 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68b9      	ldr	r1, [r7, #8]
 80052ea:	4618      	mov	r0, r3
 80052ec:	f000 fc12 	bl	8005b14 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800530e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	021a      	lsls	r2, r3, #8
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	430a      	orrs	r2, r1
 8005322:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005324:	e000      	b.n	8005328 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005326:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop

0800533c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800534c:	2b01      	cmp	r3, #1
 800534e:	d101      	bne.n	8005354 <HAL_TIM_ConfigClockSource+0x18>
 8005350:	2302      	movs	r3, #2
 8005352:	e0a8      	b.n	80054a6 <HAL_TIM_ConfigClockSource+0x16a>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2202      	movs	r2, #2
 8005360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005372:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005376:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800537e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2b40      	cmp	r3, #64	; 0x40
 800538e:	d067      	beq.n	8005460 <HAL_TIM_ConfigClockSource+0x124>
 8005390:	2b40      	cmp	r3, #64	; 0x40
 8005392:	d80b      	bhi.n	80053ac <HAL_TIM_ConfigClockSource+0x70>
 8005394:	2b10      	cmp	r3, #16
 8005396:	d073      	beq.n	8005480 <HAL_TIM_ConfigClockSource+0x144>
 8005398:	2b10      	cmp	r3, #16
 800539a:	d802      	bhi.n	80053a2 <HAL_TIM_ConfigClockSource+0x66>
 800539c:	2b00      	cmp	r3, #0
 800539e:	d06f      	beq.n	8005480 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80053a0:	e078      	b.n	8005494 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80053a2:	2b20      	cmp	r3, #32
 80053a4:	d06c      	beq.n	8005480 <HAL_TIM_ConfigClockSource+0x144>
 80053a6:	2b30      	cmp	r3, #48	; 0x30
 80053a8:	d06a      	beq.n	8005480 <HAL_TIM_ConfigClockSource+0x144>
      break;
 80053aa:	e073      	b.n	8005494 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80053ac:	2b70      	cmp	r3, #112	; 0x70
 80053ae:	d00d      	beq.n	80053cc <HAL_TIM_ConfigClockSource+0x90>
 80053b0:	2b70      	cmp	r3, #112	; 0x70
 80053b2:	d804      	bhi.n	80053be <HAL_TIM_ConfigClockSource+0x82>
 80053b4:	2b50      	cmp	r3, #80	; 0x50
 80053b6:	d033      	beq.n	8005420 <HAL_TIM_ConfigClockSource+0xe4>
 80053b8:	2b60      	cmp	r3, #96	; 0x60
 80053ba:	d041      	beq.n	8005440 <HAL_TIM_ConfigClockSource+0x104>
      break;
 80053bc:	e06a      	b.n	8005494 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80053be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053c2:	d066      	beq.n	8005492 <HAL_TIM_ConfigClockSource+0x156>
 80053c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053c8:	d017      	beq.n	80053fa <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80053ca:	e063      	b.n	8005494 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6818      	ldr	r0, [r3, #0]
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	6899      	ldr	r1, [r3, #8]
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	685a      	ldr	r2, [r3, #4]
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	f000 fc7a 	bl	8005cd4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053ee:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	609a      	str	r2, [r3, #8]
      break;
 80053f8:	e04c      	b.n	8005494 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6818      	ldr	r0, [r3, #0]
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	6899      	ldr	r1, [r3, #8]
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	685a      	ldr	r2, [r3, #4]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	f000 fc63 	bl	8005cd4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	689a      	ldr	r2, [r3, #8]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800541c:	609a      	str	r2, [r3, #8]
      break;
 800541e:	e039      	b.n	8005494 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6818      	ldr	r0, [r3, #0]
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	6859      	ldr	r1, [r3, #4]
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	461a      	mov	r2, r3
 800542e:	f000 fbd7 	bl	8005be0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2150      	movs	r1, #80	; 0x50
 8005438:	4618      	mov	r0, r3
 800543a:	f000 fc30 	bl	8005c9e <TIM_ITRx_SetConfig>
      break;
 800543e:	e029      	b.n	8005494 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6818      	ldr	r0, [r3, #0]
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	6859      	ldr	r1, [r3, #4]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	461a      	mov	r2, r3
 800544e:	f000 fbf6 	bl	8005c3e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2160      	movs	r1, #96	; 0x60
 8005458:	4618      	mov	r0, r3
 800545a:	f000 fc20 	bl	8005c9e <TIM_ITRx_SetConfig>
      break;
 800545e:	e019      	b.n	8005494 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6818      	ldr	r0, [r3, #0]
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	6859      	ldr	r1, [r3, #4]
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	461a      	mov	r2, r3
 800546e:	f000 fbb7 	bl	8005be0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2140      	movs	r1, #64	; 0x40
 8005478:	4618      	mov	r0, r3
 800547a:	f000 fc10 	bl	8005c9e <TIM_ITRx_SetConfig>
      break;
 800547e:	e009      	b.n	8005494 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4619      	mov	r1, r3
 800548a:	4610      	mov	r0, r2
 800548c:	f000 fc07 	bl	8005c9e <TIM_ITRx_SetConfig>
        break;
 8005490:	e000      	b.n	8005494 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8005492:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}

080054ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054ae:	b480      	push	{r7}
 80054b0:	b083      	sub	sp, #12
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054b6:	bf00      	nop
 80054b8:	370c      	adds	r7, #12
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr

080054c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b083      	sub	sp, #12
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054ca:	bf00      	nop
 80054cc:	370c      	adds	r7, #12
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr

080054d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b083      	sub	sp, #12
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054de:	bf00      	nop
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr

080054ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054ea:	b480      	push	{r7}
 80054ec:	b083      	sub	sp, #12
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054f2:	bf00      	nop
 80054f4:	370c      	adds	r7, #12
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
	...

08005500 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a40      	ldr	r2, [pc, #256]	; (8005614 <TIM_Base_SetConfig+0x114>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d013      	beq.n	8005540 <TIM_Base_SetConfig+0x40>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800551e:	d00f      	beq.n	8005540 <TIM_Base_SetConfig+0x40>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a3d      	ldr	r2, [pc, #244]	; (8005618 <TIM_Base_SetConfig+0x118>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d00b      	beq.n	8005540 <TIM_Base_SetConfig+0x40>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a3c      	ldr	r2, [pc, #240]	; (800561c <TIM_Base_SetConfig+0x11c>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d007      	beq.n	8005540 <TIM_Base_SetConfig+0x40>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a3b      	ldr	r2, [pc, #236]	; (8005620 <TIM_Base_SetConfig+0x120>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d003      	beq.n	8005540 <TIM_Base_SetConfig+0x40>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a3a      	ldr	r2, [pc, #232]	; (8005624 <TIM_Base_SetConfig+0x124>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d108      	bne.n	8005552 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005546:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	4313      	orrs	r3, r2
 8005550:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a2f      	ldr	r2, [pc, #188]	; (8005614 <TIM_Base_SetConfig+0x114>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d01f      	beq.n	800559a <TIM_Base_SetConfig+0x9a>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005560:	d01b      	beq.n	800559a <TIM_Base_SetConfig+0x9a>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a2c      	ldr	r2, [pc, #176]	; (8005618 <TIM_Base_SetConfig+0x118>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d017      	beq.n	800559a <TIM_Base_SetConfig+0x9a>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a2b      	ldr	r2, [pc, #172]	; (800561c <TIM_Base_SetConfig+0x11c>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d013      	beq.n	800559a <TIM_Base_SetConfig+0x9a>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a2a      	ldr	r2, [pc, #168]	; (8005620 <TIM_Base_SetConfig+0x120>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d00f      	beq.n	800559a <TIM_Base_SetConfig+0x9a>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a29      	ldr	r2, [pc, #164]	; (8005624 <TIM_Base_SetConfig+0x124>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d00b      	beq.n	800559a <TIM_Base_SetConfig+0x9a>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a28      	ldr	r2, [pc, #160]	; (8005628 <TIM_Base_SetConfig+0x128>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d007      	beq.n	800559a <TIM_Base_SetConfig+0x9a>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a27      	ldr	r2, [pc, #156]	; (800562c <TIM_Base_SetConfig+0x12c>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d003      	beq.n	800559a <TIM_Base_SetConfig+0x9a>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a26      	ldr	r2, [pc, #152]	; (8005630 <TIM_Base_SetConfig+0x130>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d108      	bne.n	80055ac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	695b      	ldr	r3, [r3, #20]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	689a      	ldr	r2, [r3, #8]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a10      	ldr	r2, [pc, #64]	; (8005614 <TIM_Base_SetConfig+0x114>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d00f      	beq.n	80055f8 <TIM_Base_SetConfig+0xf8>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a12      	ldr	r2, [pc, #72]	; (8005624 <TIM_Base_SetConfig+0x124>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d00b      	beq.n	80055f8 <TIM_Base_SetConfig+0xf8>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a11      	ldr	r2, [pc, #68]	; (8005628 <TIM_Base_SetConfig+0x128>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d007      	beq.n	80055f8 <TIM_Base_SetConfig+0xf8>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a10      	ldr	r2, [pc, #64]	; (800562c <TIM_Base_SetConfig+0x12c>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d003      	beq.n	80055f8 <TIM_Base_SetConfig+0xf8>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a0f      	ldr	r2, [pc, #60]	; (8005630 <TIM_Base_SetConfig+0x130>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d103      	bne.n	8005600 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	691a      	ldr	r2, [r3, #16]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	615a      	str	r2, [r3, #20]
}
 8005606:	bf00      	nop
 8005608:	3714      	adds	r7, #20
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	40012c00 	.word	0x40012c00
 8005618:	40000400 	.word	0x40000400
 800561c:	40000800 	.word	0x40000800
 8005620:	40000c00 	.word	0x40000c00
 8005624:	40013400 	.word	0x40013400
 8005628:	40014000 	.word	0x40014000
 800562c:	40014400 	.word	0x40014400
 8005630:	40014800 	.word	0x40014800

08005634 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005634:	b480      	push	{r7}
 8005636:	b087      	sub	sp, #28
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	f023 0201 	bic.w	r2, r3, #1
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f023 0303 	bic.w	r3, r3, #3
 800566e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	4313      	orrs	r3, r2
 8005678:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	f023 0302 	bic.w	r3, r3, #2
 8005680:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	697a      	ldr	r2, [r7, #20]
 8005688:	4313      	orrs	r3, r2
 800568a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a2c      	ldr	r2, [pc, #176]	; (8005740 <TIM_OC1_SetConfig+0x10c>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d00f      	beq.n	80056b4 <TIM_OC1_SetConfig+0x80>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a2b      	ldr	r2, [pc, #172]	; (8005744 <TIM_OC1_SetConfig+0x110>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d00b      	beq.n	80056b4 <TIM_OC1_SetConfig+0x80>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a2a      	ldr	r2, [pc, #168]	; (8005748 <TIM_OC1_SetConfig+0x114>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d007      	beq.n	80056b4 <TIM_OC1_SetConfig+0x80>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a29      	ldr	r2, [pc, #164]	; (800574c <TIM_OC1_SetConfig+0x118>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d003      	beq.n	80056b4 <TIM_OC1_SetConfig+0x80>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a28      	ldr	r2, [pc, #160]	; (8005750 <TIM_OC1_SetConfig+0x11c>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d10c      	bne.n	80056ce <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	f023 0308 	bic.w	r3, r3, #8
 80056ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	697a      	ldr	r2, [r7, #20]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	f023 0304 	bic.w	r3, r3, #4
 80056cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a1b      	ldr	r2, [pc, #108]	; (8005740 <TIM_OC1_SetConfig+0x10c>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d00f      	beq.n	80056f6 <TIM_OC1_SetConfig+0xc2>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a1a      	ldr	r2, [pc, #104]	; (8005744 <TIM_OC1_SetConfig+0x110>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d00b      	beq.n	80056f6 <TIM_OC1_SetConfig+0xc2>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a19      	ldr	r2, [pc, #100]	; (8005748 <TIM_OC1_SetConfig+0x114>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d007      	beq.n	80056f6 <TIM_OC1_SetConfig+0xc2>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a18      	ldr	r2, [pc, #96]	; (800574c <TIM_OC1_SetConfig+0x118>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d003      	beq.n	80056f6 <TIM_OC1_SetConfig+0xc2>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a17      	ldr	r2, [pc, #92]	; (8005750 <TIM_OC1_SetConfig+0x11c>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d111      	bne.n	800571a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005704:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	693a      	ldr	r2, [r7, #16]
 800570c:	4313      	orrs	r3, r2
 800570e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	693a      	ldr	r2, [r7, #16]
 8005716:	4313      	orrs	r3, r2
 8005718:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	693a      	ldr	r2, [r7, #16]
 800571e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	685a      	ldr	r2, [r3, #4]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	697a      	ldr	r2, [r7, #20]
 8005732:	621a      	str	r2, [r3, #32]
}
 8005734:	bf00      	nop
 8005736:	371c      	adds	r7, #28
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr
 8005740:	40012c00 	.word	0x40012c00
 8005744:	40013400 	.word	0x40013400
 8005748:	40014000 	.word	0x40014000
 800574c:	40014400 	.word	0x40014400
 8005750:	40014800 	.word	0x40014800

08005754 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005754:	b480      	push	{r7}
 8005756:	b087      	sub	sp, #28
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a1b      	ldr	r3, [r3, #32]
 8005762:	f023 0210 	bic.w	r2, r3, #16
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005782:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800578e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	021b      	lsls	r3, r3, #8
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	4313      	orrs	r3, r2
 800579a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	f023 0320 	bic.w	r3, r3, #32
 80057a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	011b      	lsls	r3, r3, #4
 80057aa:	697a      	ldr	r2, [r7, #20]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a28      	ldr	r2, [pc, #160]	; (8005854 <TIM_OC2_SetConfig+0x100>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d003      	beq.n	80057c0 <TIM_OC2_SetConfig+0x6c>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a27      	ldr	r2, [pc, #156]	; (8005858 <TIM_OC2_SetConfig+0x104>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d10d      	bne.n	80057dc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	011b      	lsls	r3, r3, #4
 80057ce:	697a      	ldr	r2, [r7, #20]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a1d      	ldr	r2, [pc, #116]	; (8005854 <TIM_OC2_SetConfig+0x100>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d00f      	beq.n	8005804 <TIM_OC2_SetConfig+0xb0>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a1c      	ldr	r2, [pc, #112]	; (8005858 <TIM_OC2_SetConfig+0x104>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d00b      	beq.n	8005804 <TIM_OC2_SetConfig+0xb0>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a1b      	ldr	r2, [pc, #108]	; (800585c <TIM_OC2_SetConfig+0x108>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d007      	beq.n	8005804 <TIM_OC2_SetConfig+0xb0>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a1a      	ldr	r2, [pc, #104]	; (8005860 <TIM_OC2_SetConfig+0x10c>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d003      	beq.n	8005804 <TIM_OC2_SetConfig+0xb0>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a19      	ldr	r2, [pc, #100]	; (8005864 <TIM_OC2_SetConfig+0x110>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d113      	bne.n	800582c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800580a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005812:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	695b      	ldr	r3, [r3, #20]
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	4313      	orrs	r3, r2
 800581e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	693a      	ldr	r2, [r7, #16]
 8005828:	4313      	orrs	r3, r2
 800582a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	685a      	ldr	r2, [r3, #4]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	621a      	str	r2, [r3, #32]
}
 8005846:	bf00      	nop
 8005848:	371c      	adds	r7, #28
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	40012c00 	.word	0x40012c00
 8005858:	40013400 	.word	0x40013400
 800585c:	40014000 	.word	0x40014000
 8005860:	40014400 	.word	0x40014400
 8005864:	40014800 	.word	0x40014800

08005868 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005868:	b480      	push	{r7}
 800586a:	b087      	sub	sp, #28
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a1b      	ldr	r3, [r3, #32]
 8005876:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	69db      	ldr	r3, [r3, #28]
 800588e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800589a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f023 0303 	bic.w	r3, r3, #3
 80058a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	021b      	lsls	r3, r3, #8
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	4313      	orrs	r3, r2
 80058c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a27      	ldr	r2, [pc, #156]	; (8005964 <TIM_OC3_SetConfig+0xfc>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d003      	beq.n	80058d2 <TIM_OC3_SetConfig+0x6a>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a26      	ldr	r2, [pc, #152]	; (8005968 <TIM_OC3_SetConfig+0x100>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d10d      	bne.n	80058ee <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	021b      	lsls	r3, r3, #8
 80058e0:	697a      	ldr	r2, [r7, #20]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a1c      	ldr	r2, [pc, #112]	; (8005964 <TIM_OC3_SetConfig+0xfc>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d00f      	beq.n	8005916 <TIM_OC3_SetConfig+0xae>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a1b      	ldr	r2, [pc, #108]	; (8005968 <TIM_OC3_SetConfig+0x100>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d00b      	beq.n	8005916 <TIM_OC3_SetConfig+0xae>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a1a      	ldr	r2, [pc, #104]	; (800596c <TIM_OC3_SetConfig+0x104>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d007      	beq.n	8005916 <TIM_OC3_SetConfig+0xae>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a19      	ldr	r2, [pc, #100]	; (8005970 <TIM_OC3_SetConfig+0x108>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d003      	beq.n	8005916 <TIM_OC3_SetConfig+0xae>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a18      	ldr	r2, [pc, #96]	; (8005974 <TIM_OC3_SetConfig+0x10c>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d113      	bne.n	800593e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800591c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005924:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	011b      	lsls	r3, r3, #4
 800592c:	693a      	ldr	r2, [r7, #16]
 800592e:	4313      	orrs	r3, r2
 8005930:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	011b      	lsls	r3, r3, #4
 8005938:	693a      	ldr	r2, [r7, #16]
 800593a:	4313      	orrs	r3, r2
 800593c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	693a      	ldr	r2, [r7, #16]
 8005942:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	685a      	ldr	r2, [r3, #4]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	697a      	ldr	r2, [r7, #20]
 8005956:	621a      	str	r2, [r3, #32]
}
 8005958:	bf00      	nop
 800595a:	371c      	adds	r7, #28
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr
 8005964:	40012c00 	.word	0x40012c00
 8005968:	40013400 	.word	0x40013400
 800596c:	40014000 	.word	0x40014000
 8005970:	40014400 	.word	0x40014400
 8005974:	40014800 	.word	0x40014800

08005978 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005978:	b480      	push	{r7}
 800597a:	b087      	sub	sp, #28
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a1b      	ldr	r3, [r3, #32]
 8005986:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a1b      	ldr	r3, [r3, #32]
 8005992:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	69db      	ldr	r3, [r3, #28]
 800599e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	021b      	lsls	r3, r3, #8
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	4313      	orrs	r3, r2
 80059be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	031b      	lsls	r3, r3, #12
 80059ce:	693a      	ldr	r2, [r7, #16]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a18      	ldr	r2, [pc, #96]	; (8005a38 <TIM_OC4_SetConfig+0xc0>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d00f      	beq.n	80059fc <TIM_OC4_SetConfig+0x84>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a17      	ldr	r2, [pc, #92]	; (8005a3c <TIM_OC4_SetConfig+0xc4>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d00b      	beq.n	80059fc <TIM_OC4_SetConfig+0x84>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a16      	ldr	r2, [pc, #88]	; (8005a40 <TIM_OC4_SetConfig+0xc8>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d007      	beq.n	80059fc <TIM_OC4_SetConfig+0x84>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a15      	ldr	r2, [pc, #84]	; (8005a44 <TIM_OC4_SetConfig+0xcc>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d003      	beq.n	80059fc <TIM_OC4_SetConfig+0x84>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a14      	ldr	r2, [pc, #80]	; (8005a48 <TIM_OC4_SetConfig+0xd0>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d109      	bne.n	8005a10 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	695b      	ldr	r3, [r3, #20]
 8005a08:	019b      	lsls	r3, r3, #6
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	685a      	ldr	r2, [r3, #4]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	693a      	ldr	r2, [r7, #16]
 8005a28:	621a      	str	r2, [r3, #32]
}
 8005a2a:	bf00      	nop
 8005a2c:	371c      	adds	r7, #28
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	40012c00 	.word	0x40012c00
 8005a3c:	40013400 	.word	0x40013400
 8005a40:	40014000 	.word	0x40014000
 8005a44:	40014400 	.word	0x40014400
 8005a48:	40014800 	.word	0x40014800

08005a4c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b087      	sub	sp, #28
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a1b      	ldr	r3, [r3, #32]
 8005a5a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a1b      	ldr	r3, [r3, #32]
 8005a66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005a90:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	041b      	lsls	r3, r3, #16
 8005a98:	693a      	ldr	r2, [r7, #16]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a17      	ldr	r2, [pc, #92]	; (8005b00 <TIM_OC5_SetConfig+0xb4>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d00f      	beq.n	8005ac6 <TIM_OC5_SetConfig+0x7a>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a16      	ldr	r2, [pc, #88]	; (8005b04 <TIM_OC5_SetConfig+0xb8>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d00b      	beq.n	8005ac6 <TIM_OC5_SetConfig+0x7a>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a15      	ldr	r2, [pc, #84]	; (8005b08 <TIM_OC5_SetConfig+0xbc>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d007      	beq.n	8005ac6 <TIM_OC5_SetConfig+0x7a>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a14      	ldr	r2, [pc, #80]	; (8005b0c <TIM_OC5_SetConfig+0xc0>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d003      	beq.n	8005ac6 <TIM_OC5_SetConfig+0x7a>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a13      	ldr	r2, [pc, #76]	; (8005b10 <TIM_OC5_SetConfig+0xc4>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d109      	bne.n	8005ada <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005acc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	695b      	ldr	r3, [r3, #20]
 8005ad2:	021b      	lsls	r3, r3, #8
 8005ad4:	697a      	ldr	r2, [r7, #20]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	697a      	ldr	r2, [r7, #20]
 8005ade:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	685a      	ldr	r2, [r3, #4]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	621a      	str	r2, [r3, #32]
}
 8005af4:	bf00      	nop
 8005af6:	371c      	adds	r7, #28
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr
 8005b00:	40012c00 	.word	0x40012c00
 8005b04:	40013400 	.word	0x40013400
 8005b08:	40014000 	.word	0x40014000
 8005b0c:	40014400 	.word	0x40014400
 8005b10:	40014800 	.word	0x40014800

08005b14 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b087      	sub	sp, #28
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a1b      	ldr	r3, [r3, #32]
 8005b22:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a1b      	ldr	r3, [r3, #32]
 8005b2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	021b      	lsls	r3, r3, #8
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	051b      	lsls	r3, r3, #20
 8005b62:	693a      	ldr	r2, [r7, #16]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a18      	ldr	r2, [pc, #96]	; (8005bcc <TIM_OC6_SetConfig+0xb8>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d00f      	beq.n	8005b90 <TIM_OC6_SetConfig+0x7c>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a17      	ldr	r2, [pc, #92]	; (8005bd0 <TIM_OC6_SetConfig+0xbc>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d00b      	beq.n	8005b90 <TIM_OC6_SetConfig+0x7c>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a16      	ldr	r2, [pc, #88]	; (8005bd4 <TIM_OC6_SetConfig+0xc0>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d007      	beq.n	8005b90 <TIM_OC6_SetConfig+0x7c>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a15      	ldr	r2, [pc, #84]	; (8005bd8 <TIM_OC6_SetConfig+0xc4>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d003      	beq.n	8005b90 <TIM_OC6_SetConfig+0x7c>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a14      	ldr	r2, [pc, #80]	; (8005bdc <TIM_OC6_SetConfig+0xc8>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d109      	bne.n	8005ba4 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b96:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	695b      	ldr	r3, [r3, #20]
 8005b9c:	029b      	lsls	r3, r3, #10
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	68fa      	ldr	r2, [r7, #12]
 8005bae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	685a      	ldr	r2, [r3, #4]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	621a      	str	r2, [r3, #32]
}
 8005bbe:	bf00      	nop
 8005bc0:	371c      	adds	r7, #28
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	40012c00 	.word	0x40012c00
 8005bd0:	40013400 	.word	0x40013400
 8005bd4:	40014000 	.word	0x40014000
 8005bd8:	40014400 	.word	0x40014400
 8005bdc:	40014800 	.word	0x40014800

08005be0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b087      	sub	sp, #28
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6a1b      	ldr	r3, [r3, #32]
 8005bf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6a1b      	ldr	r3, [r3, #32]
 8005bf6:	f023 0201 	bic.w	r2, r3, #1
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	011b      	lsls	r3, r3, #4
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	f023 030a 	bic.w	r3, r3, #10
 8005c1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	693a      	ldr	r2, [r7, #16]
 8005c2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	621a      	str	r2, [r3, #32]
}
 8005c32:	bf00      	nop
 8005c34:	371c      	adds	r7, #28
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr

08005c3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c3e:	b480      	push	{r7}
 8005c40:	b087      	sub	sp, #28
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	60f8      	str	r0, [r7, #12]
 8005c46:	60b9      	str	r1, [r7, #8]
 8005c48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6a1b      	ldr	r3, [r3, #32]
 8005c4e:	f023 0210 	bic.w	r2, r3, #16
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	699b      	ldr	r3, [r3, #24]
 8005c5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6a1b      	ldr	r3, [r3, #32]
 8005c60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	031b      	lsls	r3, r3, #12
 8005c6e:	697a      	ldr	r2, [r7, #20]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	011b      	lsls	r3, r3, #4
 8005c80:	693a      	ldr	r2, [r7, #16]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	621a      	str	r2, [r3, #32]
}
 8005c92:	bf00      	nop
 8005c94:	371c      	adds	r7, #28
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr

08005c9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c9e:	b480      	push	{r7}
 8005ca0:	b085      	sub	sp, #20
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
 8005ca6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005cb6:	683a      	ldr	r2, [r7, #0]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	f043 0307 	orr.w	r3, r3, #7
 8005cc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	609a      	str	r2, [r3, #8]
}
 8005cc8:	bf00      	nop
 8005cca:	3714      	adds	r7, #20
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b087      	sub	sp, #28
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	607a      	str	r2, [r7, #4]
 8005ce0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	021a      	lsls	r2, r3, #8
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	431a      	orrs	r2, r3
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	697a      	ldr	r2, [r7, #20]
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	697a      	ldr	r2, [r7, #20]
 8005d06:	609a      	str	r2, [r3, #8]
}
 8005d08:	bf00      	nop
 8005d0a:	371c      	adds	r7, #28
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b087      	sub	sp, #28
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	60b9      	str	r1, [r7, #8]
 8005d1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	f003 031f 	and.w	r3, r3, #31
 8005d26:	2201      	movs	r2, #1
 8005d28:	fa02 f303 	lsl.w	r3, r2, r3
 8005d2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6a1a      	ldr	r2, [r3, #32]
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	43db      	mvns	r3, r3
 8005d36:	401a      	ands	r2, r3
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6a1a      	ldr	r2, [r3, #32]
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	f003 031f 	and.w	r3, r3, #31
 8005d46:	6879      	ldr	r1, [r7, #4]
 8005d48:	fa01 f303 	lsl.w	r3, r1, r3
 8005d4c:	431a      	orrs	r2, r3
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	621a      	str	r2, [r3, #32]
}
 8005d52:	bf00      	nop
 8005d54:	371c      	adds	r7, #28
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
	...

08005d60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d101      	bne.n	8005d78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d74:	2302      	movs	r3, #2
 8005d76:	e068      	b.n	8005e4a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2202      	movs	r2, #2
 8005d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a2e      	ldr	r2, [pc, #184]	; (8005e58 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d004      	beq.n	8005dac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a2d      	ldr	r2, [pc, #180]	; (8005e5c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d108      	bne.n	8005dbe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005db2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dc4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a1e      	ldr	r2, [pc, #120]	; (8005e58 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d01d      	beq.n	8005e1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dea:	d018      	beq.n	8005e1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a1b      	ldr	r2, [pc, #108]	; (8005e60 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d013      	beq.n	8005e1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a1a      	ldr	r2, [pc, #104]	; (8005e64 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d00e      	beq.n	8005e1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a18      	ldr	r2, [pc, #96]	; (8005e68 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d009      	beq.n	8005e1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a13      	ldr	r2, [pc, #76]	; (8005e5c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d004      	beq.n	8005e1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a14      	ldr	r2, [pc, #80]	; (8005e6c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d10c      	bne.n	8005e38 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	68ba      	ldr	r2, [r7, #8]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	68ba      	ldr	r2, [r7, #8]
 8005e36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3714      	adds	r7, #20
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	40012c00 	.word	0x40012c00
 8005e5c:	40013400 	.word	0x40013400
 8005e60:	40000400 	.word	0x40000400
 8005e64:	40000800 	.word	0x40000800
 8005e68:	40000c00 	.word	0x40000c00
 8005e6c:	40014000 	.word	0x40014000

08005e70 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b085      	sub	sp, #20
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d101      	bne.n	8005e8c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005e88:	2302      	movs	r3, #2
 8005e8a:	e065      	b.n	8005f58 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	695b      	ldr	r3, [r3, #20]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	699b      	ldr	r3, [r3, #24]
 8005f00:	041b      	lsls	r3, r3, #16
 8005f02:	4313      	orrs	r3, r2
 8005f04:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a16      	ldr	r2, [pc, #88]	; (8005f64 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d004      	beq.n	8005f1a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a14      	ldr	r2, [pc, #80]	; (8005f68 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d115      	bne.n	8005f46 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f24:	051b      	lsls	r3, r3, #20
 8005f26:	4313      	orrs	r3, r2
 8005f28:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	69db      	ldr	r3, [r3, #28]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	6a1b      	ldr	r3, [r3, #32]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	3714      	adds	r7, #20
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr
 8005f64:	40012c00 	.word	0x40012c00
 8005f68:	40013400 	.word	0x40013400

08005f6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f88:	bf00      	nop
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005f9c:	bf00      	nop
 8005f9e:	370c      	adds	r7, #12
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d101      	bne.n	8005fba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e040      	b.n	800603c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d106      	bne.n	8005fd0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f7fa ff7a 	bl	8000ec4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2224      	movs	r2, #36	; 0x24
 8005fd4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f022 0201 	bic.w	r2, r2, #1
 8005fe4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 f82c 	bl	8006044 <UART_SetConfig>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d101      	bne.n	8005ff6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e022      	b.n	800603c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d002      	beq.n	8006004 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 faaa 	bl	8006558 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	685a      	ldr	r2, [r3, #4]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006012:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	689a      	ldr	r2, [r3, #8]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006022:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f042 0201 	orr.w	r2, r2, #1
 8006032:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 fb31 	bl	800669c <UART_CheckIdleState>
 800603a:	4603      	mov	r3, r0
}
 800603c:	4618      	mov	r0, r3
 800603e:	3708      	adds	r7, #8
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006044:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006048:	b088      	sub	sp, #32
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800604e:	2300      	movs	r3, #0
 8006050:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	689a      	ldr	r2, [r3, #8]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	431a      	orrs	r2, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	695b      	ldr	r3, [r3, #20]
 8006060:	431a      	orrs	r2, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	69db      	ldr	r3, [r3, #28]
 8006066:	4313      	orrs	r3, r2
 8006068:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	4bac      	ldr	r3, [pc, #688]	; (8006324 <UART_SetConfig+0x2e0>)
 8006072:	4013      	ands	r3, r2
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	6812      	ldr	r2, [r2, #0]
 8006078:	69f9      	ldr	r1, [r7, #28]
 800607a:	430b      	orrs	r3, r1
 800607c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	68da      	ldr	r2, [r3, #12]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	430a      	orrs	r2, r1
 8006092:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	699b      	ldr	r3, [r3, #24]
 8006098:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4aa2      	ldr	r2, [pc, #648]	; (8006328 <UART_SetConfig+0x2e4>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d004      	beq.n	80060ae <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6a1b      	ldr	r3, [r3, #32]
 80060a8:	69fa      	ldr	r2, [r7, #28]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	69fa      	ldr	r2, [r7, #28]
 80060be:	430a      	orrs	r2, r1
 80060c0:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a99      	ldr	r2, [pc, #612]	; (800632c <UART_SetConfig+0x2e8>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d121      	bne.n	8006110 <UART_SetConfig+0xcc>
 80060cc:	4b98      	ldr	r3, [pc, #608]	; (8006330 <UART_SetConfig+0x2ec>)
 80060ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060d2:	f003 0303 	and.w	r3, r3, #3
 80060d6:	2b03      	cmp	r3, #3
 80060d8:	d816      	bhi.n	8006108 <UART_SetConfig+0xc4>
 80060da:	a201      	add	r2, pc, #4	; (adr r2, 80060e0 <UART_SetConfig+0x9c>)
 80060dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e0:	080060f1 	.word	0x080060f1
 80060e4:	080060fd 	.word	0x080060fd
 80060e8:	080060f7 	.word	0x080060f7
 80060ec:	08006103 	.word	0x08006103
 80060f0:	2301      	movs	r3, #1
 80060f2:	76fb      	strb	r3, [r7, #27]
 80060f4:	e0e8      	b.n	80062c8 <UART_SetConfig+0x284>
 80060f6:	2302      	movs	r3, #2
 80060f8:	76fb      	strb	r3, [r7, #27]
 80060fa:	e0e5      	b.n	80062c8 <UART_SetConfig+0x284>
 80060fc:	2304      	movs	r3, #4
 80060fe:	76fb      	strb	r3, [r7, #27]
 8006100:	e0e2      	b.n	80062c8 <UART_SetConfig+0x284>
 8006102:	2308      	movs	r3, #8
 8006104:	76fb      	strb	r3, [r7, #27]
 8006106:	e0df      	b.n	80062c8 <UART_SetConfig+0x284>
 8006108:	2310      	movs	r3, #16
 800610a:	76fb      	strb	r3, [r7, #27]
 800610c:	bf00      	nop
 800610e:	e0db      	b.n	80062c8 <UART_SetConfig+0x284>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a87      	ldr	r2, [pc, #540]	; (8006334 <UART_SetConfig+0x2f0>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d134      	bne.n	8006184 <UART_SetConfig+0x140>
 800611a:	4b85      	ldr	r3, [pc, #532]	; (8006330 <UART_SetConfig+0x2ec>)
 800611c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006120:	f003 030c 	and.w	r3, r3, #12
 8006124:	2b0c      	cmp	r3, #12
 8006126:	d829      	bhi.n	800617c <UART_SetConfig+0x138>
 8006128:	a201      	add	r2, pc, #4	; (adr r2, 8006130 <UART_SetConfig+0xec>)
 800612a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800612e:	bf00      	nop
 8006130:	08006165 	.word	0x08006165
 8006134:	0800617d 	.word	0x0800617d
 8006138:	0800617d 	.word	0x0800617d
 800613c:	0800617d 	.word	0x0800617d
 8006140:	08006171 	.word	0x08006171
 8006144:	0800617d 	.word	0x0800617d
 8006148:	0800617d 	.word	0x0800617d
 800614c:	0800617d 	.word	0x0800617d
 8006150:	0800616b 	.word	0x0800616b
 8006154:	0800617d 	.word	0x0800617d
 8006158:	0800617d 	.word	0x0800617d
 800615c:	0800617d 	.word	0x0800617d
 8006160:	08006177 	.word	0x08006177
 8006164:	2300      	movs	r3, #0
 8006166:	76fb      	strb	r3, [r7, #27]
 8006168:	e0ae      	b.n	80062c8 <UART_SetConfig+0x284>
 800616a:	2302      	movs	r3, #2
 800616c:	76fb      	strb	r3, [r7, #27]
 800616e:	e0ab      	b.n	80062c8 <UART_SetConfig+0x284>
 8006170:	2304      	movs	r3, #4
 8006172:	76fb      	strb	r3, [r7, #27]
 8006174:	e0a8      	b.n	80062c8 <UART_SetConfig+0x284>
 8006176:	2308      	movs	r3, #8
 8006178:	76fb      	strb	r3, [r7, #27]
 800617a:	e0a5      	b.n	80062c8 <UART_SetConfig+0x284>
 800617c:	2310      	movs	r3, #16
 800617e:	76fb      	strb	r3, [r7, #27]
 8006180:	bf00      	nop
 8006182:	e0a1      	b.n	80062c8 <UART_SetConfig+0x284>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a6b      	ldr	r2, [pc, #428]	; (8006338 <UART_SetConfig+0x2f4>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d120      	bne.n	80061d0 <UART_SetConfig+0x18c>
 800618e:	4b68      	ldr	r3, [pc, #416]	; (8006330 <UART_SetConfig+0x2ec>)
 8006190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006194:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006198:	2b10      	cmp	r3, #16
 800619a:	d00f      	beq.n	80061bc <UART_SetConfig+0x178>
 800619c:	2b10      	cmp	r3, #16
 800619e:	d802      	bhi.n	80061a6 <UART_SetConfig+0x162>
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d005      	beq.n	80061b0 <UART_SetConfig+0x16c>
 80061a4:	e010      	b.n	80061c8 <UART_SetConfig+0x184>
 80061a6:	2b20      	cmp	r3, #32
 80061a8:	d005      	beq.n	80061b6 <UART_SetConfig+0x172>
 80061aa:	2b30      	cmp	r3, #48	; 0x30
 80061ac:	d009      	beq.n	80061c2 <UART_SetConfig+0x17e>
 80061ae:	e00b      	b.n	80061c8 <UART_SetConfig+0x184>
 80061b0:	2300      	movs	r3, #0
 80061b2:	76fb      	strb	r3, [r7, #27]
 80061b4:	e088      	b.n	80062c8 <UART_SetConfig+0x284>
 80061b6:	2302      	movs	r3, #2
 80061b8:	76fb      	strb	r3, [r7, #27]
 80061ba:	e085      	b.n	80062c8 <UART_SetConfig+0x284>
 80061bc:	2304      	movs	r3, #4
 80061be:	76fb      	strb	r3, [r7, #27]
 80061c0:	e082      	b.n	80062c8 <UART_SetConfig+0x284>
 80061c2:	2308      	movs	r3, #8
 80061c4:	76fb      	strb	r3, [r7, #27]
 80061c6:	e07f      	b.n	80062c8 <UART_SetConfig+0x284>
 80061c8:	2310      	movs	r3, #16
 80061ca:	76fb      	strb	r3, [r7, #27]
 80061cc:	bf00      	nop
 80061ce:	e07b      	b.n	80062c8 <UART_SetConfig+0x284>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a59      	ldr	r2, [pc, #356]	; (800633c <UART_SetConfig+0x2f8>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d120      	bne.n	800621c <UART_SetConfig+0x1d8>
 80061da:	4b55      	ldr	r3, [pc, #340]	; (8006330 <UART_SetConfig+0x2ec>)
 80061dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061e0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80061e4:	2b40      	cmp	r3, #64	; 0x40
 80061e6:	d00f      	beq.n	8006208 <UART_SetConfig+0x1c4>
 80061e8:	2b40      	cmp	r3, #64	; 0x40
 80061ea:	d802      	bhi.n	80061f2 <UART_SetConfig+0x1ae>
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d005      	beq.n	80061fc <UART_SetConfig+0x1b8>
 80061f0:	e010      	b.n	8006214 <UART_SetConfig+0x1d0>
 80061f2:	2b80      	cmp	r3, #128	; 0x80
 80061f4:	d005      	beq.n	8006202 <UART_SetConfig+0x1be>
 80061f6:	2bc0      	cmp	r3, #192	; 0xc0
 80061f8:	d009      	beq.n	800620e <UART_SetConfig+0x1ca>
 80061fa:	e00b      	b.n	8006214 <UART_SetConfig+0x1d0>
 80061fc:	2300      	movs	r3, #0
 80061fe:	76fb      	strb	r3, [r7, #27]
 8006200:	e062      	b.n	80062c8 <UART_SetConfig+0x284>
 8006202:	2302      	movs	r3, #2
 8006204:	76fb      	strb	r3, [r7, #27]
 8006206:	e05f      	b.n	80062c8 <UART_SetConfig+0x284>
 8006208:	2304      	movs	r3, #4
 800620a:	76fb      	strb	r3, [r7, #27]
 800620c:	e05c      	b.n	80062c8 <UART_SetConfig+0x284>
 800620e:	2308      	movs	r3, #8
 8006210:	76fb      	strb	r3, [r7, #27]
 8006212:	e059      	b.n	80062c8 <UART_SetConfig+0x284>
 8006214:	2310      	movs	r3, #16
 8006216:	76fb      	strb	r3, [r7, #27]
 8006218:	bf00      	nop
 800621a:	e055      	b.n	80062c8 <UART_SetConfig+0x284>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a47      	ldr	r2, [pc, #284]	; (8006340 <UART_SetConfig+0x2fc>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d124      	bne.n	8006270 <UART_SetConfig+0x22c>
 8006226:	4b42      	ldr	r3, [pc, #264]	; (8006330 <UART_SetConfig+0x2ec>)
 8006228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800622c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006230:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006234:	d012      	beq.n	800625c <UART_SetConfig+0x218>
 8006236:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800623a:	d802      	bhi.n	8006242 <UART_SetConfig+0x1fe>
 800623c:	2b00      	cmp	r3, #0
 800623e:	d007      	beq.n	8006250 <UART_SetConfig+0x20c>
 8006240:	e012      	b.n	8006268 <UART_SetConfig+0x224>
 8006242:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006246:	d006      	beq.n	8006256 <UART_SetConfig+0x212>
 8006248:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800624c:	d009      	beq.n	8006262 <UART_SetConfig+0x21e>
 800624e:	e00b      	b.n	8006268 <UART_SetConfig+0x224>
 8006250:	2300      	movs	r3, #0
 8006252:	76fb      	strb	r3, [r7, #27]
 8006254:	e038      	b.n	80062c8 <UART_SetConfig+0x284>
 8006256:	2302      	movs	r3, #2
 8006258:	76fb      	strb	r3, [r7, #27]
 800625a:	e035      	b.n	80062c8 <UART_SetConfig+0x284>
 800625c:	2304      	movs	r3, #4
 800625e:	76fb      	strb	r3, [r7, #27]
 8006260:	e032      	b.n	80062c8 <UART_SetConfig+0x284>
 8006262:	2308      	movs	r3, #8
 8006264:	76fb      	strb	r3, [r7, #27]
 8006266:	e02f      	b.n	80062c8 <UART_SetConfig+0x284>
 8006268:	2310      	movs	r3, #16
 800626a:	76fb      	strb	r3, [r7, #27]
 800626c:	bf00      	nop
 800626e:	e02b      	b.n	80062c8 <UART_SetConfig+0x284>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a2c      	ldr	r2, [pc, #176]	; (8006328 <UART_SetConfig+0x2e4>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d124      	bne.n	80062c4 <UART_SetConfig+0x280>
 800627a:	4b2d      	ldr	r3, [pc, #180]	; (8006330 <UART_SetConfig+0x2ec>)
 800627c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006280:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006284:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006288:	d012      	beq.n	80062b0 <UART_SetConfig+0x26c>
 800628a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800628e:	d802      	bhi.n	8006296 <UART_SetConfig+0x252>
 8006290:	2b00      	cmp	r3, #0
 8006292:	d007      	beq.n	80062a4 <UART_SetConfig+0x260>
 8006294:	e012      	b.n	80062bc <UART_SetConfig+0x278>
 8006296:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800629a:	d006      	beq.n	80062aa <UART_SetConfig+0x266>
 800629c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062a0:	d009      	beq.n	80062b6 <UART_SetConfig+0x272>
 80062a2:	e00b      	b.n	80062bc <UART_SetConfig+0x278>
 80062a4:	2300      	movs	r3, #0
 80062a6:	76fb      	strb	r3, [r7, #27]
 80062a8:	e00e      	b.n	80062c8 <UART_SetConfig+0x284>
 80062aa:	2302      	movs	r3, #2
 80062ac:	76fb      	strb	r3, [r7, #27]
 80062ae:	e00b      	b.n	80062c8 <UART_SetConfig+0x284>
 80062b0:	2304      	movs	r3, #4
 80062b2:	76fb      	strb	r3, [r7, #27]
 80062b4:	e008      	b.n	80062c8 <UART_SetConfig+0x284>
 80062b6:	2308      	movs	r3, #8
 80062b8:	76fb      	strb	r3, [r7, #27]
 80062ba:	e005      	b.n	80062c8 <UART_SetConfig+0x284>
 80062bc:	2310      	movs	r3, #16
 80062be:	76fb      	strb	r3, [r7, #27]
 80062c0:	bf00      	nop
 80062c2:	e001      	b.n	80062c8 <UART_SetConfig+0x284>
 80062c4:	2310      	movs	r3, #16
 80062c6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a16      	ldr	r2, [pc, #88]	; (8006328 <UART_SetConfig+0x2e4>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	f040 8087 	bne.w	80063e2 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80062d4:	7efb      	ldrb	r3, [r7, #27]
 80062d6:	2b08      	cmp	r3, #8
 80062d8:	d836      	bhi.n	8006348 <UART_SetConfig+0x304>
 80062da:	a201      	add	r2, pc, #4	; (adr r2, 80062e0 <UART_SetConfig+0x29c>)
 80062dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e0:	08006305 	.word	0x08006305
 80062e4:	08006349 	.word	0x08006349
 80062e8:	0800630d 	.word	0x0800630d
 80062ec:	08006349 	.word	0x08006349
 80062f0:	08006313 	.word	0x08006313
 80062f4:	08006349 	.word	0x08006349
 80062f8:	08006349 	.word	0x08006349
 80062fc:	08006349 	.word	0x08006349
 8006300:	0800631b 	.word	0x0800631b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006304:	f7fd fe16 	bl	8003f34 <HAL_RCC_GetPCLK1Freq>
 8006308:	6178      	str	r0, [r7, #20]
        break;
 800630a:	e022      	b.n	8006352 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800630c:	4b0d      	ldr	r3, [pc, #52]	; (8006344 <UART_SetConfig+0x300>)
 800630e:	617b      	str	r3, [r7, #20]
        break;
 8006310:	e01f      	b.n	8006352 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006312:	f7fd fd79 	bl	8003e08 <HAL_RCC_GetSysClockFreq>
 8006316:	6178      	str	r0, [r7, #20]
        break;
 8006318:	e01b      	b.n	8006352 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800631a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800631e:	617b      	str	r3, [r7, #20]
        break;
 8006320:	e017      	b.n	8006352 <UART_SetConfig+0x30e>
 8006322:	bf00      	nop
 8006324:	efff69f3 	.word	0xefff69f3
 8006328:	40008000 	.word	0x40008000
 800632c:	40013800 	.word	0x40013800
 8006330:	40021000 	.word	0x40021000
 8006334:	40004400 	.word	0x40004400
 8006338:	40004800 	.word	0x40004800
 800633c:	40004c00 	.word	0x40004c00
 8006340:	40005000 	.word	0x40005000
 8006344:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006348:	2300      	movs	r3, #0
 800634a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	76bb      	strb	r3, [r7, #26]
        break;
 8006350:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	2b00      	cmp	r3, #0
 8006356:	f000 80f1 	beq.w	800653c <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	685a      	ldr	r2, [r3, #4]
 800635e:	4613      	mov	r3, r2
 8006360:	005b      	lsls	r3, r3, #1
 8006362:	4413      	add	r3, r2
 8006364:	697a      	ldr	r2, [r7, #20]
 8006366:	429a      	cmp	r2, r3
 8006368:	d305      	bcc.n	8006376 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006370:	697a      	ldr	r2, [r7, #20]
 8006372:	429a      	cmp	r2, r3
 8006374:	d902      	bls.n	800637c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	76bb      	strb	r3, [r7, #26]
 800637a:	e0df      	b.n	800653c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	4619      	mov	r1, r3
 8006380:	f04f 0200 	mov.w	r2, #0
 8006384:	f04f 0300 	mov.w	r3, #0
 8006388:	f04f 0400 	mov.w	r4, #0
 800638c:	0214      	lsls	r4, r2, #8
 800638e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006392:	020b      	lsls	r3, r1, #8
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	6852      	ldr	r2, [r2, #4]
 8006398:	0852      	lsrs	r2, r2, #1
 800639a:	4611      	mov	r1, r2
 800639c:	f04f 0200 	mov.w	r2, #0
 80063a0:	eb13 0b01 	adds.w	fp, r3, r1
 80063a4:	eb44 0c02 	adc.w	ip, r4, r2
 80063a8:	4658      	mov	r0, fp
 80063aa:	4661      	mov	r1, ip
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	f04f 0400 	mov.w	r4, #0
 80063b4:	461a      	mov	r2, r3
 80063b6:	4623      	mov	r3, r4
 80063b8:	f7f9 ff06 	bl	80001c8 <__aeabi_uldivmod>
 80063bc:	4603      	mov	r3, r0
 80063be:	460c      	mov	r4, r1
 80063c0:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063c8:	d308      	bcc.n	80063dc <UART_SetConfig+0x398>
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063d0:	d204      	bcs.n	80063dc <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	693a      	ldr	r2, [r7, #16]
 80063d8:	60da      	str	r2, [r3, #12]
 80063da:	e0af      	b.n	800653c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	76bb      	strb	r3, [r7, #26]
 80063e0:	e0ac      	b.n	800653c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	69db      	ldr	r3, [r3, #28]
 80063e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063ea:	d15b      	bne.n	80064a4 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 80063ec:	7efb      	ldrb	r3, [r7, #27]
 80063ee:	2b08      	cmp	r3, #8
 80063f0:	d827      	bhi.n	8006442 <UART_SetConfig+0x3fe>
 80063f2:	a201      	add	r2, pc, #4	; (adr r2, 80063f8 <UART_SetConfig+0x3b4>)
 80063f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f8:	0800641d 	.word	0x0800641d
 80063fc:	08006425 	.word	0x08006425
 8006400:	0800642d 	.word	0x0800642d
 8006404:	08006443 	.word	0x08006443
 8006408:	08006433 	.word	0x08006433
 800640c:	08006443 	.word	0x08006443
 8006410:	08006443 	.word	0x08006443
 8006414:	08006443 	.word	0x08006443
 8006418:	0800643b 	.word	0x0800643b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800641c:	f7fd fd8a 	bl	8003f34 <HAL_RCC_GetPCLK1Freq>
 8006420:	6178      	str	r0, [r7, #20]
        break;
 8006422:	e013      	b.n	800644c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006424:	f7fd fd9c 	bl	8003f60 <HAL_RCC_GetPCLK2Freq>
 8006428:	6178      	str	r0, [r7, #20]
        break;
 800642a:	e00f      	b.n	800644c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800642c:	4b49      	ldr	r3, [pc, #292]	; (8006554 <UART_SetConfig+0x510>)
 800642e:	617b      	str	r3, [r7, #20]
        break;
 8006430:	e00c      	b.n	800644c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006432:	f7fd fce9 	bl	8003e08 <HAL_RCC_GetSysClockFreq>
 8006436:	6178      	str	r0, [r7, #20]
        break;
 8006438:	e008      	b.n	800644c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800643a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800643e:	617b      	str	r3, [r7, #20]
        break;
 8006440:	e004      	b.n	800644c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8006442:	2300      	movs	r3, #0
 8006444:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	76bb      	strb	r3, [r7, #26]
        break;
 800644a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d074      	beq.n	800653c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	005a      	lsls	r2, r3, #1
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	085b      	lsrs	r3, r3, #1
 800645c:	441a      	add	r2, r3
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	fbb2 f3f3 	udiv	r3, r2, r3
 8006466:	b29b      	uxth	r3, r3
 8006468:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	2b0f      	cmp	r3, #15
 800646e:	d916      	bls.n	800649e <UART_SetConfig+0x45a>
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006476:	d212      	bcs.n	800649e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	b29b      	uxth	r3, r3
 800647c:	f023 030f 	bic.w	r3, r3, #15
 8006480:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	085b      	lsrs	r3, r3, #1
 8006486:	b29b      	uxth	r3, r3
 8006488:	f003 0307 	and.w	r3, r3, #7
 800648c:	b29a      	uxth	r2, r3
 800648e:	89fb      	ldrh	r3, [r7, #14]
 8006490:	4313      	orrs	r3, r2
 8006492:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	89fa      	ldrh	r2, [r7, #14]
 800649a:	60da      	str	r2, [r3, #12]
 800649c:	e04e      	b.n	800653c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	76bb      	strb	r3, [r7, #26]
 80064a2:	e04b      	b.n	800653c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80064a4:	7efb      	ldrb	r3, [r7, #27]
 80064a6:	2b08      	cmp	r3, #8
 80064a8:	d827      	bhi.n	80064fa <UART_SetConfig+0x4b6>
 80064aa:	a201      	add	r2, pc, #4	; (adr r2, 80064b0 <UART_SetConfig+0x46c>)
 80064ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b0:	080064d5 	.word	0x080064d5
 80064b4:	080064dd 	.word	0x080064dd
 80064b8:	080064e5 	.word	0x080064e5
 80064bc:	080064fb 	.word	0x080064fb
 80064c0:	080064eb 	.word	0x080064eb
 80064c4:	080064fb 	.word	0x080064fb
 80064c8:	080064fb 	.word	0x080064fb
 80064cc:	080064fb 	.word	0x080064fb
 80064d0:	080064f3 	.word	0x080064f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064d4:	f7fd fd2e 	bl	8003f34 <HAL_RCC_GetPCLK1Freq>
 80064d8:	6178      	str	r0, [r7, #20]
        break;
 80064da:	e013      	b.n	8006504 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064dc:	f7fd fd40 	bl	8003f60 <HAL_RCC_GetPCLK2Freq>
 80064e0:	6178      	str	r0, [r7, #20]
        break;
 80064e2:	e00f      	b.n	8006504 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064e4:	4b1b      	ldr	r3, [pc, #108]	; (8006554 <UART_SetConfig+0x510>)
 80064e6:	617b      	str	r3, [r7, #20]
        break;
 80064e8:	e00c      	b.n	8006504 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064ea:	f7fd fc8d 	bl	8003e08 <HAL_RCC_GetSysClockFreq>
 80064ee:	6178      	str	r0, [r7, #20]
        break;
 80064f0:	e008      	b.n	8006504 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064f6:	617b      	str	r3, [r7, #20]
        break;
 80064f8:	e004      	b.n	8006504 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80064fa:	2300      	movs	r3, #0
 80064fc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	76bb      	strb	r3, [r7, #26]
        break;
 8006502:	bf00      	nop
    }

    if (pclk != 0U)
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d018      	beq.n	800653c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	085a      	lsrs	r2, r3, #1
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	441a      	add	r2, r3
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	fbb2 f3f3 	udiv	r3, r2, r3
 800651c:	b29b      	uxth	r3, r3
 800651e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	2b0f      	cmp	r3, #15
 8006524:	d908      	bls.n	8006538 <UART_SetConfig+0x4f4>
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800652c:	d204      	bcs.n	8006538 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	693a      	ldr	r2, [r7, #16]
 8006534:	60da      	str	r2, [r3, #12]
 8006536:	e001      	b.n	800653c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006548:	7ebb      	ldrb	r3, [r7, #26]
}
 800654a:	4618      	mov	r0, r3
 800654c:	3720      	adds	r7, #32
 800654e:	46bd      	mov	sp, r7
 8006550:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006554:	00f42400 	.word	0x00f42400

08006558 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006564:	f003 0301 	and.w	r3, r3, #1
 8006568:	2b00      	cmp	r3, #0
 800656a:	d00a      	beq.n	8006582 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	430a      	orrs	r2, r1
 8006580:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006586:	f003 0302 	and.w	r3, r3, #2
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00a      	beq.n	80065a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	430a      	orrs	r2, r1
 80065a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a8:	f003 0304 	and.w	r3, r3, #4
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d00a      	beq.n	80065c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	430a      	orrs	r2, r1
 80065c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ca:	f003 0308 	and.w	r3, r3, #8
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00a      	beq.n	80065e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	430a      	orrs	r2, r1
 80065e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ec:	f003 0310 	and.w	r3, r3, #16
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d00a      	beq.n	800660a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	430a      	orrs	r2, r1
 8006608:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660e:	f003 0320 	and.w	r3, r3, #32
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00a      	beq.n	800662c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	430a      	orrs	r2, r1
 800662a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006634:	2b00      	cmp	r3, #0
 8006636:	d01a      	beq.n	800666e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	430a      	orrs	r2, r1
 800664c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006652:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006656:	d10a      	bne.n	800666e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	430a      	orrs	r2, r1
 800666c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00a      	beq.n	8006690 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	430a      	orrs	r2, r1
 800668e:	605a      	str	r2, [r3, #4]
  }
}
 8006690:	bf00      	nop
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b086      	sub	sp, #24
 80066a0:	af02      	add	r7, sp, #8
 80066a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80066aa:	f7fa fd69 	bl	8001180 <HAL_GetTick>
 80066ae:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f003 0308 	and.w	r3, r3, #8
 80066ba:	2b08      	cmp	r3, #8
 80066bc:	d10e      	bne.n	80066dc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066be:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066c2:	9300      	str	r3, [sp, #0]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 f82a 	bl	8006726 <UART_WaitOnFlagUntilTimeout>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d001      	beq.n	80066dc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066d8:	2303      	movs	r3, #3
 80066da:	e020      	b.n	800671e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 0304 	and.w	r3, r3, #4
 80066e6:	2b04      	cmp	r3, #4
 80066e8:	d10e      	bne.n	8006708 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066ea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066ee:	9300      	str	r3, [sp, #0]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 f814 	bl	8006726 <UART_WaitOnFlagUntilTimeout>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d001      	beq.n	8006708 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006704:	2303      	movs	r3, #3
 8006706:	e00a      	b.n	800671e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2220      	movs	r2, #32
 800670c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2220      	movs	r2, #32
 8006712:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800671c:	2300      	movs	r3, #0
}
 800671e:	4618      	mov	r0, r3
 8006720:	3710      	adds	r7, #16
 8006722:	46bd      	mov	sp, r7
 8006724:	bd80      	pop	{r7, pc}

08006726 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006726:	b580      	push	{r7, lr}
 8006728:	b084      	sub	sp, #16
 800672a:	af00      	add	r7, sp, #0
 800672c:	60f8      	str	r0, [r7, #12]
 800672e:	60b9      	str	r1, [r7, #8]
 8006730:	603b      	str	r3, [r7, #0]
 8006732:	4613      	mov	r3, r2
 8006734:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006736:	e05d      	b.n	80067f4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800673e:	d059      	beq.n	80067f4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006740:	f7fa fd1e 	bl	8001180 <HAL_GetTick>
 8006744:	4602      	mov	r2, r0
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	69ba      	ldr	r2, [r7, #24]
 800674c:	429a      	cmp	r2, r3
 800674e:	d302      	bcc.n	8006756 <UART_WaitOnFlagUntilTimeout+0x30>
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d11b      	bne.n	800678e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006764:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	689a      	ldr	r2, [r3, #8]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f022 0201 	bic.w	r2, r2, #1
 8006774:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2220      	movs	r2, #32
 800677a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2220      	movs	r2, #32
 8006780:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2200      	movs	r2, #0
 8006786:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	e042      	b.n	8006814 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 0304 	and.w	r3, r3, #4
 8006798:	2b00      	cmp	r3, #0
 800679a:	d02b      	beq.n	80067f4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	69db      	ldr	r3, [r3, #28]
 80067a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067aa:	d123      	bne.n	80067f4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067b4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80067c4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	689a      	ldr	r2, [r3, #8]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f022 0201 	bic.w	r2, r2, #1
 80067d4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2220      	movs	r2, #32
 80067da:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2220      	movs	r2, #32
 80067e0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2220      	movs	r2, #32
 80067e6:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 80067f0:	2303      	movs	r3, #3
 80067f2:	e00f      	b.n	8006814 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	69da      	ldr	r2, [r3, #28]
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	4013      	ands	r3, r2
 80067fe:	68ba      	ldr	r2, [r7, #8]
 8006800:	429a      	cmp	r2, r3
 8006802:	bf0c      	ite	eq
 8006804:	2301      	moveq	r3, #1
 8006806:	2300      	movne	r3, #0
 8006808:	b2db      	uxtb	r3, r3
 800680a:	461a      	mov	r2, r3
 800680c:	79fb      	ldrb	r3, [r7, #7]
 800680e:	429a      	cmp	r2, r3
 8006810:	d092      	beq.n	8006738 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	3710      	adds	r7, #16
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <__libc_init_array>:
 800681c:	b570      	push	{r4, r5, r6, lr}
 800681e:	4e0d      	ldr	r6, [pc, #52]	; (8006854 <__libc_init_array+0x38>)
 8006820:	4c0d      	ldr	r4, [pc, #52]	; (8006858 <__libc_init_array+0x3c>)
 8006822:	1ba4      	subs	r4, r4, r6
 8006824:	10a4      	asrs	r4, r4, #2
 8006826:	2500      	movs	r5, #0
 8006828:	42a5      	cmp	r5, r4
 800682a:	d109      	bne.n	8006840 <__libc_init_array+0x24>
 800682c:	4e0b      	ldr	r6, [pc, #44]	; (800685c <__libc_init_array+0x40>)
 800682e:	4c0c      	ldr	r4, [pc, #48]	; (8006860 <__libc_init_array+0x44>)
 8006830:	f000 f820 	bl	8006874 <_init>
 8006834:	1ba4      	subs	r4, r4, r6
 8006836:	10a4      	asrs	r4, r4, #2
 8006838:	2500      	movs	r5, #0
 800683a:	42a5      	cmp	r5, r4
 800683c:	d105      	bne.n	800684a <__libc_init_array+0x2e>
 800683e:	bd70      	pop	{r4, r5, r6, pc}
 8006840:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006844:	4798      	blx	r3
 8006846:	3501      	adds	r5, #1
 8006848:	e7ee      	b.n	8006828 <__libc_init_array+0xc>
 800684a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800684e:	4798      	blx	r3
 8006850:	3501      	adds	r5, #1
 8006852:	e7f2      	b.n	800683a <__libc_init_array+0x1e>
 8006854:	080068dc 	.word	0x080068dc
 8006858:	080068dc 	.word	0x080068dc
 800685c:	080068dc 	.word	0x080068dc
 8006860:	080068e0 	.word	0x080068e0

08006864 <memset>:
 8006864:	4402      	add	r2, r0
 8006866:	4603      	mov	r3, r0
 8006868:	4293      	cmp	r3, r2
 800686a:	d100      	bne.n	800686e <memset+0xa>
 800686c:	4770      	bx	lr
 800686e:	f803 1b01 	strb.w	r1, [r3], #1
 8006872:	e7f9      	b.n	8006868 <memset+0x4>

08006874 <_init>:
 8006874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006876:	bf00      	nop
 8006878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800687a:	bc08      	pop	{r3}
 800687c:	469e      	mov	lr, r3
 800687e:	4770      	bx	lr

08006880 <_fini>:
 8006880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006882:	bf00      	nop
 8006884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006886:	bc08      	pop	{r3}
 8006888:	469e      	mov	lr, r3
 800688a:	4770      	bx	lr
