
Projet_inter_Buck_Equipe1_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006284  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800640c  0800640c  0001640c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006454  08006454  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006454  08006454  00016454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800645c  0800645c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800645c  0800645c  0001645c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006460  08006460  00016460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006464  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  2000000c  08006470  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08006470  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f80  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002127  00000000  00000000  00032fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012a8  00000000  00000000  000350e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011a0  00000000  00000000  00036390  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002806d  00000000  00000000  00037530  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e17f  00000000  00000000  0005f59d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010308e  00000000  00000000  0006d71c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001707aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005080  00000000  00000000  00170828  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080063f4 	.word	0x080063f4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080063f4 	.word	0x080063f4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fd66 	bl	8000f9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f826 	bl	8000520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 fa98 	bl	8000a08 <MX_GPIO_Init>
  MX_DMA_Init();
 80004d8:	f000 fa78 	bl	80009cc <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004dc:	f000 fa46 	bl	800096c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80004e0:	f000 f8a6 	bl	8000630 <MX_ADC1_Init>
  MX_TIM1_Init();
 80004e4:	f000 f93e 	bl	8000764 <MX_TIM1_Init>
  MX_TIM2_Init();
 80004e8:	f000 f9ee 	bl	80008c8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1,(uint32_t *)&ADC_buffer, 3);
 80004ec:	2203      	movs	r2, #3
 80004ee:	4908      	ldr	r1, [pc, #32]	; (8000510 <main+0x48>)
 80004f0:	4808      	ldr	r0, [pc, #32]	; (8000514 <main+0x4c>)
 80004f2:	f001 fa2b 	bl	800194c <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim2);
 80004f6:	4808      	ldr	r0, [pc, #32]	; (8000518 <main+0x50>)
 80004f8:	f004 f8d8 	bl	80046ac <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_IT(&hadc1);
 80004fc:	4805      	ldr	r0, [pc, #20]	; (8000514 <main+0x4c>)
 80004fe:	f001 f8f3 	bl	80016e8 <HAL_ADC_Start_IT>


  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000502:	2100      	movs	r1, #0
 8000504:	4805      	ldr	r0, [pc, #20]	; (800051c <main+0x54>)
 8000506:	f004 f9a3 	bl	8004850 <HAL_TIM_PWM_Start>
  RegulateCV();
 800050a:	f000 fb33 	bl	8000b74 <RegulateCV>
  //Set_Duty_Cycle(0.25*htim1.Init.Period);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800050e:	e7fe      	b.n	800050e <main+0x46>
 8000510:	2000003c 	.word	0x2000003c
 8000514:	20000048 	.word	0x20000048
 8000518:	20000140 	.word	0x20000140
 800051c:	200000f4 	.word	0x200000f4

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b0b8      	sub	sp, #224	; 0xe0
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800052a:	2244      	movs	r2, #68	; 0x44
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f005 ff58 	bl	80063e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000534:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000544:	463b      	mov	r3, r7
 8000546:	2288      	movs	r2, #136	; 0x88
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f005 ff4a 	bl	80063e4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000550:	2302      	movs	r3, #2
 8000552:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000556:	f44f 7380 	mov.w	r3, #256	; 0x100
 800055a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800055e:	2310      	movs	r3, #16
 8000560:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000564:	2302      	movs	r3, #2
 8000566:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800056a:	2302      	movs	r3, #2
 800056c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000570:	2301      	movs	r3, #1
 8000572:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000576:	230a      	movs	r3, #10
 8000578:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800057c:	2307      	movs	r3, #7
 800057e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000582:	2302      	movs	r3, #2
 8000584:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000588:	2302      	movs	r3, #2
 800058a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000592:	4618      	mov	r0, r3
 8000594:	f002 fd98 	bl	80030c8 <HAL_RCC_OscConfig>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800059e:	f000 fb0f 	bl	8000bc0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a2:	230f      	movs	r3, #15
 80005a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a8:	2303      	movs	r3, #3
 80005aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ba:	2300      	movs	r3, #0
 80005bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005c0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80005c4:	2104      	movs	r1, #4
 80005c6:	4618      	mov	r0, r3
 80005c8:	f003 f964 	bl	8003894 <HAL_RCC_ClockConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80005d2:	f000 faf5 	bl	8000bc0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 80005d6:	f244 0302 	movw	r3, #16386	; 0x4002
 80005da:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005dc:	2300      	movs	r3, #0
 80005de:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80005e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80005e4:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80005e6:	2302      	movs	r3, #2
 80005e8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80005ea:	2301      	movs	r3, #1
 80005ec:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80005ee:	2308      	movs	r3, #8
 80005f0:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80005f2:	2307      	movs	r3, #7
 80005f4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80005f6:	2302      	movs	r3, #2
 80005f8:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80005fa:	2302      	movs	r3, #2
 80005fc:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80005fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000602:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000604:	463b      	mov	r3, r7
 8000606:	4618      	mov	r0, r3
 8000608:	f003 fb48 	bl	8003c9c <HAL_RCCEx_PeriphCLKConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000612:	f000 fad5 	bl	8000bc0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000616:	f44f 7000 	mov.w	r0, #512	; 0x200
 800061a:	f002 fcff 	bl	800301c <HAL_PWREx_ControlVoltageScaling>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0x108>
  {
    Error_Handler();
 8000624:	f000 facc 	bl	8000bc0 <Error_Handler>
  }
}
 8000628:	bf00      	nop
 800062a:	37e0      	adds	r7, #224	; 0xe0
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b08a      	sub	sp, #40	; 0x28
 8000634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000636:	f107 031c 	add.w	r3, r7, #28
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]
 8000650:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000652:	4b3f      	ldr	r3, [pc, #252]	; (8000750 <MX_ADC1_Init+0x120>)
 8000654:	4a3f      	ldr	r2, [pc, #252]	; (8000754 <MX_ADC1_Init+0x124>)
 8000656:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000658:	4b3d      	ldr	r3, [pc, #244]	; (8000750 <MX_ADC1_Init+0x120>)
 800065a:	2200      	movs	r2, #0
 800065c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800065e:	4b3c      	ldr	r3, [pc, #240]	; (8000750 <MX_ADC1_Init+0x120>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000664:	4b3a      	ldr	r3, [pc, #232]	; (8000750 <MX_ADC1_Init+0x120>)
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800066a:	4b39      	ldr	r3, [pc, #228]	; (8000750 <MX_ADC1_Init+0x120>)
 800066c:	2201      	movs	r2, #1
 800066e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000670:	4b37      	ldr	r3, [pc, #220]	; (8000750 <MX_ADC1_Init+0x120>)
 8000672:	2208      	movs	r2, #8
 8000674:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000676:	4b36      	ldr	r3, [pc, #216]	; (8000750 <MX_ADC1_Init+0x120>)
 8000678:	2200      	movs	r2, #0
 800067a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800067c:	4b34      	ldr	r3, [pc, #208]	; (8000750 <MX_ADC1_Init+0x120>)
 800067e:	2200      	movs	r2, #0
 8000680:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8000682:	4b33      	ldr	r3, [pc, #204]	; (8000750 <MX_ADC1_Init+0x120>)
 8000684:	2203      	movs	r2, #3
 8000686:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000688:	4b31      	ldr	r3, [pc, #196]	; (8000750 <MX_ADC1_Init+0x120>)
 800068a:	2200      	movs	r2, #0
 800068c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8000690:	4b2f      	ldr	r3, [pc, #188]	; (8000750 <MX_ADC1_Init+0x120>)
 8000692:	f44f 62d8 	mov.w	r2, #1728	; 0x6c0
 8000696:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000698:	4b2d      	ldr	r3, [pc, #180]	; (8000750 <MX_ADC1_Init+0x120>)
 800069a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800069e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006a0:	4b2b      	ldr	r3, [pc, #172]	; (8000750 <MX_ADC1_Init+0x120>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80006a8:	4b29      	ldr	r3, [pc, #164]	; (8000750 <MX_ADC1_Init+0x120>)
 80006aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006ae:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006b0:	4b27      	ldr	r3, [pc, #156]	; (8000750 <MX_ADC1_Init+0x120>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006b8:	4825      	ldr	r0, [pc, #148]	; (8000750 <MX_ADC1_Init+0x120>)
 80006ba:	f000 fec1 	bl	8001440 <HAL_ADC_Init>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80006c4:	f000 fa7c 	bl	8000bc0 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006cc:	f107 031c 	add.w	r3, r7, #28
 80006d0:	4619      	mov	r1, r3
 80006d2:	481f      	ldr	r0, [pc, #124]	; (8000750 <MX_ADC1_Init+0x120>)
 80006d4:	f001 ff04 	bl	80024e0 <HAL_ADCEx_MultiModeConfigChannel>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80006de:	f000 fa6f 	bl	8000bc0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006e2:	4b1d      	ldr	r3, [pc, #116]	; (8000758 <MX_ADC1_Init+0x128>)
 80006e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006e6:	2306      	movs	r3, #6
 80006e8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 80006ea:	2305      	movs	r3, #5
 80006ec:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006ee:	237f      	movs	r3, #127	; 0x7f
 80006f0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006f2:	2304      	movs	r3, #4
 80006f4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	4619      	mov	r1, r3
 80006fe:	4814      	ldr	r0, [pc, #80]	; (8000750 <MX_ADC1_Init+0x120>)
 8000700:	f001 f9ec 	bl	8001adc <HAL_ADC_ConfigChannel>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800070a:	f000 fa59 	bl	8000bc0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800070e:	4b13      	ldr	r3, [pc, #76]	; (800075c <MX_ADC1_Init+0x12c>)
 8000710:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000712:	230c      	movs	r3, #12
 8000714:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	4619      	mov	r1, r3
 800071a:	480d      	ldr	r0, [pc, #52]	; (8000750 <MX_ADC1_Init+0x120>)
 800071c:	f001 f9de 	bl	8001adc <HAL_ADC_ConfigChannel>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000726:	f000 fa4b 	bl	8000bc0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800072a:	4b0d      	ldr	r3, [pc, #52]	; (8000760 <MX_ADC1_Init+0x130>)
 800072c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800072e:	2312      	movs	r3, #18
 8000730:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	4619      	mov	r1, r3
 8000736:	4806      	ldr	r0, [pc, #24]	; (8000750 <MX_ADC1_Init+0x120>)
 8000738:	f001 f9d0 	bl	8001adc <HAL_ADC_ConfigChannel>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8000742:	f000 fa3d 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	3728      	adds	r7, #40	; 0x28
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000048 	.word	0x20000048
 8000754:	50040000 	.word	0x50040000
 8000758:	04300002 	.word	0x04300002
 800075c:	08600004 	.word	0x08600004
 8000760:	0c900008 	.word	0x0c900008

08000764 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b09a      	sub	sp, #104	; 0x68
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800076a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000778:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000784:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]
 8000794:	615a      	str	r2, [r3, #20]
 8000796:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	222c      	movs	r2, #44	; 0x2c
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f005 fe20 	bl	80063e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */
  htim1.Init.Period = 80000000UL/F_PWM;
 80007a4:	4b46      	ldr	r3, [pc, #280]	; (80008c0 <MX_TIM1_Init+0x15c>)
 80007a6:	f240 2215 	movw	r2, #533	; 0x215
 80007aa:	60da      	str	r2, [r3, #12]

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007ac:	4b44      	ldr	r3, [pc, #272]	; (80008c0 <MX_TIM1_Init+0x15c>)
 80007ae:	4a45      	ldr	r2, [pc, #276]	; (80008c4 <MX_TIM1_Init+0x160>)
 80007b0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007b2:	4b43      	ldr	r3, [pc, #268]	; (80008c0 <MX_TIM1_Init+0x15c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b8:	4b41      	ldr	r3, [pc, #260]	; (80008c0 <MX_TIM1_Init+0x15c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80007be:	4b40      	ldr	r3, [pc, #256]	; (80008c0 <MX_TIM1_Init+0x15c>)
 80007c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007c4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c6:	4b3e      	ldr	r3, [pc, #248]	; (80008c0 <MX_TIM1_Init+0x15c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007cc:	4b3c      	ldr	r3, [pc, #240]	; (80008c0 <MX_TIM1_Init+0x15c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d2:	4b3b      	ldr	r3, [pc, #236]	; (80008c0 <MX_TIM1_Init+0x15c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007d8:	4839      	ldr	r0, [pc, #228]	; (80008c0 <MX_TIM1_Init+0x15c>)
 80007da:	f003 ff0f 	bl	80045fc <HAL_TIM_Base_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80007e4:	f000 f9ec 	bl	8000bc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ec:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007ee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80007f2:	4619      	mov	r1, r3
 80007f4:	4832      	ldr	r0, [pc, #200]	; (80008c0 <MX_TIM1_Init+0x15c>)
 80007f6:	f004 fb61 	bl	8004ebc <HAL_TIM_ConfigClockSource>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 8000800:	f000 f9de 	bl	8000bc0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000804:	482e      	ldr	r0, [pc, #184]	; (80008c0 <MX_TIM1_Init+0x15c>)
 8000806:	f003 ffc1 	bl	800478c <HAL_TIM_PWM_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8000810:	f000 f9d6 	bl	8000bc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000814:	2300      	movs	r3, #0
 8000816:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000818:	2300      	movs	r3, #0
 800081a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800081c:	2300      	movs	r3, #0
 800081e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000820:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000824:	4619      	mov	r1, r3
 8000826:	4826      	ldr	r0, [pc, #152]	; (80008c0 <MX_TIM1_Init+0x15c>)
 8000828:	f005 f85a 	bl	80058e0 <HAL_TIMEx_MasterConfigSynchronization>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8000832:	f000 f9c5 	bl	8000bc0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000836:	2360      	movs	r3, #96	; 0x60
 8000838:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 32000;
 800083a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800083e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000840:	2300      	movs	r3, #0
 8000842:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000844:	2300      	movs	r3, #0
 8000846:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000848:	2300      	movs	r3, #0
 800084a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800084c:	2300      	movs	r3, #0
 800084e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000850:	2300      	movs	r3, #0
 8000852:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000854:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000858:	2200      	movs	r2, #0
 800085a:	4619      	mov	r1, r3
 800085c:	4818      	ldr	r0, [pc, #96]	; (80008c0 <MX_TIM1_Init+0x15c>)
 800085e:	f004 fa1d 	bl	8004c9c <HAL_TIM_PWM_ConfigChannel>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000868:	f000 f9aa 	bl	8000bc0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800086c:	2300      	movs	r3, #0
 800086e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000870:	2300      	movs	r3, #0
 8000872:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000874:	2300      	movs	r3, #0
 8000876:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000880:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000884:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800088a:	2300      	movs	r3, #0
 800088c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800088e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000898:	2300      	movs	r3, #0
 800089a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800089c:	1d3b      	adds	r3, r7, #4
 800089e:	4619      	mov	r1, r3
 80008a0:	4807      	ldr	r0, [pc, #28]	; (80008c0 <MX_TIM1_Init+0x15c>)
 80008a2:	f005 f8a5 	bl	80059f0 <HAL_TIMEx_ConfigBreakDeadTime>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 80008ac:	f000 f988 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008b0:	4803      	ldr	r0, [pc, #12]	; (80008c0 <MX_TIM1_Init+0x15c>)
 80008b2:	f000 fa57 	bl	8000d64 <HAL_TIM_MspPostInit>

}
 80008b6:	bf00      	nop
 80008b8:	3768      	adds	r7, #104	; 0x68
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200000f4 	.word	0x200000f4
 80008c4:	40012c00 	.word	0x40012c00

080008c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b088      	sub	sp, #32
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ce:	f107 0310 	add.w	r3, r7, #16
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008dc:	1d3b      	adds	r3, r7, #4
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */
  htim2.Init.Period = 80000000UL/(F_ACQ*65536);
 80008e6:	4b20      	ldr	r3, [pc, #128]	; (8000968 <MX_TIM2_Init+0xa0>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	60da      	str	r2, [r3, #12]
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008ec:	4b1e      	ldr	r3, [pc, #120]	; (8000968 <MX_TIM2_Init+0xa0>)
 80008ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15999;
 80008f4:	4b1c      	ldr	r3, [pc, #112]	; (8000968 <MX_TIM2_Init+0xa0>)
 80008f6:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80008fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008fc:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <MX_TIM2_Init+0xa0>)
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000902:	4b19      	ldr	r3, [pc, #100]	; (8000968 <MX_TIM2_Init+0xa0>)
 8000904:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000908:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800090a:	4b17      	ldr	r3, [pc, #92]	; (8000968 <MX_TIM2_Init+0xa0>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000910:	4b15      	ldr	r3, [pc, #84]	; (8000968 <MX_TIM2_Init+0xa0>)
 8000912:	2280      	movs	r2, #128	; 0x80
 8000914:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000916:	4814      	ldr	r0, [pc, #80]	; (8000968 <MX_TIM2_Init+0xa0>)
 8000918:	f003 fe70 	bl	80045fc <HAL_TIM_Base_Init>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8000922:	f000 f94d 	bl	8000bc0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000926:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800092a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800092c:	f107 0310 	add.w	r3, r7, #16
 8000930:	4619      	mov	r1, r3
 8000932:	480d      	ldr	r0, [pc, #52]	; (8000968 <MX_TIM2_Init+0xa0>)
 8000934:	f004 fac2 	bl	8004ebc <HAL_TIM_ConfigClockSource>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800093e:	f000 f93f 	bl	8000bc0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000942:	2320      	movs	r3, #32
 8000944:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	4619      	mov	r1, r3
 800094e:	4806      	ldr	r0, [pc, #24]	; (8000968 <MX_TIM2_Init+0xa0>)
 8000950:	f004 ffc6 	bl	80058e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800095a:	f000 f931 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	3720      	adds	r7, #32
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000140 	.word	0x20000140

0800096c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000970:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <MX_USART2_UART_Init+0x58>)
 8000972:	4a15      	ldr	r2, [pc, #84]	; (80009c8 <MX_USART2_UART_Init+0x5c>)
 8000974:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000976:	4b13      	ldr	r3, [pc, #76]	; (80009c4 <MX_USART2_UART_Init+0x58>)
 8000978:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800097c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <MX_USART2_UART_Init+0x58>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000984:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <MX_USART2_UART_Init+0x58>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <MX_USART2_UART_Init+0x58>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <MX_USART2_UART_Init+0x58>)
 8000992:	220c      	movs	r2, #12
 8000994:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000996:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <MX_USART2_UART_Init+0x58>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800099c:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <MX_USART2_UART_Init+0x58>)
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009a2:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <MX_USART2_UART_Init+0x58>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <MX_USART2_UART_Init+0x58>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ae:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_USART2_UART_Init+0x58>)
 80009b0:	f005 f8ba 	bl	8005b28 <HAL_UART_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009ba:	f000 f901 	bl	8000bc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	2000018c 	.word	0x2000018c
 80009c8:	40004400 	.word	0x40004400

080009cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009d2:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <MX_DMA_Init+0x38>)
 80009d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009d6:	4a0b      	ldr	r2, [pc, #44]	; (8000a04 <MX_DMA_Init+0x38>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	6493      	str	r3, [r2, #72]	; 0x48
 80009de:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <MX_DMA_Init+0x38>)
 80009e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2100      	movs	r1, #0
 80009ee:	200b      	movs	r0, #11
 80009f0:	f001 fefd 	bl	80027ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009f4:	200b      	movs	r0, #11
 80009f6:	f001 ff16 	bl	8002826 <HAL_NVIC_EnableIRQ>

}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40021000 	.word	0x40021000

08000a08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08a      	sub	sp, #40	; 0x28
 8000a0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
 8000a1a:	60da      	str	r2, [r3, #12]
 8000a1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1e:	4b2b      	ldr	r3, [pc, #172]	; (8000acc <MX_GPIO_Init+0xc4>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a22:	4a2a      	ldr	r2, [pc, #168]	; (8000acc <MX_GPIO_Init+0xc4>)
 8000a24:	f043 0304 	orr.w	r3, r3, #4
 8000a28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a2a:	4b28      	ldr	r3, [pc, #160]	; (8000acc <MX_GPIO_Init+0xc4>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2e:	f003 0304 	and.w	r3, r3, #4
 8000a32:	613b      	str	r3, [r7, #16]
 8000a34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a36:	4b25      	ldr	r3, [pc, #148]	; (8000acc <MX_GPIO_Init+0xc4>)
 8000a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3a:	4a24      	ldr	r2, [pc, #144]	; (8000acc <MX_GPIO_Init+0xc4>)
 8000a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a42:	4b22      	ldr	r3, [pc, #136]	; (8000acc <MX_GPIO_Init+0xc4>)
 8000a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4e:	4b1f      	ldr	r3, [pc, #124]	; (8000acc <MX_GPIO_Init+0xc4>)
 8000a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a52:	4a1e      	ldr	r2, [pc, #120]	; (8000acc <MX_GPIO_Init+0xc4>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a5a:	4b1c      	ldr	r3, [pc, #112]	; (8000acc <MX_GPIO_Init+0xc4>)
 8000a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	60bb      	str	r3, [r7, #8]
 8000a64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a66:	4b19      	ldr	r3, [pc, #100]	; (8000acc <MX_GPIO_Init+0xc4>)
 8000a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6a:	4a18      	ldr	r2, [pc, #96]	; (8000acc <MX_GPIO_Init+0xc4>)
 8000a6c:	f043 0302 	orr.w	r3, r3, #2
 8000a70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a72:	4b16      	ldr	r3, [pc, #88]	; (8000acc <MX_GPIO_Init+0xc4>)
 8000a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a76:	f003 0302 	and.w	r3, r3, #2
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2120      	movs	r1, #32
 8000a82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a86:	f002 fa89 	bl	8002f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a90:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <MX_GPIO_Init+0xc8>)
 8000a92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	480d      	ldr	r0, [pc, #52]	; (8000ad4 <MX_GPIO_Init+0xcc>)
 8000aa0:	f002 f8d4 	bl	8002c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000aa4:	2320      	movs	r3, #32
 8000aa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	4619      	mov	r1, r3
 8000aba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000abe:	f002 f8c5 	bl	8002c4c <HAL_GPIO_Init>

}
 8000ac2:	bf00      	nop
 8000ac4:	3728      	adds	r7, #40	; 0x28
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40021000 	.word	0x40021000
 8000ad0:	10210000 	.word	0x10210000
 8000ad4:	48000800 	.word	0x48000800

08000ad8 <Set_Duty_Cycle>:

/* USER CODE BEGIN 4 */
void Set_Duty_Cycle(int Duty_Cycle)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
	//&htim1.Init.Period
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,Duty_Cycle);
 8000ae0:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <Set_Duty_Cycle+0x38>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	687a      	ldr	r2, [r7, #4]
 8000ae6:	635a      	str	r2, [r3, #52]	; 0x34
	if (Duty_Cycle>F_TIM1-1)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f5b3 7f05 	cmp.w	r3, #532	; 0x214
 8000aee:	d903      	bls.n	8000af8 <Set_Duty_Cycle+0x20>
	{
		Duty_Cycle= F_TIM1 -1;
 8000af0:	f44f 7305 	mov.w	r3, #532	; 0x214
 8000af4:	607b      	str	r3, [r7, #4]
	} else if (Duty_Cycle<1)
	{
		Duty_Cycle=1;
	}
}
 8000af6:	e004      	b.n	8000b02 <Set_Duty_Cycle+0x2a>
	} else if (Duty_Cycle<1)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	dc01      	bgt.n	8000b02 <Set_Duty_Cycle+0x2a>
		Duty_Cycle=1;
 8000afe:	2301      	movs	r3, #1
 8000b00:	607b      	str	r3, [r7, #4]
}
 8000b02:	bf00      	nop
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	200000f4 	.word	0x200000f4

08000b14 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]

	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000b1c:	2120      	movs	r1, #32
 8000b1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b22:	f002 fa53 	bl	8002fcc <HAL_GPIO_TogglePin>
	//Vout_mon = HAL_ADC_GetValue(&hadc1);
	Vout_mon = ADC_buffer[0];
	Vin_mon = ADC_buffer[1];
	I_mon = ADC_buffer[2];
	}*/
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	Vout_mon = ADC_buffer[0];
 8000b38:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <HAL_ADC_ConvCpltCallback+0x34>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <HAL_ADC_ConvCpltCallback+0x38>)
 8000b40:	601a      	str	r2, [r3, #0]
	Vin_mon = ADC_buffer[1];
 8000b42:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <HAL_ADC_ConvCpltCallback+0x34>)
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	461a      	mov	r2, r3
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <HAL_ADC_ConvCpltCallback+0x3c>)
 8000b4a:	601a      	str	r2, [r3, #0]
	I_mon = ADC_buffer[2];
 8000b4c:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <HAL_ADC_ConvCpltCallback+0x34>)
 8000b4e:	689b      	ldr	r3, [r3, #8]
 8000b50:	461a      	mov	r2, r3
 8000b52:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <HAL_ADC_ConvCpltCallback+0x40>)
 8000b54:	601a      	str	r2, [r3, #0]


}
 8000b56:	bf00      	nop
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	2000003c 	.word	0x2000003c
 8000b68:	2000002c 	.word	0x2000002c
 8000b6c:	20000030 	.word	0x20000030
 8000b70:	20000034 	.word	0x20000034

08000b74 <RegulateCV>:
{
	Duty_Cycle=(target)*F_TIM1;
}

void RegulateCV(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
	if (Vout_mon<Vout_Ordered)
 8000b78:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <RegulateCV+0x40>)
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <RegulateCV+0x44>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	da05      	bge.n	8000b90 <RegulateCV+0x1c>
	{
		Duty_Cycle++;
 8000b84:	4b0d      	ldr	r3, [pc, #52]	; (8000bbc <RegulateCV+0x48>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	4a0c      	ldr	r2, [pc, #48]	; (8000bbc <RegulateCV+0x48>)
 8000b8c:	6013      	str	r3, [r2, #0]
 8000b8e:	e00a      	b.n	8000ba6 <RegulateCV+0x32>
	} else if(Vout_mon>Vout_Ordered)
 8000b90:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <RegulateCV+0x40>)
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <RegulateCV+0x44>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	dd04      	ble.n	8000ba6 <RegulateCV+0x32>
	{
		Duty_Cycle--;
 8000b9c:	4b07      	ldr	r3, [pc, #28]	; (8000bbc <RegulateCV+0x48>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	3b01      	subs	r3, #1
 8000ba2:	4a06      	ldr	r2, [pc, #24]	; (8000bbc <RegulateCV+0x48>)
 8000ba4:	6013      	str	r3, [r2, #0]
	}
	Set_Duty_Cycle(Duty_Cycle);
 8000ba6:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <RegulateCV+0x48>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff ff94 	bl	8000ad8 <Set_Duty_Cycle>
}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	2000002c 	.word	0x2000002c
 8000bb8:	20000038 	.word	0x20000038
 8000bbc:	20000028 	.word	0x20000028

08000bc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
	...

08000bd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd6:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <HAL_MspInit+0x44>)
 8000bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bda:	4a0e      	ldr	r2, [pc, #56]	; (8000c14 <HAL_MspInit+0x44>)
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	6613      	str	r3, [r2, #96]	; 0x60
 8000be2:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <HAL_MspInit+0x44>)
 8000be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bee:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <HAL_MspInit+0x44>)
 8000bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf2:	4a08      	ldr	r2, [pc, #32]	; (8000c14 <HAL_MspInit+0x44>)
 8000bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf8:	6593      	str	r3, [r2, #88]	; 0x58
 8000bfa:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <HAL_MspInit+0x44>)
 8000bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c02:	603b      	str	r3, [r7, #0]
 8000c04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	40021000 	.word	0x40021000

08000c18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08a      	sub	sp, #40	; 0x28
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a2a      	ldr	r2, [pc, #168]	; (8000ce0 <HAL_ADC_MspInit+0xc8>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d14e      	bne.n	8000cd8 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000c3a:	4b2a      	ldr	r3, [pc, #168]	; (8000ce4 <HAL_ADC_MspInit+0xcc>)
 8000c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3e:	4a29      	ldr	r2, [pc, #164]	; (8000ce4 <HAL_ADC_MspInit+0xcc>)
 8000c40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c46:	4b27      	ldr	r3, [pc, #156]	; (8000ce4 <HAL_ADC_MspInit+0xcc>)
 8000c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c4e:	613b      	str	r3, [r7, #16]
 8000c50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c52:	4b24      	ldr	r3, [pc, #144]	; (8000ce4 <HAL_ADC_MspInit+0xcc>)
 8000c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c56:	4a23      	ldr	r2, [pc, #140]	; (8000ce4 <HAL_ADC_MspInit+0xcc>)
 8000c58:	f043 0304 	orr.w	r3, r3, #4
 8000c5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c5e:	4b21      	ldr	r3, [pc, #132]	; (8000ce4 <HAL_ADC_MspInit+0xcc>)
 8000c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c62:	f003 0304 	and.w	r3, r3, #4
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000c6a:	2307      	movs	r3, #7
 8000c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c6e:	230b      	movs	r3, #11
 8000c70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c76:	f107 0314 	add.w	r3, r7, #20
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	481a      	ldr	r0, [pc, #104]	; (8000ce8 <HAL_ADC_MspInit+0xd0>)
 8000c7e:	f001 ffe5 	bl	8002c4c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c82:	4b1a      	ldr	r3, [pc, #104]	; (8000cec <HAL_ADC_MspInit+0xd4>)
 8000c84:	4a1a      	ldr	r2, [pc, #104]	; (8000cf0 <HAL_ADC_MspInit+0xd8>)
 8000c86:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000c88:	4b18      	ldr	r3, [pc, #96]	; (8000cec <HAL_ADC_MspInit+0xd4>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c8e:	4b17      	ldr	r3, [pc, #92]	; (8000cec <HAL_ADC_MspInit+0xd4>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c94:	4b15      	ldr	r3, [pc, #84]	; (8000cec <HAL_ADC_MspInit+0xd4>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c9a:	4b14      	ldr	r3, [pc, #80]	; (8000cec <HAL_ADC_MspInit+0xd4>)
 8000c9c:	2280      	movs	r2, #128	; 0x80
 8000c9e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ca0:	4b12      	ldr	r3, [pc, #72]	; (8000cec <HAL_ADC_MspInit+0xd4>)
 8000ca2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ca6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ca8:	4b10      	ldr	r3, [pc, #64]	; (8000cec <HAL_ADC_MspInit+0xd4>)
 8000caa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cae:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000cb0:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <HAL_ADC_MspInit+0xd4>)
 8000cb2:	2220      	movs	r2, #32
 8000cb4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000cb6:	4b0d      	ldr	r3, [pc, #52]	; (8000cec <HAL_ADC_MspInit+0xd4>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cbc:	480b      	ldr	r0, [pc, #44]	; (8000cec <HAL_ADC_MspInit+0xd4>)
 8000cbe:	f001 fdcd 	bl	800285c <HAL_DMA_Init>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <HAL_ADC_MspInit+0xb4>
    {
      Error_Handler();
 8000cc8:	f7ff ff7a 	bl	8000bc0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4a07      	ldr	r2, [pc, #28]	; (8000cec <HAL_ADC_MspInit+0xd4>)
 8000cd0:	64da      	str	r2, [r3, #76]	; 0x4c
 8000cd2:	4a06      	ldr	r2, [pc, #24]	; (8000cec <HAL_ADC_MspInit+0xd4>)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cd8:	bf00      	nop
 8000cda:	3728      	adds	r7, #40	; 0x28
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	50040000 	.word	0x50040000
 8000ce4:	40021000 	.word	0x40021000
 8000ce8:	48000800 	.word	0x48000800
 8000cec:	200000ac 	.word	0x200000ac
 8000cf0:	40020008 	.word	0x40020008

08000cf4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a16      	ldr	r2, [pc, #88]	; (8000d5c <HAL_TIM_Base_MspInit+0x68>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d10c      	bne.n	8000d20 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d06:	4b16      	ldr	r3, [pc, #88]	; (8000d60 <HAL_TIM_Base_MspInit+0x6c>)
 8000d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d0a:	4a15      	ldr	r2, [pc, #84]	; (8000d60 <HAL_TIM_Base_MspInit+0x6c>)
 8000d0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d10:	6613      	str	r3, [r2, #96]	; 0x60
 8000d12:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <HAL_TIM_Base_MspInit+0x6c>)
 8000d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d1e:	e018      	b.n	8000d52 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d28:	d113      	bne.n	8000d52 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d2a:	4b0d      	ldr	r3, [pc, #52]	; (8000d60 <HAL_TIM_Base_MspInit+0x6c>)
 8000d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d2e:	4a0c      	ldr	r2, [pc, #48]	; (8000d60 <HAL_TIM_Base_MspInit+0x6c>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	6593      	str	r3, [r2, #88]	; 0x58
 8000d36:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <HAL_TIM_Base_MspInit+0x6c>)
 8000d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	60bb      	str	r3, [r7, #8]
 8000d40:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2102      	movs	r1, #2
 8000d46:	201c      	movs	r0, #28
 8000d48:	f001 fd51 	bl	80027ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d4c:	201c      	movs	r0, #28
 8000d4e:	f001 fd6a 	bl	8002826 <HAL_NVIC_EnableIRQ>
}
 8000d52:	bf00      	nop
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40012c00 	.word	0x40012c00
 8000d60:	40021000 	.word	0x40021000

08000d64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b088      	sub	sp, #32
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 030c 	add.w	r3, r7, #12
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a12      	ldr	r2, [pc, #72]	; (8000dcc <HAL_TIM_MspPostInit+0x68>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d11d      	bne.n	8000dc2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d86:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <HAL_TIM_MspPostInit+0x6c>)
 8000d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8a:	4a11      	ldr	r2, [pc, #68]	; (8000dd0 <HAL_TIM_MspPostInit+0x6c>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d92:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <HAL_TIM_MspPostInit+0x6c>)
 8000d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000da2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da4:	2302      	movs	r3, #2
 8000da6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000db0:	2301      	movs	r3, #1
 8000db2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db4:	f107 030c 	add.w	r3, r7, #12
 8000db8:	4619      	mov	r1, r3
 8000dba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dbe:	f001 ff45 	bl	8002c4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000dc2:	bf00      	nop
 8000dc4:	3720      	adds	r7, #32
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40012c00 	.word	0x40012c00
 8000dd0:	40021000 	.word	0x40021000

08000dd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08a      	sub	sp, #40	; 0x28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a17      	ldr	r2, [pc, #92]	; (8000e50 <HAL_UART_MspInit+0x7c>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d128      	bne.n	8000e48 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000df6:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <HAL_UART_MspInit+0x80>)
 8000df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dfa:	4a16      	ldr	r2, [pc, #88]	; (8000e54 <HAL_UART_MspInit+0x80>)
 8000dfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e00:	6593      	str	r3, [r2, #88]	; 0x58
 8000e02:	4b14      	ldr	r3, [pc, #80]	; (8000e54 <HAL_UART_MspInit+0x80>)
 8000e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0e:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <HAL_UART_MspInit+0x80>)
 8000e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e12:	4a10      	ldr	r2, [pc, #64]	; (8000e54 <HAL_UART_MspInit+0x80>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <HAL_UART_MspInit+0x80>)
 8000e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e26:	230c      	movs	r3, #12
 8000e28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e32:	2303      	movs	r3, #3
 8000e34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e36:	2307      	movs	r3, #7
 8000e38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3a:	f107 0314 	add.w	r3, r7, #20
 8000e3e:	4619      	mov	r1, r3
 8000e40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e44:	f001 ff02 	bl	8002c4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e48:	bf00      	nop
 8000e4a:	3728      	adds	r7, #40	; 0x28
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40004400 	.word	0x40004400
 8000e54:	40021000 	.word	0x40021000

08000e58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e6a:	e7fe      	b.n	8000e6a <HardFault_Handler+0x4>

08000e6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <MemManage_Handler+0x4>

08000e72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e76:	e7fe      	b.n	8000e76 <BusFault_Handler+0x4>

08000e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <UsageFault_Handler+0x4>

08000e7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eac:	f000 f8d2 	bl	8001054 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000eb8:	4802      	ldr	r0, [pc, #8]	; (8000ec4 <DMA1_Channel1_IRQHandler+0x10>)
 8000eba:	f001 fde7 	bl	8002a8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	200000ac 	.word	0x200000ac

08000ec8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ecc:	4802      	ldr	r0, [pc, #8]	; (8000ed8 <TIM2_IRQHandler+0x10>)
 8000ece:	f003 fdc5 	bl	8004a5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000140 	.word	0x20000140

08000edc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ee0:	4b17      	ldr	r3, [pc, #92]	; (8000f40 <SystemInit+0x64>)
 8000ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ee6:	4a16      	ldr	r2, [pc, #88]	; (8000f40 <SystemInit+0x64>)
 8000ee8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000ef0:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <SystemInit+0x68>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a13      	ldr	r2, [pc, #76]	; (8000f44 <SystemInit+0x68>)
 8000ef6:	f043 0301 	orr.w	r3, r3, #1
 8000efa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000efc:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <SystemInit+0x68>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000f02:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <SystemInit+0x68>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4a0f      	ldr	r2, [pc, #60]	; (8000f44 <SystemInit+0x68>)
 8000f08:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000f0c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000f10:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000f12:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <SystemInit+0x68>)
 8000f14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f18:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f1a:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <SystemInit+0x68>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a09      	ldr	r2, [pc, #36]	; (8000f44 <SystemInit+0x68>)
 8000f20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f24:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000f26:	4b07      	ldr	r3, [pc, #28]	; (8000f44 <SystemInit+0x68>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f2c:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <SystemInit+0x64>)
 8000f2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f32:	609a      	str	r2, [r3, #8]
#endif
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	e000ed00 	.word	0xe000ed00
 8000f44:	40021000 	.word	0x40021000

08000f48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f80 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f4c:	f7ff ffc6 	bl	8000edc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000f50:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000f52:	e003      	b.n	8000f5c <LoopCopyDataInit>

08000f54 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000f54:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000f56:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000f58:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000f5a:	3104      	adds	r1, #4

08000f5c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000f5c:	480a      	ldr	r0, [pc, #40]	; (8000f88 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000f60:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000f62:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000f64:	d3f6      	bcc.n	8000f54 <CopyDataInit>
	ldr	r2, =_sbss
 8000f66:	4a0a      	ldr	r2, [pc, #40]	; (8000f90 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000f68:	e002      	b.n	8000f70 <LoopFillZerobss>

08000f6a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000f6a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000f6c:	f842 3b04 	str.w	r3, [r2], #4

08000f70 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000f70:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <LoopForever+0x16>)
	cmp	r2, r3
 8000f72:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000f74:	d3f9      	bcc.n	8000f6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f76:	f005 fa11 	bl	800639c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f7a:	f7ff faa5 	bl	80004c8 <main>

08000f7e <LoopForever>:

LoopForever:
    b LoopForever
 8000f7e:	e7fe      	b.n	8000f7e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f80:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000f84:	08006464 	.word	0x08006464
	ldr	r0, =_sdata
 8000f88:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000f8c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000f90:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000f94:	20000210 	.word	0x20000210

08000f98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f98:	e7fe      	b.n	8000f98 <ADC1_2_IRQHandler>
	...

08000f9c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <HAL_Init+0x3c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a0b      	ldr	r2, [pc, #44]	; (8000fd8 <HAL_Init+0x3c>)
 8000fac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fb0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb2:	2003      	movs	r0, #3
 8000fb4:	f001 fc10 	bl	80027d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fb8:	2000      	movs	r0, #0
 8000fba:	f000 f80f 	bl	8000fdc <HAL_InitTick>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d002      	beq.n	8000fca <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	71fb      	strb	r3, [r7, #7]
 8000fc8:	e001      	b.n	8000fce <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fca:	f7ff fe01 	bl	8000bd0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fce:	79fb      	ldrb	r3, [r7, #7]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40022000 	.word	0x40022000

08000fdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000fe8:	4b17      	ldr	r3, [pc, #92]	; (8001048 <HAL_InitTick+0x6c>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d023      	beq.n	8001038 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ff0:	4b16      	ldr	r3, [pc, #88]	; (800104c <HAL_InitTick+0x70>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	4b14      	ldr	r3, [pc, #80]	; (8001048 <HAL_InitTick+0x6c>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001002:	fbb2 f3f3 	udiv	r3, r2, r3
 8001006:	4618      	mov	r0, r3
 8001008:	f001 fc1b 	bl	8002842 <HAL_SYSTICK_Config>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d10f      	bne.n	8001032 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2b0f      	cmp	r3, #15
 8001016:	d809      	bhi.n	800102c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001018:	2200      	movs	r2, #0
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	f04f 30ff 	mov.w	r0, #4294967295
 8001020:	f001 fbe5 	bl	80027ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001024:	4a0a      	ldr	r2, [pc, #40]	; (8001050 <HAL_InitTick+0x74>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6013      	str	r3, [r2, #0]
 800102a:	e007      	b.n	800103c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800102c:	2301      	movs	r3, #1
 800102e:	73fb      	strb	r3, [r7, #15]
 8001030:	e004      	b.n	800103c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	73fb      	strb	r3, [r7, #15]
 8001036:	e001      	b.n	800103c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800103c:	7bfb      	ldrb	r3, [r7, #15]
}
 800103e:	4618      	mov	r0, r3
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000008 	.word	0x20000008
 800104c:	20000000 	.word	0x20000000
 8001050:	20000004 	.word	0x20000004

08001054 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001058:	4b06      	ldr	r3, [pc, #24]	; (8001074 <HAL_IncTick+0x20>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	461a      	mov	r2, r3
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <HAL_IncTick+0x24>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4413      	add	r3, r2
 8001064:	4a04      	ldr	r2, [pc, #16]	; (8001078 <HAL_IncTick+0x24>)
 8001066:	6013      	str	r3, [r2, #0]
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	20000008 	.word	0x20000008
 8001078:	2000020c 	.word	0x2000020c

0800107c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  return uwTick;
 8001080:	4b03      	ldr	r3, [pc, #12]	; (8001090 <HAL_GetTick+0x14>)
 8001082:	681b      	ldr	r3, [r3, #0]
}
 8001084:	4618      	mov	r0, r3
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	2000020c 	.word	0x2000020c

08001094 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	431a      	orrs	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	609a      	str	r2, [r3, #8]
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80010ba:	b480      	push	{r7}
 80010bc:	b083      	sub	sp, #12
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
 80010c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	431a      	orrs	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	609a      	str	r2, [r3, #8]
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b087      	sub	sp, #28
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
 8001108:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	3360      	adds	r3, #96	; 0x60
 800110e:	461a      	mov	r2, r3
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	4413      	add	r3, r2
 8001116:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	4b08      	ldr	r3, [pc, #32]	; (8001140 <LL_ADC_SetOffset+0x44>)
 800111e:	4013      	ands	r3, r2
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001126:	683a      	ldr	r2, [r7, #0]
 8001128:	430a      	orrs	r2, r1
 800112a:	4313      	orrs	r3, r2
 800112c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001134:	bf00      	nop
 8001136:	371c      	adds	r7, #28
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	03fff000 	.word	0x03fff000

08001144 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	3360      	adds	r3, #96	; 0x60
 8001152:	461a      	mov	r2, r3
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	4413      	add	r3, r2
 800115a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001164:	4618      	mov	r0, r3
 8001166:	3714      	adds	r7, #20
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001170:	b480      	push	{r7}
 8001172:	b087      	sub	sp, #28
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	3360      	adds	r3, #96	; 0x60
 8001180:	461a      	mov	r2, r3
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	4413      	add	r3, r2
 8001188:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	431a      	orrs	r2, r3
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800119a:	bf00      	nop
 800119c:	371c      	adds	r7, #28
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80011a6:	b480      	push	{r7}
 80011a8:	b083      	sub	sp, #12
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	68db      	ldr	r3, [r3, #12]
 80011b2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d101      	bne.n	80011be <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80011ba:	2301      	movs	r3, #1
 80011bc:	e000      	b.n	80011c0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80011be:	2300      	movs	r3, #0
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b087      	sub	sp, #28
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	3330      	adds	r3, #48	; 0x30
 80011dc:	461a      	mov	r2, r3
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	0a1b      	lsrs	r3, r3, #8
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	f003 030c 	and.w	r3, r3, #12
 80011e8:	4413      	add	r3, r2
 80011ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	f003 031f 	and.w	r3, r3, #31
 80011f6:	211f      	movs	r1, #31
 80011f8:	fa01 f303 	lsl.w	r3, r1, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	401a      	ands	r2, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	0e9b      	lsrs	r3, r3, #26
 8001204:	f003 011f 	and.w	r1, r3, #31
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	f003 031f 	and.w	r3, r3, #31
 800120e:	fa01 f303 	lsl.w	r3, r1, r3
 8001212:	431a      	orrs	r2, r3
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001218:	bf00      	nop
 800121a:	371c      	adds	r7, #28
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001224:	b480      	push	{r7}
 8001226:	b087      	sub	sp, #28
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	3314      	adds	r3, #20
 8001234:	461a      	mov	r2, r3
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	0e5b      	lsrs	r3, r3, #25
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	f003 0304 	and.w	r3, r3, #4
 8001240:	4413      	add	r3, r2
 8001242:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	0d1b      	lsrs	r3, r3, #20
 800124c:	f003 031f 	and.w	r3, r3, #31
 8001250:	2107      	movs	r1, #7
 8001252:	fa01 f303 	lsl.w	r3, r1, r3
 8001256:	43db      	mvns	r3, r3
 8001258:	401a      	ands	r2, r3
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	0d1b      	lsrs	r3, r3, #20
 800125e:	f003 031f 	and.w	r3, r3, #31
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	fa01 f303 	lsl.w	r3, r1, r3
 8001268:	431a      	orrs	r2, r3
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800126e:	bf00      	nop
 8001270:	371c      	adds	r7, #28
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
	...

0800127c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001294:	43db      	mvns	r3, r3
 8001296:	401a      	ands	r2, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f003 0318 	and.w	r3, r3, #24
 800129e:	4908      	ldr	r1, [pc, #32]	; (80012c0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80012a0:	40d9      	lsrs	r1, r3
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	400b      	ands	r3, r1
 80012a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012aa:	431a      	orrs	r2, r3
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80012b2:	bf00      	nop
 80012b4:	3714      	adds	r7, #20
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	0007ffff 	.word	0x0007ffff

080012c4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	f003 031f 	and.w	r3, r3, #31
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80012f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	6093      	str	r3, [r2, #8]
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001314:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001318:	d101      	bne.n	800131e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800131a:	2301      	movs	r3, #1
 800131c:	e000      	b.n	8001320 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800131e:	2300      	movs	r3, #0
}
 8001320:	4618      	mov	r0, r3
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800133c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001340:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001364:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001368:	d101      	bne.n	800136e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800136a:	2301      	movs	r3, #1
 800136c:	e000      	b.n	8001370 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800138c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001390:	f043 0201 	orr.w	r2, r3, #1
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d101      	bne.n	80013bc <LL_ADC_IsEnabled+0x18>
 80013b8:	2301      	movs	r3, #1
 80013ba:	e000      	b.n	80013be <LL_ADC_IsEnabled+0x1a>
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80013ca:	b480      	push	{r7}
 80013cc:	b083      	sub	sp, #12
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80013da:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80013de:	f043 0204 	orr.w	r2, r3, #4
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80013f2:	b480      	push	{r7}
 80013f4:	b083      	sub	sp, #12
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f003 0304 	and.w	r3, r3, #4
 8001402:	2b04      	cmp	r3, #4
 8001404:	d101      	bne.n	800140a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001406:	2301      	movs	r3, #1
 8001408:	e000      	b.n	800140c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800140a:	2300      	movs	r3, #0
}
 800140c:	4618      	mov	r0, r3
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	f003 0308 	and.w	r3, r3, #8
 8001428:	2b08      	cmp	r3, #8
 800142a:	d101      	bne.n	8001430 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800142c:	2301      	movs	r3, #1
 800142e:	e000      	b.n	8001432 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
	...

08001440 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001440:	b590      	push	{r4, r7, lr}
 8001442:	b089      	sub	sp, #36	; 0x24
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001448:	2300      	movs	r3, #0
 800144a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800144c:	2300      	movs	r3, #0
 800144e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d101      	bne.n	800145a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e134      	b.n	80016c4 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	691b      	ldr	r3, [r3, #16]
 800145e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001464:	2b00      	cmp	r3, #0
 8001466:	d109      	bne.n	800147c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f7ff fbd5 	bl	8000c18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ff3f 	bl	8001304 <LL_ADC_IsDeepPowerDownEnabled>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d004      	beq.n	8001496 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff ff25 	bl	80012e0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff ff5a 	bl	8001354 <LL_ADC_IsInternalRegulatorEnabled>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d113      	bne.n	80014ce <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff ff3e 	bl	800132c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80014b0:	4b86      	ldr	r3, [pc, #536]	; (80016cc <HAL_ADC_Init+0x28c>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	099b      	lsrs	r3, r3, #6
 80014b6:	4a86      	ldr	r2, [pc, #536]	; (80016d0 <HAL_ADC_Init+0x290>)
 80014b8:	fba2 2303 	umull	r2, r3, r2, r3
 80014bc:	099b      	lsrs	r3, r3, #6
 80014be:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80014c0:	e002      	b.n	80014c8 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	3b01      	subs	r3, #1
 80014c6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1f9      	bne.n	80014c2 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff ff3e 	bl	8001354 <LL_ADC_IsInternalRegulatorEnabled>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d10d      	bne.n	80014fa <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014e2:	f043 0210 	orr.w	r2, r3, #16
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ee:	f043 0201 	orr.w	r2, r3, #1
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff ff77 	bl	80013f2 <LL_ADC_REG_IsConversionOngoing>
 8001504:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800150a:	f003 0310 	and.w	r3, r3, #16
 800150e:	2b00      	cmp	r3, #0
 8001510:	f040 80cf 	bne.w	80016b2 <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	2b00      	cmp	r3, #0
 8001518:	f040 80cb 	bne.w	80016b2 <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001520:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001524:	f043 0202 	orr.w	r2, r3, #2
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff ff37 	bl	80013a4 <LL_ADC_IsEnabled>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d115      	bne.n	8001568 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800153c:	4865      	ldr	r0, [pc, #404]	; (80016d4 <HAL_ADC_Init+0x294>)
 800153e:	f7ff ff31 	bl	80013a4 <LL_ADC_IsEnabled>
 8001542:	4604      	mov	r4, r0
 8001544:	4864      	ldr	r0, [pc, #400]	; (80016d8 <HAL_ADC_Init+0x298>)
 8001546:	f7ff ff2d 	bl	80013a4 <LL_ADC_IsEnabled>
 800154a:	4603      	mov	r3, r0
 800154c:	431c      	orrs	r4, r3
 800154e:	4863      	ldr	r0, [pc, #396]	; (80016dc <HAL_ADC_Init+0x29c>)
 8001550:	f7ff ff28 	bl	80013a4 <LL_ADC_IsEnabled>
 8001554:	4603      	mov	r3, r0
 8001556:	4323      	orrs	r3, r4
 8001558:	2b00      	cmp	r3, #0
 800155a:	d105      	bne.n	8001568 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	4619      	mov	r1, r3
 8001562:	485f      	ldr	r0, [pc, #380]	; (80016e0 <HAL_ADC_Init+0x2a0>)
 8001564:	f7ff fd96 	bl	8001094 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	7e5b      	ldrb	r3, [r3, #25]
 800156c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001572:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001578:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800157e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001586:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001588:	4313      	orrs	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d106      	bne.n	80015a4 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159a:	3b01      	subs	r3, #1
 800159c:	045b      	lsls	r3, r3, #17
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d009      	beq.n	80015c0 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	4313      	orrs	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	68da      	ldr	r2, [r3, #12]
 80015c6:	4b47      	ldr	r3, [pc, #284]	; (80016e4 <HAL_ADC_Init+0x2a4>)
 80015c8:	4013      	ands	r3, r2
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	6812      	ldr	r2, [r2, #0]
 80015ce:	69b9      	ldr	r1, [r7, #24]
 80015d0:	430b      	orrs	r3, r1
 80015d2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff ff0a 	bl	80013f2 <LL_ADC_REG_IsConversionOngoing>
 80015de:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff ff17 	bl	8001418 <LL_ADC_INJ_IsConversionOngoing>
 80015ea:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d13d      	bne.n	800166e <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d13a      	bne.n	800166e <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80015fc:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001604:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001606:	4313      	orrs	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001614:	f023 0302 	bic.w	r3, r3, #2
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	6812      	ldr	r2, [r2, #0]
 800161c:	69b9      	ldr	r1, [r7, #24]
 800161e:	430b      	orrs	r3, r1
 8001620:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001628:	2b01      	cmp	r3, #1
 800162a:	d118      	bne.n	800165e <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001636:	f023 0304 	bic.w	r3, r3, #4
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001642:	4311      	orrs	r1, r2
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001648:	4311      	orrs	r1, r2
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800164e:	430a      	orrs	r2, r1
 8001650:	431a      	orrs	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f042 0201 	orr.w	r2, r2, #1
 800165a:	611a      	str	r2, [r3, #16]
 800165c:	e007      	b.n	800166e <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	691a      	ldr	r2, [r3, #16]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f022 0201 	bic.w	r2, r2, #1
 800166c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d10c      	bne.n	8001690 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167c:	f023 010f 	bic.w	r1, r3, #15
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	69db      	ldr	r3, [r3, #28]
 8001684:	1e5a      	subs	r2, r3, #1
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	430a      	orrs	r2, r1
 800168c:	631a      	str	r2, [r3, #48]	; 0x30
 800168e:	e007      	b.n	80016a0 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f022 020f 	bic.w	r2, r2, #15
 800169e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016a4:	f023 0303 	bic.w	r3, r3, #3
 80016a8:	f043 0201 	orr.w	r2, r3, #1
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	655a      	str	r2, [r3, #84]	; 0x54
 80016b0:	e007      	b.n	80016c2 <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016b6:	f043 0210 	orr.w	r2, r3, #16
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80016c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3724      	adds	r7, #36	; 0x24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd90      	pop	{r4, r7, pc}
 80016cc:	20000000 	.word	0x20000000
 80016d0:	053e2d63 	.word	0x053e2d63
 80016d4:	50040000 	.word	0x50040000
 80016d8:	50040100 	.word	0x50040100
 80016dc:	50040200 	.word	0x50040200
 80016e0:	50040300 	.word	0x50040300
 80016e4:	fff0c007 	.word	0xfff0c007

080016e8 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80016f0:	4893      	ldr	r0, [pc, #588]	; (8001940 <HAL_ADC_Start_IT+0x258>)
 80016f2:	f7ff fde7 	bl	80012c4 <LL_ADC_GetMultimode>
 80016f6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fe78 	bl	80013f2 <LL_ADC_REG_IsConversionOngoing>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	f040 8112 	bne.w	800192e <HAL_ADC_Start_IT+0x246>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001710:	2b01      	cmp	r3, #1
 8001712:	d101      	bne.n	8001718 <HAL_ADC_Start_IT+0x30>
 8001714:	2302      	movs	r3, #2
 8001716:	e10f      	b.n	8001938 <HAL_ADC_Start_IT+0x250>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2201      	movs	r2, #1
 800171c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f000 fdc9 	bl	80022b8 <ADC_Enable>
 8001726:	4603      	mov	r3, r0
 8001728:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800172a:	7dfb      	ldrb	r3, [r7, #23]
 800172c:	2b00      	cmp	r3, #0
 800172e:	f040 80f9 	bne.w	8001924 <HAL_ADC_Start_IT+0x23c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001736:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800173a:	f023 0301 	bic.w	r3, r3, #1
 800173e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a7e      	ldr	r2, [pc, #504]	; (8001944 <HAL_ADC_Start_IT+0x25c>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d002      	beq.n	8001756 <HAL_ADC_Start_IT+0x6e>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	e000      	b.n	8001758 <HAL_ADC_Start_IT+0x70>
 8001756:	4b7c      	ldr	r3, [pc, #496]	; (8001948 <HAL_ADC_Start_IT+0x260>)
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	6812      	ldr	r2, [r2, #0]
 800175c:	4293      	cmp	r3, r2
 800175e:	d002      	beq.n	8001766 <HAL_ADC_Start_IT+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d105      	bne.n	8001772 <HAL_ADC_Start_IT+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800176a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001776:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d006      	beq.n	800178c <HAL_ADC_Start_IT+0xa4>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001782:	f023 0206 	bic.w	r2, r3, #6
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	659a      	str	r2, [r3, #88]	; 0x58
 800178a:	e002      	b.n	8001792 <HAL_ADC_Start_IT+0xaa>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	221c      	movs	r2, #28
 8001798:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	685a      	ldr	r2, [r3, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f022 021c 	bic.w	r2, r2, #28
 80017b0:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	2b08      	cmp	r3, #8
 80017b8:	d108      	bne.n	80017cc <HAL_ADC_Start_IT+0xe4>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	685a      	ldr	r2, [r3, #4]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f042 0208 	orr.w	r2, r2, #8
 80017c8:	605a      	str	r2, [r3, #4]
          break;
 80017ca:	e008      	b.n	80017de <HAL_ADC_Start_IT+0xf6>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	685a      	ldr	r2, [r3, #4]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f042 0204 	orr.w	r2, r2, #4
 80017da:	605a      	str	r2, [r3, #4]
          break;
 80017dc:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d107      	bne.n	80017f6 <HAL_ADC_Start_IT+0x10e>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	685a      	ldr	r2, [r3, #4]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f042 0210 	orr.w	r2, r2, #16
 80017f4:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a52      	ldr	r2, [pc, #328]	; (8001944 <HAL_ADC_Start_IT+0x25c>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d002      	beq.n	8001806 <HAL_ADC_Start_IT+0x11e>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	e000      	b.n	8001808 <HAL_ADC_Start_IT+0x120>
 8001806:	4b50      	ldr	r3, [pc, #320]	; (8001948 <HAL_ADC_Start_IT+0x260>)
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	6812      	ldr	r2, [r2, #0]
 800180c:	4293      	cmp	r3, r2
 800180e:	d008      	beq.n	8001822 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d005      	beq.n	8001822 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	2b05      	cmp	r3, #5
 800181a:	d002      	beq.n	8001822 <HAL_ADC_Start_IT+0x13a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	2b09      	cmp	r3, #9
 8001820:	d13b      	bne.n	800189a <HAL_ADC_Start_IT+0x1b2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d02d      	beq.n	800188c <HAL_ADC_Start_IT+0x1a4>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001834:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001838:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	695b      	ldr	r3, [r3, #20]
 8001844:	2b08      	cmp	r3, #8
 8001846:	d110      	bne.n	800186a <HAL_ADC_Start_IT+0x182>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	685a      	ldr	r2, [r3, #4]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f022 0220 	bic.w	r2, r2, #32
 8001856:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	685a      	ldr	r2, [r3, #4]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001866:	605a      	str	r2, [r3, #4]
              break;
 8001868:	e011      	b.n	800188e <HAL_ADC_Start_IT+0x1a6>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	685a      	ldr	r2, [r3, #4]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001878:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	685a      	ldr	r2, [r3, #4]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f042 0220 	orr.w	r2, r2, #32
 8001888:	605a      	str	r2, [r3, #4]
              break;
 800188a:	e000      	b.n	800188e <HAL_ADC_Start_IT+0x1a6>
          }
        }
 800188c:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff fd99 	bl	80013ca <LL_ADC_REG_StartConversion>
 8001898:	e04d      	b.n	8001936 <HAL_ADC_Start_IT+0x24e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800189e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a26      	ldr	r2, [pc, #152]	; (8001944 <HAL_ADC_Start_IT+0x25c>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d002      	beq.n	80018b6 <HAL_ADC_Start_IT+0x1ce>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	e000      	b.n	80018b8 <HAL_ADC_Start_IT+0x1d0>
 80018b6:	4b24      	ldr	r3, [pc, #144]	; (8001948 <HAL_ADC_Start_IT+0x260>)
 80018b8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	68db      	ldr	r3, [r3, #12]
 80018be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d036      	beq.n	8001934 <HAL_ADC_Start_IT+0x24c>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018ce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	695b      	ldr	r3, [r3, #20]
 80018da:	2b08      	cmp	r3, #8
 80018dc:	d110      	bne.n	8001900 <HAL_ADC_Start_IT+0x218>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	685a      	ldr	r2, [r3, #4]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f022 0220 	bic.w	r2, r2, #32
 80018ec:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	685a      	ldr	r2, [r3, #4]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018fc:	605a      	str	r2, [r3, #4]
              break;
 80018fe:	e01a      	b.n	8001936 <HAL_ADC_Start_IT+0x24e>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	685a      	ldr	r2, [r3, #4]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800190e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	685a      	ldr	r2, [r3, #4]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f042 0220 	orr.w	r2, r2, #32
 800191e:	605a      	str	r2, [r3, #4]
              break;
 8001920:	bf00      	nop
 8001922:	e008      	b.n	8001936 <HAL_ADC_Start_IT+0x24e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800192c:	e003      	b.n	8001936 <HAL_ADC_Start_IT+0x24e>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800192e:	2302      	movs	r3, #2
 8001930:	75fb      	strb	r3, [r7, #23]
 8001932:	e000      	b.n	8001936 <HAL_ADC_Start_IT+0x24e>
        }
 8001934:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 8001936:	7dfb      	ldrb	r3, [r7, #23]
}
 8001938:	4618      	mov	r0, r3
 800193a:	3718      	adds	r7, #24
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	50040300 	.word	0x50040300
 8001944:	50040100 	.word	0x50040100
 8001948:	50040000 	.word	0x50040000

0800194c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001958:	4850      	ldr	r0, [pc, #320]	; (8001a9c <HAL_ADC_Start_DMA+0x150>)
 800195a:	f7ff fcb3 	bl	80012c4 <LL_ADC_GetMultimode>
 800195e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff fd44 	bl	80013f2 <LL_ADC_REG_IsConversionOngoing>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	f040 808e 	bne.w	8001a8e <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001978:	2b01      	cmp	r3, #1
 800197a:	d101      	bne.n	8001980 <HAL_ADC_Start_DMA+0x34>
 800197c:	2302      	movs	r3, #2
 800197e:	e089      	b.n	8001a94 <HAL_ADC_Start_DMA+0x148>
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d005      	beq.n	800199a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	2b05      	cmp	r3, #5
 8001992:	d002      	beq.n	800199a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	2b09      	cmp	r3, #9
 8001998:	d172      	bne.n	8001a80 <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	f000 fc8c 	bl	80022b8 <ADC_Enable>
 80019a0:	4603      	mov	r3, r0
 80019a2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80019a4:	7dfb      	ldrb	r3, [r7, #23]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d165      	bne.n	8001a76 <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80019b2:	f023 0301 	bic.w	r3, r3, #1
 80019b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a37      	ldr	r2, [pc, #220]	; (8001aa0 <HAL_ADC_Start_DMA+0x154>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d002      	beq.n	80019ce <HAL_ADC_Start_DMA+0x82>
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	e000      	b.n	80019d0 <HAL_ADC_Start_DMA+0x84>
 80019ce:	4b35      	ldr	r3, [pc, #212]	; (8001aa4 <HAL_ADC_Start_DMA+0x158>)
 80019d0:	68fa      	ldr	r2, [r7, #12]
 80019d2:	6812      	ldr	r2, [r2, #0]
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d002      	beq.n	80019de <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d105      	bne.n	80019ea <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d006      	beq.n	8001a04 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019fa:	f023 0206 	bic.w	r2, r3, #6
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	659a      	str	r2, [r3, #88]	; 0x58
 8001a02:	e002      	b.n	8001a0a <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2200      	movs	r2, #0
 8001a08:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0e:	4a26      	ldr	r2, [pc, #152]	; (8001aa8 <HAL_ADC_Start_DMA+0x15c>)
 8001a10:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a16:	4a25      	ldr	r2, [pc, #148]	; (8001aac <HAL_ADC_Start_DMA+0x160>)
 8001a18:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a1e:	4a24      	ldr	r2, [pc, #144]	; (8001ab0 <HAL_ADC_Start_DMA+0x164>)
 8001a20:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	221c      	movs	r2, #28
 8001a28:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	685a      	ldr	r2, [r3, #4]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f042 0210 	orr.w	r2, r2, #16
 8001a40:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	68da      	ldr	r2, [r3, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f042 0201 	orr.w	r2, r2, #1
 8001a50:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	3340      	adds	r3, #64	; 0x40
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	68ba      	ldr	r2, [r7, #8]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f000 ffb3 	bl	80029cc <HAL_DMA_Start_IT>
 8001a66:	4603      	mov	r3, r0
 8001a68:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff fcab 	bl	80013ca <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001a74:	e00d      	b.n	8001a92 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8001a7e:	e008      	b.n	8001a92 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001a8c:	e001      	b.n	8001a92 <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a92:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3718      	adds	r7, #24
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	50040300 	.word	0x50040300
 8001aa0:	50040100 	.word	0x50040100
 8001aa4:	50040000 	.word	0x50040000
 8001aa8:	0800236d 	.word	0x0800236d
 8001aac:	08002445 	.word	0x08002445
 8001ab0:	08002461 	.word	0x08002461

08001ab4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b0b6      	sub	sp, #216	; 0xd8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001aec:	2300      	movs	r3, #0
 8001aee:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d101      	bne.n	8001afe <HAL_ADC_ConfigChannel+0x22>
 8001afa:	2302      	movs	r3, #2
 8001afc:	e3c6      	b.n	800228c <HAL_ADC_ConfigChannel+0x7b0>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2201      	movs	r2, #1
 8001b02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff fc71 	bl	80013f2 <LL_ADC_REG_IsConversionOngoing>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f040 83a7 	bne.w	8002266 <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2b05      	cmp	r3, #5
 8001b1e:	d824      	bhi.n	8001b6a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	3b02      	subs	r3, #2
 8001b26:	2b03      	cmp	r3, #3
 8001b28:	d81b      	bhi.n	8001b62 <HAL_ADC_ConfigChannel+0x86>
 8001b2a:	a201      	add	r2, pc, #4	; (adr r2, 8001b30 <HAL_ADC_ConfigChannel+0x54>)
 8001b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b30:	08001b41 	.word	0x08001b41
 8001b34:	08001b49 	.word	0x08001b49
 8001b38:	08001b51 	.word	0x08001b51
 8001b3c:	08001b59 	.word	0x08001b59
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	220c      	movs	r2, #12
 8001b44:	605a      	str	r2, [r3, #4]
          break;
 8001b46:	e011      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	2212      	movs	r2, #18
 8001b4c:	605a      	str	r2, [r3, #4]
          break;
 8001b4e:	e00d      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	2218      	movs	r2, #24
 8001b54:	605a      	str	r2, [r3, #4]
          break;
 8001b56:	e009      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b5e:	605a      	str	r2, [r3, #4]
          break;
 8001b60:	e004      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	2206      	movs	r2, #6
 8001b66:	605a      	str	r2, [r3, #4]
          break;
 8001b68:	e000      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001b6a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6818      	ldr	r0, [r3, #0]
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	6859      	ldr	r1, [r3, #4]
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	f7ff fb27 	bl	80011cc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff fc35 	bl	80013f2 <LL_ADC_REG_IsConversionOngoing>
 8001b88:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff fc41 	bl	8001418 <LL_ADC_INJ_IsConversionOngoing>
 8001b96:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b9a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f040 81a6 	bne.w	8001ef0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ba4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f040 81a1 	bne.w	8001ef0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6818      	ldr	r0, [r3, #0]
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	6819      	ldr	r1, [r3, #0]
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	461a      	mov	r2, r3
 8001bbc:	f7ff fb32 	bl	8001224 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	695a      	ldr	r2, [r3, #20]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	08db      	lsrs	r3, r3, #3
 8001bcc:	f003 0303 	and.w	r3, r3, #3
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	2b04      	cmp	r3, #4
 8001be0:	d00a      	beq.n	8001bf8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6818      	ldr	r0, [r3, #0]
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	6919      	ldr	r1, [r3, #16]
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001bf2:	f7ff fa83 	bl	80010fc <LL_ADC_SetOffset>
 8001bf6:	e17b      	b.n	8001ef0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff faa0 	bl	8001144 <LL_ADC_GetOffsetChannel>
 8001c04:	4603      	mov	r3, r0
 8001c06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d10a      	bne.n	8001c24 <HAL_ADC_ConfigChannel+0x148>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2100      	movs	r1, #0
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7ff fa95 	bl	8001144 <LL_ADC_GetOffsetChannel>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	0e9b      	lsrs	r3, r3, #26
 8001c1e:	f003 021f 	and.w	r2, r3, #31
 8001c22:	e01e      	b.n	8001c62 <HAL_ADC_ConfigChannel+0x186>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2100      	movs	r1, #0
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff fa8a 	bl	8001144 <LL_ADC_GetOffsetChannel>
 8001c30:	4603      	mov	r3, r0
 8001c32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c36:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001c3a:	fa93 f3a3 	rbit	r3, r3
 8001c3e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001c46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c4a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001c52:	2320      	movs	r3, #32
 8001c54:	e004      	b.n	8001c60 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001c56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c5a:	fab3 f383 	clz	r3, r3
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d105      	bne.n	8001c7a <HAL_ADC_ConfigChannel+0x19e>
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	0e9b      	lsrs	r3, r3, #26
 8001c74:	f003 031f 	and.w	r3, r3, #31
 8001c78:	e018      	b.n	8001cac <HAL_ADC_ConfigChannel+0x1d0>
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c82:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001c86:	fa93 f3a3 	rbit	r3, r3
 8001c8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001c8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001c96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d101      	bne.n	8001ca2 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001c9e:	2320      	movs	r3, #32
 8001ca0:	e004      	b.n	8001cac <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001ca2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ca6:	fab3 f383 	clz	r3, r3
 8001caa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d106      	bne.n	8001cbe <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff fa59 	bl	8001170 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff fa3d 	bl	8001144 <LL_ADC_GetOffsetChannel>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d10a      	bne.n	8001cea <HAL_ADC_ConfigChannel+0x20e>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2101      	movs	r1, #1
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff fa32 	bl	8001144 <LL_ADC_GetOffsetChannel>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	0e9b      	lsrs	r3, r3, #26
 8001ce4:	f003 021f 	and.w	r2, r3, #31
 8001ce8:	e01e      	b.n	8001d28 <HAL_ADC_ConfigChannel+0x24c>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2101      	movs	r1, #1
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff fa27 	bl	8001144 <LL_ADC_GetOffsetChannel>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d00:	fa93 f3a3 	rbit	r3, r3
 8001d04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001d08:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001d0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001d10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d101      	bne.n	8001d1c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8001d18:	2320      	movs	r3, #32
 8001d1a:	e004      	b.n	8001d26 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8001d1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001d20:	fab3 f383 	clz	r3, r3
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d105      	bne.n	8001d40 <HAL_ADC_ConfigChannel+0x264>
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	0e9b      	lsrs	r3, r3, #26
 8001d3a:	f003 031f 	and.w	r3, r3, #31
 8001d3e:	e018      	b.n	8001d72 <HAL_ADC_ConfigChannel+0x296>
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d4c:	fa93 f3a3 	rbit	r3, r3
 8001d50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001d54:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001d58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001d5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d101      	bne.n	8001d68 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8001d64:	2320      	movs	r3, #32
 8001d66:	e004      	b.n	8001d72 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8001d68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d6c:	fab3 f383 	clz	r3, r3
 8001d70:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d106      	bne.n	8001d84 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff f9f6 	bl	8001170 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2102      	movs	r1, #2
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff f9da 	bl	8001144 <LL_ADC_GetOffsetChannel>
 8001d90:	4603      	mov	r3, r0
 8001d92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d10a      	bne.n	8001db0 <HAL_ADC_ConfigChannel+0x2d4>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2102      	movs	r1, #2
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff f9cf 	bl	8001144 <LL_ADC_GetOffsetChannel>
 8001da6:	4603      	mov	r3, r0
 8001da8:	0e9b      	lsrs	r3, r3, #26
 8001daa:	f003 021f 	and.w	r2, r3, #31
 8001dae:	e01e      	b.n	8001dee <HAL_ADC_ConfigChannel+0x312>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2102      	movs	r1, #2
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff f9c4 	bl	8001144 <LL_ADC_GetOffsetChannel>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001dc6:	fa93 f3a3 	rbit	r3, r3
 8001dca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001dce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001dd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001dd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8001dde:	2320      	movs	r3, #32
 8001de0:	e004      	b.n	8001dec <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8001de2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001de6:	fab3 f383 	clz	r3, r3
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d105      	bne.n	8001e06 <HAL_ADC_ConfigChannel+0x32a>
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	0e9b      	lsrs	r3, r3, #26
 8001e00:	f003 031f 	and.w	r3, r3, #31
 8001e04:	e016      	b.n	8001e34 <HAL_ADC_ConfigChannel+0x358>
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e12:	fa93 f3a3 	rbit	r3, r3
 8001e16:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001e18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001e1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8001e26:	2320      	movs	r3, #32
 8001e28:	e004      	b.n	8001e34 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8001e2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e2e:	fab3 f383 	clz	r3, r3
 8001e32:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d106      	bne.n	8001e46 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	2102      	movs	r1, #2
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff f995 	bl	8001170 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2103      	movs	r1, #3
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff f979 	bl	8001144 <LL_ADC_GetOffsetChannel>
 8001e52:	4603      	mov	r3, r0
 8001e54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d10a      	bne.n	8001e72 <HAL_ADC_ConfigChannel+0x396>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2103      	movs	r1, #3
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff f96e 	bl	8001144 <LL_ADC_GetOffsetChannel>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	0e9b      	lsrs	r3, r3, #26
 8001e6c:	f003 021f 	and.w	r2, r3, #31
 8001e70:	e017      	b.n	8001ea2 <HAL_ADC_ConfigChannel+0x3c6>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2103      	movs	r1, #3
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff f963 	bl	8001144 <LL_ADC_GetOffsetChannel>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e84:	fa93 f3a3 	rbit	r3, r3
 8001e88:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001e8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e8c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001e8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8001e94:	2320      	movs	r3, #32
 8001e96:	e003      	b.n	8001ea0 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8001e98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e9a:	fab3 f383 	clz	r3, r3
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d105      	bne.n	8001eba <HAL_ADC_ConfigChannel+0x3de>
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	0e9b      	lsrs	r3, r3, #26
 8001eb4:	f003 031f 	and.w	r3, r3, #31
 8001eb8:	e011      	b.n	8001ede <HAL_ADC_ConfigChannel+0x402>
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ec2:	fa93 f3a3 	rbit	r3, r3
 8001ec6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001ec8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001eca:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001ecc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8001ed2:	2320      	movs	r3, #32
 8001ed4:	e003      	b.n	8001ede <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8001ed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ed8:	fab3 f383 	clz	r3, r3
 8001edc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d106      	bne.n	8001ef0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2103      	movs	r1, #3
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff f940 	bl	8001170 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff fa55 	bl	80013a4 <LL_ADC_IsEnabled>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f040 813f 	bne.w	8002180 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6818      	ldr	r0, [r3, #0]
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	6819      	ldr	r1, [r3, #0]
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	461a      	mov	r2, r3
 8001f10:	f7ff f9b4 	bl	800127c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	4a8e      	ldr	r2, [pc, #568]	; (8002154 <HAL_ADC_ConfigChannel+0x678>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	f040 8130 	bne.w	8002180 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d10b      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x46c>
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	0e9b      	lsrs	r3, r3, #26
 8001f36:	3301      	adds	r3, #1
 8001f38:	f003 031f 	and.w	r3, r3, #31
 8001f3c:	2b09      	cmp	r3, #9
 8001f3e:	bf94      	ite	ls
 8001f40:	2301      	movls	r3, #1
 8001f42:	2300      	movhi	r3, #0
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	e019      	b.n	8001f7c <HAL_ADC_ConfigChannel+0x4a0>
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f50:	fa93 f3a3 	rbit	r3, r3
 8001f54:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001f56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f58:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001f5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8001f60:	2320      	movs	r3, #32
 8001f62:	e003      	b.n	8001f6c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8001f64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f66:	fab3 f383 	clz	r3, r3
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	f003 031f 	and.w	r3, r3, #31
 8001f72:	2b09      	cmp	r3, #9
 8001f74:	bf94      	ite	ls
 8001f76:	2301      	movls	r3, #1
 8001f78:	2300      	movhi	r3, #0
 8001f7a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d079      	beq.n	8002074 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d107      	bne.n	8001f9c <HAL_ADC_ConfigChannel+0x4c0>
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	0e9b      	lsrs	r3, r3, #26
 8001f92:	3301      	adds	r3, #1
 8001f94:	069b      	lsls	r3, r3, #26
 8001f96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f9a:	e015      	b.n	8001fc8 <HAL_ADC_ConfigChannel+0x4ec>
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fa4:	fa93 f3a3 	rbit	r3, r3
 8001fa8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001faa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fac:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001fae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d101      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8001fb4:	2320      	movs	r3, #32
 8001fb6:	e003      	b.n	8001fc0 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8001fb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fba:	fab3 f383 	clz	r3, r3
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	069b      	lsls	r3, r3, #26
 8001fc4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d109      	bne.n	8001fe8 <HAL_ADC_ConfigChannel+0x50c>
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	0e9b      	lsrs	r3, r3, #26
 8001fda:	3301      	adds	r3, #1
 8001fdc:	f003 031f 	and.w	r3, r3, #31
 8001fe0:	2101      	movs	r1, #1
 8001fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe6:	e017      	b.n	8002018 <HAL_ADC_ConfigChannel+0x53c>
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ff0:	fa93 f3a3 	rbit	r3, r3
 8001ff4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001ff6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ff8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001ffa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d101      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002000:	2320      	movs	r3, #32
 8002002:	e003      	b.n	800200c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002006:	fab3 f383 	clz	r3, r3
 800200a:	b2db      	uxtb	r3, r3
 800200c:	3301      	adds	r3, #1
 800200e:	f003 031f 	and.w	r3, r3, #31
 8002012:	2101      	movs	r1, #1
 8002014:	fa01 f303 	lsl.w	r3, r1, r3
 8002018:	ea42 0103 	orr.w	r1, r2, r3
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002024:	2b00      	cmp	r3, #0
 8002026:	d10a      	bne.n	800203e <HAL_ADC_ConfigChannel+0x562>
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	0e9b      	lsrs	r3, r3, #26
 800202e:	3301      	adds	r3, #1
 8002030:	f003 021f 	and.w	r2, r3, #31
 8002034:	4613      	mov	r3, r2
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	4413      	add	r3, r2
 800203a:	051b      	lsls	r3, r3, #20
 800203c:	e018      	b.n	8002070 <HAL_ADC_ConfigChannel+0x594>
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002046:	fa93 f3a3 	rbit	r3, r3
 800204a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800204c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800204e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002056:	2320      	movs	r3, #32
 8002058:	e003      	b.n	8002062 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800205a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800205c:	fab3 f383 	clz	r3, r3
 8002060:	b2db      	uxtb	r3, r3
 8002062:	3301      	adds	r3, #1
 8002064:	f003 021f 	and.w	r2, r3, #31
 8002068:	4613      	mov	r3, r2
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	4413      	add	r3, r2
 800206e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002070:	430b      	orrs	r3, r1
 8002072:	e080      	b.n	8002176 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800207c:	2b00      	cmp	r3, #0
 800207e:	d107      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x5b4>
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	0e9b      	lsrs	r3, r3, #26
 8002086:	3301      	adds	r3, #1
 8002088:	069b      	lsls	r3, r3, #26
 800208a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800208e:	e015      	b.n	80020bc <HAL_ADC_ConfigChannel+0x5e0>
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002098:	fa93 f3a3 	rbit	r3, r3
 800209c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800209e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80020a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d101      	bne.n	80020ac <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80020a8:	2320      	movs	r3, #32
 80020aa:	e003      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80020ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ae:	fab3 f383 	clz	r3, r3
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	3301      	adds	r3, #1
 80020b6:	069b      	lsls	r3, r3, #26
 80020b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d109      	bne.n	80020dc <HAL_ADC_ConfigChannel+0x600>
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	0e9b      	lsrs	r3, r3, #26
 80020ce:	3301      	adds	r3, #1
 80020d0:	f003 031f 	and.w	r3, r3, #31
 80020d4:	2101      	movs	r1, #1
 80020d6:	fa01 f303 	lsl.w	r3, r1, r3
 80020da:	e017      	b.n	800210c <HAL_ADC_ConfigChannel+0x630>
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e2:	6a3b      	ldr	r3, [r7, #32]
 80020e4:	fa93 f3a3 	rbit	r3, r3
 80020e8:	61fb      	str	r3, [r7, #28]
  return result;
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d101      	bne.n	80020f8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80020f4:	2320      	movs	r3, #32
 80020f6:	e003      	b.n	8002100 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80020f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fa:	fab3 f383 	clz	r3, r3
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	3301      	adds	r3, #1
 8002102:	f003 031f 	and.w	r3, r3, #31
 8002106:	2101      	movs	r1, #1
 8002108:	fa01 f303 	lsl.w	r3, r1, r3
 800210c:	ea42 0103 	orr.w	r1, r2, r3
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002118:	2b00      	cmp	r3, #0
 800211a:	d10d      	bne.n	8002138 <HAL_ADC_ConfigChannel+0x65c>
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	0e9b      	lsrs	r3, r3, #26
 8002122:	3301      	adds	r3, #1
 8002124:	f003 021f 	and.w	r2, r3, #31
 8002128:	4613      	mov	r3, r2
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	4413      	add	r3, r2
 800212e:	3b1e      	subs	r3, #30
 8002130:	051b      	lsls	r3, r3, #20
 8002132:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002136:	e01d      	b.n	8002174 <HAL_ADC_ConfigChannel+0x698>
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	fa93 f3a3 	rbit	r3, r3
 8002144:	613b      	str	r3, [r7, #16]
  return result;
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d103      	bne.n	8002158 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002150:	2320      	movs	r3, #32
 8002152:	e005      	b.n	8002160 <HAL_ADC_ConfigChannel+0x684>
 8002154:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	fab3 f383 	clz	r3, r3
 800215e:	b2db      	uxtb	r3, r3
 8002160:	3301      	adds	r3, #1
 8002162:	f003 021f 	and.w	r2, r3, #31
 8002166:	4613      	mov	r3, r2
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	4413      	add	r3, r2
 800216c:	3b1e      	subs	r3, #30
 800216e:	051b      	lsls	r3, r3, #20
 8002170:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002174:	430b      	orrs	r3, r1
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	6892      	ldr	r2, [r2, #8]
 800217a:	4619      	mov	r1, r3
 800217c:	f7ff f852 	bl	8001224 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	4b43      	ldr	r3, [pc, #268]	; (8002294 <HAL_ADC_ConfigChannel+0x7b8>)
 8002186:	4013      	ands	r3, r2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d079      	beq.n	8002280 <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800218c:	4842      	ldr	r0, [pc, #264]	; (8002298 <HAL_ADC_ConfigChannel+0x7bc>)
 800218e:	f7fe ffa7 	bl	80010e0 <LL_ADC_GetCommonPathInternalCh>
 8002192:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a40      	ldr	r2, [pc, #256]	; (800229c <HAL_ADC_ConfigChannel+0x7c0>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d12b      	bne.n	80021f8 <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80021a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d125      	bne.n	80021f8 <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a3b      	ldr	r2, [pc, #236]	; (80022a0 <HAL_ADC_ConfigChannel+0x7c4>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d004      	beq.n	80021c0 <HAL_ADC_ConfigChannel+0x6e4>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a3a      	ldr	r2, [pc, #232]	; (80022a4 <HAL_ADC_ConfigChannel+0x7c8>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d15c      	bne.n	800227a <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021c8:	4619      	mov	r1, r3
 80021ca:	4833      	ldr	r0, [pc, #204]	; (8002298 <HAL_ADC_ConfigChannel+0x7bc>)
 80021cc:	f7fe ff75 	bl	80010ba <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80021d0:	4b35      	ldr	r3, [pc, #212]	; (80022a8 <HAL_ADC_ConfigChannel+0x7cc>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	099b      	lsrs	r3, r3, #6
 80021d6:	4a35      	ldr	r2, [pc, #212]	; (80022ac <HAL_ADC_ConfigChannel+0x7d0>)
 80021d8:	fba2 2303 	umull	r2, r3, r2, r3
 80021dc:	099a      	lsrs	r2, r3, #6
 80021de:	4613      	mov	r3, r2
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	4413      	add	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80021e8:	e002      	b.n	80021f0 <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	3b01      	subs	r3, #1
 80021ee:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1f9      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021f6:	e040      	b.n	800227a <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a2c      	ldr	r2, [pc, #176]	; (80022b0 <HAL_ADC_ConfigChannel+0x7d4>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d118      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x758>
 8002202:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002206:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d112      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a23      	ldr	r2, [pc, #140]	; (80022a0 <HAL_ADC_ConfigChannel+0x7c4>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d004      	beq.n	8002222 <HAL_ADC_ConfigChannel+0x746>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a21      	ldr	r2, [pc, #132]	; (80022a4 <HAL_ADC_ConfigChannel+0x7c8>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d12d      	bne.n	800227e <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002222:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002226:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800222a:	4619      	mov	r1, r3
 800222c:	481a      	ldr	r0, [pc, #104]	; (8002298 <HAL_ADC_ConfigChannel+0x7bc>)
 800222e:	f7fe ff44 	bl	80010ba <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002232:	e024      	b.n	800227e <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a1e      	ldr	r2, [pc, #120]	; (80022b4 <HAL_ADC_ConfigChannel+0x7d8>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d120      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800223e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d11a      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a14      	ldr	r2, [pc, #80]	; (80022a0 <HAL_ADC_ConfigChannel+0x7c4>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d115      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002254:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002258:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800225c:	4619      	mov	r1, r3
 800225e:	480e      	ldr	r0, [pc, #56]	; (8002298 <HAL_ADC_ConfigChannel+0x7bc>)
 8002260:	f7fe ff2b 	bl	80010ba <LL_ADC_SetCommonPathInternalCh>
 8002264:	e00c      	b.n	8002280 <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800226a:	f043 0220 	orr.w	r2, r3, #32
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002278:	e002      	b.n	8002280 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800227a:	bf00      	nop
 800227c:	e000      	b.n	8002280 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800227e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002288:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800228c:	4618      	mov	r0, r3
 800228e:	37d8      	adds	r7, #216	; 0xd8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	80080000 	.word	0x80080000
 8002298:	50040300 	.word	0x50040300
 800229c:	c7520000 	.word	0xc7520000
 80022a0:	50040000 	.word	0x50040000
 80022a4:	50040200 	.word	0x50040200
 80022a8:	20000000 	.word	0x20000000
 80022ac:	053e2d63 	.word	0x053e2d63
 80022b0:	cb840000 	.word	0xcb840000
 80022b4:	80000001 	.word	0x80000001

080022b8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff f86d 	bl	80013a4 <LL_ADC_IsEnabled>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d146      	bne.n	800235e <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	689a      	ldr	r2, [r3, #8]
 80022d6:	4b24      	ldr	r3, [pc, #144]	; (8002368 <ADC_Enable+0xb0>)
 80022d8:	4013      	ands	r3, r2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00d      	beq.n	80022fa <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e2:	f043 0210 	orr.w	r2, r3, #16
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ee:	f043 0201 	orr.w	r2, r3, #1
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e032      	b.n	8002360 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff f83c 	bl	800137c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002304:	f7fe feba 	bl	800107c <HAL_GetTick>
 8002308:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800230a:	e021      	b.n	8002350 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff f847 	bl	80013a4 <LL_ADC_IsEnabled>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d104      	bne.n	8002326 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff f82b 	bl	800137c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002326:	f7fe fea9 	bl	800107c <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d90d      	bls.n	8002350 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002338:	f043 0210 	orr.w	r2, r3, #16
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002344:	f043 0201 	orr.w	r2, r3, #1
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e007      	b.n	8002360 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b01      	cmp	r3, #1
 800235c:	d1d6      	bne.n	800230c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	3710      	adds	r7, #16
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	8000003f 	.word	0x8000003f

0800236c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002378:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800237e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002382:	2b00      	cmp	r3, #0
 8002384:	d14b      	bne.n	800241e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800238a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0308 	and.w	r3, r3, #8
 800239c:	2b00      	cmp	r3, #0
 800239e:	d021      	beq.n	80023e4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7fe fefe 	bl	80011a6 <LL_ADC_REG_IsTriggerSourceSWStart>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d032      	beq.n	8002416 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d12b      	bne.n	8002416 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d11f      	bne.n	8002416 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023da:	f043 0201 	orr.w	r2, r3, #1
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	655a      	str	r2, [r3, #84]	; 0x54
 80023e2:	e018      	b.n	8002416 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d111      	bne.n	8002416 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002402:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d105      	bne.n	8002416 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800240e:	f043 0201 	orr.w	r2, r3, #1
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002416:	68f8      	ldr	r0, [r7, #12]
 8002418:	f7fe fb8a 	bl	8000b30 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800241c:	e00e      	b.n	800243c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002422:	f003 0310 	and.w	r3, r3, #16
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800242a:	68f8      	ldr	r0, [r7, #12]
 800242c:	f7ff fb4c 	bl	8001ac8 <HAL_ADC_ErrorCallback>
}
 8002430:	e004      	b.n	800243c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	4798      	blx	r3
}
 800243c:	bf00      	nop
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002450:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f7ff fb2e 	bl	8001ab4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002458:	bf00      	nop
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002472:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800247e:	f043 0204 	orr.w	r2, r3, #4
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	f7ff fb1e 	bl	8001ac8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800248c:	bf00      	nop
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <LL_ADC_IsEnabled>:
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d101      	bne.n	80024ac <LL_ADC_IsEnabled+0x18>
 80024a8:	2301      	movs	r3, #1
 80024aa:	e000      	b.n	80024ae <LL_ADC_IsEnabled+0x1a>
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <LL_ADC_REG_IsConversionOngoing>:
{
 80024ba:	b480      	push	{r7}
 80024bc:	b083      	sub	sp, #12
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 0304 	and.w	r3, r3, #4
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	d101      	bne.n	80024d2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80024ce:	2301      	movs	r3, #1
 80024d0:	e000      	b.n	80024d4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80024e0:	b590      	push	{r4, r7, lr}
 80024e2:	b09f      	sub	sp, #124	; 0x7c
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024ea:	2300      	movs	r3, #0
 80024ec:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d101      	bne.n	80024fe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80024fa:	2302      	movs	r3, #2
 80024fc:	e08f      	b.n	800261e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2201      	movs	r2, #1
 8002502:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a47      	ldr	r2, [pc, #284]	; (8002628 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d102      	bne.n	8002516 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002510:	4b46      	ldr	r3, [pc, #280]	; (800262c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002512:	60bb      	str	r3, [r7, #8]
 8002514:	e001      	b.n	800251a <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8002516:	2300      	movs	r3, #0
 8002518:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d10b      	bne.n	8002538 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002524:	f043 0220 	orr.w	r2, r3, #32
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e072      	b.n	800261e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	4618      	mov	r0, r3
 800253c:	f7ff ffbd 	bl	80024ba <LL_ADC_REG_IsConversionOngoing>
 8002540:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff ffb7 	bl	80024ba <LL_ADC_REG_IsConversionOngoing>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d154      	bne.n	80025fc <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002552:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002554:	2b00      	cmp	r3, #0
 8002556:	d151      	bne.n	80025fc <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002558:	4b35      	ldr	r3, [pc, #212]	; (8002630 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800255a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d02c      	beq.n	80025be <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002564:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	6859      	ldr	r1, [r3, #4]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002576:	035b      	lsls	r3, r3, #13
 8002578:	430b      	orrs	r3, r1
 800257a:	431a      	orrs	r2, r3
 800257c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800257e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002580:	4829      	ldr	r0, [pc, #164]	; (8002628 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002582:	f7ff ff87 	bl	8002494 <LL_ADC_IsEnabled>
 8002586:	4604      	mov	r4, r0
 8002588:	4828      	ldr	r0, [pc, #160]	; (800262c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800258a:	f7ff ff83 	bl	8002494 <LL_ADC_IsEnabled>
 800258e:	4603      	mov	r3, r0
 8002590:	431c      	orrs	r4, r3
 8002592:	4828      	ldr	r0, [pc, #160]	; (8002634 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002594:	f7ff ff7e 	bl	8002494 <LL_ADC_IsEnabled>
 8002598:	4603      	mov	r3, r0
 800259a:	4323      	orrs	r3, r4
 800259c:	2b00      	cmp	r3, #0
 800259e:	d137      	bne.n	8002610 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80025a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80025a8:	f023 030f 	bic.w	r3, r3, #15
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	6811      	ldr	r1, [r2, #0]
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	6892      	ldr	r2, [r2, #8]
 80025b4:	430a      	orrs	r2, r1
 80025b6:	431a      	orrs	r2, r3
 80025b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025ba:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80025bc:	e028      	b.n	8002610 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80025be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025c8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025ca:	4817      	ldr	r0, [pc, #92]	; (8002628 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80025cc:	f7ff ff62 	bl	8002494 <LL_ADC_IsEnabled>
 80025d0:	4604      	mov	r4, r0
 80025d2:	4816      	ldr	r0, [pc, #88]	; (800262c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80025d4:	f7ff ff5e 	bl	8002494 <LL_ADC_IsEnabled>
 80025d8:	4603      	mov	r3, r0
 80025da:	431c      	orrs	r4, r3
 80025dc:	4815      	ldr	r0, [pc, #84]	; (8002634 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80025de:	f7ff ff59 	bl	8002494 <LL_ADC_IsEnabled>
 80025e2:	4603      	mov	r3, r0
 80025e4:	4323      	orrs	r3, r4
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d112      	bne.n	8002610 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80025ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80025f2:	f023 030f 	bic.w	r3, r3, #15
 80025f6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80025f8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80025fa:	e009      	b.n	8002610 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002600:	f043 0220 	orr.w	r2, r3, #32
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800260e:	e000      	b.n	8002612 <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002610:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800261a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800261e:	4618      	mov	r0, r3
 8002620:	377c      	adds	r7, #124	; 0x7c
 8002622:	46bd      	mov	sp, r7
 8002624:	bd90      	pop	{r4, r7, pc}
 8002626:	bf00      	nop
 8002628:	50040000 	.word	0x50040000
 800262c:	50040100 	.word	0x50040100
 8002630:	50040300 	.word	0x50040300
 8002634:	50040200 	.word	0x50040200

08002638 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002648:	4b0c      	ldr	r3, [pc, #48]	; (800267c <__NVIC_SetPriorityGrouping+0x44>)
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800264e:	68ba      	ldr	r2, [r7, #8]
 8002650:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002654:	4013      	ands	r3, r2
 8002656:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002660:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002664:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002668:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800266a:	4a04      	ldr	r2, [pc, #16]	; (800267c <__NVIC_SetPriorityGrouping+0x44>)
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	60d3      	str	r3, [r2, #12]
}
 8002670:	bf00      	nop
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	e000ed00 	.word	0xe000ed00

08002680 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002684:	4b04      	ldr	r3, [pc, #16]	; (8002698 <__NVIC_GetPriorityGrouping+0x18>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	0a1b      	lsrs	r3, r3, #8
 800268a:	f003 0307 	and.w	r3, r3, #7
}
 800268e:	4618      	mov	r0, r3
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	e000ed00 	.word	0xe000ed00

0800269c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	4603      	mov	r3, r0
 80026a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	db0b      	blt.n	80026c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ae:	79fb      	ldrb	r3, [r7, #7]
 80026b0:	f003 021f 	and.w	r2, r3, #31
 80026b4:	4907      	ldr	r1, [pc, #28]	; (80026d4 <__NVIC_EnableIRQ+0x38>)
 80026b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ba:	095b      	lsrs	r3, r3, #5
 80026bc:	2001      	movs	r0, #1
 80026be:	fa00 f202 	lsl.w	r2, r0, r2
 80026c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026c6:	bf00      	nop
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	e000e100 	.word	0xe000e100

080026d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4603      	mov	r3, r0
 80026e0:	6039      	str	r1, [r7, #0]
 80026e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	db0a      	blt.n	8002702 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	b2da      	uxtb	r2, r3
 80026f0:	490c      	ldr	r1, [pc, #48]	; (8002724 <__NVIC_SetPriority+0x4c>)
 80026f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f6:	0112      	lsls	r2, r2, #4
 80026f8:	b2d2      	uxtb	r2, r2
 80026fa:	440b      	add	r3, r1
 80026fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002700:	e00a      	b.n	8002718 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	b2da      	uxtb	r2, r3
 8002706:	4908      	ldr	r1, [pc, #32]	; (8002728 <__NVIC_SetPriority+0x50>)
 8002708:	79fb      	ldrb	r3, [r7, #7]
 800270a:	f003 030f 	and.w	r3, r3, #15
 800270e:	3b04      	subs	r3, #4
 8002710:	0112      	lsls	r2, r2, #4
 8002712:	b2d2      	uxtb	r2, r2
 8002714:	440b      	add	r3, r1
 8002716:	761a      	strb	r2, [r3, #24]
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	e000e100 	.word	0xe000e100
 8002728:	e000ed00 	.word	0xe000ed00

0800272c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800272c:	b480      	push	{r7}
 800272e:	b089      	sub	sp, #36	; 0x24
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f003 0307 	and.w	r3, r3, #7
 800273e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	f1c3 0307 	rsb	r3, r3, #7
 8002746:	2b04      	cmp	r3, #4
 8002748:	bf28      	it	cs
 800274a:	2304      	movcs	r3, #4
 800274c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	3304      	adds	r3, #4
 8002752:	2b06      	cmp	r3, #6
 8002754:	d902      	bls.n	800275c <NVIC_EncodePriority+0x30>
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	3b03      	subs	r3, #3
 800275a:	e000      	b.n	800275e <NVIC_EncodePriority+0x32>
 800275c:	2300      	movs	r3, #0
 800275e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002760:	f04f 32ff 	mov.w	r2, #4294967295
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	43da      	mvns	r2, r3
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	401a      	ands	r2, r3
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002774:	f04f 31ff 	mov.w	r1, #4294967295
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	fa01 f303 	lsl.w	r3, r1, r3
 800277e:	43d9      	mvns	r1, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002784:	4313      	orrs	r3, r2
         );
}
 8002786:	4618      	mov	r0, r3
 8002788:	3724      	adds	r7, #36	; 0x24
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
	...

08002794 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	3b01      	subs	r3, #1
 80027a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027a4:	d301      	bcc.n	80027aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027a6:	2301      	movs	r3, #1
 80027a8:	e00f      	b.n	80027ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027aa:	4a0a      	ldr	r2, [pc, #40]	; (80027d4 <SysTick_Config+0x40>)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3b01      	subs	r3, #1
 80027b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027b2:	210f      	movs	r1, #15
 80027b4:	f04f 30ff 	mov.w	r0, #4294967295
 80027b8:	f7ff ff8e 	bl	80026d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027bc:	4b05      	ldr	r3, [pc, #20]	; (80027d4 <SysTick_Config+0x40>)
 80027be:	2200      	movs	r2, #0
 80027c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027c2:	4b04      	ldr	r3, [pc, #16]	; (80027d4 <SysTick_Config+0x40>)
 80027c4:	2207      	movs	r2, #7
 80027c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	e000e010 	.word	0xe000e010

080027d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f7ff ff29 	bl	8002638 <__NVIC_SetPriorityGrouping>
}
 80027e6:	bf00      	nop
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b086      	sub	sp, #24
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	4603      	mov	r3, r0
 80027f6:	60b9      	str	r1, [r7, #8]
 80027f8:	607a      	str	r2, [r7, #4]
 80027fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80027fc:	2300      	movs	r3, #0
 80027fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002800:	f7ff ff3e 	bl	8002680 <__NVIC_GetPriorityGrouping>
 8002804:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	68b9      	ldr	r1, [r7, #8]
 800280a:	6978      	ldr	r0, [r7, #20]
 800280c:	f7ff ff8e 	bl	800272c <NVIC_EncodePriority>
 8002810:	4602      	mov	r2, r0
 8002812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002816:	4611      	mov	r1, r2
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff ff5d 	bl	80026d8 <__NVIC_SetPriority>
}
 800281e:	bf00      	nop
 8002820:	3718      	adds	r7, #24
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b082      	sub	sp, #8
 800282a:	af00      	add	r7, sp, #0
 800282c:	4603      	mov	r3, r0
 800282e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff ff31 	bl	800269c <__NVIC_EnableIRQ>
}
 800283a:	bf00      	nop
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b082      	sub	sp, #8
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7ff ffa2 	bl	8002794 <SysTick_Config>
 8002850:	4603      	mov	r3, r0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
	...

0800285c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e098      	b.n	80029a0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	461a      	mov	r2, r3
 8002874:	4b4d      	ldr	r3, [pc, #308]	; (80029ac <HAL_DMA_Init+0x150>)
 8002876:	429a      	cmp	r2, r3
 8002878:	d80f      	bhi.n	800289a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	461a      	mov	r2, r3
 8002880:	4b4b      	ldr	r3, [pc, #300]	; (80029b0 <HAL_DMA_Init+0x154>)
 8002882:	4413      	add	r3, r2
 8002884:	4a4b      	ldr	r2, [pc, #300]	; (80029b4 <HAL_DMA_Init+0x158>)
 8002886:	fba2 2303 	umull	r2, r3, r2, r3
 800288a:	091b      	lsrs	r3, r3, #4
 800288c:	009a      	lsls	r2, r3, #2
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a48      	ldr	r2, [pc, #288]	; (80029b8 <HAL_DMA_Init+0x15c>)
 8002896:	641a      	str	r2, [r3, #64]	; 0x40
 8002898:	e00e      	b.n	80028b8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	461a      	mov	r2, r3
 80028a0:	4b46      	ldr	r3, [pc, #280]	; (80029bc <HAL_DMA_Init+0x160>)
 80028a2:	4413      	add	r3, r2
 80028a4:	4a43      	ldr	r2, [pc, #268]	; (80029b4 <HAL_DMA_Init+0x158>)
 80028a6:	fba2 2303 	umull	r2, r3, r2, r3
 80028aa:	091b      	lsrs	r3, r3, #4
 80028ac:	009a      	lsls	r2, r3, #2
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a42      	ldr	r2, [pc, #264]	; (80029c0 <HAL_DMA_Init+0x164>)
 80028b6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2202      	movs	r2, #2
 80028bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80028ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80028dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	4313      	orrs	r3, r2
 8002900:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002912:	d039      	beq.n	8002988 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002918:	4a27      	ldr	r2, [pc, #156]	; (80029b8 <HAL_DMA_Init+0x15c>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d11a      	bne.n	8002954 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800291e:	4b29      	ldr	r3, [pc, #164]	; (80029c4 <HAL_DMA_Init+0x168>)
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002926:	f003 031c 	and.w	r3, r3, #28
 800292a:	210f      	movs	r1, #15
 800292c:	fa01 f303 	lsl.w	r3, r1, r3
 8002930:	43db      	mvns	r3, r3
 8002932:	4924      	ldr	r1, [pc, #144]	; (80029c4 <HAL_DMA_Init+0x168>)
 8002934:	4013      	ands	r3, r2
 8002936:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002938:	4b22      	ldr	r3, [pc, #136]	; (80029c4 <HAL_DMA_Init+0x168>)
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6859      	ldr	r1, [r3, #4]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002944:	f003 031c 	and.w	r3, r3, #28
 8002948:	fa01 f303 	lsl.w	r3, r1, r3
 800294c:	491d      	ldr	r1, [pc, #116]	; (80029c4 <HAL_DMA_Init+0x168>)
 800294e:	4313      	orrs	r3, r2
 8002950:	600b      	str	r3, [r1, #0]
 8002952:	e019      	b.n	8002988 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002954:	4b1c      	ldr	r3, [pc, #112]	; (80029c8 <HAL_DMA_Init+0x16c>)
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295c:	f003 031c 	and.w	r3, r3, #28
 8002960:	210f      	movs	r1, #15
 8002962:	fa01 f303 	lsl.w	r3, r1, r3
 8002966:	43db      	mvns	r3, r3
 8002968:	4917      	ldr	r1, [pc, #92]	; (80029c8 <HAL_DMA_Init+0x16c>)
 800296a:	4013      	ands	r3, r2
 800296c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800296e:	4b16      	ldr	r3, [pc, #88]	; (80029c8 <HAL_DMA_Init+0x16c>)
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6859      	ldr	r1, [r3, #4]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297a:	f003 031c 	and.w	r3, r3, #28
 800297e:	fa01 f303 	lsl.w	r3, r1, r3
 8002982:	4911      	ldr	r1, [pc, #68]	; (80029c8 <HAL_DMA_Init+0x16c>)
 8002984:	4313      	orrs	r3, r2
 8002986:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2201      	movs	r2, #1
 8002992:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3714      	adds	r7, #20
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr
 80029ac:	40020407 	.word	0x40020407
 80029b0:	bffdfff8 	.word	0xbffdfff8
 80029b4:	cccccccd 	.word	0xcccccccd
 80029b8:	40020000 	.word	0x40020000
 80029bc:	bffdfbf8 	.word	0xbffdfbf8
 80029c0:	40020400 	.word	0x40020400
 80029c4:	400200a8 	.word	0x400200a8
 80029c8:	400204a8 	.word	0x400204a8

080029cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
 80029d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029da:	2300      	movs	r3, #0
 80029dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d101      	bne.n	80029ec <HAL_DMA_Start_IT+0x20>
 80029e8:	2302      	movs	r3, #2
 80029ea:	e04b      	b.n	8002a84 <HAL_DMA_Start_IT+0xb8>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d13a      	bne.n	8002a76 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2202      	movs	r2, #2
 8002a04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 0201 	bic.w	r2, r2, #1
 8002a1c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	68b9      	ldr	r1, [r7, #8]
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f000 f8e0 	bl	8002bea <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d008      	beq.n	8002a44 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f042 020e 	orr.w	r2, r2, #14
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	e00f      	b.n	8002a64 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f022 0204 	bic.w	r2, r2, #4
 8002a52:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f042 020a 	orr.w	r2, r2, #10
 8002a62:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f042 0201 	orr.w	r2, r2, #1
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	e005      	b.n	8002a82 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002a7e:	2302      	movs	r3, #2
 8002a80:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002a82:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3718      	adds	r7, #24
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa8:	f003 031c 	and.w	r3, r3, #28
 8002aac:	2204      	movs	r2, #4
 8002aae:	409a      	lsls	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d026      	beq.n	8002b06 <HAL_DMA_IRQHandler+0x7a>
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	f003 0304 	and.w	r3, r3, #4
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d021      	beq.n	8002b06 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0320 	and.w	r3, r3, #32
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d107      	bne.n	8002ae0 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f022 0204 	bic.w	r2, r2, #4
 8002ade:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae4:	f003 021c 	and.w	r2, r3, #28
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aec:	2104      	movs	r1, #4
 8002aee:	fa01 f202 	lsl.w	r2, r1, r2
 8002af2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d071      	beq.n	8002be0 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002b04:	e06c      	b.n	8002be0 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0a:	f003 031c 	and.w	r3, r3, #28
 8002b0e:	2202      	movs	r2, #2
 8002b10:	409a      	lsls	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	4013      	ands	r3, r2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d02e      	beq.n	8002b78 <HAL_DMA_IRQHandler+0xec>
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d029      	beq.n	8002b78 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0320 	and.w	r3, r3, #32
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d10b      	bne.n	8002b4a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f022 020a 	bic.w	r2, r2, #10
 8002b40:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4e:	f003 021c 	and.w	r2, r3, #28
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b56:	2102      	movs	r1, #2
 8002b58:	fa01 f202 	lsl.w	r2, r1, r2
 8002b5c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d038      	beq.n	8002be0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002b76:	e033      	b.n	8002be0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7c:	f003 031c 	and.w	r3, r3, #28
 8002b80:	2208      	movs	r2, #8
 8002b82:	409a      	lsls	r2, r3
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	4013      	ands	r3, r2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d02a      	beq.n	8002be2 <HAL_DMA_IRQHandler+0x156>
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	f003 0308 	and.w	r3, r3, #8
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d025      	beq.n	8002be2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 020e 	bic.w	r2, r2, #14
 8002ba4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002baa:	f003 021c 	and.w	r2, r3, #28
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	fa01 f202 	lsl.w	r2, r1, r2
 8002bb8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d004      	beq.n	8002be2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002be0:	bf00      	nop
 8002be2:	bf00      	nop
}
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b085      	sub	sp, #20
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	60f8      	str	r0, [r7, #12]
 8002bf2:	60b9      	str	r1, [r7, #8]
 8002bf4:	607a      	str	r2, [r7, #4]
 8002bf6:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfc:	f003 021c 	and.w	r2, r3, #28
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c04:	2101      	movs	r1, #1
 8002c06:	fa01 f202 	lsl.w	r2, r1, r2
 8002c0a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	2b10      	cmp	r3, #16
 8002c1a:	d108      	bne.n	8002c2e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68ba      	ldr	r2, [r7, #8]
 8002c2a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002c2c:	e007      	b.n	8002c3e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68ba      	ldr	r2, [r7, #8]
 8002c34:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	60da      	str	r2, [r3, #12]
}
 8002c3e:	bf00      	nop
 8002c40:	3714      	adds	r7, #20
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
	...

08002c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b087      	sub	sp, #28
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c56:	2300      	movs	r3, #0
 8002c58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c5a:	e17f      	b.n	8002f5c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	2101      	movs	r1, #1
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	fa01 f303 	lsl.w	r3, r1, r3
 8002c68:	4013      	ands	r3, r2
 8002c6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f000 8171 	beq.w	8002f56 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d00b      	beq.n	8002c94 <HAL_GPIO_Init+0x48>
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d007      	beq.n	8002c94 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c88:	2b11      	cmp	r3, #17
 8002c8a:	d003      	beq.n	8002c94 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	2b12      	cmp	r3, #18
 8002c92:	d130      	bne.n	8002cf6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	2203      	movs	r2, #3
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	68da      	ldr	r2, [r3, #12]
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cca:	2201      	movs	r2, #1
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	091b      	lsrs	r3, r3, #4
 8002ce0:	f003 0201 	and.w	r2, r3, #1
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f003 0303 	and.w	r3, r3, #3
 8002cfe:	2b03      	cmp	r3, #3
 8002d00:	d118      	bne.n	8002d34 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002d08:	2201      	movs	r2, #1
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	43db      	mvns	r3, r3
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	4013      	ands	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	08db      	lsrs	r3, r3, #3
 8002d1e:	f003 0201 	and.w	r2, r3, #1
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	2203      	movs	r2, #3
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	43db      	mvns	r3, r3
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d003      	beq.n	8002d74 <HAL_GPIO_Init+0x128>
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	2b12      	cmp	r3, #18
 8002d72:	d123      	bne.n	8002dbc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	08da      	lsrs	r2, r3, #3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	3208      	adds	r2, #8
 8002d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d80:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f003 0307 	and.w	r3, r3, #7
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	220f      	movs	r2, #15
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	43db      	mvns	r3, r3
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	4013      	ands	r3, r2
 8002d96:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	691a      	ldr	r2, [r3, #16]
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	08da      	lsrs	r2, r3, #3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	3208      	adds	r2, #8
 8002db6:	6939      	ldr	r1, [r7, #16]
 8002db8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	2203      	movs	r2, #3
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f003 0203 	and.w	r2, r3, #3
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f000 80ac 	beq.w	8002f56 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dfe:	4b5e      	ldr	r3, [pc, #376]	; (8002f78 <HAL_GPIO_Init+0x32c>)
 8002e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e02:	4a5d      	ldr	r2, [pc, #372]	; (8002f78 <HAL_GPIO_Init+0x32c>)
 8002e04:	f043 0301 	orr.w	r3, r3, #1
 8002e08:	6613      	str	r3, [r2, #96]	; 0x60
 8002e0a:	4b5b      	ldr	r3, [pc, #364]	; (8002f78 <HAL_GPIO_Init+0x32c>)
 8002e0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	60bb      	str	r3, [r7, #8]
 8002e14:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e16:	4a59      	ldr	r2, [pc, #356]	; (8002f7c <HAL_GPIO_Init+0x330>)
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	089b      	lsrs	r3, r3, #2
 8002e1c:	3302      	adds	r3, #2
 8002e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e22:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	f003 0303 	and.w	r3, r3, #3
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	220f      	movs	r2, #15
 8002e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e32:	43db      	mvns	r3, r3
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	4013      	ands	r3, r2
 8002e38:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e40:	d025      	beq.n	8002e8e <HAL_GPIO_Init+0x242>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a4e      	ldr	r2, [pc, #312]	; (8002f80 <HAL_GPIO_Init+0x334>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d01f      	beq.n	8002e8a <HAL_GPIO_Init+0x23e>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a4d      	ldr	r2, [pc, #308]	; (8002f84 <HAL_GPIO_Init+0x338>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d019      	beq.n	8002e86 <HAL_GPIO_Init+0x23a>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a4c      	ldr	r2, [pc, #304]	; (8002f88 <HAL_GPIO_Init+0x33c>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d013      	beq.n	8002e82 <HAL_GPIO_Init+0x236>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a4b      	ldr	r2, [pc, #300]	; (8002f8c <HAL_GPIO_Init+0x340>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d00d      	beq.n	8002e7e <HAL_GPIO_Init+0x232>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a4a      	ldr	r2, [pc, #296]	; (8002f90 <HAL_GPIO_Init+0x344>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d007      	beq.n	8002e7a <HAL_GPIO_Init+0x22e>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a49      	ldr	r2, [pc, #292]	; (8002f94 <HAL_GPIO_Init+0x348>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d101      	bne.n	8002e76 <HAL_GPIO_Init+0x22a>
 8002e72:	2306      	movs	r3, #6
 8002e74:	e00c      	b.n	8002e90 <HAL_GPIO_Init+0x244>
 8002e76:	2307      	movs	r3, #7
 8002e78:	e00a      	b.n	8002e90 <HAL_GPIO_Init+0x244>
 8002e7a:	2305      	movs	r3, #5
 8002e7c:	e008      	b.n	8002e90 <HAL_GPIO_Init+0x244>
 8002e7e:	2304      	movs	r3, #4
 8002e80:	e006      	b.n	8002e90 <HAL_GPIO_Init+0x244>
 8002e82:	2303      	movs	r3, #3
 8002e84:	e004      	b.n	8002e90 <HAL_GPIO_Init+0x244>
 8002e86:	2302      	movs	r3, #2
 8002e88:	e002      	b.n	8002e90 <HAL_GPIO_Init+0x244>
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e000      	b.n	8002e90 <HAL_GPIO_Init+0x244>
 8002e8e:	2300      	movs	r3, #0
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	f002 0203 	and.w	r2, r2, #3
 8002e96:	0092      	lsls	r2, r2, #2
 8002e98:	4093      	lsls	r3, r2
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ea0:	4936      	ldr	r1, [pc, #216]	; (8002f7c <HAL_GPIO_Init+0x330>)
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	089b      	lsrs	r3, r3, #2
 8002ea6:	3302      	adds	r3, #2
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002eae:	4b3a      	ldr	r3, [pc, #232]	; (8002f98 <HAL_GPIO_Init+0x34c>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	43db      	mvns	r3, r3
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ed2:	4a31      	ldr	r2, [pc, #196]	; (8002f98 <HAL_GPIO_Init+0x34c>)
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002ed8:	4b2f      	ldr	r3, [pc, #188]	; (8002f98 <HAL_GPIO_Init+0x34c>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d003      	beq.n	8002efc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002ef4:	693a      	ldr	r2, [r7, #16]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002efc:	4a26      	ldr	r2, [pc, #152]	; (8002f98 <HAL_GPIO_Init+0x34c>)
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f02:	4b25      	ldr	r3, [pc, #148]	; (8002f98 <HAL_GPIO_Init+0x34c>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	43db      	mvns	r3, r3
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d003      	beq.n	8002f26 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f26:	4a1c      	ldr	r2, [pc, #112]	; (8002f98 <HAL_GPIO_Init+0x34c>)
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f2c:	4b1a      	ldr	r3, [pc, #104]	; (8002f98 <HAL_GPIO_Init+0x34c>)
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	43db      	mvns	r3, r3
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d003      	beq.n	8002f50 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f50:	4a11      	ldr	r2, [pc, #68]	; (8002f98 <HAL_GPIO_Init+0x34c>)
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	3301      	adds	r3, #1
 8002f5a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	fa22 f303 	lsr.w	r3, r2, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f47f ae78 	bne.w	8002c5c <HAL_GPIO_Init+0x10>
  }
}
 8002f6c:	bf00      	nop
 8002f6e:	371c      	adds	r7, #28
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	40010000 	.word	0x40010000
 8002f80:	48000400 	.word	0x48000400
 8002f84:	48000800 	.word	0x48000800
 8002f88:	48000c00 	.word	0x48000c00
 8002f8c:	48001000 	.word	0x48001000
 8002f90:	48001400 	.word	0x48001400
 8002f94:	48001800 	.word	0x48001800
 8002f98:	40010400 	.word	0x40010400

08002f9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	807b      	strh	r3, [r7, #2]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fac:	787b      	ldrb	r3, [r7, #1]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002fb2:	887a      	ldrh	r2, [r7, #2]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002fb8:	e002      	b.n	8002fc0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002fba:	887a      	ldrh	r2, [r7, #2]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	695b      	ldr	r3, [r3, #20]
 8002fdc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002fde:	887a      	ldrh	r2, [r7, #2]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	041a      	lsls	r2, r3, #16
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	43d9      	mvns	r1, r3
 8002fea:	887b      	ldrh	r3, [r7, #2]
 8002fec:	400b      	ands	r3, r1
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	619a      	str	r2, [r3, #24]
}
 8002ff4:	bf00      	nop
 8002ff6:	3714      	adds	r7, #20
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003004:	4b04      	ldr	r3, [pc, #16]	; (8003018 <HAL_PWREx_GetVoltageRange+0x18>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800300c:	4618      	mov	r0, r3
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	40007000 	.word	0x40007000

0800301c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800302a:	d130      	bne.n	800308e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800302c:	4b23      	ldr	r3, [pc, #140]	; (80030bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003034:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003038:	d038      	beq.n	80030ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800303a:	4b20      	ldr	r3, [pc, #128]	; (80030bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003042:	4a1e      	ldr	r2, [pc, #120]	; (80030bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003044:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003048:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800304a:	4b1d      	ldr	r3, [pc, #116]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2232      	movs	r2, #50	; 0x32
 8003050:	fb02 f303 	mul.w	r3, r2, r3
 8003054:	4a1b      	ldr	r2, [pc, #108]	; (80030c4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003056:	fba2 2303 	umull	r2, r3, r2, r3
 800305a:	0c9b      	lsrs	r3, r3, #18
 800305c:	3301      	adds	r3, #1
 800305e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003060:	e002      	b.n	8003068 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	3b01      	subs	r3, #1
 8003066:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003068:	4b14      	ldr	r3, [pc, #80]	; (80030bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003070:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003074:	d102      	bne.n	800307c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1f2      	bne.n	8003062 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800307c:	4b0f      	ldr	r3, [pc, #60]	; (80030bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800307e:	695b      	ldr	r3, [r3, #20]
 8003080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003084:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003088:	d110      	bne.n	80030ac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e00f      	b.n	80030ae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800308e:	4b0b      	ldr	r3, [pc, #44]	; (80030bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003096:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800309a:	d007      	beq.n	80030ac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800309c:	4b07      	ldr	r3, [pc, #28]	; (80030bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030a4:	4a05      	ldr	r2, [pc, #20]	; (80030bc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030aa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3714      	adds	r7, #20
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	40007000 	.word	0x40007000
 80030c0:	20000000 	.word	0x20000000
 80030c4:	431bde83 	.word	0x431bde83

080030c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b088      	sub	sp, #32
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e3d4      	b.n	8003884 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030da:	4ba1      	ldr	r3, [pc, #644]	; (8003360 <HAL_RCC_OscConfig+0x298>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f003 030c 	and.w	r3, r3, #12
 80030e2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030e4:	4b9e      	ldr	r3, [pc, #632]	; (8003360 <HAL_RCC_OscConfig+0x298>)
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	f003 0303 	and.w	r3, r3, #3
 80030ec:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0310 	and.w	r3, r3, #16
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f000 80e4 	beq.w	80032c4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d007      	beq.n	8003112 <HAL_RCC_OscConfig+0x4a>
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	2b0c      	cmp	r3, #12
 8003106:	f040 808b 	bne.w	8003220 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	2b01      	cmp	r3, #1
 800310e:	f040 8087 	bne.w	8003220 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003112:	4b93      	ldr	r3, [pc, #588]	; (8003360 <HAL_RCC_OscConfig+0x298>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0302 	and.w	r3, r3, #2
 800311a:	2b00      	cmp	r3, #0
 800311c:	d005      	beq.n	800312a <HAL_RCC_OscConfig+0x62>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e3ac      	b.n	8003884 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a1a      	ldr	r2, [r3, #32]
 800312e:	4b8c      	ldr	r3, [pc, #560]	; (8003360 <HAL_RCC_OscConfig+0x298>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0308 	and.w	r3, r3, #8
 8003136:	2b00      	cmp	r3, #0
 8003138:	d004      	beq.n	8003144 <HAL_RCC_OscConfig+0x7c>
 800313a:	4b89      	ldr	r3, [pc, #548]	; (8003360 <HAL_RCC_OscConfig+0x298>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003142:	e005      	b.n	8003150 <HAL_RCC_OscConfig+0x88>
 8003144:	4b86      	ldr	r3, [pc, #536]	; (8003360 <HAL_RCC_OscConfig+0x298>)
 8003146:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800314a:	091b      	lsrs	r3, r3, #4
 800314c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003150:	4293      	cmp	r3, r2
 8003152:	d223      	bcs.n	800319c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a1b      	ldr	r3, [r3, #32]
 8003158:	4618      	mov	r0, r3
 800315a:	f000 fd3f 	bl	8003bdc <RCC_SetFlashLatencyFromMSIRange>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e38d      	b.n	8003884 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003168:	4b7d      	ldr	r3, [pc, #500]	; (8003360 <HAL_RCC_OscConfig+0x298>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a7c      	ldr	r2, [pc, #496]	; (8003360 <HAL_RCC_OscConfig+0x298>)
 800316e:	f043 0308 	orr.w	r3, r3, #8
 8003172:	6013      	str	r3, [r2, #0]
 8003174:	4b7a      	ldr	r3, [pc, #488]	; (8003360 <HAL_RCC_OscConfig+0x298>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	4977      	ldr	r1, [pc, #476]	; (8003360 <HAL_RCC_OscConfig+0x298>)
 8003182:	4313      	orrs	r3, r2
 8003184:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003186:	4b76      	ldr	r3, [pc, #472]	; (8003360 <HAL_RCC_OscConfig+0x298>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	021b      	lsls	r3, r3, #8
 8003194:	4972      	ldr	r1, [pc, #456]	; (8003360 <HAL_RCC_OscConfig+0x298>)
 8003196:	4313      	orrs	r3, r2
 8003198:	604b      	str	r3, [r1, #4]
 800319a:	e025      	b.n	80031e8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800319c:	4b70      	ldr	r3, [pc, #448]	; (8003360 <HAL_RCC_OscConfig+0x298>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a6f      	ldr	r2, [pc, #444]	; (8003360 <HAL_RCC_OscConfig+0x298>)
 80031a2:	f043 0308 	orr.w	r3, r3, #8
 80031a6:	6013      	str	r3, [r2, #0]
 80031a8:	4b6d      	ldr	r3, [pc, #436]	; (8003360 <HAL_RCC_OscConfig+0x298>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	496a      	ldr	r1, [pc, #424]	; (8003360 <HAL_RCC_OscConfig+0x298>)
 80031b6:	4313      	orrs	r3, r2
 80031b8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031ba:	4b69      	ldr	r3, [pc, #420]	; (8003360 <HAL_RCC_OscConfig+0x298>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	021b      	lsls	r3, r3, #8
 80031c8:	4965      	ldr	r1, [pc, #404]	; (8003360 <HAL_RCC_OscConfig+0x298>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d109      	bne.n	80031e8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a1b      	ldr	r3, [r3, #32]
 80031d8:	4618      	mov	r0, r3
 80031da:	f000 fcff 	bl	8003bdc <RCC_SetFlashLatencyFromMSIRange>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e34d      	b.n	8003884 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80031e8:	f000 fc36 	bl	8003a58 <HAL_RCC_GetSysClockFreq>
 80031ec:	4601      	mov	r1, r0
 80031ee:	4b5c      	ldr	r3, [pc, #368]	; (8003360 <HAL_RCC_OscConfig+0x298>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	091b      	lsrs	r3, r3, #4
 80031f4:	f003 030f 	and.w	r3, r3, #15
 80031f8:	4a5a      	ldr	r2, [pc, #360]	; (8003364 <HAL_RCC_OscConfig+0x29c>)
 80031fa:	5cd3      	ldrb	r3, [r2, r3]
 80031fc:	f003 031f 	and.w	r3, r3, #31
 8003200:	fa21 f303 	lsr.w	r3, r1, r3
 8003204:	4a58      	ldr	r2, [pc, #352]	; (8003368 <HAL_RCC_OscConfig+0x2a0>)
 8003206:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003208:	4b58      	ldr	r3, [pc, #352]	; (800336c <HAL_RCC_OscConfig+0x2a4>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f7fd fee5 	bl	8000fdc <HAL_InitTick>
 8003212:	4603      	mov	r3, r0
 8003214:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003216:	7bfb      	ldrb	r3, [r7, #15]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d052      	beq.n	80032c2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800321c:	7bfb      	ldrb	r3, [r7, #15]
 800321e:	e331      	b.n	8003884 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d032      	beq.n	800328e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003228:	4b4d      	ldr	r3, [pc, #308]	; (8003360 <HAL_RCC_OscConfig+0x298>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a4c      	ldr	r2, [pc, #304]	; (8003360 <HAL_RCC_OscConfig+0x298>)
 800322e:	f043 0301 	orr.w	r3, r3, #1
 8003232:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003234:	f7fd ff22 	bl	800107c <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800323a:	e008      	b.n	800324e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800323c:	f7fd ff1e 	bl	800107c <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b02      	cmp	r3, #2
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e31a      	b.n	8003884 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800324e:	4b44      	ldr	r3, [pc, #272]	; (8003360 <HAL_RCC_OscConfig+0x298>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d0f0      	beq.n	800323c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800325a:	4b41      	ldr	r3, [pc, #260]	; (8003360 <HAL_RCC_OscConfig+0x298>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a40      	ldr	r2, [pc, #256]	; (8003360 <HAL_RCC_OscConfig+0x298>)
 8003260:	f043 0308 	orr.w	r3, r3, #8
 8003264:	6013      	str	r3, [r2, #0]
 8003266:	4b3e      	ldr	r3, [pc, #248]	; (8003360 <HAL_RCC_OscConfig+0x298>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	493b      	ldr	r1, [pc, #236]	; (8003360 <HAL_RCC_OscConfig+0x298>)
 8003274:	4313      	orrs	r3, r2
 8003276:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003278:	4b39      	ldr	r3, [pc, #228]	; (8003360 <HAL_RCC_OscConfig+0x298>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	69db      	ldr	r3, [r3, #28]
 8003284:	021b      	lsls	r3, r3, #8
 8003286:	4936      	ldr	r1, [pc, #216]	; (8003360 <HAL_RCC_OscConfig+0x298>)
 8003288:	4313      	orrs	r3, r2
 800328a:	604b      	str	r3, [r1, #4]
 800328c:	e01a      	b.n	80032c4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800328e:	4b34      	ldr	r3, [pc, #208]	; (8003360 <HAL_RCC_OscConfig+0x298>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a33      	ldr	r2, [pc, #204]	; (8003360 <HAL_RCC_OscConfig+0x298>)
 8003294:	f023 0301 	bic.w	r3, r3, #1
 8003298:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800329a:	f7fd feef 	bl	800107c <HAL_GetTick>
 800329e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032a0:	e008      	b.n	80032b4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032a2:	f7fd feeb 	bl	800107c <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d901      	bls.n	80032b4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e2e7      	b.n	8003884 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032b4:	4b2a      	ldr	r3, [pc, #168]	; (8003360 <HAL_RCC_OscConfig+0x298>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d1f0      	bne.n	80032a2 <HAL_RCC_OscConfig+0x1da>
 80032c0:	e000      	b.n	80032c4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80032c2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d074      	beq.n	80033ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	2b08      	cmp	r3, #8
 80032d4:	d005      	beq.n	80032e2 <HAL_RCC_OscConfig+0x21a>
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	2b0c      	cmp	r3, #12
 80032da:	d10e      	bne.n	80032fa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	2b03      	cmp	r3, #3
 80032e0:	d10b      	bne.n	80032fa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e2:	4b1f      	ldr	r3, [pc, #124]	; (8003360 <HAL_RCC_OscConfig+0x298>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d064      	beq.n	80033b8 <HAL_RCC_OscConfig+0x2f0>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d160      	bne.n	80033b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e2c4      	b.n	8003884 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003302:	d106      	bne.n	8003312 <HAL_RCC_OscConfig+0x24a>
 8003304:	4b16      	ldr	r3, [pc, #88]	; (8003360 <HAL_RCC_OscConfig+0x298>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a15      	ldr	r2, [pc, #84]	; (8003360 <HAL_RCC_OscConfig+0x298>)
 800330a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800330e:	6013      	str	r3, [r2, #0]
 8003310:	e01d      	b.n	800334e <HAL_RCC_OscConfig+0x286>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800331a:	d10c      	bne.n	8003336 <HAL_RCC_OscConfig+0x26e>
 800331c:	4b10      	ldr	r3, [pc, #64]	; (8003360 <HAL_RCC_OscConfig+0x298>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a0f      	ldr	r2, [pc, #60]	; (8003360 <HAL_RCC_OscConfig+0x298>)
 8003322:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003326:	6013      	str	r3, [r2, #0]
 8003328:	4b0d      	ldr	r3, [pc, #52]	; (8003360 <HAL_RCC_OscConfig+0x298>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a0c      	ldr	r2, [pc, #48]	; (8003360 <HAL_RCC_OscConfig+0x298>)
 800332e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003332:	6013      	str	r3, [r2, #0]
 8003334:	e00b      	b.n	800334e <HAL_RCC_OscConfig+0x286>
 8003336:	4b0a      	ldr	r3, [pc, #40]	; (8003360 <HAL_RCC_OscConfig+0x298>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a09      	ldr	r2, [pc, #36]	; (8003360 <HAL_RCC_OscConfig+0x298>)
 800333c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003340:	6013      	str	r3, [r2, #0]
 8003342:	4b07      	ldr	r3, [pc, #28]	; (8003360 <HAL_RCC_OscConfig+0x298>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a06      	ldr	r2, [pc, #24]	; (8003360 <HAL_RCC_OscConfig+0x298>)
 8003348:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800334c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d01c      	beq.n	8003390 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003356:	f7fd fe91 	bl	800107c <HAL_GetTick>
 800335a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800335c:	e011      	b.n	8003382 <HAL_RCC_OscConfig+0x2ba>
 800335e:	bf00      	nop
 8003360:	40021000 	.word	0x40021000
 8003364:	0800640c 	.word	0x0800640c
 8003368:	20000000 	.word	0x20000000
 800336c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003370:	f7fd fe84 	bl	800107c <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b64      	cmp	r3, #100	; 0x64
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e280      	b.n	8003884 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003382:	4baf      	ldr	r3, [pc, #700]	; (8003640 <HAL_RCC_OscConfig+0x578>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d0f0      	beq.n	8003370 <HAL_RCC_OscConfig+0x2a8>
 800338e:	e014      	b.n	80033ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003390:	f7fd fe74 	bl	800107c <HAL_GetTick>
 8003394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003396:	e008      	b.n	80033aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003398:	f7fd fe70 	bl	800107c <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b64      	cmp	r3, #100	; 0x64
 80033a4:	d901      	bls.n	80033aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e26c      	b.n	8003884 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033aa:	4ba5      	ldr	r3, [pc, #660]	; (8003640 <HAL_RCC_OscConfig+0x578>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d1f0      	bne.n	8003398 <HAL_RCC_OscConfig+0x2d0>
 80033b6:	e000      	b.n	80033ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d060      	beq.n	8003488 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	2b04      	cmp	r3, #4
 80033ca:	d005      	beq.n	80033d8 <HAL_RCC_OscConfig+0x310>
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	2b0c      	cmp	r3, #12
 80033d0:	d119      	bne.n	8003406 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d116      	bne.n	8003406 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033d8:	4b99      	ldr	r3, [pc, #612]	; (8003640 <HAL_RCC_OscConfig+0x578>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d005      	beq.n	80033f0 <HAL_RCC_OscConfig+0x328>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d101      	bne.n	80033f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e249      	b.n	8003884 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f0:	4b93      	ldr	r3, [pc, #588]	; (8003640 <HAL_RCC_OscConfig+0x578>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	061b      	lsls	r3, r3, #24
 80033fe:	4990      	ldr	r1, [pc, #576]	; (8003640 <HAL_RCC_OscConfig+0x578>)
 8003400:	4313      	orrs	r3, r2
 8003402:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003404:	e040      	b.n	8003488 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d023      	beq.n	8003456 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800340e:	4b8c      	ldr	r3, [pc, #560]	; (8003640 <HAL_RCC_OscConfig+0x578>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a8b      	ldr	r2, [pc, #556]	; (8003640 <HAL_RCC_OscConfig+0x578>)
 8003414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003418:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800341a:	f7fd fe2f 	bl	800107c <HAL_GetTick>
 800341e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003420:	e008      	b.n	8003434 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003422:	f7fd fe2b 	bl	800107c <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	2b02      	cmp	r3, #2
 800342e:	d901      	bls.n	8003434 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e227      	b.n	8003884 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003434:	4b82      	ldr	r3, [pc, #520]	; (8003640 <HAL_RCC_OscConfig+0x578>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800343c:	2b00      	cmp	r3, #0
 800343e:	d0f0      	beq.n	8003422 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003440:	4b7f      	ldr	r3, [pc, #508]	; (8003640 <HAL_RCC_OscConfig+0x578>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	061b      	lsls	r3, r3, #24
 800344e:	497c      	ldr	r1, [pc, #496]	; (8003640 <HAL_RCC_OscConfig+0x578>)
 8003450:	4313      	orrs	r3, r2
 8003452:	604b      	str	r3, [r1, #4]
 8003454:	e018      	b.n	8003488 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003456:	4b7a      	ldr	r3, [pc, #488]	; (8003640 <HAL_RCC_OscConfig+0x578>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a79      	ldr	r2, [pc, #484]	; (8003640 <HAL_RCC_OscConfig+0x578>)
 800345c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003460:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003462:	f7fd fe0b 	bl	800107c <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003468:	e008      	b.n	800347c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800346a:	f7fd fe07 	bl	800107c <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d901      	bls.n	800347c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e203      	b.n	8003884 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800347c:	4b70      	ldr	r3, [pc, #448]	; (8003640 <HAL_RCC_OscConfig+0x578>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1f0      	bne.n	800346a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0308 	and.w	r3, r3, #8
 8003490:	2b00      	cmp	r3, #0
 8003492:	d03c      	beq.n	800350e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d01c      	beq.n	80034d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800349c:	4b68      	ldr	r3, [pc, #416]	; (8003640 <HAL_RCC_OscConfig+0x578>)
 800349e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034a2:	4a67      	ldr	r2, [pc, #412]	; (8003640 <HAL_RCC_OscConfig+0x578>)
 80034a4:	f043 0301 	orr.w	r3, r3, #1
 80034a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ac:	f7fd fde6 	bl	800107c <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034b4:	f7fd fde2 	bl	800107c <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e1de      	b.n	8003884 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034c6:	4b5e      	ldr	r3, [pc, #376]	; (8003640 <HAL_RCC_OscConfig+0x578>)
 80034c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d0ef      	beq.n	80034b4 <HAL_RCC_OscConfig+0x3ec>
 80034d4:	e01b      	b.n	800350e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034d6:	4b5a      	ldr	r3, [pc, #360]	; (8003640 <HAL_RCC_OscConfig+0x578>)
 80034d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034dc:	4a58      	ldr	r2, [pc, #352]	; (8003640 <HAL_RCC_OscConfig+0x578>)
 80034de:	f023 0301 	bic.w	r3, r3, #1
 80034e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e6:	f7fd fdc9 	bl	800107c <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80034ec:	e008      	b.n	8003500 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034ee:	f7fd fdc5 	bl	800107c <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e1c1      	b.n	8003884 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003500:	4b4f      	ldr	r3, [pc, #316]	; (8003640 <HAL_RCC_OscConfig+0x578>)
 8003502:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1ef      	bne.n	80034ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0304 	and.w	r3, r3, #4
 8003516:	2b00      	cmp	r3, #0
 8003518:	f000 80a6 	beq.w	8003668 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800351c:	2300      	movs	r3, #0
 800351e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003520:	4b47      	ldr	r3, [pc, #284]	; (8003640 <HAL_RCC_OscConfig+0x578>)
 8003522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d10d      	bne.n	8003548 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800352c:	4b44      	ldr	r3, [pc, #272]	; (8003640 <HAL_RCC_OscConfig+0x578>)
 800352e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003530:	4a43      	ldr	r2, [pc, #268]	; (8003640 <HAL_RCC_OscConfig+0x578>)
 8003532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003536:	6593      	str	r3, [r2, #88]	; 0x58
 8003538:	4b41      	ldr	r3, [pc, #260]	; (8003640 <HAL_RCC_OscConfig+0x578>)
 800353a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800353c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003540:	60bb      	str	r3, [r7, #8]
 8003542:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003544:	2301      	movs	r3, #1
 8003546:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003548:	4b3e      	ldr	r3, [pc, #248]	; (8003644 <HAL_RCC_OscConfig+0x57c>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003550:	2b00      	cmp	r3, #0
 8003552:	d118      	bne.n	8003586 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003554:	4b3b      	ldr	r3, [pc, #236]	; (8003644 <HAL_RCC_OscConfig+0x57c>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a3a      	ldr	r2, [pc, #232]	; (8003644 <HAL_RCC_OscConfig+0x57c>)
 800355a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800355e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003560:	f7fd fd8c 	bl	800107c <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003566:	e008      	b.n	800357a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003568:	f7fd fd88 	bl	800107c <HAL_GetTick>
 800356c:	4602      	mov	r2, r0
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1ad3      	subs	r3, r2, r3
 8003572:	2b02      	cmp	r3, #2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e184      	b.n	8003884 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800357a:	4b32      	ldr	r3, [pc, #200]	; (8003644 <HAL_RCC_OscConfig+0x57c>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003582:	2b00      	cmp	r3, #0
 8003584:	d0f0      	beq.n	8003568 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	2b01      	cmp	r3, #1
 800358c:	d108      	bne.n	80035a0 <HAL_RCC_OscConfig+0x4d8>
 800358e:	4b2c      	ldr	r3, [pc, #176]	; (8003640 <HAL_RCC_OscConfig+0x578>)
 8003590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003594:	4a2a      	ldr	r2, [pc, #168]	; (8003640 <HAL_RCC_OscConfig+0x578>)
 8003596:	f043 0301 	orr.w	r3, r3, #1
 800359a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800359e:	e024      	b.n	80035ea <HAL_RCC_OscConfig+0x522>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	2b05      	cmp	r3, #5
 80035a6:	d110      	bne.n	80035ca <HAL_RCC_OscConfig+0x502>
 80035a8:	4b25      	ldr	r3, [pc, #148]	; (8003640 <HAL_RCC_OscConfig+0x578>)
 80035aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ae:	4a24      	ldr	r2, [pc, #144]	; (8003640 <HAL_RCC_OscConfig+0x578>)
 80035b0:	f043 0304 	orr.w	r3, r3, #4
 80035b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035b8:	4b21      	ldr	r3, [pc, #132]	; (8003640 <HAL_RCC_OscConfig+0x578>)
 80035ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035be:	4a20      	ldr	r2, [pc, #128]	; (8003640 <HAL_RCC_OscConfig+0x578>)
 80035c0:	f043 0301 	orr.w	r3, r3, #1
 80035c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035c8:	e00f      	b.n	80035ea <HAL_RCC_OscConfig+0x522>
 80035ca:	4b1d      	ldr	r3, [pc, #116]	; (8003640 <HAL_RCC_OscConfig+0x578>)
 80035cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d0:	4a1b      	ldr	r2, [pc, #108]	; (8003640 <HAL_RCC_OscConfig+0x578>)
 80035d2:	f023 0301 	bic.w	r3, r3, #1
 80035d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035da:	4b19      	ldr	r3, [pc, #100]	; (8003640 <HAL_RCC_OscConfig+0x578>)
 80035dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e0:	4a17      	ldr	r2, [pc, #92]	; (8003640 <HAL_RCC_OscConfig+0x578>)
 80035e2:	f023 0304 	bic.w	r3, r3, #4
 80035e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d016      	beq.n	8003620 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f2:	f7fd fd43 	bl	800107c <HAL_GetTick>
 80035f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035f8:	e00a      	b.n	8003610 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035fa:	f7fd fd3f 	bl	800107c <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	f241 3288 	movw	r2, #5000	; 0x1388
 8003608:	4293      	cmp	r3, r2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e139      	b.n	8003884 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003610:	4b0b      	ldr	r3, [pc, #44]	; (8003640 <HAL_RCC_OscConfig+0x578>)
 8003612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d0ed      	beq.n	80035fa <HAL_RCC_OscConfig+0x532>
 800361e:	e01a      	b.n	8003656 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003620:	f7fd fd2c 	bl	800107c <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003626:	e00f      	b.n	8003648 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003628:	f7fd fd28 	bl	800107c <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	f241 3288 	movw	r2, #5000	; 0x1388
 8003636:	4293      	cmp	r3, r2
 8003638:	d906      	bls.n	8003648 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e122      	b.n	8003884 <HAL_RCC_OscConfig+0x7bc>
 800363e:	bf00      	nop
 8003640:	40021000 	.word	0x40021000
 8003644:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003648:	4b90      	ldr	r3, [pc, #576]	; (800388c <HAL_RCC_OscConfig+0x7c4>)
 800364a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1e8      	bne.n	8003628 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003656:	7ffb      	ldrb	r3, [r7, #31]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d105      	bne.n	8003668 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800365c:	4b8b      	ldr	r3, [pc, #556]	; (800388c <HAL_RCC_OscConfig+0x7c4>)
 800365e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003660:	4a8a      	ldr	r2, [pc, #552]	; (800388c <HAL_RCC_OscConfig+0x7c4>)
 8003662:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003666:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 8108 	beq.w	8003882 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003676:	2b02      	cmp	r3, #2
 8003678:	f040 80d0 	bne.w	800381c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800367c:	4b83      	ldr	r3, [pc, #524]	; (800388c <HAL_RCC_OscConfig+0x7c4>)
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	f003 0203 	and.w	r2, r3, #3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368c:	429a      	cmp	r2, r3
 800368e:	d130      	bne.n	80036f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369a:	3b01      	subs	r3, #1
 800369c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800369e:	429a      	cmp	r2, r3
 80036a0:	d127      	bne.n	80036f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ac:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d11f      	bne.n	80036f2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80036bc:	2a07      	cmp	r2, #7
 80036be:	bf14      	ite	ne
 80036c0:	2201      	movne	r2, #1
 80036c2:	2200      	moveq	r2, #0
 80036c4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d113      	bne.n	80036f2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d4:	085b      	lsrs	r3, r3, #1
 80036d6:	3b01      	subs	r3, #1
 80036d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80036da:	429a      	cmp	r2, r3
 80036dc:	d109      	bne.n	80036f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e8:	085b      	lsrs	r3, r3, #1
 80036ea:	3b01      	subs	r3, #1
 80036ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d06e      	beq.n	80037d0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	2b0c      	cmp	r3, #12
 80036f6:	d069      	beq.n	80037cc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80036f8:	4b64      	ldr	r3, [pc, #400]	; (800388c <HAL_RCC_OscConfig+0x7c4>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d105      	bne.n	8003710 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003704:	4b61      	ldr	r3, [pc, #388]	; (800388c <HAL_RCC_OscConfig+0x7c4>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d001      	beq.n	8003714 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e0b7      	b.n	8003884 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003714:	4b5d      	ldr	r3, [pc, #372]	; (800388c <HAL_RCC_OscConfig+0x7c4>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a5c      	ldr	r2, [pc, #368]	; (800388c <HAL_RCC_OscConfig+0x7c4>)
 800371a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800371e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003720:	f7fd fcac 	bl	800107c <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003726:	e008      	b.n	800373a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003728:	f7fd fca8 	bl	800107c <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b02      	cmp	r3, #2
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e0a4      	b.n	8003884 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800373a:	4b54      	ldr	r3, [pc, #336]	; (800388c <HAL_RCC_OscConfig+0x7c4>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1f0      	bne.n	8003728 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003746:	4b51      	ldr	r3, [pc, #324]	; (800388c <HAL_RCC_OscConfig+0x7c4>)
 8003748:	68da      	ldr	r2, [r3, #12]
 800374a:	4b51      	ldr	r3, [pc, #324]	; (8003890 <HAL_RCC_OscConfig+0x7c8>)
 800374c:	4013      	ands	r3, r2
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003756:	3a01      	subs	r2, #1
 8003758:	0112      	lsls	r2, r2, #4
 800375a:	4311      	orrs	r1, r2
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003760:	0212      	lsls	r2, r2, #8
 8003762:	4311      	orrs	r1, r2
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003768:	0852      	lsrs	r2, r2, #1
 800376a:	3a01      	subs	r2, #1
 800376c:	0552      	lsls	r2, r2, #21
 800376e:	4311      	orrs	r1, r2
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003774:	0852      	lsrs	r2, r2, #1
 8003776:	3a01      	subs	r2, #1
 8003778:	0652      	lsls	r2, r2, #25
 800377a:	4311      	orrs	r1, r2
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003780:	0912      	lsrs	r2, r2, #4
 8003782:	0452      	lsls	r2, r2, #17
 8003784:	430a      	orrs	r2, r1
 8003786:	4941      	ldr	r1, [pc, #260]	; (800388c <HAL_RCC_OscConfig+0x7c4>)
 8003788:	4313      	orrs	r3, r2
 800378a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800378c:	4b3f      	ldr	r3, [pc, #252]	; (800388c <HAL_RCC_OscConfig+0x7c4>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a3e      	ldr	r2, [pc, #248]	; (800388c <HAL_RCC_OscConfig+0x7c4>)
 8003792:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003796:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003798:	4b3c      	ldr	r3, [pc, #240]	; (800388c <HAL_RCC_OscConfig+0x7c4>)
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	4a3b      	ldr	r2, [pc, #236]	; (800388c <HAL_RCC_OscConfig+0x7c4>)
 800379e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037a2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037a4:	f7fd fc6a 	bl	800107c <HAL_GetTick>
 80037a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037aa:	e008      	b.n	80037be <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ac:	f7fd fc66 	bl	800107c <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e062      	b.n	8003884 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037be:	4b33      	ldr	r3, [pc, #204]	; (800388c <HAL_RCC_OscConfig+0x7c4>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d0f0      	beq.n	80037ac <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037ca:	e05a      	b.n	8003882 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e059      	b.n	8003884 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037d0:	4b2e      	ldr	r3, [pc, #184]	; (800388c <HAL_RCC_OscConfig+0x7c4>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d152      	bne.n	8003882 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80037dc:	4b2b      	ldr	r3, [pc, #172]	; (800388c <HAL_RCC_OscConfig+0x7c4>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a2a      	ldr	r2, [pc, #168]	; (800388c <HAL_RCC_OscConfig+0x7c4>)
 80037e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037e6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037e8:	4b28      	ldr	r3, [pc, #160]	; (800388c <HAL_RCC_OscConfig+0x7c4>)
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	4a27      	ldr	r2, [pc, #156]	; (800388c <HAL_RCC_OscConfig+0x7c4>)
 80037ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037f2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80037f4:	f7fd fc42 	bl	800107c <HAL_GetTick>
 80037f8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037fa:	e008      	b.n	800380e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037fc:	f7fd fc3e 	bl	800107c <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b02      	cmp	r3, #2
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e03a      	b.n	8003884 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800380e:	4b1f      	ldr	r3, [pc, #124]	; (800388c <HAL_RCC_OscConfig+0x7c4>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d0f0      	beq.n	80037fc <HAL_RCC_OscConfig+0x734>
 800381a:	e032      	b.n	8003882 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	2b0c      	cmp	r3, #12
 8003820:	d02d      	beq.n	800387e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003822:	4b1a      	ldr	r3, [pc, #104]	; (800388c <HAL_RCC_OscConfig+0x7c4>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a19      	ldr	r2, [pc, #100]	; (800388c <HAL_RCC_OscConfig+0x7c4>)
 8003828:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800382c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800382e:	4b17      	ldr	r3, [pc, #92]	; (800388c <HAL_RCC_OscConfig+0x7c4>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d105      	bne.n	8003846 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800383a:	4b14      	ldr	r3, [pc, #80]	; (800388c <HAL_RCC_OscConfig+0x7c4>)
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	4a13      	ldr	r2, [pc, #76]	; (800388c <HAL_RCC_OscConfig+0x7c4>)
 8003840:	f023 0303 	bic.w	r3, r3, #3
 8003844:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003846:	4b11      	ldr	r3, [pc, #68]	; (800388c <HAL_RCC_OscConfig+0x7c4>)
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	4a10      	ldr	r2, [pc, #64]	; (800388c <HAL_RCC_OscConfig+0x7c4>)
 800384c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003850:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003854:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003856:	f7fd fc11 	bl	800107c <HAL_GetTick>
 800385a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800385c:	e008      	b.n	8003870 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800385e:	f7fd fc0d 	bl	800107c <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	2b02      	cmp	r3, #2
 800386a:	d901      	bls.n	8003870 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e009      	b.n	8003884 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003870:	4b06      	ldr	r3, [pc, #24]	; (800388c <HAL_RCC_OscConfig+0x7c4>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1f0      	bne.n	800385e <HAL_RCC_OscConfig+0x796>
 800387c:	e001      	b.n	8003882 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e000      	b.n	8003884 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003882:	2300      	movs	r3, #0
}
 8003884:	4618      	mov	r0, r3
 8003886:	3720      	adds	r7, #32
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}
 800388c:	40021000 	.word	0x40021000
 8003890:	f99d808c 	.word	0xf99d808c

08003894 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d101      	bne.n	80038a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e0c8      	b.n	8003a3a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038a8:	4b66      	ldr	r3, [pc, #408]	; (8003a44 <HAL_RCC_ClockConfig+0x1b0>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d910      	bls.n	80038d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038b6:	4b63      	ldr	r3, [pc, #396]	; (8003a44 <HAL_RCC_ClockConfig+0x1b0>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f023 0207 	bic.w	r2, r3, #7
 80038be:	4961      	ldr	r1, [pc, #388]	; (8003a44 <HAL_RCC_ClockConfig+0x1b0>)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038c6:	4b5f      	ldr	r3, [pc, #380]	; (8003a44 <HAL_RCC_ClockConfig+0x1b0>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0307 	and.w	r3, r3, #7
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d001      	beq.n	80038d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e0b0      	b.n	8003a3a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0301 	and.w	r3, r3, #1
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d04c      	beq.n	800397e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	2b03      	cmp	r3, #3
 80038ea:	d107      	bne.n	80038fc <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ec:	4b56      	ldr	r3, [pc, #344]	; (8003a48 <HAL_RCC_ClockConfig+0x1b4>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d121      	bne.n	800393c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e09e      	b.n	8003a3a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	2b02      	cmp	r3, #2
 8003902:	d107      	bne.n	8003914 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003904:	4b50      	ldr	r3, [pc, #320]	; (8003a48 <HAL_RCC_ClockConfig+0x1b4>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d115      	bne.n	800393c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e092      	b.n	8003a3a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d107      	bne.n	800392c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800391c:	4b4a      	ldr	r3, [pc, #296]	; (8003a48 <HAL_RCC_ClockConfig+0x1b4>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d109      	bne.n	800393c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e086      	b.n	8003a3a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800392c:	4b46      	ldr	r3, [pc, #280]	; (8003a48 <HAL_RCC_ClockConfig+0x1b4>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003934:	2b00      	cmp	r3, #0
 8003936:	d101      	bne.n	800393c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e07e      	b.n	8003a3a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800393c:	4b42      	ldr	r3, [pc, #264]	; (8003a48 <HAL_RCC_ClockConfig+0x1b4>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f023 0203 	bic.w	r2, r3, #3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	493f      	ldr	r1, [pc, #252]	; (8003a48 <HAL_RCC_ClockConfig+0x1b4>)
 800394a:	4313      	orrs	r3, r2
 800394c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800394e:	f7fd fb95 	bl	800107c <HAL_GetTick>
 8003952:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003954:	e00a      	b.n	800396c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003956:	f7fd fb91 	bl	800107c <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	f241 3288 	movw	r2, #5000	; 0x1388
 8003964:	4293      	cmp	r3, r2
 8003966:	d901      	bls.n	800396c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e066      	b.n	8003a3a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800396c:	4b36      	ldr	r3, [pc, #216]	; (8003a48 <HAL_RCC_ClockConfig+0x1b4>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f003 020c 	and.w	r2, r3, #12
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	429a      	cmp	r2, r3
 800397c:	d1eb      	bne.n	8003956 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d008      	beq.n	800399c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800398a:	4b2f      	ldr	r3, [pc, #188]	; (8003a48 <HAL_RCC_ClockConfig+0x1b4>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	492c      	ldr	r1, [pc, #176]	; (8003a48 <HAL_RCC_ClockConfig+0x1b4>)
 8003998:	4313      	orrs	r3, r2
 800399a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800399c:	4b29      	ldr	r3, [pc, #164]	; (8003a44 <HAL_RCC_ClockConfig+0x1b0>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0307 	and.w	r3, r3, #7
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d210      	bcs.n	80039cc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039aa:	4b26      	ldr	r3, [pc, #152]	; (8003a44 <HAL_RCC_ClockConfig+0x1b0>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f023 0207 	bic.w	r2, r3, #7
 80039b2:	4924      	ldr	r1, [pc, #144]	; (8003a44 <HAL_RCC_ClockConfig+0x1b0>)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ba:	4b22      	ldr	r3, [pc, #136]	; (8003a44 <HAL_RCC_ClockConfig+0x1b0>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0307 	and.w	r3, r3, #7
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d001      	beq.n	80039cc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e036      	b.n	8003a3a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0304 	and.w	r3, r3, #4
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d008      	beq.n	80039ea <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039d8:	4b1b      	ldr	r3, [pc, #108]	; (8003a48 <HAL_RCC_ClockConfig+0x1b4>)
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	4918      	ldr	r1, [pc, #96]	; (8003a48 <HAL_RCC_ClockConfig+0x1b4>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0308 	and.w	r3, r3, #8
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d009      	beq.n	8003a0a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039f6:	4b14      	ldr	r3, [pc, #80]	; (8003a48 <HAL_RCC_ClockConfig+0x1b4>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	4910      	ldr	r1, [pc, #64]	; (8003a48 <HAL_RCC_ClockConfig+0x1b4>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a0a:	f000 f825 	bl	8003a58 <HAL_RCC_GetSysClockFreq>
 8003a0e:	4601      	mov	r1, r0
 8003a10:	4b0d      	ldr	r3, [pc, #52]	; (8003a48 <HAL_RCC_ClockConfig+0x1b4>)
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	091b      	lsrs	r3, r3, #4
 8003a16:	f003 030f 	and.w	r3, r3, #15
 8003a1a:	4a0c      	ldr	r2, [pc, #48]	; (8003a4c <HAL_RCC_ClockConfig+0x1b8>)
 8003a1c:	5cd3      	ldrb	r3, [r2, r3]
 8003a1e:	f003 031f 	and.w	r3, r3, #31
 8003a22:	fa21 f303 	lsr.w	r3, r1, r3
 8003a26:	4a0a      	ldr	r2, [pc, #40]	; (8003a50 <HAL_RCC_ClockConfig+0x1bc>)
 8003a28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003a2a:	4b0a      	ldr	r3, [pc, #40]	; (8003a54 <HAL_RCC_ClockConfig+0x1c0>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7fd fad4 	bl	8000fdc <HAL_InitTick>
 8003a34:	4603      	mov	r3, r0
 8003a36:	72fb      	strb	r3, [r7, #11]

  return status;
 8003a38:	7afb      	ldrb	r3, [r7, #11]
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	40022000 	.word	0x40022000
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	0800640c 	.word	0x0800640c
 8003a50:	20000000 	.word	0x20000000
 8003a54:	20000004 	.word	0x20000004

08003a58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b089      	sub	sp, #36	; 0x24
 8003a5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	61fb      	str	r3, [r7, #28]
 8003a62:	2300      	movs	r3, #0
 8003a64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a66:	4b3d      	ldr	r3, [pc, #244]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x104>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f003 030c 	and.w	r3, r3, #12
 8003a6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a70:	4b3a      	ldr	r3, [pc, #232]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x104>)
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	f003 0303 	and.w	r3, r3, #3
 8003a78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d005      	beq.n	8003a8c <HAL_RCC_GetSysClockFreq+0x34>
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	2b0c      	cmp	r3, #12
 8003a84:	d121      	bne.n	8003aca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d11e      	bne.n	8003aca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a8c:	4b33      	ldr	r3, [pc, #204]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x104>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0308 	and.w	r3, r3, #8
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d107      	bne.n	8003aa8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a98:	4b30      	ldr	r3, [pc, #192]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x104>)
 8003a9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a9e:	0a1b      	lsrs	r3, r3, #8
 8003aa0:	f003 030f 	and.w	r3, r3, #15
 8003aa4:	61fb      	str	r3, [r7, #28]
 8003aa6:	e005      	b.n	8003ab4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003aa8:	4b2c      	ldr	r3, [pc, #176]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x104>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	091b      	lsrs	r3, r3, #4
 8003aae:	f003 030f 	and.w	r3, r3, #15
 8003ab2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003ab4:	4a2a      	ldr	r2, [pc, #168]	; (8003b60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003abc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d10d      	bne.n	8003ae0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ac8:	e00a      	b.n	8003ae0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	2b04      	cmp	r3, #4
 8003ace:	d102      	bne.n	8003ad6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ad0:	4b24      	ldr	r3, [pc, #144]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003ad2:	61bb      	str	r3, [r7, #24]
 8003ad4:	e004      	b.n	8003ae0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	2b08      	cmp	r3, #8
 8003ada:	d101      	bne.n	8003ae0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003adc:	4b22      	ldr	r3, [pc, #136]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ade:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	2b0c      	cmp	r3, #12
 8003ae4:	d133      	bne.n	8003b4e <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ae6:	4b1d      	ldr	r3, [pc, #116]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x104>)
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	f003 0303 	and.w	r3, r3, #3
 8003aee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d002      	beq.n	8003afc <HAL_RCC_GetSysClockFreq+0xa4>
 8003af6:	2b03      	cmp	r3, #3
 8003af8:	d003      	beq.n	8003b02 <HAL_RCC_GetSysClockFreq+0xaa>
 8003afa:	e005      	b.n	8003b08 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003afc:	4b19      	ldr	r3, [pc, #100]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003afe:	617b      	str	r3, [r7, #20]
      break;
 8003b00:	e005      	b.n	8003b0e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003b02:	4b19      	ldr	r3, [pc, #100]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b04:	617b      	str	r3, [r7, #20]
      break;
 8003b06:	e002      	b.n	8003b0e <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	617b      	str	r3, [r7, #20]
      break;
 8003b0c:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b0e:	4b13      	ldr	r3, [pc, #76]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x104>)
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	091b      	lsrs	r3, r3, #4
 8003b14:	f003 0307 	and.w	r3, r3, #7
 8003b18:	3301      	adds	r3, #1
 8003b1a:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003b1c:	4b0f      	ldr	r3, [pc, #60]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x104>)
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	0a1b      	lsrs	r3, r3, #8
 8003b22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	fb02 f203 	mul.w	r2, r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b32:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003b34:	4b09      	ldr	r3, [pc, #36]	; (8003b5c <HAL_RCC_GetSysClockFreq+0x104>)
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	0e5b      	lsrs	r3, r3, #25
 8003b3a:	f003 0303 	and.w	r3, r3, #3
 8003b3e:	3301      	adds	r3, #1
 8003b40:	005b      	lsls	r3, r3, #1
 8003b42:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b4c:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003b4e:	69bb      	ldr	r3, [r7, #24]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3724      	adds	r7, #36	; 0x24
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr
 8003b5c:	40021000 	.word	0x40021000
 8003b60:	08006424 	.word	0x08006424
 8003b64:	00f42400 	.word	0x00f42400
 8003b68:	007a1200 	.word	0x007a1200

08003b6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b70:	4b03      	ldr	r3, [pc, #12]	; (8003b80 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b72:	681b      	ldr	r3, [r3, #0]
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	20000000 	.word	0x20000000

08003b84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b88:	f7ff fff0 	bl	8003b6c <HAL_RCC_GetHCLKFreq>
 8003b8c:	4601      	mov	r1, r0
 8003b8e:	4b06      	ldr	r3, [pc, #24]	; (8003ba8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	0a1b      	lsrs	r3, r3, #8
 8003b94:	f003 0307 	and.w	r3, r3, #7
 8003b98:	4a04      	ldr	r2, [pc, #16]	; (8003bac <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b9a:	5cd3      	ldrb	r3, [r2, r3]
 8003b9c:	f003 031f 	and.w	r3, r3, #31
 8003ba0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	40021000 	.word	0x40021000
 8003bac:	0800641c 	.word	0x0800641c

08003bb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003bb4:	f7ff ffda 	bl	8003b6c <HAL_RCC_GetHCLKFreq>
 8003bb8:	4601      	mov	r1, r0
 8003bba:	4b06      	ldr	r3, [pc, #24]	; (8003bd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	0adb      	lsrs	r3, r3, #11
 8003bc0:	f003 0307 	and.w	r3, r3, #7
 8003bc4:	4a04      	ldr	r2, [pc, #16]	; (8003bd8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003bc6:	5cd3      	ldrb	r3, [r2, r3]
 8003bc8:	f003 031f 	and.w	r3, r3, #31
 8003bcc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	40021000 	.word	0x40021000
 8003bd8:	0800641c 	.word	0x0800641c

08003bdc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003be4:	2300      	movs	r3, #0
 8003be6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003be8:	4b2a      	ldr	r3, [pc, #168]	; (8003c94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d003      	beq.n	8003bfc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003bf4:	f7ff fa04 	bl	8003000 <HAL_PWREx_GetVoltageRange>
 8003bf8:	6178      	str	r0, [r7, #20]
 8003bfa:	e014      	b.n	8003c26 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bfc:	4b25      	ldr	r3, [pc, #148]	; (8003c94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c00:	4a24      	ldr	r2, [pc, #144]	; (8003c94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c06:	6593      	str	r3, [r2, #88]	; 0x58
 8003c08:	4b22      	ldr	r3, [pc, #136]	; (8003c94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c10:	60fb      	str	r3, [r7, #12]
 8003c12:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003c14:	f7ff f9f4 	bl	8003000 <HAL_PWREx_GetVoltageRange>
 8003c18:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c1a:	4b1e      	ldr	r3, [pc, #120]	; (8003c94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c1e:	4a1d      	ldr	r2, [pc, #116]	; (8003c94 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003c20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c24:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c2c:	d10b      	bne.n	8003c46 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2b80      	cmp	r3, #128	; 0x80
 8003c32:	d919      	bls.n	8003c68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2ba0      	cmp	r3, #160	; 0xa0
 8003c38:	d902      	bls.n	8003c40 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	613b      	str	r3, [r7, #16]
 8003c3e:	e013      	b.n	8003c68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c40:	2301      	movs	r3, #1
 8003c42:	613b      	str	r3, [r7, #16]
 8003c44:	e010      	b.n	8003c68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2b80      	cmp	r3, #128	; 0x80
 8003c4a:	d902      	bls.n	8003c52 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	613b      	str	r3, [r7, #16]
 8003c50:	e00a      	b.n	8003c68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2b80      	cmp	r3, #128	; 0x80
 8003c56:	d102      	bne.n	8003c5e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c58:	2302      	movs	r3, #2
 8003c5a:	613b      	str	r3, [r7, #16]
 8003c5c:	e004      	b.n	8003c68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2b70      	cmp	r3, #112	; 0x70
 8003c62:	d101      	bne.n	8003c68 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c64:	2301      	movs	r3, #1
 8003c66:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c68:	4b0b      	ldr	r3, [pc, #44]	; (8003c98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f023 0207 	bic.w	r2, r3, #7
 8003c70:	4909      	ldr	r1, [pc, #36]	; (8003c98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c78:	4b07      	ldr	r3, [pc, #28]	; (8003c98 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0307 	and.w	r3, r3, #7
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d001      	beq.n	8003c8a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e000      	b.n	8003c8c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3718      	adds	r7, #24
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	40021000 	.word	0x40021000
 8003c98:	40022000 	.word	0x40022000

08003c9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b086      	sub	sp, #24
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ca8:	2300      	movs	r3, #0
 8003caa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d03f      	beq.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cc0:	d01c      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003cc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cc6:	d802      	bhi.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00e      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003ccc:	e01f      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003cce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003cd2:	d003      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003cd4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003cd8:	d01c      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003cda:	e018      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003cdc:	4b85      	ldr	r3, [pc, #532]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	4a84      	ldr	r2, [pc, #528]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ce2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ce6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ce8:	e015      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	3304      	adds	r3, #4
 8003cee:	2100      	movs	r1, #0
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f000 fab9 	bl	8004268 <RCCEx_PLLSAI1_Config>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cfa:	e00c      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	3320      	adds	r3, #32
 8003d00:	2100      	movs	r1, #0
 8003d02:	4618      	mov	r0, r3
 8003d04:	f000 fba0 	bl	8004448 <RCCEx_PLLSAI2_Config>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003d0c:	e003      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	74fb      	strb	r3, [r7, #19]
      break;
 8003d12:	e000      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003d14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d16:	7cfb      	ldrb	r3, [r7, #19]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d10b      	bne.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d1c:	4b75      	ldr	r3, [pc, #468]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d22:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d2a:	4972      	ldr	r1, [pc, #456]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003d32:	e001      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d34:	7cfb      	ldrb	r3, [r7, #19]
 8003d36:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d03f      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d4c:	d01c      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003d4e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d52:	d802      	bhi.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00e      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003d58:	e01f      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003d5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d5e:	d003      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003d60:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d64:	d01c      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8003d66:	e018      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d68:	4b62      	ldr	r3, [pc, #392]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	4a61      	ldr	r2, [pc, #388]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d72:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d74:	e015      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	3304      	adds	r3, #4
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	f000 fa73 	bl	8004268 <RCCEx_PLLSAI1_Config>
 8003d82:	4603      	mov	r3, r0
 8003d84:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d86:	e00c      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	3320      	adds	r3, #32
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 fb5a 	bl	8004448 <RCCEx_PLLSAI2_Config>
 8003d94:	4603      	mov	r3, r0
 8003d96:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d98:	e003      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	74fb      	strb	r3, [r7, #19]
      break;
 8003d9e:	e000      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003da0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003da2:	7cfb      	ldrb	r3, [r7, #19]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10b      	bne.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003da8:	4b52      	ldr	r3, [pc, #328]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003db6:	494f      	ldr	r1, [pc, #316]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003dbe:	e001      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dc0:	7cfb      	ldrb	r3, [r7, #19]
 8003dc2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f000 80a0 	beq.w	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003dd6:	4b47      	ldr	r3, [pc, #284]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8003de2:	2301      	movs	r3, #1
 8003de4:	e000      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003de6:	2300      	movs	r3, #0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d00d      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dec:	4b41      	ldr	r3, [pc, #260]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df0:	4a40      	ldr	r2, [pc, #256]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003df2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003df6:	6593      	str	r3, [r2, #88]	; 0x58
 8003df8:	4b3e      	ldr	r3, [pc, #248]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e00:	60bb      	str	r3, [r7, #8]
 8003e02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e04:	2301      	movs	r3, #1
 8003e06:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e08:	4b3b      	ldr	r3, [pc, #236]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a3a      	ldr	r2, [pc, #232]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e12:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e14:	f7fd f932 	bl	800107c <HAL_GetTick>
 8003e18:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e1a:	e009      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e1c:	f7fd f92e 	bl	800107c <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d902      	bls.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	74fb      	strb	r3, [r7, #19]
        break;
 8003e2e:	e005      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e30:	4b31      	ldr	r3, [pc, #196]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d0ef      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8003e3c:	7cfb      	ldrb	r3, [r7, #19]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d15c      	bne.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e42:	4b2c      	ldr	r3, [pc, #176]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e4c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d01f      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d019      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e60:	4b24      	ldr	r3, [pc, #144]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e6a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e6c:	4b21      	ldr	r3, [pc, #132]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e72:	4a20      	ldr	r2, [pc, #128]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e7c:	4b1d      	ldr	r3, [pc, #116]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e82:	4a1c      	ldr	r2, [pc, #112]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e8c:	4a19      	ldr	r2, [pc, #100]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d016      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e9e:	f7fd f8ed 	bl	800107c <HAL_GetTick>
 8003ea2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ea4:	e00b      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ea6:	f7fd f8e9 	bl	800107c <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d902      	bls.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	74fb      	strb	r3, [r7, #19]
            break;
 8003ebc:	e006      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ebe:	4b0d      	ldr	r3, [pc, #52]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d0ec      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8003ecc:	7cfb      	ldrb	r3, [r7, #19]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10c      	bne.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ed2:	4b08      	ldr	r3, [pc, #32]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ee2:	4904      	ldr	r1, [pc, #16]	; (8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003eea:	e009      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003eec:	7cfb      	ldrb	r3, [r7, #19]
 8003eee:	74bb      	strb	r3, [r7, #18]
 8003ef0:	e006      	b.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003ef2:	bf00      	nop
 8003ef4:	40021000 	.word	0x40021000
 8003ef8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003efc:	7cfb      	ldrb	r3, [r7, #19]
 8003efe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f00:	7c7b      	ldrb	r3, [r7, #17]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d105      	bne.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f06:	4b9e      	ldr	r3, [pc, #632]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0a:	4a9d      	ldr	r2, [pc, #628]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f10:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00a      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f1e:	4b98      	ldr	r3, [pc, #608]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f24:	f023 0203 	bic.w	r2, r3, #3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2c:	4994      	ldr	r1, [pc, #592]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00a      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f40:	4b8f      	ldr	r3, [pc, #572]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f46:	f023 020c 	bic.w	r2, r3, #12
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f4e:	498c      	ldr	r1, [pc, #560]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0304 	and.w	r3, r3, #4
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00a      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f62:	4b87      	ldr	r3, [pc, #540]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f68:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f70:	4983      	ldr	r1, [pc, #524]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0308 	and.w	r3, r3, #8
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00a      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f84:	4b7e      	ldr	r3, [pc, #504]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f8a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f92:	497b      	ldr	r1, [pc, #492]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0310 	and.w	r3, r3, #16
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00a      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003fa6:	4b76      	ldr	r3, [pc, #472]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fb4:	4972      	ldr	r1, [pc, #456]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0320 	and.w	r3, r3, #32
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00a      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fc8:	4b6d      	ldr	r3, [pc, #436]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fd6:	496a      	ldr	r1, [pc, #424]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00a      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fea:	4b65      	ldr	r3, [pc, #404]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff8:	4961      	ldr	r1, [pc, #388]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00a      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800400c:	4b5c      	ldr	r3, [pc, #368]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800400e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004012:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800401a:	4959      	ldr	r1, [pc, #356]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800401c:	4313      	orrs	r3, r2
 800401e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00a      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800402e:	4b54      	ldr	r3, [pc, #336]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004034:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800403c:	4950      	ldr	r1, [pc, #320]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800403e:	4313      	orrs	r3, r2
 8004040:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00a      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004050:	4b4b      	ldr	r3, [pc, #300]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004056:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800405e:	4948      	ldr	r1, [pc, #288]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004060:	4313      	orrs	r3, r2
 8004062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00a      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004072:	4b43      	ldr	r3, [pc, #268]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004078:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004080:	493f      	ldr	r1, [pc, #252]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004082:	4313      	orrs	r3, r2
 8004084:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d028      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004094:	4b3a      	ldr	r3, [pc, #232]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800409a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040a2:	4937      	ldr	r1, [pc, #220]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040b2:	d106      	bne.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040b4:	4b32      	ldr	r3, [pc, #200]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	4a31      	ldr	r2, [pc, #196]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040be:	60d3      	str	r3, [r2, #12]
 80040c0:	e011      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040ca:	d10c      	bne.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	3304      	adds	r3, #4
 80040d0:	2101      	movs	r1, #1
 80040d2:	4618      	mov	r0, r3
 80040d4:	f000 f8c8 	bl	8004268 <RCCEx_PLLSAI1_Config>
 80040d8:	4603      	mov	r3, r0
 80040da:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80040dc:	7cfb      	ldrb	r3, [r7, #19]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80040e2:	7cfb      	ldrb	r3, [r7, #19]
 80040e4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d028      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80040f2:	4b23      	ldr	r3, [pc, #140]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004100:	491f      	ldr	r1, [pc, #124]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004102:	4313      	orrs	r3, r2
 8004104:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004110:	d106      	bne.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004112:	4b1b      	ldr	r3, [pc, #108]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	4a1a      	ldr	r2, [pc, #104]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004118:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800411c:	60d3      	str	r3, [r2, #12]
 800411e:	e011      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004124:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004128:	d10c      	bne.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	3304      	adds	r3, #4
 800412e:	2101      	movs	r1, #1
 8004130:	4618      	mov	r0, r3
 8004132:	f000 f899 	bl	8004268 <RCCEx_PLLSAI1_Config>
 8004136:	4603      	mov	r3, r0
 8004138:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800413a:	7cfb      	ldrb	r3, [r7, #19]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d001      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8004140:	7cfb      	ldrb	r3, [r7, #19]
 8004142:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d02b      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004150:	4b0b      	ldr	r3, [pc, #44]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004156:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800415e:	4908      	ldr	r1, [pc, #32]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004160:	4313      	orrs	r3, r2
 8004162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800416a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800416e:	d109      	bne.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004170:	4b03      	ldr	r3, [pc, #12]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	4a02      	ldr	r2, [pc, #8]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004176:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800417a:	60d3      	str	r3, [r2, #12]
 800417c:	e014      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 800417e:	bf00      	nop
 8004180:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004188:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800418c:	d10c      	bne.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	3304      	adds	r3, #4
 8004192:	2101      	movs	r1, #1
 8004194:	4618      	mov	r0, r3
 8004196:	f000 f867 	bl	8004268 <RCCEx_PLLSAI1_Config>
 800419a:	4603      	mov	r3, r0
 800419c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800419e:	7cfb      	ldrb	r3, [r7, #19]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d001      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80041a4:	7cfb      	ldrb	r3, [r7, #19]
 80041a6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d02f      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041b4:	4b2b      	ldr	r3, [pc, #172]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041c2:	4928      	ldr	r1, [pc, #160]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041d2:	d10d      	bne.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	3304      	adds	r3, #4
 80041d8:	2102      	movs	r1, #2
 80041da:	4618      	mov	r0, r3
 80041dc:	f000 f844 	bl	8004268 <RCCEx_PLLSAI1_Config>
 80041e0:	4603      	mov	r3, r0
 80041e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041e4:	7cfb      	ldrb	r3, [r7, #19]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d014      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80041ea:	7cfb      	ldrb	r3, [r7, #19]
 80041ec:	74bb      	strb	r3, [r7, #18]
 80041ee:	e011      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041f8:	d10c      	bne.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	3320      	adds	r3, #32
 80041fe:	2102      	movs	r1, #2
 8004200:	4618      	mov	r0, r3
 8004202:	f000 f921 	bl	8004448 <RCCEx_PLLSAI2_Config>
 8004206:	4603      	mov	r3, r0
 8004208:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800420a:	7cfb      	ldrb	r3, [r7, #19]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d001      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8004210:	7cfb      	ldrb	r3, [r7, #19]
 8004212:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d00a      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004220:	4b10      	ldr	r3, [pc, #64]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004226:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800422e:	490d      	ldr	r1, [pc, #52]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004230:	4313      	orrs	r3, r2
 8004232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00b      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004242:	4b08      	ldr	r3, [pc, #32]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004248:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004252:	4904      	ldr	r1, [pc, #16]	; (8004264 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004254:	4313      	orrs	r3, r2
 8004256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800425a:	7cbb      	ldrb	r3, [r7, #18]
}
 800425c:	4618      	mov	r0, r3
 800425e:	3718      	adds	r7, #24
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	40021000 	.word	0x40021000

08004268 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004272:	2300      	movs	r3, #0
 8004274:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004276:	4b73      	ldr	r3, [pc, #460]	; (8004444 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	f003 0303 	and.w	r3, r3, #3
 800427e:	2b00      	cmp	r3, #0
 8004280:	d018      	beq.n	80042b4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004282:	4b70      	ldr	r3, [pc, #448]	; (8004444 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	f003 0203 	and.w	r2, r3, #3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	429a      	cmp	r2, r3
 8004290:	d10d      	bne.n	80042ae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
       ||
 8004296:	2b00      	cmp	r3, #0
 8004298:	d009      	beq.n	80042ae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800429a:	4b6a      	ldr	r3, [pc, #424]	; (8004444 <RCCEx_PLLSAI1_Config+0x1dc>)
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	091b      	lsrs	r3, r3, #4
 80042a0:	f003 0307 	and.w	r3, r3, #7
 80042a4:	1c5a      	adds	r2, r3, #1
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
       ||
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d044      	beq.n	8004338 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	73fb      	strb	r3, [r7, #15]
 80042b2:	e041      	b.n	8004338 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d00c      	beq.n	80042d6 <RCCEx_PLLSAI1_Config+0x6e>
 80042bc:	2b03      	cmp	r3, #3
 80042be:	d013      	beq.n	80042e8 <RCCEx_PLLSAI1_Config+0x80>
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d120      	bne.n	8004306 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80042c4:	4b5f      	ldr	r3, [pc, #380]	; (8004444 <RCCEx_PLLSAI1_Config+0x1dc>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0302 	and.w	r3, r3, #2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d11d      	bne.n	800430c <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042d4:	e01a      	b.n	800430c <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80042d6:	4b5b      	ldr	r3, [pc, #364]	; (8004444 <RCCEx_PLLSAI1_Config+0x1dc>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d116      	bne.n	8004310 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042e6:	e013      	b.n	8004310 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80042e8:	4b56      	ldr	r3, [pc, #344]	; (8004444 <RCCEx_PLLSAI1_Config+0x1dc>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d10f      	bne.n	8004314 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80042f4:	4b53      	ldr	r3, [pc, #332]	; (8004444 <RCCEx_PLLSAI1_Config+0x1dc>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d109      	bne.n	8004314 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004304:	e006      	b.n	8004314 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	73fb      	strb	r3, [r7, #15]
      break;
 800430a:	e004      	b.n	8004316 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800430c:	bf00      	nop
 800430e:	e002      	b.n	8004316 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004310:	bf00      	nop
 8004312:	e000      	b.n	8004316 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8004314:	bf00      	nop
    }

    if(status == HAL_OK)
 8004316:	7bfb      	ldrb	r3, [r7, #15]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d10d      	bne.n	8004338 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800431c:	4b49      	ldr	r3, [pc, #292]	; (8004444 <RCCEx_PLLSAI1_Config+0x1dc>)
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6819      	ldr	r1, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	3b01      	subs	r3, #1
 800432e:	011b      	lsls	r3, r3, #4
 8004330:	430b      	orrs	r3, r1
 8004332:	4944      	ldr	r1, [pc, #272]	; (8004444 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004334:	4313      	orrs	r3, r2
 8004336:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004338:	7bfb      	ldrb	r3, [r7, #15]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d17d      	bne.n	800443a <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800433e:	4b41      	ldr	r3, [pc, #260]	; (8004444 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a40      	ldr	r2, [pc, #256]	; (8004444 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004344:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004348:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800434a:	f7fc fe97 	bl	800107c <HAL_GetTick>
 800434e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004350:	e009      	b.n	8004366 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004352:	f7fc fe93 	bl	800107c <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	2b02      	cmp	r3, #2
 800435e:	d902      	bls.n	8004366 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	73fb      	strb	r3, [r7, #15]
        break;
 8004364:	e005      	b.n	8004372 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004366:	4b37      	ldr	r3, [pc, #220]	; (8004444 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1ef      	bne.n	8004352 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004372:	7bfb      	ldrb	r3, [r7, #15]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d160      	bne.n	800443a <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d111      	bne.n	80043a2 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800437e:	4b31      	ldr	r3, [pc, #196]	; (8004444 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004386:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	6892      	ldr	r2, [r2, #8]
 800438e:	0211      	lsls	r1, r2, #8
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	68d2      	ldr	r2, [r2, #12]
 8004394:	0912      	lsrs	r2, r2, #4
 8004396:	0452      	lsls	r2, r2, #17
 8004398:	430a      	orrs	r2, r1
 800439a:	492a      	ldr	r1, [pc, #168]	; (8004444 <RCCEx_PLLSAI1_Config+0x1dc>)
 800439c:	4313      	orrs	r3, r2
 800439e:	610b      	str	r3, [r1, #16]
 80043a0:	e027      	b.n	80043f2 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d112      	bne.n	80043ce <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043a8:	4b26      	ldr	r3, [pc, #152]	; (8004444 <RCCEx_PLLSAI1_Config+0x1dc>)
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80043b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	6892      	ldr	r2, [r2, #8]
 80043b8:	0211      	lsls	r1, r2, #8
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	6912      	ldr	r2, [r2, #16]
 80043be:	0852      	lsrs	r2, r2, #1
 80043c0:	3a01      	subs	r2, #1
 80043c2:	0552      	lsls	r2, r2, #21
 80043c4:	430a      	orrs	r2, r1
 80043c6:	491f      	ldr	r1, [pc, #124]	; (8004444 <RCCEx_PLLSAI1_Config+0x1dc>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	610b      	str	r3, [r1, #16]
 80043cc:	e011      	b.n	80043f2 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043ce:	4b1d      	ldr	r3, [pc, #116]	; (8004444 <RCCEx_PLLSAI1_Config+0x1dc>)
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80043d6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	6892      	ldr	r2, [r2, #8]
 80043de:	0211      	lsls	r1, r2, #8
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	6952      	ldr	r2, [r2, #20]
 80043e4:	0852      	lsrs	r2, r2, #1
 80043e6:	3a01      	subs	r2, #1
 80043e8:	0652      	lsls	r2, r2, #25
 80043ea:	430a      	orrs	r2, r1
 80043ec:	4915      	ldr	r1, [pc, #84]	; (8004444 <RCCEx_PLLSAI1_Config+0x1dc>)
 80043ee:	4313      	orrs	r3, r2
 80043f0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80043f2:	4b14      	ldr	r3, [pc, #80]	; (8004444 <RCCEx_PLLSAI1_Config+0x1dc>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a13      	ldr	r2, [pc, #76]	; (8004444 <RCCEx_PLLSAI1_Config+0x1dc>)
 80043f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043fc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043fe:	f7fc fe3d 	bl	800107c <HAL_GetTick>
 8004402:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004404:	e009      	b.n	800441a <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004406:	f7fc fe39 	bl	800107c <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d902      	bls.n	800441a <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	73fb      	strb	r3, [r7, #15]
          break;
 8004418:	e005      	b.n	8004426 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800441a:	4b0a      	ldr	r3, [pc, #40]	; (8004444 <RCCEx_PLLSAI1_Config+0x1dc>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d0ef      	beq.n	8004406 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8004426:	7bfb      	ldrb	r3, [r7, #15]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d106      	bne.n	800443a <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800442c:	4b05      	ldr	r3, [pc, #20]	; (8004444 <RCCEx_PLLSAI1_Config+0x1dc>)
 800442e:	691a      	ldr	r2, [r3, #16]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	4903      	ldr	r1, [pc, #12]	; (8004444 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004436:	4313      	orrs	r3, r2
 8004438:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800443a:	7bfb      	ldrb	r3, [r7, #15]
}
 800443c:	4618      	mov	r0, r3
 800443e:	3710      	adds	r7, #16
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	40021000 	.word	0x40021000

08004448 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004452:	2300      	movs	r3, #0
 8004454:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004456:	4b68      	ldr	r3, [pc, #416]	; (80045f8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	f003 0303 	and.w	r3, r3, #3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d018      	beq.n	8004494 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004462:	4b65      	ldr	r3, [pc, #404]	; (80045f8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	f003 0203 	and.w	r2, r3, #3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	429a      	cmp	r2, r3
 8004470:	d10d      	bne.n	800448e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
       ||
 8004476:	2b00      	cmp	r3, #0
 8004478:	d009      	beq.n	800448e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800447a:	4b5f      	ldr	r3, [pc, #380]	; (80045f8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	091b      	lsrs	r3, r3, #4
 8004480:	f003 0307 	and.w	r3, r3, #7
 8004484:	1c5a      	adds	r2, r3, #1
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
       ||
 800448a:	429a      	cmp	r2, r3
 800448c:	d044      	beq.n	8004518 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	73fb      	strb	r3, [r7, #15]
 8004492:	e041      	b.n	8004518 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2b02      	cmp	r3, #2
 800449a:	d00c      	beq.n	80044b6 <RCCEx_PLLSAI2_Config+0x6e>
 800449c:	2b03      	cmp	r3, #3
 800449e:	d013      	beq.n	80044c8 <RCCEx_PLLSAI2_Config+0x80>
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d120      	bne.n	80044e6 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80044a4:	4b54      	ldr	r3, [pc, #336]	; (80045f8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0302 	and.w	r3, r3, #2
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d11d      	bne.n	80044ec <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044b4:	e01a      	b.n	80044ec <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044b6:	4b50      	ldr	r3, [pc, #320]	; (80045f8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d116      	bne.n	80044f0 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044c6:	e013      	b.n	80044f0 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80044c8:	4b4b      	ldr	r3, [pc, #300]	; (80045f8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10f      	bne.n	80044f4 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80044d4:	4b48      	ldr	r3, [pc, #288]	; (80045f8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d109      	bne.n	80044f4 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80044e4:	e006      	b.n	80044f4 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	73fb      	strb	r3, [r7, #15]
      break;
 80044ea:	e004      	b.n	80044f6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80044ec:	bf00      	nop
 80044ee:	e002      	b.n	80044f6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80044f0:	bf00      	nop
 80044f2:	e000      	b.n	80044f6 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80044f4:	bf00      	nop
    }

    if(status == HAL_OK)
 80044f6:	7bfb      	ldrb	r3, [r7, #15]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d10d      	bne.n	8004518 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80044fc:	4b3e      	ldr	r3, [pc, #248]	; (80045f8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6819      	ldr	r1, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	3b01      	subs	r3, #1
 800450e:	011b      	lsls	r3, r3, #4
 8004510:	430b      	orrs	r3, r1
 8004512:	4939      	ldr	r1, [pc, #228]	; (80045f8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004514:	4313      	orrs	r3, r2
 8004516:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004518:	7bfb      	ldrb	r3, [r7, #15]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d167      	bne.n	80045ee <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800451e:	4b36      	ldr	r3, [pc, #216]	; (80045f8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a35      	ldr	r2, [pc, #212]	; (80045f8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004524:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004528:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800452a:	f7fc fda7 	bl	800107c <HAL_GetTick>
 800452e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004530:	e009      	b.n	8004546 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004532:	f7fc fda3 	bl	800107c <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	2b02      	cmp	r3, #2
 800453e:	d902      	bls.n	8004546 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	73fb      	strb	r3, [r7, #15]
        break;
 8004544:	e005      	b.n	8004552 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004546:	4b2c      	ldr	r3, [pc, #176]	; (80045f8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1ef      	bne.n	8004532 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8004552:	7bfb      	ldrb	r3, [r7, #15]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d14a      	bne.n	80045ee <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d111      	bne.n	8004582 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800455e:	4b26      	ldr	r3, [pc, #152]	; (80045f8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004566:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	6892      	ldr	r2, [r2, #8]
 800456e:	0211      	lsls	r1, r2, #8
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	68d2      	ldr	r2, [r2, #12]
 8004574:	0912      	lsrs	r2, r2, #4
 8004576:	0452      	lsls	r2, r2, #17
 8004578:	430a      	orrs	r2, r1
 800457a:	491f      	ldr	r1, [pc, #124]	; (80045f8 <RCCEx_PLLSAI2_Config+0x1b0>)
 800457c:	4313      	orrs	r3, r2
 800457e:	614b      	str	r3, [r1, #20]
 8004580:	e011      	b.n	80045a6 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004582:	4b1d      	ldr	r3, [pc, #116]	; (80045f8 <RCCEx_PLLSAI2_Config+0x1b0>)
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800458a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	6892      	ldr	r2, [r2, #8]
 8004592:	0211      	lsls	r1, r2, #8
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	6912      	ldr	r2, [r2, #16]
 8004598:	0852      	lsrs	r2, r2, #1
 800459a:	3a01      	subs	r2, #1
 800459c:	0652      	lsls	r2, r2, #25
 800459e:	430a      	orrs	r2, r1
 80045a0:	4915      	ldr	r1, [pc, #84]	; (80045f8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80045a6:	4b14      	ldr	r3, [pc, #80]	; (80045f8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a13      	ldr	r2, [pc, #76]	; (80045f8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80045ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045b0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b2:	f7fc fd63 	bl	800107c <HAL_GetTick>
 80045b6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80045b8:	e009      	b.n	80045ce <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80045ba:	f7fc fd5f 	bl	800107c <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d902      	bls.n	80045ce <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	73fb      	strb	r3, [r7, #15]
          break;
 80045cc:	e005      	b.n	80045da <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80045ce:	4b0a      	ldr	r3, [pc, #40]	; (80045f8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d0ef      	beq.n	80045ba <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80045da:	7bfb      	ldrb	r3, [r7, #15]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d106      	bne.n	80045ee <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80045e0:	4b05      	ldr	r3, [pc, #20]	; (80045f8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80045e2:	695a      	ldr	r2, [r3, #20]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	695b      	ldr	r3, [r3, #20]
 80045e8:	4903      	ldr	r1, [pc, #12]	; (80045f8 <RCCEx_PLLSAI2_Config+0x1b0>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80045ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	40021000 	.word	0x40021000

080045fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e049      	b.n	80046a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d106      	bne.n	8004628 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f7fc fb66 	bl	8000cf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2202      	movs	r2, #2
 800462c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	3304      	adds	r3, #4
 8004638:	4619      	mov	r1, r3
 800463a:	4610      	mov	r0, r2
 800463c:	f000 fd20 	bl	8005080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3708      	adds	r7, #8
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
	...

080046ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d001      	beq.n	80046c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e04f      	b.n	8004764 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2202      	movs	r2, #2
 80046c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68da      	ldr	r2, [r3, #12]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f042 0201 	orr.w	r2, r2, #1
 80046da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a23      	ldr	r2, [pc, #140]	; (8004770 <HAL_TIM_Base_Start_IT+0xc4>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d01d      	beq.n	8004722 <HAL_TIM_Base_Start_IT+0x76>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ee:	d018      	beq.n	8004722 <HAL_TIM_Base_Start_IT+0x76>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a1f      	ldr	r2, [pc, #124]	; (8004774 <HAL_TIM_Base_Start_IT+0xc8>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d013      	beq.n	8004722 <HAL_TIM_Base_Start_IT+0x76>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a1e      	ldr	r2, [pc, #120]	; (8004778 <HAL_TIM_Base_Start_IT+0xcc>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d00e      	beq.n	8004722 <HAL_TIM_Base_Start_IT+0x76>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a1c      	ldr	r2, [pc, #112]	; (800477c <HAL_TIM_Base_Start_IT+0xd0>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d009      	beq.n	8004722 <HAL_TIM_Base_Start_IT+0x76>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a1b      	ldr	r2, [pc, #108]	; (8004780 <HAL_TIM_Base_Start_IT+0xd4>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d004      	beq.n	8004722 <HAL_TIM_Base_Start_IT+0x76>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a19      	ldr	r2, [pc, #100]	; (8004784 <HAL_TIM_Base_Start_IT+0xd8>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d115      	bne.n	800474e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	689a      	ldr	r2, [r3, #8]
 8004728:	4b17      	ldr	r3, [pc, #92]	; (8004788 <HAL_TIM_Base_Start_IT+0xdc>)
 800472a:	4013      	ands	r3, r2
 800472c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2b06      	cmp	r3, #6
 8004732:	d015      	beq.n	8004760 <HAL_TIM_Base_Start_IT+0xb4>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800473a:	d011      	beq.n	8004760 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f042 0201 	orr.w	r2, r2, #1
 800474a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800474c:	e008      	b.n	8004760 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f042 0201 	orr.w	r2, r2, #1
 800475c:	601a      	str	r2, [r3, #0]
 800475e:	e000      	b.n	8004762 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004760:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3714      	adds	r7, #20
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr
 8004770:	40012c00 	.word	0x40012c00
 8004774:	40000400 	.word	0x40000400
 8004778:	40000800 	.word	0x40000800
 800477c:	40000c00 	.word	0x40000c00
 8004780:	40013400 	.word	0x40013400
 8004784:	40014000 	.word	0x40014000
 8004788:	00010007 	.word	0x00010007

0800478c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d101      	bne.n	800479e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e049      	b.n	8004832 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d106      	bne.n	80047b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 f841 	bl	800483a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2202      	movs	r2, #2
 80047bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	3304      	adds	r3, #4
 80047c8:	4619      	mov	r1, r3
 80047ca:	4610      	mov	r0, r2
 80047cc:	f000 fc58 	bl	8005080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3708      	adds	r7, #8
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800483a:	b480      	push	{r7}
 800483c:	b083      	sub	sp, #12
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004842:	bf00      	nop
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
	...

08004850 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d109      	bne.n	8004874 <HAL_TIM_PWM_Start+0x24>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004866:	b2db      	uxtb	r3, r3
 8004868:	2b01      	cmp	r3, #1
 800486a:	bf14      	ite	ne
 800486c:	2301      	movne	r3, #1
 800486e:	2300      	moveq	r3, #0
 8004870:	b2db      	uxtb	r3, r3
 8004872:	e03c      	b.n	80048ee <HAL_TIM_PWM_Start+0x9e>
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	2b04      	cmp	r3, #4
 8004878:	d109      	bne.n	800488e <HAL_TIM_PWM_Start+0x3e>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b01      	cmp	r3, #1
 8004884:	bf14      	ite	ne
 8004886:	2301      	movne	r3, #1
 8004888:	2300      	moveq	r3, #0
 800488a:	b2db      	uxtb	r3, r3
 800488c:	e02f      	b.n	80048ee <HAL_TIM_PWM_Start+0x9e>
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	2b08      	cmp	r3, #8
 8004892:	d109      	bne.n	80048a8 <HAL_TIM_PWM_Start+0x58>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800489a:	b2db      	uxtb	r3, r3
 800489c:	2b01      	cmp	r3, #1
 800489e:	bf14      	ite	ne
 80048a0:	2301      	movne	r3, #1
 80048a2:	2300      	moveq	r3, #0
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	e022      	b.n	80048ee <HAL_TIM_PWM_Start+0x9e>
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	2b0c      	cmp	r3, #12
 80048ac:	d109      	bne.n	80048c2 <HAL_TIM_PWM_Start+0x72>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	bf14      	ite	ne
 80048ba:	2301      	movne	r3, #1
 80048bc:	2300      	moveq	r3, #0
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	e015      	b.n	80048ee <HAL_TIM_PWM_Start+0x9e>
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	2b10      	cmp	r3, #16
 80048c6:	d109      	bne.n	80048dc <HAL_TIM_PWM_Start+0x8c>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	bf14      	ite	ne
 80048d4:	2301      	movne	r3, #1
 80048d6:	2300      	moveq	r3, #0
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	e008      	b.n	80048ee <HAL_TIM_PWM_Start+0x9e>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	bf14      	ite	ne
 80048e8:	2301      	movne	r3, #1
 80048ea:	2300      	moveq	r3, #0
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d001      	beq.n	80048f6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e09c      	b.n	8004a30 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d104      	bne.n	8004906 <HAL_TIM_PWM_Start+0xb6>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2202      	movs	r2, #2
 8004900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004904:	e023      	b.n	800494e <HAL_TIM_PWM_Start+0xfe>
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	2b04      	cmp	r3, #4
 800490a:	d104      	bne.n	8004916 <HAL_TIM_PWM_Start+0xc6>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2202      	movs	r2, #2
 8004910:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004914:	e01b      	b.n	800494e <HAL_TIM_PWM_Start+0xfe>
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	2b08      	cmp	r3, #8
 800491a:	d104      	bne.n	8004926 <HAL_TIM_PWM_Start+0xd6>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2202      	movs	r2, #2
 8004920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004924:	e013      	b.n	800494e <HAL_TIM_PWM_Start+0xfe>
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	2b0c      	cmp	r3, #12
 800492a:	d104      	bne.n	8004936 <HAL_TIM_PWM_Start+0xe6>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2202      	movs	r2, #2
 8004930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004934:	e00b      	b.n	800494e <HAL_TIM_PWM_Start+0xfe>
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	2b10      	cmp	r3, #16
 800493a:	d104      	bne.n	8004946 <HAL_TIM_PWM_Start+0xf6>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2202      	movs	r2, #2
 8004940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004944:	e003      	b.n	800494e <HAL_TIM_PWM_Start+0xfe>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2202      	movs	r2, #2
 800494a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2201      	movs	r2, #1
 8004954:	6839      	ldr	r1, [r7, #0]
 8004956:	4618      	mov	r0, r3
 8004958:	f000 ff9c 	bl	8005894 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a35      	ldr	r2, [pc, #212]	; (8004a38 <HAL_TIM_PWM_Start+0x1e8>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d013      	beq.n	800498e <HAL_TIM_PWM_Start+0x13e>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a34      	ldr	r2, [pc, #208]	; (8004a3c <HAL_TIM_PWM_Start+0x1ec>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d00e      	beq.n	800498e <HAL_TIM_PWM_Start+0x13e>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a32      	ldr	r2, [pc, #200]	; (8004a40 <HAL_TIM_PWM_Start+0x1f0>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d009      	beq.n	800498e <HAL_TIM_PWM_Start+0x13e>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a31      	ldr	r2, [pc, #196]	; (8004a44 <HAL_TIM_PWM_Start+0x1f4>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d004      	beq.n	800498e <HAL_TIM_PWM_Start+0x13e>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a2f      	ldr	r2, [pc, #188]	; (8004a48 <HAL_TIM_PWM_Start+0x1f8>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d101      	bne.n	8004992 <HAL_TIM_PWM_Start+0x142>
 800498e:	2301      	movs	r3, #1
 8004990:	e000      	b.n	8004994 <HAL_TIM_PWM_Start+0x144>
 8004992:	2300      	movs	r3, #0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d007      	beq.n	80049a8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049a6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a22      	ldr	r2, [pc, #136]	; (8004a38 <HAL_TIM_PWM_Start+0x1e8>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d01d      	beq.n	80049ee <HAL_TIM_PWM_Start+0x19e>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ba:	d018      	beq.n	80049ee <HAL_TIM_PWM_Start+0x19e>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a22      	ldr	r2, [pc, #136]	; (8004a4c <HAL_TIM_PWM_Start+0x1fc>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d013      	beq.n	80049ee <HAL_TIM_PWM_Start+0x19e>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a21      	ldr	r2, [pc, #132]	; (8004a50 <HAL_TIM_PWM_Start+0x200>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d00e      	beq.n	80049ee <HAL_TIM_PWM_Start+0x19e>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a1f      	ldr	r2, [pc, #124]	; (8004a54 <HAL_TIM_PWM_Start+0x204>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d009      	beq.n	80049ee <HAL_TIM_PWM_Start+0x19e>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a17      	ldr	r2, [pc, #92]	; (8004a3c <HAL_TIM_PWM_Start+0x1ec>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d004      	beq.n	80049ee <HAL_TIM_PWM_Start+0x19e>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a15      	ldr	r2, [pc, #84]	; (8004a40 <HAL_TIM_PWM_Start+0x1f0>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d115      	bne.n	8004a1a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	689a      	ldr	r2, [r3, #8]
 80049f4:	4b18      	ldr	r3, [pc, #96]	; (8004a58 <HAL_TIM_PWM_Start+0x208>)
 80049f6:	4013      	ands	r3, r2
 80049f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2b06      	cmp	r3, #6
 80049fe:	d015      	beq.n	8004a2c <HAL_TIM_PWM_Start+0x1dc>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a06:	d011      	beq.n	8004a2c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f042 0201 	orr.w	r2, r2, #1
 8004a16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a18:	e008      	b.n	8004a2c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f042 0201 	orr.w	r2, r2, #1
 8004a28:	601a      	str	r2, [r3, #0]
 8004a2a:	e000      	b.n	8004a2e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a2c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3710      	adds	r7, #16
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	40012c00 	.word	0x40012c00
 8004a3c:	40013400 	.word	0x40013400
 8004a40:	40014000 	.word	0x40014000
 8004a44:	40014400 	.word	0x40014400
 8004a48:	40014800 	.word	0x40014800
 8004a4c:	40000400 	.word	0x40000400
 8004a50:	40000800 	.word	0x40000800
 8004a54:	40000c00 	.word	0x40000c00
 8004a58:	00010007 	.word	0x00010007

08004a5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d122      	bne.n	8004ab8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	f003 0302 	and.w	r3, r3, #2
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d11b      	bne.n	8004ab8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f06f 0202 	mvn.w	r2, #2
 8004a88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	f003 0303 	and.w	r3, r3, #3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d003      	beq.n	8004aa6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 facf 	bl	8005042 <HAL_TIM_IC_CaptureCallback>
 8004aa4:	e005      	b.n	8004ab2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 fac1 	bl	800502e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f000 fad2 	bl	8005056 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	f003 0304 	and.w	r3, r3, #4
 8004ac2:	2b04      	cmp	r3, #4
 8004ac4:	d122      	bne.n	8004b0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	f003 0304 	and.w	r3, r3, #4
 8004ad0:	2b04      	cmp	r3, #4
 8004ad2:	d11b      	bne.n	8004b0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f06f 0204 	mvn.w	r2, #4
 8004adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2202      	movs	r2, #2
 8004ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d003      	beq.n	8004afa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 faa5 	bl	8005042 <HAL_TIM_IC_CaptureCallback>
 8004af8:	e005      	b.n	8004b06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 fa97 	bl	800502e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f000 faa8 	bl	8005056 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	f003 0308 	and.w	r3, r3, #8
 8004b16:	2b08      	cmp	r3, #8
 8004b18:	d122      	bne.n	8004b60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	f003 0308 	and.w	r3, r3, #8
 8004b24:	2b08      	cmp	r3, #8
 8004b26:	d11b      	bne.n	8004b60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f06f 0208 	mvn.w	r2, #8
 8004b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2204      	movs	r2, #4
 8004b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	69db      	ldr	r3, [r3, #28]
 8004b3e:	f003 0303 	and.w	r3, r3, #3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d003      	beq.n	8004b4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 fa7b 	bl	8005042 <HAL_TIM_IC_CaptureCallback>
 8004b4c:	e005      	b.n	8004b5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 fa6d 	bl	800502e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 fa7e 	bl	8005056 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	f003 0310 	and.w	r3, r3, #16
 8004b6a:	2b10      	cmp	r3, #16
 8004b6c:	d122      	bne.n	8004bb4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	f003 0310 	and.w	r3, r3, #16
 8004b78:	2b10      	cmp	r3, #16
 8004b7a:	d11b      	bne.n	8004bb4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f06f 0210 	mvn.w	r2, #16
 8004b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2208      	movs	r2, #8
 8004b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	69db      	ldr	r3, [r3, #28]
 8004b92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d003      	beq.n	8004ba2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 fa51 	bl	8005042 <HAL_TIM_IC_CaptureCallback>
 8004ba0:	e005      	b.n	8004bae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 fa43 	bl	800502e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f000 fa54 	bl	8005056 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d10e      	bne.n	8004be0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	f003 0301 	and.w	r3, r3, #1
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d107      	bne.n	8004be0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f06f 0201 	mvn.w	r2, #1
 8004bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f7fb ff9a 	bl	8000b14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bea:	2b80      	cmp	r3, #128	; 0x80
 8004bec:	d10e      	bne.n	8004c0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bf8:	2b80      	cmp	r3, #128	; 0x80
 8004bfa:	d107      	bne.n	8004c0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 ff7a 	bl	8005b00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c1a:	d10e      	bne.n	8004c3a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c26:	2b80      	cmp	r3, #128	; 0x80
 8004c28:	d107      	bne.n	8004c3a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004c32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 ff6d 	bl	8005b14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	691b      	ldr	r3, [r3, #16]
 8004c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c44:	2b40      	cmp	r3, #64	; 0x40
 8004c46:	d10e      	bne.n	8004c66 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c52:	2b40      	cmp	r3, #64	; 0x40
 8004c54:	d107      	bne.n	8004c66 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 fa02 	bl	800506a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	f003 0320 	and.w	r3, r3, #32
 8004c70:	2b20      	cmp	r3, #32
 8004c72:	d10e      	bne.n	8004c92 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	f003 0320 	and.w	r3, r3, #32
 8004c7e:	2b20      	cmp	r3, #32
 8004c80:	d107      	bne.n	8004c92 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f06f 0220 	mvn.w	r2, #32
 8004c8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f000 ff2d 	bl	8005aec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c92:	bf00      	nop
 8004c94:	3708      	adds	r7, #8
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
	...

08004c9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d101      	bne.n	8004cb6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	e0fd      	b.n	8004eb2 <HAL_TIM_PWM_ConfigChannel+0x216>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2b14      	cmp	r3, #20
 8004cc2:	f200 80f0 	bhi.w	8004ea6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004cc6:	a201      	add	r2, pc, #4	; (adr r2, 8004ccc <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ccc:	08004d21 	.word	0x08004d21
 8004cd0:	08004ea7 	.word	0x08004ea7
 8004cd4:	08004ea7 	.word	0x08004ea7
 8004cd8:	08004ea7 	.word	0x08004ea7
 8004cdc:	08004d61 	.word	0x08004d61
 8004ce0:	08004ea7 	.word	0x08004ea7
 8004ce4:	08004ea7 	.word	0x08004ea7
 8004ce8:	08004ea7 	.word	0x08004ea7
 8004cec:	08004da3 	.word	0x08004da3
 8004cf0:	08004ea7 	.word	0x08004ea7
 8004cf4:	08004ea7 	.word	0x08004ea7
 8004cf8:	08004ea7 	.word	0x08004ea7
 8004cfc:	08004de3 	.word	0x08004de3
 8004d00:	08004ea7 	.word	0x08004ea7
 8004d04:	08004ea7 	.word	0x08004ea7
 8004d08:	08004ea7 	.word	0x08004ea7
 8004d0c:	08004e25 	.word	0x08004e25
 8004d10:	08004ea7 	.word	0x08004ea7
 8004d14:	08004ea7 	.word	0x08004ea7
 8004d18:	08004ea7 	.word	0x08004ea7
 8004d1c:	08004e65 	.word	0x08004e65
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68b9      	ldr	r1, [r7, #8]
 8004d26:	4618      	mov	r0, r3
 8004d28:	f000 fa44 	bl	80051b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	699a      	ldr	r2, [r3, #24]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f042 0208 	orr.w	r2, r2, #8
 8004d3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	699a      	ldr	r2, [r3, #24]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f022 0204 	bic.w	r2, r2, #4
 8004d4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	6999      	ldr	r1, [r3, #24]
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	691a      	ldr	r2, [r3, #16]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	619a      	str	r2, [r3, #24]
      break;
 8004d5e:	e0a3      	b.n	8004ea8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68b9      	ldr	r1, [r7, #8]
 8004d66:	4618      	mov	r0, r3
 8004d68:	f000 fab4 	bl	80052d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	699a      	ldr	r2, [r3, #24]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	699a      	ldr	r2, [r3, #24]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	6999      	ldr	r1, [r3, #24]
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	021a      	lsls	r2, r3, #8
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	619a      	str	r2, [r3, #24]
      break;
 8004da0:	e082      	b.n	8004ea8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68b9      	ldr	r1, [r7, #8]
 8004da8:	4618      	mov	r0, r3
 8004daa:	f000 fb1d 	bl	80053e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	69da      	ldr	r2, [r3, #28]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f042 0208 	orr.w	r2, r2, #8
 8004dbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	69da      	ldr	r2, [r3, #28]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f022 0204 	bic.w	r2, r2, #4
 8004dcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	69d9      	ldr	r1, [r3, #28]
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	691a      	ldr	r2, [r3, #16]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	61da      	str	r2, [r3, #28]
      break;
 8004de0:	e062      	b.n	8004ea8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68b9      	ldr	r1, [r7, #8]
 8004de8:	4618      	mov	r0, r3
 8004dea:	f000 fb85 	bl	80054f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	69da      	ldr	r2, [r3, #28]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	69da      	ldr	r2, [r3, #28]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	69d9      	ldr	r1, [r3, #28]
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	021a      	lsls	r2, r3, #8
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	430a      	orrs	r2, r1
 8004e20:	61da      	str	r2, [r3, #28]
      break;
 8004e22:	e041      	b.n	8004ea8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68b9      	ldr	r1, [r7, #8]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f000 fbce 	bl	80055cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f042 0208 	orr.w	r2, r2, #8
 8004e3e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f022 0204 	bic.w	r2, r2, #4
 8004e4e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	691a      	ldr	r2, [r3, #16]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004e62:	e021      	b.n	8004ea8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68b9      	ldr	r1, [r7, #8]
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f000 fc12 	bl	8005694 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e7e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e8e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	021a      	lsls	r2, r3, #8
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004ea4:	e000      	b.n	8004ea8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004ea6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3710      	adds	r7, #16
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop

08004ebc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d101      	bne.n	8004ed4 <HAL_TIM_ConfigClockSource+0x18>
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	e0a8      	b.n	8005026 <HAL_TIM_ConfigClockSource+0x16a>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2202      	movs	r2, #2
 8004ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ef2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ef6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004efe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2b40      	cmp	r3, #64	; 0x40
 8004f0e:	d067      	beq.n	8004fe0 <HAL_TIM_ConfigClockSource+0x124>
 8004f10:	2b40      	cmp	r3, #64	; 0x40
 8004f12:	d80b      	bhi.n	8004f2c <HAL_TIM_ConfigClockSource+0x70>
 8004f14:	2b10      	cmp	r3, #16
 8004f16:	d073      	beq.n	8005000 <HAL_TIM_ConfigClockSource+0x144>
 8004f18:	2b10      	cmp	r3, #16
 8004f1a:	d802      	bhi.n	8004f22 <HAL_TIM_ConfigClockSource+0x66>
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d06f      	beq.n	8005000 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004f20:	e078      	b.n	8005014 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004f22:	2b20      	cmp	r3, #32
 8004f24:	d06c      	beq.n	8005000 <HAL_TIM_ConfigClockSource+0x144>
 8004f26:	2b30      	cmp	r3, #48	; 0x30
 8004f28:	d06a      	beq.n	8005000 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8004f2a:	e073      	b.n	8005014 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004f2c:	2b70      	cmp	r3, #112	; 0x70
 8004f2e:	d00d      	beq.n	8004f4c <HAL_TIM_ConfigClockSource+0x90>
 8004f30:	2b70      	cmp	r3, #112	; 0x70
 8004f32:	d804      	bhi.n	8004f3e <HAL_TIM_ConfigClockSource+0x82>
 8004f34:	2b50      	cmp	r3, #80	; 0x50
 8004f36:	d033      	beq.n	8004fa0 <HAL_TIM_ConfigClockSource+0xe4>
 8004f38:	2b60      	cmp	r3, #96	; 0x60
 8004f3a:	d041      	beq.n	8004fc0 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8004f3c:	e06a      	b.n	8005014 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004f3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f42:	d066      	beq.n	8005012 <HAL_TIM_ConfigClockSource+0x156>
 8004f44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f48:	d017      	beq.n	8004f7a <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8004f4a:	e063      	b.n	8005014 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6818      	ldr	r0, [r3, #0]
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	6899      	ldr	r1, [r3, #8]
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	685a      	ldr	r2, [r3, #4]
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	f000 fc7a 	bl	8005854 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f6e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	609a      	str	r2, [r3, #8]
      break;
 8004f78:	e04c      	b.n	8005014 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6818      	ldr	r0, [r3, #0]
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	6899      	ldr	r1, [r3, #8]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	685a      	ldr	r2, [r3, #4]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	f000 fc63 	bl	8005854 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	689a      	ldr	r2, [r3, #8]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f9c:	609a      	str	r2, [r3, #8]
      break;
 8004f9e:	e039      	b.n	8005014 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6818      	ldr	r0, [r3, #0]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	6859      	ldr	r1, [r3, #4]
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	461a      	mov	r2, r3
 8004fae:	f000 fbd7 	bl	8005760 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2150      	movs	r1, #80	; 0x50
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f000 fc30 	bl	800581e <TIM_ITRx_SetConfig>
      break;
 8004fbe:	e029      	b.n	8005014 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6818      	ldr	r0, [r3, #0]
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	6859      	ldr	r1, [r3, #4]
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	461a      	mov	r2, r3
 8004fce:	f000 fbf6 	bl	80057be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2160      	movs	r1, #96	; 0x60
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f000 fc20 	bl	800581e <TIM_ITRx_SetConfig>
      break;
 8004fde:	e019      	b.n	8005014 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6818      	ldr	r0, [r3, #0]
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	6859      	ldr	r1, [r3, #4]
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	461a      	mov	r2, r3
 8004fee:	f000 fbb7 	bl	8005760 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2140      	movs	r1, #64	; 0x40
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f000 fc10 	bl	800581e <TIM_ITRx_SetConfig>
      break;
 8004ffe:	e009      	b.n	8005014 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4619      	mov	r1, r3
 800500a:	4610      	mov	r0, r2
 800500c:	f000 fc07 	bl	800581e <TIM_ITRx_SetConfig>
        break;
 8005010:	e000      	b.n	8005014 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8005012:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}

0800502e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800502e:	b480      	push	{r7}
 8005030:	b083      	sub	sp, #12
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005036:	bf00      	nop
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr

08005042 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005042:	b480      	push	{r7}
 8005044:	b083      	sub	sp, #12
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800504a:	bf00      	nop
 800504c:	370c      	adds	r7, #12
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr

08005056 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005056:	b480      	push	{r7}
 8005058:	b083      	sub	sp, #12
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800505e:	bf00      	nop
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr

0800506a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800506a:	b480      	push	{r7}
 800506c:	b083      	sub	sp, #12
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005072:	bf00      	nop
 8005074:	370c      	adds	r7, #12
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
	...

08005080 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a40      	ldr	r2, [pc, #256]	; (8005194 <TIM_Base_SetConfig+0x114>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d013      	beq.n	80050c0 <TIM_Base_SetConfig+0x40>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800509e:	d00f      	beq.n	80050c0 <TIM_Base_SetConfig+0x40>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	4a3d      	ldr	r2, [pc, #244]	; (8005198 <TIM_Base_SetConfig+0x118>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d00b      	beq.n	80050c0 <TIM_Base_SetConfig+0x40>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a3c      	ldr	r2, [pc, #240]	; (800519c <TIM_Base_SetConfig+0x11c>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d007      	beq.n	80050c0 <TIM_Base_SetConfig+0x40>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a3b      	ldr	r2, [pc, #236]	; (80051a0 <TIM_Base_SetConfig+0x120>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d003      	beq.n	80050c0 <TIM_Base_SetConfig+0x40>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a3a      	ldr	r2, [pc, #232]	; (80051a4 <TIM_Base_SetConfig+0x124>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d108      	bne.n	80050d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a2f      	ldr	r2, [pc, #188]	; (8005194 <TIM_Base_SetConfig+0x114>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d01f      	beq.n	800511a <TIM_Base_SetConfig+0x9a>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050e0:	d01b      	beq.n	800511a <TIM_Base_SetConfig+0x9a>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a2c      	ldr	r2, [pc, #176]	; (8005198 <TIM_Base_SetConfig+0x118>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d017      	beq.n	800511a <TIM_Base_SetConfig+0x9a>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a2b      	ldr	r2, [pc, #172]	; (800519c <TIM_Base_SetConfig+0x11c>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d013      	beq.n	800511a <TIM_Base_SetConfig+0x9a>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a2a      	ldr	r2, [pc, #168]	; (80051a0 <TIM_Base_SetConfig+0x120>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d00f      	beq.n	800511a <TIM_Base_SetConfig+0x9a>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a29      	ldr	r2, [pc, #164]	; (80051a4 <TIM_Base_SetConfig+0x124>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d00b      	beq.n	800511a <TIM_Base_SetConfig+0x9a>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a28      	ldr	r2, [pc, #160]	; (80051a8 <TIM_Base_SetConfig+0x128>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d007      	beq.n	800511a <TIM_Base_SetConfig+0x9a>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a27      	ldr	r2, [pc, #156]	; (80051ac <TIM_Base_SetConfig+0x12c>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d003      	beq.n	800511a <TIM_Base_SetConfig+0x9a>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a26      	ldr	r2, [pc, #152]	; (80051b0 <TIM_Base_SetConfig+0x130>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d108      	bne.n	800512c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005120:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	4313      	orrs	r3, r2
 800512a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	695b      	ldr	r3, [r3, #20]
 8005136:	4313      	orrs	r3, r2
 8005138:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	689a      	ldr	r2, [r3, #8]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a10      	ldr	r2, [pc, #64]	; (8005194 <TIM_Base_SetConfig+0x114>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d00f      	beq.n	8005178 <TIM_Base_SetConfig+0xf8>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a12      	ldr	r2, [pc, #72]	; (80051a4 <TIM_Base_SetConfig+0x124>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d00b      	beq.n	8005178 <TIM_Base_SetConfig+0xf8>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a11      	ldr	r2, [pc, #68]	; (80051a8 <TIM_Base_SetConfig+0x128>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d007      	beq.n	8005178 <TIM_Base_SetConfig+0xf8>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a10      	ldr	r2, [pc, #64]	; (80051ac <TIM_Base_SetConfig+0x12c>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d003      	beq.n	8005178 <TIM_Base_SetConfig+0xf8>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a0f      	ldr	r2, [pc, #60]	; (80051b0 <TIM_Base_SetConfig+0x130>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d103      	bne.n	8005180 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	691a      	ldr	r2, [r3, #16]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	615a      	str	r2, [r3, #20]
}
 8005186:	bf00      	nop
 8005188:	3714      	adds	r7, #20
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	40012c00 	.word	0x40012c00
 8005198:	40000400 	.word	0x40000400
 800519c:	40000800 	.word	0x40000800
 80051a0:	40000c00 	.word	0x40000c00
 80051a4:	40013400 	.word	0x40013400
 80051a8:	40014000 	.word	0x40014000
 80051ac:	40014400 	.word	0x40014400
 80051b0:	40014800 	.word	0x40014800

080051b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b087      	sub	sp, #28
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	f023 0201 	bic.w	r2, r3, #1
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f023 0303 	bic.w	r3, r3, #3
 80051ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68fa      	ldr	r2, [r7, #12]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	f023 0302 	bic.w	r3, r3, #2
 8005200:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	4313      	orrs	r3, r2
 800520a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a2c      	ldr	r2, [pc, #176]	; (80052c0 <TIM_OC1_SetConfig+0x10c>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d00f      	beq.n	8005234 <TIM_OC1_SetConfig+0x80>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a2b      	ldr	r2, [pc, #172]	; (80052c4 <TIM_OC1_SetConfig+0x110>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d00b      	beq.n	8005234 <TIM_OC1_SetConfig+0x80>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a2a      	ldr	r2, [pc, #168]	; (80052c8 <TIM_OC1_SetConfig+0x114>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d007      	beq.n	8005234 <TIM_OC1_SetConfig+0x80>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a29      	ldr	r2, [pc, #164]	; (80052cc <TIM_OC1_SetConfig+0x118>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d003      	beq.n	8005234 <TIM_OC1_SetConfig+0x80>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a28      	ldr	r2, [pc, #160]	; (80052d0 <TIM_OC1_SetConfig+0x11c>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d10c      	bne.n	800524e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	f023 0308 	bic.w	r3, r3, #8
 800523a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	4313      	orrs	r3, r2
 8005244:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	f023 0304 	bic.w	r3, r3, #4
 800524c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a1b      	ldr	r2, [pc, #108]	; (80052c0 <TIM_OC1_SetConfig+0x10c>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d00f      	beq.n	8005276 <TIM_OC1_SetConfig+0xc2>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a1a      	ldr	r2, [pc, #104]	; (80052c4 <TIM_OC1_SetConfig+0x110>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d00b      	beq.n	8005276 <TIM_OC1_SetConfig+0xc2>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a19      	ldr	r2, [pc, #100]	; (80052c8 <TIM_OC1_SetConfig+0x114>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d007      	beq.n	8005276 <TIM_OC1_SetConfig+0xc2>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a18      	ldr	r2, [pc, #96]	; (80052cc <TIM_OC1_SetConfig+0x118>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d003      	beq.n	8005276 <TIM_OC1_SetConfig+0xc2>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a17      	ldr	r2, [pc, #92]	; (80052d0 <TIM_OC1_SetConfig+0x11c>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d111      	bne.n	800529a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800527c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005284:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	4313      	orrs	r3, r2
 800528e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	693a      	ldr	r2, [r7, #16]
 8005296:	4313      	orrs	r3, r2
 8005298:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	685a      	ldr	r2, [r3, #4]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	697a      	ldr	r2, [r7, #20]
 80052b2:	621a      	str	r2, [r3, #32]
}
 80052b4:	bf00      	nop
 80052b6:	371c      	adds	r7, #28
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr
 80052c0:	40012c00 	.word	0x40012c00
 80052c4:	40013400 	.word	0x40013400
 80052c8:	40014000 	.word	0x40014000
 80052cc:	40014400 	.word	0x40014400
 80052d0:	40014800 	.word	0x40014800

080052d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b087      	sub	sp, #28
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	f023 0210 	bic.w	r2, r3, #16
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a1b      	ldr	r3, [r3, #32]
 80052ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005302:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800530e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	021b      	lsls	r3, r3, #8
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	4313      	orrs	r3, r2
 800531a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	f023 0320 	bic.w	r3, r3, #32
 8005322:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	011b      	lsls	r3, r3, #4
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	4313      	orrs	r3, r2
 800532e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a28      	ldr	r2, [pc, #160]	; (80053d4 <TIM_OC2_SetConfig+0x100>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d003      	beq.n	8005340 <TIM_OC2_SetConfig+0x6c>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a27      	ldr	r2, [pc, #156]	; (80053d8 <TIM_OC2_SetConfig+0x104>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d10d      	bne.n	800535c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005346:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	011b      	lsls	r3, r3, #4
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	4313      	orrs	r3, r2
 8005352:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800535a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a1d      	ldr	r2, [pc, #116]	; (80053d4 <TIM_OC2_SetConfig+0x100>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d00f      	beq.n	8005384 <TIM_OC2_SetConfig+0xb0>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a1c      	ldr	r2, [pc, #112]	; (80053d8 <TIM_OC2_SetConfig+0x104>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d00b      	beq.n	8005384 <TIM_OC2_SetConfig+0xb0>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a1b      	ldr	r2, [pc, #108]	; (80053dc <TIM_OC2_SetConfig+0x108>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d007      	beq.n	8005384 <TIM_OC2_SetConfig+0xb0>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4a1a      	ldr	r2, [pc, #104]	; (80053e0 <TIM_OC2_SetConfig+0x10c>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d003      	beq.n	8005384 <TIM_OC2_SetConfig+0xb0>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a19      	ldr	r2, [pc, #100]	; (80053e4 <TIM_OC2_SetConfig+0x110>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d113      	bne.n	80053ac <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800538a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005392:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	695b      	ldr	r3, [r3, #20]
 8005398:	009b      	lsls	r3, r3, #2
 800539a:	693a      	ldr	r2, [r7, #16]
 800539c:	4313      	orrs	r3, r2
 800539e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	699b      	ldr	r3, [r3, #24]
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	693a      	ldr	r2, [r7, #16]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	693a      	ldr	r2, [r7, #16]
 80053b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	685a      	ldr	r2, [r3, #4]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	621a      	str	r2, [r3, #32]
}
 80053c6:	bf00      	nop
 80053c8:	371c      	adds	r7, #28
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	40012c00 	.word	0x40012c00
 80053d8:	40013400 	.word	0x40013400
 80053dc:	40014000 	.word	0x40014000
 80053e0:	40014400 	.word	0x40014400
 80053e4:	40014800 	.word	0x40014800

080053e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b087      	sub	sp, #28
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	69db      	ldr	r3, [r3, #28]
 800540e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800541a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f023 0303 	bic.w	r3, r3, #3
 8005422:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	4313      	orrs	r3, r2
 800542c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005434:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	021b      	lsls	r3, r3, #8
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	4313      	orrs	r3, r2
 8005440:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a27      	ldr	r2, [pc, #156]	; (80054e4 <TIM_OC3_SetConfig+0xfc>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d003      	beq.n	8005452 <TIM_OC3_SetConfig+0x6a>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a26      	ldr	r2, [pc, #152]	; (80054e8 <TIM_OC3_SetConfig+0x100>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d10d      	bne.n	800546e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005458:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	021b      	lsls	r3, r3, #8
 8005460:	697a      	ldr	r2, [r7, #20]
 8005462:	4313      	orrs	r3, r2
 8005464:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800546c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a1c      	ldr	r2, [pc, #112]	; (80054e4 <TIM_OC3_SetConfig+0xfc>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d00f      	beq.n	8005496 <TIM_OC3_SetConfig+0xae>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a1b      	ldr	r2, [pc, #108]	; (80054e8 <TIM_OC3_SetConfig+0x100>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d00b      	beq.n	8005496 <TIM_OC3_SetConfig+0xae>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a1a      	ldr	r2, [pc, #104]	; (80054ec <TIM_OC3_SetConfig+0x104>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d007      	beq.n	8005496 <TIM_OC3_SetConfig+0xae>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a19      	ldr	r2, [pc, #100]	; (80054f0 <TIM_OC3_SetConfig+0x108>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d003      	beq.n	8005496 <TIM_OC3_SetConfig+0xae>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a18      	ldr	r2, [pc, #96]	; (80054f4 <TIM_OC3_SetConfig+0x10c>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d113      	bne.n	80054be <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800549c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	011b      	lsls	r3, r3, #4
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	011b      	lsls	r3, r3, #4
 80054b8:	693a      	ldr	r2, [r7, #16]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	693a      	ldr	r2, [r7, #16]
 80054c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	685a      	ldr	r2, [r3, #4]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	697a      	ldr	r2, [r7, #20]
 80054d6:	621a      	str	r2, [r3, #32]
}
 80054d8:	bf00      	nop
 80054da:	371c      	adds	r7, #28
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr
 80054e4:	40012c00 	.word	0x40012c00
 80054e8:	40013400 	.word	0x40013400
 80054ec:	40014000 	.word	0x40014000
 80054f0:	40014400 	.word	0x40014400
 80054f4:	40014800 	.word	0x40014800

080054f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b087      	sub	sp, #28
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a1b      	ldr	r3, [r3, #32]
 8005506:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a1b      	ldr	r3, [r3, #32]
 8005512:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	69db      	ldr	r3, [r3, #28]
 800551e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800552a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005532:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	021b      	lsls	r3, r3, #8
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	4313      	orrs	r3, r2
 800553e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005546:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	031b      	lsls	r3, r3, #12
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	4313      	orrs	r3, r2
 8005552:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a18      	ldr	r2, [pc, #96]	; (80055b8 <TIM_OC4_SetConfig+0xc0>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d00f      	beq.n	800557c <TIM_OC4_SetConfig+0x84>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a17      	ldr	r2, [pc, #92]	; (80055bc <TIM_OC4_SetConfig+0xc4>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d00b      	beq.n	800557c <TIM_OC4_SetConfig+0x84>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a16      	ldr	r2, [pc, #88]	; (80055c0 <TIM_OC4_SetConfig+0xc8>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d007      	beq.n	800557c <TIM_OC4_SetConfig+0x84>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a15      	ldr	r2, [pc, #84]	; (80055c4 <TIM_OC4_SetConfig+0xcc>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d003      	beq.n	800557c <TIM_OC4_SetConfig+0x84>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a14      	ldr	r2, [pc, #80]	; (80055c8 <TIM_OC4_SetConfig+0xd0>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d109      	bne.n	8005590 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005582:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	695b      	ldr	r3, [r3, #20]
 8005588:	019b      	lsls	r3, r3, #6
 800558a:	697a      	ldr	r2, [r7, #20]
 800558c:	4313      	orrs	r3, r2
 800558e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	697a      	ldr	r2, [r7, #20]
 8005594:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	685a      	ldr	r2, [r3, #4]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	693a      	ldr	r2, [r7, #16]
 80055a8:	621a      	str	r2, [r3, #32]
}
 80055aa:	bf00      	nop
 80055ac:	371c      	adds	r7, #28
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
 80055b6:	bf00      	nop
 80055b8:	40012c00 	.word	0x40012c00
 80055bc:	40013400 	.word	0x40013400
 80055c0:	40014000 	.word	0x40014000
 80055c4:	40014400 	.word	0x40014400
 80055c8:	40014800 	.word	0x40014800

080055cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b087      	sub	sp, #28
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a1b      	ldr	r3, [r3, #32]
 80055da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a1b      	ldr	r3, [r3, #32]
 80055e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	4313      	orrs	r3, r2
 8005608:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005610:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	041b      	lsls	r3, r3, #16
 8005618:	693a      	ldr	r2, [r7, #16]
 800561a:	4313      	orrs	r3, r2
 800561c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a17      	ldr	r2, [pc, #92]	; (8005680 <TIM_OC5_SetConfig+0xb4>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d00f      	beq.n	8005646 <TIM_OC5_SetConfig+0x7a>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a16      	ldr	r2, [pc, #88]	; (8005684 <TIM_OC5_SetConfig+0xb8>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d00b      	beq.n	8005646 <TIM_OC5_SetConfig+0x7a>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a15      	ldr	r2, [pc, #84]	; (8005688 <TIM_OC5_SetConfig+0xbc>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d007      	beq.n	8005646 <TIM_OC5_SetConfig+0x7a>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a14      	ldr	r2, [pc, #80]	; (800568c <TIM_OC5_SetConfig+0xc0>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d003      	beq.n	8005646 <TIM_OC5_SetConfig+0x7a>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a13      	ldr	r2, [pc, #76]	; (8005690 <TIM_OC5_SetConfig+0xc4>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d109      	bne.n	800565a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800564c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	695b      	ldr	r3, [r3, #20]
 8005652:	021b      	lsls	r3, r3, #8
 8005654:	697a      	ldr	r2, [r7, #20]
 8005656:	4313      	orrs	r3, r2
 8005658:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	697a      	ldr	r2, [r7, #20]
 800565e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	685a      	ldr	r2, [r3, #4]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	693a      	ldr	r2, [r7, #16]
 8005672:	621a      	str	r2, [r3, #32]
}
 8005674:	bf00      	nop
 8005676:	371c      	adds	r7, #28
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr
 8005680:	40012c00 	.word	0x40012c00
 8005684:	40013400 	.word	0x40013400
 8005688:	40014000 	.word	0x40014000
 800568c:	40014400 	.word	0x40014400
 8005690:	40014800 	.word	0x40014800

08005694 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005694:	b480      	push	{r7}
 8005696:	b087      	sub	sp, #28
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a1b      	ldr	r3, [r3, #32]
 80056a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a1b      	ldr	r3, [r3, #32]
 80056ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	021b      	lsls	r3, r3, #8
 80056ce:	68fa      	ldr	r2, [r7, #12]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80056da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	051b      	lsls	r3, r3, #20
 80056e2:	693a      	ldr	r2, [r7, #16]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a18      	ldr	r2, [pc, #96]	; (800574c <TIM_OC6_SetConfig+0xb8>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d00f      	beq.n	8005710 <TIM_OC6_SetConfig+0x7c>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a17      	ldr	r2, [pc, #92]	; (8005750 <TIM_OC6_SetConfig+0xbc>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d00b      	beq.n	8005710 <TIM_OC6_SetConfig+0x7c>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a16      	ldr	r2, [pc, #88]	; (8005754 <TIM_OC6_SetConfig+0xc0>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d007      	beq.n	8005710 <TIM_OC6_SetConfig+0x7c>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a15      	ldr	r2, [pc, #84]	; (8005758 <TIM_OC6_SetConfig+0xc4>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d003      	beq.n	8005710 <TIM_OC6_SetConfig+0x7c>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a14      	ldr	r2, [pc, #80]	; (800575c <TIM_OC6_SetConfig+0xc8>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d109      	bne.n	8005724 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005716:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	695b      	ldr	r3, [r3, #20]
 800571c:	029b      	lsls	r3, r3, #10
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	4313      	orrs	r3, r2
 8005722:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	697a      	ldr	r2, [r7, #20]
 8005728:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	685a      	ldr	r2, [r3, #4]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	693a      	ldr	r2, [r7, #16]
 800573c:	621a      	str	r2, [r3, #32]
}
 800573e:	bf00      	nop
 8005740:	371c      	adds	r7, #28
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	40012c00 	.word	0x40012c00
 8005750:	40013400 	.word	0x40013400
 8005754:	40014000 	.word	0x40014000
 8005758:	40014400 	.word	0x40014400
 800575c:	40014800 	.word	0x40014800

08005760 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005760:	b480      	push	{r7}
 8005762:	b087      	sub	sp, #28
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6a1b      	ldr	r3, [r3, #32]
 8005770:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6a1b      	ldr	r3, [r3, #32]
 8005776:	f023 0201 	bic.w	r2, r3, #1
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800578a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	011b      	lsls	r3, r3, #4
 8005790:	693a      	ldr	r2, [r7, #16]
 8005792:	4313      	orrs	r3, r2
 8005794:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	f023 030a 	bic.w	r3, r3, #10
 800579c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	693a      	ldr	r2, [r7, #16]
 80057aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	697a      	ldr	r2, [r7, #20]
 80057b0:	621a      	str	r2, [r3, #32]
}
 80057b2:	bf00      	nop
 80057b4:	371c      	adds	r7, #28
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr

080057be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057be:	b480      	push	{r7}
 80057c0:	b087      	sub	sp, #28
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	60f8      	str	r0, [r7, #12]
 80057c6:	60b9      	str	r1, [r7, #8]
 80057c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	f023 0210 	bic.w	r2, r3, #16
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6a1b      	ldr	r3, [r3, #32]
 80057e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	031b      	lsls	r3, r3, #12
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	011b      	lsls	r3, r3, #4
 8005800:	693a      	ldr	r2, [r7, #16]
 8005802:	4313      	orrs	r3, r2
 8005804:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	697a      	ldr	r2, [r7, #20]
 800580a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	621a      	str	r2, [r3, #32]
}
 8005812:	bf00      	nop
 8005814:	371c      	adds	r7, #28
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr

0800581e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800581e:	b480      	push	{r7}
 8005820:	b085      	sub	sp, #20
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
 8005826:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005834:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005836:	683a      	ldr	r2, [r7, #0]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	4313      	orrs	r3, r2
 800583c:	f043 0307 	orr.w	r3, r3, #7
 8005840:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	609a      	str	r2, [r3, #8]
}
 8005848:	bf00      	nop
 800584a:	3714      	adds	r7, #20
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005854:	b480      	push	{r7}
 8005856:	b087      	sub	sp, #28
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	607a      	str	r2, [r7, #4]
 8005860:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800586e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	021a      	lsls	r2, r3, #8
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	431a      	orrs	r2, r3
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	4313      	orrs	r3, r2
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	4313      	orrs	r3, r2
 8005880:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	609a      	str	r2, [r3, #8]
}
 8005888:	bf00      	nop
 800588a:	371c      	adds	r7, #28
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005894:	b480      	push	{r7}
 8005896:	b087      	sub	sp, #28
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	f003 031f 	and.w	r3, r3, #31
 80058a6:	2201      	movs	r2, #1
 80058a8:	fa02 f303 	lsl.w	r3, r2, r3
 80058ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6a1a      	ldr	r2, [r3, #32]
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	43db      	mvns	r3, r3
 80058b6:	401a      	ands	r2, r3
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6a1a      	ldr	r2, [r3, #32]
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	f003 031f 	and.w	r3, r3, #31
 80058c6:	6879      	ldr	r1, [r7, #4]
 80058c8:	fa01 f303 	lsl.w	r3, r1, r3
 80058cc:	431a      	orrs	r2, r3
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	621a      	str	r2, [r3, #32]
}
 80058d2:	bf00      	nop
 80058d4:	371c      	adds	r7, #28
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr
	...

080058e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d101      	bne.n	80058f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058f4:	2302      	movs	r3, #2
 80058f6:	e068      	b.n	80059ca <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2202      	movs	r2, #2
 8005904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a2e      	ldr	r2, [pc, #184]	; (80059d8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d004      	beq.n	800592c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a2d      	ldr	r2, [pc, #180]	; (80059dc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d108      	bne.n	800593e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005932:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	4313      	orrs	r3, r2
 800593c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005944:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	4313      	orrs	r3, r2
 800594e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a1e      	ldr	r2, [pc, #120]	; (80059d8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d01d      	beq.n	800599e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800596a:	d018      	beq.n	800599e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a1b      	ldr	r2, [pc, #108]	; (80059e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d013      	beq.n	800599e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a1a      	ldr	r2, [pc, #104]	; (80059e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d00e      	beq.n	800599e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a18      	ldr	r2, [pc, #96]	; (80059e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d009      	beq.n	800599e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a13      	ldr	r2, [pc, #76]	; (80059dc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d004      	beq.n	800599e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a14      	ldr	r2, [pc, #80]	; (80059ec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d10c      	bne.n	80059b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	68ba      	ldr	r2, [r7, #8]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68ba      	ldr	r2, [r7, #8]
 80059b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059c8:	2300      	movs	r3, #0
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3714      	adds	r7, #20
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	40012c00 	.word	0x40012c00
 80059dc:	40013400 	.word	0x40013400
 80059e0:	40000400 	.word	0x40000400
 80059e4:	40000800 	.word	0x40000800
 80059e8:	40000c00 	.word	0x40000c00
 80059ec:	40014000 	.word	0x40014000

080059f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80059fa:	2300      	movs	r3, #0
 80059fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d101      	bne.n	8005a0c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005a08:	2302      	movs	r3, #2
 8005a0a:	e065      	b.n	8005ad8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	695b      	ldr	r3, [r3, #20]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a72:	4313      	orrs	r3, r2
 8005a74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	699b      	ldr	r3, [r3, #24]
 8005a80:	041b      	lsls	r3, r3, #16
 8005a82:	4313      	orrs	r3, r2
 8005a84:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a16      	ldr	r2, [pc, #88]	; (8005ae4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d004      	beq.n	8005a9a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a14      	ldr	r2, [pc, #80]	; (8005ae8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d115      	bne.n	8005ac6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa4:	051b      	lsls	r3, r3, #20
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	69db      	ldr	r3, [r3, #28]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	6a1b      	ldr	r3, [r3, #32]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3714      	adds	r7, #20
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr
 8005ae4:	40012c00 	.word	0x40012c00
 8005ae8:	40013400 	.word	0x40013400

08005aec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005af4:	bf00      	nop
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b08:	bf00      	nop
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b1c:	bf00      	nop
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d101      	bne.n	8005b3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e040      	b.n	8005bbc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d106      	bne.n	8005b50 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f7fb f942 	bl	8000dd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2224      	movs	r2, #36	; 0x24
 8005b54:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f022 0201 	bic.w	r2, r2, #1
 8005b64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 f82c 	bl	8005bc4 <UART_SetConfig>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d101      	bne.n	8005b76 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e022      	b.n	8005bbc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d002      	beq.n	8005b84 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 faaa 	bl	80060d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	685a      	ldr	r2, [r3, #4]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	689a      	ldr	r2, [r3, #8]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ba2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f042 0201 	orr.w	r2, r2, #1
 8005bb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 fb31 	bl	800621c <UART_CheckIdleState>
 8005bba:	4603      	mov	r3, r0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3708      	adds	r7, #8
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bc4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005bc8:	b088      	sub	sp, #32
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	689a      	ldr	r2, [r3, #8]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	431a      	orrs	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	695b      	ldr	r3, [r3, #20]
 8005be0:	431a      	orrs	r2, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	69db      	ldr	r3, [r3, #28]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	4bac      	ldr	r3, [pc, #688]	; (8005ea4 <UART_SetConfig+0x2e0>)
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	6812      	ldr	r2, [r2, #0]
 8005bf8:	69f9      	ldr	r1, [r7, #28]
 8005bfa:	430b      	orrs	r3, r1
 8005bfc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	68da      	ldr	r2, [r3, #12]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	430a      	orrs	r2, r1
 8005c12:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	699b      	ldr	r3, [r3, #24]
 8005c18:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4aa2      	ldr	r2, [pc, #648]	; (8005ea8 <UART_SetConfig+0x2e4>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d004      	beq.n	8005c2e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a1b      	ldr	r3, [r3, #32]
 8005c28:	69fa      	ldr	r2, [r7, #28]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	69fa      	ldr	r2, [r7, #28]
 8005c3e:	430a      	orrs	r2, r1
 8005c40:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a99      	ldr	r2, [pc, #612]	; (8005eac <UART_SetConfig+0x2e8>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d121      	bne.n	8005c90 <UART_SetConfig+0xcc>
 8005c4c:	4b98      	ldr	r3, [pc, #608]	; (8005eb0 <UART_SetConfig+0x2ec>)
 8005c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c52:	f003 0303 	and.w	r3, r3, #3
 8005c56:	2b03      	cmp	r3, #3
 8005c58:	d816      	bhi.n	8005c88 <UART_SetConfig+0xc4>
 8005c5a:	a201      	add	r2, pc, #4	; (adr r2, 8005c60 <UART_SetConfig+0x9c>)
 8005c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c60:	08005c71 	.word	0x08005c71
 8005c64:	08005c7d 	.word	0x08005c7d
 8005c68:	08005c77 	.word	0x08005c77
 8005c6c:	08005c83 	.word	0x08005c83
 8005c70:	2301      	movs	r3, #1
 8005c72:	76fb      	strb	r3, [r7, #27]
 8005c74:	e0e8      	b.n	8005e48 <UART_SetConfig+0x284>
 8005c76:	2302      	movs	r3, #2
 8005c78:	76fb      	strb	r3, [r7, #27]
 8005c7a:	e0e5      	b.n	8005e48 <UART_SetConfig+0x284>
 8005c7c:	2304      	movs	r3, #4
 8005c7e:	76fb      	strb	r3, [r7, #27]
 8005c80:	e0e2      	b.n	8005e48 <UART_SetConfig+0x284>
 8005c82:	2308      	movs	r3, #8
 8005c84:	76fb      	strb	r3, [r7, #27]
 8005c86:	e0df      	b.n	8005e48 <UART_SetConfig+0x284>
 8005c88:	2310      	movs	r3, #16
 8005c8a:	76fb      	strb	r3, [r7, #27]
 8005c8c:	bf00      	nop
 8005c8e:	e0db      	b.n	8005e48 <UART_SetConfig+0x284>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a87      	ldr	r2, [pc, #540]	; (8005eb4 <UART_SetConfig+0x2f0>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d134      	bne.n	8005d04 <UART_SetConfig+0x140>
 8005c9a:	4b85      	ldr	r3, [pc, #532]	; (8005eb0 <UART_SetConfig+0x2ec>)
 8005c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ca0:	f003 030c 	and.w	r3, r3, #12
 8005ca4:	2b0c      	cmp	r3, #12
 8005ca6:	d829      	bhi.n	8005cfc <UART_SetConfig+0x138>
 8005ca8:	a201      	add	r2, pc, #4	; (adr r2, 8005cb0 <UART_SetConfig+0xec>)
 8005caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cae:	bf00      	nop
 8005cb0:	08005ce5 	.word	0x08005ce5
 8005cb4:	08005cfd 	.word	0x08005cfd
 8005cb8:	08005cfd 	.word	0x08005cfd
 8005cbc:	08005cfd 	.word	0x08005cfd
 8005cc0:	08005cf1 	.word	0x08005cf1
 8005cc4:	08005cfd 	.word	0x08005cfd
 8005cc8:	08005cfd 	.word	0x08005cfd
 8005ccc:	08005cfd 	.word	0x08005cfd
 8005cd0:	08005ceb 	.word	0x08005ceb
 8005cd4:	08005cfd 	.word	0x08005cfd
 8005cd8:	08005cfd 	.word	0x08005cfd
 8005cdc:	08005cfd 	.word	0x08005cfd
 8005ce0:	08005cf7 	.word	0x08005cf7
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	76fb      	strb	r3, [r7, #27]
 8005ce8:	e0ae      	b.n	8005e48 <UART_SetConfig+0x284>
 8005cea:	2302      	movs	r3, #2
 8005cec:	76fb      	strb	r3, [r7, #27]
 8005cee:	e0ab      	b.n	8005e48 <UART_SetConfig+0x284>
 8005cf0:	2304      	movs	r3, #4
 8005cf2:	76fb      	strb	r3, [r7, #27]
 8005cf4:	e0a8      	b.n	8005e48 <UART_SetConfig+0x284>
 8005cf6:	2308      	movs	r3, #8
 8005cf8:	76fb      	strb	r3, [r7, #27]
 8005cfa:	e0a5      	b.n	8005e48 <UART_SetConfig+0x284>
 8005cfc:	2310      	movs	r3, #16
 8005cfe:	76fb      	strb	r3, [r7, #27]
 8005d00:	bf00      	nop
 8005d02:	e0a1      	b.n	8005e48 <UART_SetConfig+0x284>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a6b      	ldr	r2, [pc, #428]	; (8005eb8 <UART_SetConfig+0x2f4>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d120      	bne.n	8005d50 <UART_SetConfig+0x18c>
 8005d0e:	4b68      	ldr	r3, [pc, #416]	; (8005eb0 <UART_SetConfig+0x2ec>)
 8005d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d14:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005d18:	2b10      	cmp	r3, #16
 8005d1a:	d00f      	beq.n	8005d3c <UART_SetConfig+0x178>
 8005d1c:	2b10      	cmp	r3, #16
 8005d1e:	d802      	bhi.n	8005d26 <UART_SetConfig+0x162>
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d005      	beq.n	8005d30 <UART_SetConfig+0x16c>
 8005d24:	e010      	b.n	8005d48 <UART_SetConfig+0x184>
 8005d26:	2b20      	cmp	r3, #32
 8005d28:	d005      	beq.n	8005d36 <UART_SetConfig+0x172>
 8005d2a:	2b30      	cmp	r3, #48	; 0x30
 8005d2c:	d009      	beq.n	8005d42 <UART_SetConfig+0x17e>
 8005d2e:	e00b      	b.n	8005d48 <UART_SetConfig+0x184>
 8005d30:	2300      	movs	r3, #0
 8005d32:	76fb      	strb	r3, [r7, #27]
 8005d34:	e088      	b.n	8005e48 <UART_SetConfig+0x284>
 8005d36:	2302      	movs	r3, #2
 8005d38:	76fb      	strb	r3, [r7, #27]
 8005d3a:	e085      	b.n	8005e48 <UART_SetConfig+0x284>
 8005d3c:	2304      	movs	r3, #4
 8005d3e:	76fb      	strb	r3, [r7, #27]
 8005d40:	e082      	b.n	8005e48 <UART_SetConfig+0x284>
 8005d42:	2308      	movs	r3, #8
 8005d44:	76fb      	strb	r3, [r7, #27]
 8005d46:	e07f      	b.n	8005e48 <UART_SetConfig+0x284>
 8005d48:	2310      	movs	r3, #16
 8005d4a:	76fb      	strb	r3, [r7, #27]
 8005d4c:	bf00      	nop
 8005d4e:	e07b      	b.n	8005e48 <UART_SetConfig+0x284>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a59      	ldr	r2, [pc, #356]	; (8005ebc <UART_SetConfig+0x2f8>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d120      	bne.n	8005d9c <UART_SetConfig+0x1d8>
 8005d5a:	4b55      	ldr	r3, [pc, #340]	; (8005eb0 <UART_SetConfig+0x2ec>)
 8005d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d60:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005d64:	2b40      	cmp	r3, #64	; 0x40
 8005d66:	d00f      	beq.n	8005d88 <UART_SetConfig+0x1c4>
 8005d68:	2b40      	cmp	r3, #64	; 0x40
 8005d6a:	d802      	bhi.n	8005d72 <UART_SetConfig+0x1ae>
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d005      	beq.n	8005d7c <UART_SetConfig+0x1b8>
 8005d70:	e010      	b.n	8005d94 <UART_SetConfig+0x1d0>
 8005d72:	2b80      	cmp	r3, #128	; 0x80
 8005d74:	d005      	beq.n	8005d82 <UART_SetConfig+0x1be>
 8005d76:	2bc0      	cmp	r3, #192	; 0xc0
 8005d78:	d009      	beq.n	8005d8e <UART_SetConfig+0x1ca>
 8005d7a:	e00b      	b.n	8005d94 <UART_SetConfig+0x1d0>
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	76fb      	strb	r3, [r7, #27]
 8005d80:	e062      	b.n	8005e48 <UART_SetConfig+0x284>
 8005d82:	2302      	movs	r3, #2
 8005d84:	76fb      	strb	r3, [r7, #27]
 8005d86:	e05f      	b.n	8005e48 <UART_SetConfig+0x284>
 8005d88:	2304      	movs	r3, #4
 8005d8a:	76fb      	strb	r3, [r7, #27]
 8005d8c:	e05c      	b.n	8005e48 <UART_SetConfig+0x284>
 8005d8e:	2308      	movs	r3, #8
 8005d90:	76fb      	strb	r3, [r7, #27]
 8005d92:	e059      	b.n	8005e48 <UART_SetConfig+0x284>
 8005d94:	2310      	movs	r3, #16
 8005d96:	76fb      	strb	r3, [r7, #27]
 8005d98:	bf00      	nop
 8005d9a:	e055      	b.n	8005e48 <UART_SetConfig+0x284>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a47      	ldr	r2, [pc, #284]	; (8005ec0 <UART_SetConfig+0x2fc>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d124      	bne.n	8005df0 <UART_SetConfig+0x22c>
 8005da6:	4b42      	ldr	r3, [pc, #264]	; (8005eb0 <UART_SetConfig+0x2ec>)
 8005da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005db0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005db4:	d012      	beq.n	8005ddc <UART_SetConfig+0x218>
 8005db6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dba:	d802      	bhi.n	8005dc2 <UART_SetConfig+0x1fe>
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d007      	beq.n	8005dd0 <UART_SetConfig+0x20c>
 8005dc0:	e012      	b.n	8005de8 <UART_SetConfig+0x224>
 8005dc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dc6:	d006      	beq.n	8005dd6 <UART_SetConfig+0x212>
 8005dc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dcc:	d009      	beq.n	8005de2 <UART_SetConfig+0x21e>
 8005dce:	e00b      	b.n	8005de8 <UART_SetConfig+0x224>
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	76fb      	strb	r3, [r7, #27]
 8005dd4:	e038      	b.n	8005e48 <UART_SetConfig+0x284>
 8005dd6:	2302      	movs	r3, #2
 8005dd8:	76fb      	strb	r3, [r7, #27]
 8005dda:	e035      	b.n	8005e48 <UART_SetConfig+0x284>
 8005ddc:	2304      	movs	r3, #4
 8005dde:	76fb      	strb	r3, [r7, #27]
 8005de0:	e032      	b.n	8005e48 <UART_SetConfig+0x284>
 8005de2:	2308      	movs	r3, #8
 8005de4:	76fb      	strb	r3, [r7, #27]
 8005de6:	e02f      	b.n	8005e48 <UART_SetConfig+0x284>
 8005de8:	2310      	movs	r3, #16
 8005dea:	76fb      	strb	r3, [r7, #27]
 8005dec:	bf00      	nop
 8005dee:	e02b      	b.n	8005e48 <UART_SetConfig+0x284>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a2c      	ldr	r2, [pc, #176]	; (8005ea8 <UART_SetConfig+0x2e4>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d124      	bne.n	8005e44 <UART_SetConfig+0x280>
 8005dfa:	4b2d      	ldr	r3, [pc, #180]	; (8005eb0 <UART_SetConfig+0x2ec>)
 8005dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e08:	d012      	beq.n	8005e30 <UART_SetConfig+0x26c>
 8005e0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e0e:	d802      	bhi.n	8005e16 <UART_SetConfig+0x252>
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d007      	beq.n	8005e24 <UART_SetConfig+0x260>
 8005e14:	e012      	b.n	8005e3c <UART_SetConfig+0x278>
 8005e16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e1a:	d006      	beq.n	8005e2a <UART_SetConfig+0x266>
 8005e1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e20:	d009      	beq.n	8005e36 <UART_SetConfig+0x272>
 8005e22:	e00b      	b.n	8005e3c <UART_SetConfig+0x278>
 8005e24:	2300      	movs	r3, #0
 8005e26:	76fb      	strb	r3, [r7, #27]
 8005e28:	e00e      	b.n	8005e48 <UART_SetConfig+0x284>
 8005e2a:	2302      	movs	r3, #2
 8005e2c:	76fb      	strb	r3, [r7, #27]
 8005e2e:	e00b      	b.n	8005e48 <UART_SetConfig+0x284>
 8005e30:	2304      	movs	r3, #4
 8005e32:	76fb      	strb	r3, [r7, #27]
 8005e34:	e008      	b.n	8005e48 <UART_SetConfig+0x284>
 8005e36:	2308      	movs	r3, #8
 8005e38:	76fb      	strb	r3, [r7, #27]
 8005e3a:	e005      	b.n	8005e48 <UART_SetConfig+0x284>
 8005e3c:	2310      	movs	r3, #16
 8005e3e:	76fb      	strb	r3, [r7, #27]
 8005e40:	bf00      	nop
 8005e42:	e001      	b.n	8005e48 <UART_SetConfig+0x284>
 8005e44:	2310      	movs	r3, #16
 8005e46:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a16      	ldr	r2, [pc, #88]	; (8005ea8 <UART_SetConfig+0x2e4>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	f040 8087 	bne.w	8005f62 <UART_SetConfig+0x39e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e54:	7efb      	ldrb	r3, [r7, #27]
 8005e56:	2b08      	cmp	r3, #8
 8005e58:	d836      	bhi.n	8005ec8 <UART_SetConfig+0x304>
 8005e5a:	a201      	add	r2, pc, #4	; (adr r2, 8005e60 <UART_SetConfig+0x29c>)
 8005e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e60:	08005e85 	.word	0x08005e85
 8005e64:	08005ec9 	.word	0x08005ec9
 8005e68:	08005e8d 	.word	0x08005e8d
 8005e6c:	08005ec9 	.word	0x08005ec9
 8005e70:	08005e93 	.word	0x08005e93
 8005e74:	08005ec9 	.word	0x08005ec9
 8005e78:	08005ec9 	.word	0x08005ec9
 8005e7c:	08005ec9 	.word	0x08005ec9
 8005e80:	08005e9b 	.word	0x08005e9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e84:	f7fd fe7e 	bl	8003b84 <HAL_RCC_GetPCLK1Freq>
 8005e88:	6178      	str	r0, [r7, #20]
        break;
 8005e8a:	e022      	b.n	8005ed2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e8c:	4b0d      	ldr	r3, [pc, #52]	; (8005ec4 <UART_SetConfig+0x300>)
 8005e8e:	617b      	str	r3, [r7, #20]
        break;
 8005e90:	e01f      	b.n	8005ed2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e92:	f7fd fde1 	bl	8003a58 <HAL_RCC_GetSysClockFreq>
 8005e96:	6178      	str	r0, [r7, #20]
        break;
 8005e98:	e01b      	b.n	8005ed2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e9e:	617b      	str	r3, [r7, #20]
        break;
 8005ea0:	e017      	b.n	8005ed2 <UART_SetConfig+0x30e>
 8005ea2:	bf00      	nop
 8005ea4:	efff69f3 	.word	0xefff69f3
 8005ea8:	40008000 	.word	0x40008000
 8005eac:	40013800 	.word	0x40013800
 8005eb0:	40021000 	.word	0x40021000
 8005eb4:	40004400 	.word	0x40004400
 8005eb8:	40004800 	.word	0x40004800
 8005ebc:	40004c00 	.word	0x40004c00
 8005ec0:	40005000 	.word	0x40005000
 8005ec4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	76bb      	strb	r3, [r7, #26]
        break;
 8005ed0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	f000 80f1 	beq.w	80060bc <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	685a      	ldr	r2, [r3, #4]
 8005ede:	4613      	mov	r3, r2
 8005ee0:	005b      	lsls	r3, r3, #1
 8005ee2:	4413      	add	r3, r2
 8005ee4:	697a      	ldr	r2, [r7, #20]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d305      	bcc.n	8005ef6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005ef0:	697a      	ldr	r2, [r7, #20]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d902      	bls.n	8005efc <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	76bb      	strb	r3, [r7, #26]
 8005efa:	e0df      	b.n	80060bc <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	4619      	mov	r1, r3
 8005f00:	f04f 0200 	mov.w	r2, #0
 8005f04:	f04f 0300 	mov.w	r3, #0
 8005f08:	f04f 0400 	mov.w	r4, #0
 8005f0c:	0214      	lsls	r4, r2, #8
 8005f0e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8005f12:	020b      	lsls	r3, r1, #8
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	6852      	ldr	r2, [r2, #4]
 8005f18:	0852      	lsrs	r2, r2, #1
 8005f1a:	4611      	mov	r1, r2
 8005f1c:	f04f 0200 	mov.w	r2, #0
 8005f20:	eb13 0b01 	adds.w	fp, r3, r1
 8005f24:	eb44 0c02 	adc.w	ip, r4, r2
 8005f28:	4658      	mov	r0, fp
 8005f2a:	4661      	mov	r1, ip
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	f04f 0400 	mov.w	r4, #0
 8005f34:	461a      	mov	r2, r3
 8005f36:	4623      	mov	r3, r4
 8005f38:	f7fa f946 	bl	80001c8 <__aeabi_uldivmod>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	460c      	mov	r4, r1
 8005f40:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f48:	d308      	bcc.n	8005f5c <UART_SetConfig+0x398>
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f50:	d204      	bcs.n	8005f5c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	693a      	ldr	r2, [r7, #16]
 8005f58:	60da      	str	r2, [r3, #12]
 8005f5a:	e0af      	b.n	80060bc <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	76bb      	strb	r3, [r7, #26]
 8005f60:	e0ac      	b.n	80060bc <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	69db      	ldr	r3, [r3, #28]
 8005f66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f6a:	d15b      	bne.n	8006024 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8005f6c:	7efb      	ldrb	r3, [r7, #27]
 8005f6e:	2b08      	cmp	r3, #8
 8005f70:	d827      	bhi.n	8005fc2 <UART_SetConfig+0x3fe>
 8005f72:	a201      	add	r2, pc, #4	; (adr r2, 8005f78 <UART_SetConfig+0x3b4>)
 8005f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f78:	08005f9d 	.word	0x08005f9d
 8005f7c:	08005fa5 	.word	0x08005fa5
 8005f80:	08005fad 	.word	0x08005fad
 8005f84:	08005fc3 	.word	0x08005fc3
 8005f88:	08005fb3 	.word	0x08005fb3
 8005f8c:	08005fc3 	.word	0x08005fc3
 8005f90:	08005fc3 	.word	0x08005fc3
 8005f94:	08005fc3 	.word	0x08005fc3
 8005f98:	08005fbb 	.word	0x08005fbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f9c:	f7fd fdf2 	bl	8003b84 <HAL_RCC_GetPCLK1Freq>
 8005fa0:	6178      	str	r0, [r7, #20]
        break;
 8005fa2:	e013      	b.n	8005fcc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fa4:	f7fd fe04 	bl	8003bb0 <HAL_RCC_GetPCLK2Freq>
 8005fa8:	6178      	str	r0, [r7, #20]
        break;
 8005faa:	e00f      	b.n	8005fcc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fac:	4b49      	ldr	r3, [pc, #292]	; (80060d4 <UART_SetConfig+0x510>)
 8005fae:	617b      	str	r3, [r7, #20]
        break;
 8005fb0:	e00c      	b.n	8005fcc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fb2:	f7fd fd51 	bl	8003a58 <HAL_RCC_GetSysClockFreq>
 8005fb6:	6178      	str	r0, [r7, #20]
        break;
 8005fb8:	e008      	b.n	8005fcc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fbe:	617b      	str	r3, [r7, #20]
        break;
 8005fc0:	e004      	b.n	8005fcc <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	76bb      	strb	r3, [r7, #26]
        break;
 8005fca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d074      	beq.n	80060bc <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	005a      	lsls	r2, r3, #1
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	085b      	lsrs	r3, r3, #1
 8005fdc:	441a      	add	r2, r3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	2b0f      	cmp	r3, #15
 8005fee:	d916      	bls.n	800601e <UART_SetConfig+0x45a>
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ff6:	d212      	bcs.n	800601e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	f023 030f 	bic.w	r3, r3, #15
 8006000:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	085b      	lsrs	r3, r3, #1
 8006006:	b29b      	uxth	r3, r3
 8006008:	f003 0307 	and.w	r3, r3, #7
 800600c:	b29a      	uxth	r2, r3
 800600e:	89fb      	ldrh	r3, [r7, #14]
 8006010:	4313      	orrs	r3, r2
 8006012:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	89fa      	ldrh	r2, [r7, #14]
 800601a:	60da      	str	r2, [r3, #12]
 800601c:	e04e      	b.n	80060bc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	76bb      	strb	r3, [r7, #26]
 8006022:	e04b      	b.n	80060bc <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006024:	7efb      	ldrb	r3, [r7, #27]
 8006026:	2b08      	cmp	r3, #8
 8006028:	d827      	bhi.n	800607a <UART_SetConfig+0x4b6>
 800602a:	a201      	add	r2, pc, #4	; (adr r2, 8006030 <UART_SetConfig+0x46c>)
 800602c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006030:	08006055 	.word	0x08006055
 8006034:	0800605d 	.word	0x0800605d
 8006038:	08006065 	.word	0x08006065
 800603c:	0800607b 	.word	0x0800607b
 8006040:	0800606b 	.word	0x0800606b
 8006044:	0800607b 	.word	0x0800607b
 8006048:	0800607b 	.word	0x0800607b
 800604c:	0800607b 	.word	0x0800607b
 8006050:	08006073 	.word	0x08006073
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006054:	f7fd fd96 	bl	8003b84 <HAL_RCC_GetPCLK1Freq>
 8006058:	6178      	str	r0, [r7, #20]
        break;
 800605a:	e013      	b.n	8006084 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800605c:	f7fd fda8 	bl	8003bb0 <HAL_RCC_GetPCLK2Freq>
 8006060:	6178      	str	r0, [r7, #20]
        break;
 8006062:	e00f      	b.n	8006084 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006064:	4b1b      	ldr	r3, [pc, #108]	; (80060d4 <UART_SetConfig+0x510>)
 8006066:	617b      	str	r3, [r7, #20]
        break;
 8006068:	e00c      	b.n	8006084 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800606a:	f7fd fcf5 	bl	8003a58 <HAL_RCC_GetSysClockFreq>
 800606e:	6178      	str	r0, [r7, #20]
        break;
 8006070:	e008      	b.n	8006084 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006072:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006076:	617b      	str	r3, [r7, #20]
        break;
 8006078:	e004      	b.n	8006084 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800607a:	2300      	movs	r3, #0
 800607c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	76bb      	strb	r3, [r7, #26]
        break;
 8006082:	bf00      	nop
    }

    if (pclk != 0U)
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d018      	beq.n	80060bc <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	085a      	lsrs	r2, r3, #1
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	441a      	add	r2, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	fbb2 f3f3 	udiv	r3, r2, r3
 800609c:	b29b      	uxth	r3, r3
 800609e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	2b0f      	cmp	r3, #15
 80060a4:	d908      	bls.n	80060b8 <UART_SetConfig+0x4f4>
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060ac:	d204      	bcs.n	80060b8 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	693a      	ldr	r2, [r7, #16]
 80060b4:	60da      	str	r2, [r3, #12]
 80060b6:	e001      	b.n	80060bc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80060c8:	7ebb      	ldrb	r3, [r7, #26]
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3720      	adds	r7, #32
 80060ce:	46bd      	mov	sp, r7
 80060d0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80060d4:	00f42400 	.word	0x00f42400

080060d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e4:	f003 0301 	and.w	r3, r3, #1
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00a      	beq.n	8006102 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	430a      	orrs	r2, r1
 8006100:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006106:	f003 0302 	and.w	r3, r3, #2
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00a      	beq.n	8006124 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	430a      	orrs	r2, r1
 8006122:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006128:	f003 0304 	and.w	r3, r3, #4
 800612c:	2b00      	cmp	r3, #0
 800612e:	d00a      	beq.n	8006146 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	430a      	orrs	r2, r1
 8006144:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614a:	f003 0308 	and.w	r3, r3, #8
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00a      	beq.n	8006168 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	430a      	orrs	r2, r1
 8006166:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616c:	f003 0310 	and.w	r3, r3, #16
 8006170:	2b00      	cmp	r3, #0
 8006172:	d00a      	beq.n	800618a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	430a      	orrs	r2, r1
 8006188:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618e:	f003 0320 	and.w	r3, r3, #32
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00a      	beq.n	80061ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	430a      	orrs	r2, r1
 80061aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d01a      	beq.n	80061ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	430a      	orrs	r2, r1
 80061cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061d6:	d10a      	bne.n	80061ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	430a      	orrs	r2, r1
 80061ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00a      	beq.n	8006210 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	430a      	orrs	r2, r1
 800620e:	605a      	str	r2, [r3, #4]
  }
}
 8006210:	bf00      	nop
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b086      	sub	sp, #24
 8006220:	af02      	add	r7, sp, #8
 8006222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800622a:	f7fa ff27 	bl	800107c <HAL_GetTick>
 800622e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 0308 	and.w	r3, r3, #8
 800623a:	2b08      	cmp	r3, #8
 800623c:	d10e      	bne.n	800625c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800623e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006242:	9300      	str	r3, [sp, #0]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2200      	movs	r2, #0
 8006248:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 f82a 	bl	80062a6 <UART_WaitOnFlagUntilTimeout>
 8006252:	4603      	mov	r3, r0
 8006254:	2b00      	cmp	r3, #0
 8006256:	d001      	beq.n	800625c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006258:	2303      	movs	r3, #3
 800625a:	e020      	b.n	800629e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 0304 	and.w	r3, r3, #4
 8006266:	2b04      	cmp	r3, #4
 8006268:	d10e      	bne.n	8006288 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800626a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800626e:	9300      	str	r3, [sp, #0]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2200      	movs	r2, #0
 8006274:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f000 f814 	bl	80062a6 <UART_WaitOnFlagUntilTimeout>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d001      	beq.n	8006288 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006284:	2303      	movs	r3, #3
 8006286:	e00a      	b.n	800629e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2220      	movs	r2, #32
 800628c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2220      	movs	r2, #32
 8006292:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3710      	adds	r7, #16
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062a6:	b580      	push	{r7, lr}
 80062a8:	b084      	sub	sp, #16
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	60f8      	str	r0, [r7, #12]
 80062ae:	60b9      	str	r1, [r7, #8]
 80062b0:	603b      	str	r3, [r7, #0]
 80062b2:	4613      	mov	r3, r2
 80062b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062b6:	e05d      	b.n	8006374 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062b8:	69bb      	ldr	r3, [r7, #24]
 80062ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062be:	d059      	beq.n	8006374 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062c0:	f7fa fedc 	bl	800107c <HAL_GetTick>
 80062c4:	4602      	mov	r2, r0
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	69ba      	ldr	r2, [r7, #24]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d302      	bcc.n	80062d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d11b      	bne.n	800630e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681a      	ldr	r2, [r3, #0]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80062e4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	689a      	ldr	r2, [r3, #8]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f022 0201 	bic.w	r2, r2, #1
 80062f4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2220      	movs	r2, #32
 80062fa:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2220      	movs	r2, #32
 8006300:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2200      	movs	r2, #0
 8006306:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e042      	b.n	8006394 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 0304 	and.w	r3, r3, #4
 8006318:	2b00      	cmp	r3, #0
 800631a:	d02b      	beq.n	8006374 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	69db      	ldr	r3, [r3, #28]
 8006322:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006326:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800632a:	d123      	bne.n	8006374 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006334:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006344:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	689a      	ldr	r2, [r3, #8]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f022 0201 	bic.w	r2, r2, #1
 8006354:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	2220      	movs	r2, #32
 800635a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2220      	movs	r2, #32
 8006360:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2220      	movs	r2, #32
 8006366:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2200      	movs	r2, #0
 800636c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8006370:	2303      	movs	r3, #3
 8006372:	e00f      	b.n	8006394 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	69da      	ldr	r2, [r3, #28]
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	4013      	ands	r3, r2
 800637e:	68ba      	ldr	r2, [r7, #8]
 8006380:	429a      	cmp	r2, r3
 8006382:	bf0c      	ite	eq
 8006384:	2301      	moveq	r3, #1
 8006386:	2300      	movne	r3, #0
 8006388:	b2db      	uxtb	r3, r3
 800638a:	461a      	mov	r2, r3
 800638c:	79fb      	ldrb	r3, [r7, #7]
 800638e:	429a      	cmp	r2, r3
 8006390:	d092      	beq.n	80062b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006392:	2300      	movs	r3, #0
}
 8006394:	4618      	mov	r0, r3
 8006396:	3710      	adds	r7, #16
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <__libc_init_array>:
 800639c:	b570      	push	{r4, r5, r6, lr}
 800639e:	4e0d      	ldr	r6, [pc, #52]	; (80063d4 <__libc_init_array+0x38>)
 80063a0:	4c0d      	ldr	r4, [pc, #52]	; (80063d8 <__libc_init_array+0x3c>)
 80063a2:	1ba4      	subs	r4, r4, r6
 80063a4:	10a4      	asrs	r4, r4, #2
 80063a6:	2500      	movs	r5, #0
 80063a8:	42a5      	cmp	r5, r4
 80063aa:	d109      	bne.n	80063c0 <__libc_init_array+0x24>
 80063ac:	4e0b      	ldr	r6, [pc, #44]	; (80063dc <__libc_init_array+0x40>)
 80063ae:	4c0c      	ldr	r4, [pc, #48]	; (80063e0 <__libc_init_array+0x44>)
 80063b0:	f000 f820 	bl	80063f4 <_init>
 80063b4:	1ba4      	subs	r4, r4, r6
 80063b6:	10a4      	asrs	r4, r4, #2
 80063b8:	2500      	movs	r5, #0
 80063ba:	42a5      	cmp	r5, r4
 80063bc:	d105      	bne.n	80063ca <__libc_init_array+0x2e>
 80063be:	bd70      	pop	{r4, r5, r6, pc}
 80063c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063c4:	4798      	blx	r3
 80063c6:	3501      	adds	r5, #1
 80063c8:	e7ee      	b.n	80063a8 <__libc_init_array+0xc>
 80063ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063ce:	4798      	blx	r3
 80063d0:	3501      	adds	r5, #1
 80063d2:	e7f2      	b.n	80063ba <__libc_init_array+0x1e>
 80063d4:	0800645c 	.word	0x0800645c
 80063d8:	0800645c 	.word	0x0800645c
 80063dc:	0800645c 	.word	0x0800645c
 80063e0:	08006460 	.word	0x08006460

080063e4 <memset>:
 80063e4:	4402      	add	r2, r0
 80063e6:	4603      	mov	r3, r0
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d100      	bne.n	80063ee <memset+0xa>
 80063ec:	4770      	bx	lr
 80063ee:	f803 1b01 	strb.w	r1, [r3], #1
 80063f2:	e7f9      	b.n	80063e8 <memset+0x4>

080063f4 <_init>:
 80063f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063f6:	bf00      	nop
 80063f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063fa:	bc08      	pop	{r3}
 80063fc:	469e      	mov	lr, r3
 80063fe:	4770      	bx	lr

08006400 <_fini>:
 8006400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006402:	bf00      	nop
 8006404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006406:	bc08      	pop	{r3}
 8006408:	469e      	mov	lr, r3
 800640a:	4770      	bx	lr
